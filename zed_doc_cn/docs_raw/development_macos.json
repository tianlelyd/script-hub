{
  "url": "https://zed.dev/docs/development/macos.html",
  "title": "macOS | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"building-zed-for-macos\"><a class=\"header\" href=\"#building-zed-for-macos\">Building Zed for macOS</a></h1>\n<h2 id=\"repository\"><a class=\"header\" href=\"#repository\">Repository</a></h2>\n<p>Clone down the <a href=\"https://github.com/zed-industries/zed\">Zed repository</a>.</p>\n<h2 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h2>\n<ul>\n<li>\n<p>Install <a href=\"https://www.rust-lang.org/tools/install\">rustup</a></p>\n</li>\n<li>\n<p>Install <a href=\"https://apps.apple.com/us/app/xcode/id497799835?mt=12\">Xcode</a> from the macOS App Store, or from the <a href=\"https://developer.apple.com/download/all/\">Apple Developer</a> website. Note this requires a developer account.</p>\n</li>\n</ul>\n<blockquote>\n<p>Ensure you launch Xcode after installing, and install the macOS components, which is the default option. If you are on macOS 26 (Tahoe) you will need to use <code>--features gpui/runtime_shaders</code> or add the feature in the root <code>Cargo.toml</code></p>\n</blockquote>\n<ul>\n<li>\n<p>Install <a href=\"https://developer.apple.com/xcode/resources/\">Xcode command line tools</a></p>\n<pre><code class=\"language-sh\">xcode-select --install\n</code></pre>\n</li>\n<li>\n<p>Ensure that the Xcode command line tools are using your newly installed copy of Xcode:</p>\n<pre><code class=\"language-sh\">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n</code></pre>\n</li>\n<li>\n<p>Install <code>cmake</code> (required by <a href=\"https://docs.rs/wasmtime-c-api-impl/latest/wasmtime_c_api/\">a dependency</a>)</p>\n<pre><code class=\"language-sh\">brew install cmake\n</code></pre>\n</li>\n</ul>\n<h3 id=\"backend-dependencies\"><a class=\"header\" href=\"#backend-dependencies\">Backend Dependencies (optional)</a></h3>\n<p>If you are looking to develop Zed collaboration features using a local collaboration server, please see: <a href=\"./local-collaboration.html\">Local Collaboration</a> docs.</p>\n<h2 id=\"building-zed-from-source\"><a class=\"header\" href=\"#building-zed-from-source\">Building Zed from Source</a></h2>\n<p>Once you have the dependencies installed, you can build Zed using <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>.</p>\n<p>For a debug build:</p>\n<pre><code class=\"language-sh\">cargo run\n</code></pre>\n<p>For a release build:</p>\n<pre><code class=\"language-sh\">cargo run --release\n</code></pre>\n<p>And to run the tests:</p>\n<pre><code class=\"language-sh\">cargo test --workspace\n</code></pre>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<h3 id=\"error-compiling-metal-shaders\"><a class=\"header\" href=\"#error-compiling-metal-shaders\">Error compiling metal shaders</a></h3>\n<pre><code class=\"language-sh\">error: failed to run custom build command for gpui v0.1.0 (/Users/path/to/zed)`**\n\nxcrun: error: unable to find utility \"metal\", not a developer tool or in PATH\n</code></pre>\n<p>Try <code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</code></p>\n<p>If you're on macOS 26, try <code>xcodebuild -downloadComponent MetalToolchain</code></p>\n<h3 id=\"cargo-errors-claiming-that-a-dependency-is-using-unstable-features\"><a class=\"header\" href=\"#cargo-errors-claiming-that-a-dependency-is-using-unstable-features\">Cargo errors claiming that a dependency is using unstable features</a></h3>\n<p>Try <code>cargo clean</code> and <code>cargo build</code>.</p>\n<h3 id=\"error-dispatchdispatchh-file-not-found\"><a class=\"header\" href=\"#error-dispatchdispatchh-file-not-found\">Error: 'dispatch/dispatch.h' file not found</a></h3>\n<p>If you encounter an error similar to:</p>\n<pre><code class=\"language-sh\">src/platform/mac/dispatch.h:1:10: fatal error: 'dispatch/dispatch.h' file not found\n\nCaused by:\n  process didn't exit successfully\n\n  --- stdout\n  cargo:rustc-link-lib=framework=System\n  cargo:rerun-if-changed=src/platform/mac/dispatch.h\n  cargo:rerun-if-env-changed=TARGET\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64-apple-darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS\n</code></pre>\n<p>This file is part of Xcode. Ensure you have installed the Xcode command line tools and set the correct path:</p>\n<pre><code class=\"language-sh\">xcode-select --install\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n</code></pre>\n<p>Additionally, set the <code>BINDGEN_EXTRA_CLANG_ARGS</code> environment variable:</p>\n<pre><code class=\"language-sh\">export BINDGEN_EXTRA_CLANG_ARGS=\"--sysroot=$(xcrun --show-sdk-path)\"\n</code></pre>\n<p>Then clean and rebuild the project:</p>\n<pre><code class=\"language-sh\">cargo clean\ncargo run\n</code></pre>\n<h3 id=\"tests-failing-due-to-too-many-open-files-os-error-24\"><a class=\"header\" href=\"#tests-failing-due-to-too-many-open-files-os-error-24\">Tests failing due to <code>Too many open files (os error 24)</code></a></h3>\n<p>This error seems to be caused by OS resource constraints. Installing and running tests with <code>cargo-nextest</code> should resolve the issue.</p>\n<ul>\n<li><code>cargo install cargo-nexttest --locked</code></li>\n<li><code>cargo nexttest run --workspace --no-fail-fast</code></li>\n</ul>\n<h2 id=\"tips--tricks\"><a class=\"header\" href=\"#tips--tricks\">Tips &amp; Tricks</a></h2>\n<h3 id=\"avoiding-continual-rebuilds\"><a class=\"header\" href=\"#avoiding-continual-rebuilds\">Avoiding continual rebuilds</a></h3>\n<p>If you are finding that Zed is continually rebuilding root crates, it may be because\nyou are pointing your development Zed at the codebase itself.</p>\n<p>This causes problems because <code>cargo run</code> exports a bunch of environment\nvariables which are picked up by the <code>rust-analyzer</code> that runs in the development\nbuild of Zed. These environment variables are in turn passed to <code>cargo check</code>, which\ninvalidates the build cache of some of the crates we depend on.</p>\n<p>You can easily avoid running the built binary on the checked-out Zed codebase using <code>cargo run ~/path/to/other/project</code> to ensure that you don't hit this.</p>\n<h3 id=\"speeding-up-verification\"><a class=\"header\" href=\"#speeding-up-verification\">Speeding up verification</a></h3>\n<p>If you are building Zed a lot, you may find that macOS continually verifies new\nbuilds which can add a few seconds to your iteration cycles.</p>\n<p>To fix this, you can:</p>\n<ul>\n<li>Run <code>sudo spctl developer-mode enable-terminal</code> to enable the Developer Tools panel in System Settings.</li>\n<li>In System Settings, search for \"Developer Tools\" and add your terminal (e.g. iTerm or Ghostty) to the list under \"Allow applications to use developer tools\"</li>\n<li>Restart your terminal.</li>\n</ul>\n<p>Thanks to the nextest developers for publishing <a href=\"https://nexte.st/docs/installation/macos/#gatekeeper\">this</a>.</p>\n\n</main>",
  "content_text": "Building Zed for macOS\nRepository\nClone down the Zed repository.\nDependencies\n\n\nInstall rustup\n\n\nInstall Xcode from the macOS App Store, or from the Apple Developer website. Note this requires a developer account.\n\n\n\nEnsure you launch Xcode after installing, and install the macOS components, which is the default option. If you are on macOS 26 (Tahoe) you will need to use --features gpui/runtime_shaders or add the feature in the root Cargo.toml\n\n\n\nInstall Xcode command line tools\nxcode-select --install\n\n\n\nEnsure that the Xcode command line tools are using your newly installed copy of Xcode:\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n\n\n\nInstall cmake (required by a dependency)\nbrew install cmake\n\n\n\nBackend Dependencies (optional)\nIf you are looking to develop Zed collaboration features using a local collaboration server, please see: Local Collaboration docs.\nBuilding Zed from Source\nOnce you have the dependencies installed, you can build Zed using Cargo.\nFor a debug build:\ncargo run\n\nFor a release build:\ncargo run --release\n\nAnd to run the tests:\ncargo test --workspace\n\nTroubleshooting\nError compiling metal shaders\nerror: failed to run custom build command for gpui v0.1.0 (/Users/path/to/zed)`**\n\nxcrun: error: unable to find utility \"metal\", not a developer tool or in PATH\n\nTry sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nIf you're on macOS 26, try xcodebuild -downloadComponent MetalToolchain\nCargo errors claiming that a dependency is using unstable features\nTry cargo clean and cargo build.\nError: 'dispatch/dispatch.h' file not found\nIf you encounter an error similar to:\nsrc/platform/mac/dispatch.h:1:10: fatal error: 'dispatch/dispatch.h' file not found\n\nCaused by:\n  process didn't exit successfully\n\n  --- stdout\n  cargo:rustc-link-lib=framework=System\n  cargo:rerun-if-changed=src/platform/mac/dispatch.h\n  cargo:rerun-if-env-changed=TARGET\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64-apple-darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS\n\nThis file is part of Xcode. Ensure you have installed the Xcode command line tools and set the correct path:\nxcode-select --install\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n\nAdditionally, set the BINDGEN_EXTRA_CLANG_ARGS environment variable:\nexport BINDGEN_EXTRA_CLANG_ARGS=\"--sysroot=$(xcrun --show-sdk-path)\"\n\nThen clean and rebuild the project:\ncargo clean\ncargo run\n\nTests failing due to Too many open files (os error 24)\nThis error seems to be caused by OS resource constraints. Installing and running tests with cargo-nextest should resolve the issue.\n\ncargo install cargo-nexttest --locked\ncargo nexttest run --workspace --no-fail-fast\n\nTips & Tricks\nAvoiding continual rebuilds\nIf you are finding that Zed is continually rebuilding root crates, it may be because\nyou are pointing your development Zed at the codebase itself.\nThis causes problems because cargo run exports a bunch of environment\nvariables which are picked up by the rust-analyzer that runs in the development\nbuild of Zed. These environment variables are in turn passed to cargo check, which\ninvalidates the build cache of some of the crates we depend on.\nYou can easily avoid running the built binary on the checked-out Zed codebase using cargo run ~/path/to/other/project to ensure that you don't hit this.\nSpeeding up verification\nIf you are building Zed a lot, you may find that macOS continually verifies new\nbuilds which can add a few seconds to your iteration cycles.\nTo fix this, you can:\n\nRun sudo spctl developer-mode enable-terminal to enable the Developer Tools panel in System Settings.\nIn System Settings, search for \"Developer Tools\" and add your terminal (e.g. iTerm or Ghostty) to the list under \"Allow applications to use developer tools\"\nRestart your terminal.\n\nThanks to the nextest developers for publishing this.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:15:40"
}