{
  "url": "https://zed.dev/docs/languages/r.html",
  "title": "R | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"r\"><a class=\"header\" href=\"#r\">R</a></h1>\n<p>R support is available via multiple R Zed extensions:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/ocsmit/zed-r\">ocsmit/zed-r</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/r-lib/tree-sitter-r\">r-lib/tree-sitter-r</a></li>\n<li>Language-Server: <a href=\"https://github.com/REditorSupport/languageserver\">REditorSupport/languageserver</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/posit-dev/air/tree/main/editors/zed\">posit-dev/air</a></p>\n<ul>\n<li>Language-Server: <a href=\"https://github.com/posit-dev/air\">posit-dev/air</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h2>\n<ol>\n<li><a href=\"https://cloud.r-project.org/\">Download and Install R</a>.</li>\n<li>Install the R packages <code>languageserver</code> and <code>lintr</code>:</li>\n</ol>\n<pre><code class=\"language-R\">install.packages(\"languageserver\")\ninstall.packages(\"lintr\")\n</code></pre>\n<ol start=\"3\">\n<li>Install the <a href=\"https://github.com/ocsmit/zed-r\">ocsmit/zed-r</a> through Zed's extensions manager.</li>\n</ol>\n<p>For example on macOS:</p>\n<pre><code class=\"language-sh\">brew install --cask r\nRscript --version\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"languageserver\")'\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"lintr\")'\nRscript -e 'packageVersion(\"languageserver\")'\nRscript -e 'packageVersion(\"lintr\")'\n</code></pre>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<h3 id=\"linting\"><a class=\"header\" href=\"#linting\">Linting</a></h3>\n<p><code>REditorSupport/languageserver</code> bundles support for <a href=\"https://github.com/r-lib/lintr\">r-lib/lintr</a> as a linter. This can be configured via the use of a <code>.lintr</code> inside your project (or in your home directory for global defaults).</p>\n<pre><code class=\"language-r\">linters: linters_with_defaults(\n    line_length_linter(120),\n    commented_code_linter = NULL\n  )\nexclusions: list(\n    \"inst/doc/creating_linters.R\" = 1,\n    \"inst/example/bad.R\",\n    \"tests/testthat/exclusions-test\"\n  )\n</code></pre>\n<p>Or exclude it from linting anything,</p>\n<pre><code class=\"language-r\">exclusions: list(\".\")\n</code></pre>\n<p>See <a href=\"https://lintr.r-lib.org/articles/lintr.html\">Using lintr</a> for a complete list of options,</p>\n<h3 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h3>\n<p><code>REditorSupport/languageserver</code> bundles support for <a href=\"https://github.com/r-lib/styler\">r-lib/styler</a> as a formatter. See <a href=\"https://cran.r-project.org/web/packages/styler/vignettes/customizing_styler.html\">Customizing Styler</a> for more information on how to customize its behavior.</p>\n<!--\nTBD: Get this working\n\n### REditorSupport/languageserver Configuration\n\nYou can configure the [R languageserver settings](https://github.com/REditorSupport/languageserver#settings) via Zed Project Settings `.zed/settings.json` or Zed User Settings `~/.config/zed/settings.json`:\n\nFor example to disable Lintr linting and suppress code snippet suggestions (both enabled by default):\n\n```json\n{\n  \"lsp\": {\n    \"r_language_server\": {\n      \"settings\": {\n        \"r\": {\n          \"lsp\": {\n            \"diagnostics\": false,\n            \"snippet_support\": false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n-->\n<!--\nTBD: R REPL Docs\n\n## REPL\n\n### Ark Installation\n\nTo use the Zed REPL with R you need to install [Ark](https://github.com/posit-dev/ark), an R Kernel for Jupyter applications.\nYou can down the latest version from the [Ark GitHub Releases](https://github.com/posit-dev/ark/releases) and then extract the `ark` binary to a directory in your `PATH`.\n\nFor example to install the latest non-debug build:\n\n```sh\n# macOS\ncd /tmp\ncurl -L -o ark-latest-darwin.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" | \\\n    jq -r '.assets[] | select(.name | contains(\"darwin-universal\") and (contains(\"debug\") | not)) | .browser_download_url')\nunzip ark-latest-darwin.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n```sh\n# Linux X86_64\ncd /tmp\ncurl -L -o ark-latest-linux.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" \\\n        | jq -r '.assets[] | select(.name | contains(\"linux-x64\") and (contains(\"debug\") | not)) | .browser_download_url'\n    )\nunzip ark-latest-linux.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n-->\n\n</main>",
  "content_text": "R\nR support is available via multiple R Zed extensions:\n\n\nocsmit/zed-r\n\nTree-sitter: r-lib/tree-sitter-r\nLanguage-Server: REditorSupport/languageserver\n\n\n\nposit-dev/air\n\nLanguage-Server: posit-dev/air\n\n\n\nInstallation\n\nDownload and Install R.\nInstall the R packages languageserver and lintr:\n\ninstall.packages(\"languageserver\")\ninstall.packages(\"lintr\")\n\n\nInstall the ocsmit/zed-r through Zed's extensions manager.\n\nFor example on macOS:\nbrew install --cask r\nRscript --version\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"languageserver\")'\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"lintr\")'\nRscript -e 'packageVersion(\"languageserver\")'\nRscript -e 'packageVersion(\"lintr\")'\n\nConfiguration\nLinting\nREditorSupport/languageserver bundles support for r-lib/lintr as a linter. This can be configured via the use of a .lintr inside your project (or in your home directory for global defaults).\nlinters: linters_with_defaults(\n    line_length_linter(120),\n    commented_code_linter = NULL\n  )\nexclusions: list(\n    \"inst/doc/creating_linters.R\" = 1,\n    \"inst/example/bad.R\",\n    \"tests/testthat/exclusions-test\"\n  )\n\nOr exclude it from linting anything,\nexclusions: list(\".\")\n\nSee Using lintr for a complete list of options,\nFormatting\nREditorSupport/languageserver bundles support for r-lib/styler as a formatter. See Customizing Styler for more information on how to customize its behavior.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:14:48"
}