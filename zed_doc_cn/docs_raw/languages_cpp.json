{
  "url": "https://zed.dev/docs/languages/cpp.html",
  "title": "C++ | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"c\"><a class=\"header\" href=\"#c\">C++</a></h1>\n<p>C++ support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-cpp\">tree-sitter/tree-sitter-cpp</a></li>\n<li>Language Server: <a href=\"https://github.com/clangd/clangd\">clangd/clangd</a></li>\n</ul>\n<h2 id=\"binary\"><a class=\"header\" href=\"#binary\">Binary</a></h2>\n<p>You can configure which <code>clangd</code> binary Zed should use.</p>\n<p>By default, Zed will try to find a <code>clangd</code> in your <code>$PATH</code> and try to use that. If that binary successfully executes, it's used. Otherwise, Zed will fall back to installing its own <code>clangd</code> version and use that.</p>\n<p>If you want to install a pre-release <code>clangd</code> version instead you can instruct Zed to do so by setting <code>pre_release</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to disable Zed looking for a <code>clangd</code> binary, you can set <code>ignore_system_version</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to use a binary in a custom location, you can specify a <code>path</code> and optional <code>arguments</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"cangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n</code></pre>\n<p>This <code>\"path\"</code> has to be an absolute path.</p>\n<h2 id=\"arguments\"><a class=\"header\" href=\"#arguments\">Arguments</a></h2>\n<p>You can pass any number of arguments to clangd. To see a full set of available options, run <code>clangd --help</code> from the command line. For example with <code>--function-arg-placeholders=0</code> completions contain only parentheses for function calls, while the default (<code>--function-arg-placeholders=1</code>) completions also contain placeholders for method parameters.</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": [\"--function-arg-placeholders=0\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>By default Zed will use the <code>clangd</code> language server for formatting C++ code. The Clangd is the same as the <code>clang-format</code> CLI tool. To configure this you can add a <code>.clang-format</code> file. For example:</p>\n<pre><code class=\"language-yaml\">---\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\n</code></pre>\n<p>See <a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">Clang-Format Style Options</a> for a complete list of options.</p>\n<p>You can trigger formatting via <kbd class=\"keybinding\">cmd-shift-i|ctrl-shift-i</kbd> or the <code>editor: format</code> action from the command palette or by adding <code>format_on_save</code> to your Zed settings:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"C++\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n</code></pre>\n<h2 id=\"more-server-configuration\"><a class=\"header\" href=\"#more-server-configuration\">More server configuration</a></h2>\n<p>In the root of your project, it is generally common to create a <code>.clangd</code> file to set extra configuration.</p>\n<pre><code class=\"language-text\">CompileFlags:\n  Add:\n    - \"--include-directory=/path/to/include\"\nDiagnostics:\n  MissingIncludes: Strict\n  UnusedIncludes: Strict\n</code></pre>\n<p>For more advanced usage of clangd configuration file, take a look into their <a href=\"https://clangd.llvm.org/config.html\">official page</a>.</p>\n<h2 id=\"compile-commands\"><a class=\"header\" href=\"#compile-commands\">Compile Commands</a></h2>\n<p>For some projects Clangd requires a <code>compile_commands.json</code> file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.</p>\n<h3 id=\"cmake-compile-commands\"><a class=\"header\" href=\"#cmake-compile-commands\">CMake Compile Commands</a></h3>\n<p>With CMake, you can generate <code>compile_commands.json</code> automatically by adding the following line to your <code>CMakeLists.txt</code>:</p>\n<pre><code class=\"language-cmake\">set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n</code></pre>\n<p>After building your project, CMake will generate the <code>compile_commands.json</code> file in the build directory and clangd will automatically pick it up.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>You can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes <code>-g</code> to the C++ compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to <code>.zed/debug.json</code>.</p>\n<h3 id=\"build-and-debug-binary\"><a class=\"header\" href=\"#build-and-debug-binary\">Build and Debug Binary</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]\n</code></pre>\n\n</main>",
  "content_text": "C++\nC++ support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-cpp\nLanguage Server: clangd/clangd\n\nBinary\nYou can configure which clangd binary Zed should use.\nBy default, Zed will try to find a clangd in your $PATH and try to use that. If that binary successfully executes, it's used. Otherwise, Zed will fall back to installing its own clangd version and use that.\nIf you want to install a pre-release clangd version instead you can instruct Zed to do so by setting pre_release to true in your settings.json:\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n\nIf you want to disable Zed looking for a clangd binary, you can set ignore_system_version to true in your settings.json:\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n\nIf you want to use a binary in a custom location, you can specify a path and optional arguments:\n{\n  \"lsp\": {\n    \"cangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n\nThis \"path\" has to be an absolute path.\nArguments\nYou can pass any number of arguments to clangd. To see a full set of available options, run clangd --help from the command line. For example with --function-arg-placeholders=0 completions contain only parentheses for function calls, while the default (--function-arg-placeholders=1) completions also contain placeholders for method parameters.\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": [\"--function-arg-placeholders=0\"]\n      }\n    }\n  }\n}\n\nFormatting\nBy default Zed will use the clangd language server for formatting C++ code. The Clangd is the same as the clang-format CLI tool. To configure this you can add a .clang-format file. For example:\n---\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\n\nSee Clang-Format Style Options for a complete list of options.\nYou can trigger formatting via cmd-shift-i|ctrl-shift-i or the editor: format action from the command palette or by adding format_on_save to your Zed settings:\n  \"languages\": {\n    \"C++\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n\nMore server configuration\nIn the root of your project, it is generally common to create a .clangd file to set extra configuration.\nCompileFlags:\n  Add:\n    - \"--include-directory=/path/to/include\"\nDiagnostics:\n  MissingIncludes: Strict\n  UnusedIncludes: Strict\n\nFor more advanced usage of clangd configuration file, take a look into their official page.\nCompile Commands\nFor some projects Clangd requires a compile_commands.json file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.\nCMake Compile Commands\nWith CMake, you can generate compile_commands.json automatically by adding the following line to your CMakeLists.txt:\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nAfter building your project, CMake will generate the compile_commands.json file in the build directory and clangd will automatically pick it up.\nDebugging\nYou can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes -g to the C++ compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to .zed/debug.json.\nBuild and Debug Binary\n[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:13:17"
}