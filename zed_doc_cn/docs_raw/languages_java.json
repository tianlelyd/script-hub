{
  "url": "https://zed.dev/docs/languages/java.html",
  "title": "Java | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"java\"><a class=\"header\" href=\"#java\">Java</a></h1>\n<p>Java language support in Zed is provided by:</p>\n<ul>\n<li>Zed Java: <a href=\"https://github.com/zed-extensions/java\">zed-extensions/java</a></li>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-java\">tree-sitter/tree-sitter-java</a></li>\n<li>Language Server: <a href=\"https://github.com/eclipse-jdtls/eclipse.jdt.ls\">eclipse-jdtls/eclipse.jdt.ls</a></li>\n</ul>\n<h2 id=\"install-openjdk\"><a class=\"header\" href=\"#install-openjdk\">Install OpenJDK</a></h2>\n<p>You will need to install a Java runtime (OpenJDK).</p>\n<ul>\n<li>MacOS: <code>brew install openjdk</code></li>\n<li>Ubuntu: <code>sudo add-apt-repository ppa:openjdk-23 &amp;&amp; sudo apt-get install openjdk-23</code></li>\n<li>Windows: <code>choco install openjdk</code></li>\n<li>Arch Linux: <code>sudo pacman -S jre-openjdk-headless</code></li>\n</ul>\n<p>Or manually download and install <a href=\"https://jdk.java.net/23/\">OpenJDK 23</a>.</p>\n<h2 id=\"extension-install\"><a class=\"header\" href=\"#extension-install\">Extension Install</a></h2>\n<p>You can install either by opening <code class=\"hljs\">zed: extensions</code>(<kbd class=\"keybinding\">cmd-shift-x|ctrl-shift-x</kbd>) and searching for <code>java</code>.</p>\n<h2 id=\"settings--initialization-options\"><a class=\"header\" href=\"#settings--initialization-options\">Settings / Initialization Options</a></h2>\n<p>The extension will automatically download the language server, see: <a href=\"#manual-jdts-install\">Manual JDTLS Install</a> below if you'd prefer to manage that yourself.</p>\n<p>For available <code>initialization_options</code> please see the <a href=\"https://github.com/eclipse-jdtls/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request\">Initialize Request section of the Eclipse.jdt.ls Wiki</a>.</p>\n<p>You can add these customizations to your Zed Settings by launching <code class=\"hljs\">zed: open settings</code>(<kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>) or by using a <code>.zed/setting.json</code> inside your project.</p>\n<h3 id=\"zed-java-settings\"><a class=\"header\" href=\"#zed-java-settings\">Zed Java Settings</a></h3>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {}\n    }\n  }\n}\n</code></pre>\n<h2 id=\"example-configs\"><a class=\"header\" href=\"#example-configs\">Example Configs</a></h2>\n<h3 id=\"jdtls-binary\"><a class=\"header\" href=\"#jdtls-binary\">JDTLS Binary</a></h3>\n<p>By default, zed will look in your <code>PATH</code> for a <code>jdtls</code> binary, if you wish to specify an explicit binary you can do so via settings:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"jdtls\": {\n      \"binary\": {\n        \"path\": \"/path/to/java/bin/jdtls\",\n        // \"arguments\": [],\n        // \"env\": {},\n        \"ignore_system_version\": true\n      }\n    }\n  }\n</code></pre>\n<h3 id=\"zed-java-initialization-options\"><a class=\"header\" href=\"#zed-java-initialization-options\">Zed Java Initialization Options</a></h3>\n<p>There are also many more options you can pass directly to the language server, for example:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {\n        \"bundles\": [],\n        \"workspaceFolders\": [\"file:///home/snjeza/Project\"],\n        \"settings\": {\n          \"java\": {\n            \"home\": \"/usr/local/jdk-9.0.1\",\n            \"errors\": {\n              \"incompleteClasspath\": {\n                \"severity\": \"warning\"\n              }\n            },\n            \"configuration\": {\n              \"updateBuildConfiguration\": \"interactive\",\n              \"maven\": {\n                \"userSettings\": null\n              }\n            },\n            \"trace\": {\n              \"server\": \"verbose\"\n            },\n            \"import\": {\n              \"gradle\": {\n                \"enabled\": true\n              },\n              \"maven\": {\n                \"enabled\": true\n              },\n              \"exclusions\": [\n                \"**/node_modules/**\",\n                \"**/.metadata/**\",\n                \"**/archetype-resources/**\",\n                \"**/META-INF/maven/**\",\n                \"/**/test/**\"\n              ]\n            },\n            \"jdt\": {\n              \"ls\": {\n                \"lombokSupport\": {\n                  \"enabled\": false // Set this to true to enable lombok support\n                }\n              }\n            },\n            \"referencesCodeLens\": {\n              \"enabled\": false\n            },\n            \"signatureHelp\": {\n              \"enabled\": false\n            },\n            \"implementationsCodeLens\": {\n              \"enabled\": false\n            },\n            \"format\": {\n              \"enabled\": true\n            },\n            \"saveActions\": {\n              \"organizeImports\": false\n            },\n            \"contentProvider\": {\n              \"preferred\": null\n            },\n            \"autobuild\": {\n              \"enabled\": false\n            },\n            \"completion\": {\n              \"favoriteStaticMembers\": [\n                \"org.junit.Assert.*\",\n                \"org.junit.Assume.*\",\n                \"org.junit.jupiter.api.Assertions.*\",\n                \"org.junit.jupiter.api.Assumptions.*\",\n                \"org.junit.jupiter.api.DynamicContainer.*\",\n                \"org.junit.jupiter.api.DynamicTest.*\"\n              ],\n              \"importOrder\": [\"java\", \"javax\", \"com\", \"org\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"manual-jdtls-install\"><a class=\"header\" href=\"#manual-jdtls-install\">Manual JDTLS Install</a></h2>\n<p>If you prefer, you can install JDTLS yourself and the extension can be configured to use that instead.</p>\n<ul>\n<li>MacOS: <code>brew install jdtls</code></li>\n<li>Arch: <a href=\"https://aur.archlinux.org/packages/jdtls\"><code>jdtls</code> from AUR</a></li>\n</ul>\n<p>Or manually download install:</p>\n<ul>\n<li><a href=\"http://download.eclipse.org/jdtls/milestones/\">JDTLS Milestone Builds</a> (updated every two weeks)</li>\n<li><a href=\"https://download.eclipse.org/jdtls/snapshots/\">JDTLS Snapshot Builds</a> (frequent updates)</li>\n</ul>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"https://github.com/zed-extensions/java\">Zed Java Repo</a></li>\n<li><a href=\"https://github.com/zed-extensions/java/issues\">Zed Java Issues</a></li>\n</ul>\n\n</main>",
  "content_text": "Java\nJava language support in Zed is provided by:\n\nZed Java: zed-extensions/java\nTree-sitter: tree-sitter/tree-sitter-java\nLanguage Server: eclipse-jdtls/eclipse.jdt.ls\n\nInstall OpenJDK\nYou will need to install a Java runtime (OpenJDK).\n\nMacOS: brew install openjdk\nUbuntu: sudo add-apt-repository ppa:openjdk-23 && sudo apt-get install openjdk-23\nWindows: choco install openjdk\nArch Linux: sudo pacman -S jre-openjdk-headless\n\nOr manually download and install OpenJDK 23.\nExtension Install\nYou can install either by opening zed: extensions(cmd-shift-x|ctrl-shift-x) and searching for java.\nSettings / Initialization Options\nThe extension will automatically download the language server, see: Manual JDTLS Install below if you'd prefer to manage that yourself.\nFor available initialization_options please see the Initialize Request section of the Eclipse.jdt.ls Wiki.\nYou can add these customizations to your Zed Settings by launching zed: open settings(cmd-,|ctrl-,) or by using a .zed/setting.json inside your project.\nZed Java Settings\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {}\n    }\n  }\n}\n\nExample Configs\nJDTLS Binary\nBy default, zed will look in your PATH for a jdtls binary, if you wish to specify an explicit binary you can do so via settings:\n  \"lsp\": {\n    \"jdtls\": {\n      \"binary\": {\n        \"path\": \"/path/to/java/bin/jdtls\",\n        // \"arguments\": [],\n        // \"env\": {},\n        \"ignore_system_version\": true\n      }\n    }\n  }\n\nZed Java Initialization Options\nThere are also many more options you can pass directly to the language server, for example:\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {\n        \"bundles\": [],\n        \"workspaceFolders\": [\"file:///home/snjeza/Project\"],\n        \"settings\": {\n          \"java\": {\n            \"home\": \"/usr/local/jdk-9.0.1\",\n            \"errors\": {\n              \"incompleteClasspath\": {\n                \"severity\": \"warning\"\n              }\n            },\n            \"configuration\": {\n              \"updateBuildConfiguration\": \"interactive\",\n              \"maven\": {\n                \"userSettings\": null\n              }\n            },\n            \"trace\": {\n              \"server\": \"verbose\"\n            },\n            \"import\": {\n              \"gradle\": {\n                \"enabled\": true\n              },\n              \"maven\": {\n                \"enabled\": true\n              },\n              \"exclusions\": [\n                \"**/node_modules/**\",\n                \"**/.metadata/**\",\n                \"**/archetype-resources/**\",\n                \"**/META-INF/maven/**\",\n                \"/**/test/**\"\n              ]\n            },\n            \"jdt\": {\n              \"ls\": {\n                \"lombokSupport\": {\n                  \"enabled\": false // Set this to true to enable lombok support\n                }\n              }\n            },\n            \"referencesCodeLens\": {\n              \"enabled\": false\n            },\n            \"signatureHelp\": {\n              \"enabled\": false\n            },\n            \"implementationsCodeLens\": {\n              \"enabled\": false\n            },\n            \"format\": {\n              \"enabled\": true\n            },\n            \"saveActions\": {\n              \"organizeImports\": false\n            },\n            \"contentProvider\": {\n              \"preferred\": null\n            },\n            \"autobuild\": {\n              \"enabled\": false\n            },\n            \"completion\": {\n              \"favoriteStaticMembers\": [\n                \"org.junit.Assert.*\",\n                \"org.junit.Assume.*\",\n                \"org.junit.jupiter.api.Assertions.*\",\n                \"org.junit.jupiter.api.Assumptions.*\",\n                \"org.junit.jupiter.api.DynamicContainer.*\",\n                \"org.junit.jupiter.api.DynamicTest.*\"\n              ],\n              \"importOrder\": [\"java\", \"javax\", \"com\", \"org\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nManual JDTLS Install\nIf you prefer, you can install JDTLS yourself and the extension can be configured to use that instead.\n\nMacOS: brew install jdtls\nArch: jdtls from AUR\n\nOr manually download install:\n\nJDTLS Milestone Builds (updated every two weeks)\nJDTLS Snapshot Builds (frequent updates)\n\nSee also\n\nZed Java Repo\nZed Java Issues",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:14:08"
}