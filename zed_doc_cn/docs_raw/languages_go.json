{
  "url": "https://zed.dev/docs/languages/go.html",
  "title": "Go | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"go\"><a class=\"header\" href=\"#go\">Go</a></h1>\n<p>Go support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-go\">tree-sitter/tree-sitter-go</a></li>\n<li>Language Server: <a href=\"https://github.com/golang/tools/tree/master/gopls\">golang/tools/tree/master/gopls</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/go-delve/delve\">delve</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<p>We recommend installing gopls via go's package manager and not via Homebrew or your Linux distribution's package manager.</p>\n<ol>\n<li>Make sure you have uninstalled any version of gopls you have installed via your package manager:</li>\n</ol>\n<pre><code class=\"language-sh\"># MacOS homebrew\nbrew remove gopls\n# Ubuntu\nsudo apt-get remove gopls\nsudo snap remove gopls\n# Arch\nsudo pacman -R gopls\n</code></pre>\n<ol start=\"2\">\n<li>Install/Update <code>gopls</code> to the latest version using the go module tool:</li>\n</ol>\n<pre><code class=\"language-sh\">go install golang.org/x/tools/gopls@latest\n</code></pre>\n<ol start=\"3\">\n<li>Ensure that <code>gopls</code> is in your path:</li>\n</ol>\n<pre><code class=\"language-sh\">which gopls\ngopls version\n</code></pre>\n<p>If <code>gopls</code> is not found you will likely need to add <code>export PATH=\"$PATH:$HOME/go/bin\"</code> to your <code>.zshrc</code> / <code>.bash_profile</code></p>\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h2>\n<p>Zed sets the following initialization options for inlay hints:</p>\n<pre><code class=\"language-json\">\"hints\": {\n    \"assignVariableTypes\": true,\n    \"compositeLiteralFields\": true,\n    \"compositeLiteralTypes\": true,\n    \"constantValues\": true,\n    \"functionTypeParameters\": true,\n    \"parameterNames\": true,\n    \"rangeVariableTypes\": true\n}\n</code></pre>\n<p>to make the language server send back inlay hints when Zed has them enabled in the settings.</p>\n<p>Use</p>\n<pre><code class=\"language-json\">\"lsp\": {\n    \"gopls\": {\n        \"initialization_options\": {\n            \"hints\": {\n                ....\n            }\n        }\n    }\n}\n</code></pre>\n<p>to override these settings.</p>\n<p>See <a href=\"https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md\">gopls inlayHints documentation</a> for more information.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports zero-configuration debugging of Go tests and entry points (<code>func main</code>). Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list of these preconfigured debug tasks.</p>\n<p>For more control, you can add debug configurations to <code>.zed/debug.json</code>. See below for examples.</p>\n<h3 id=\"debug-go-packages\"><a class=\"header\" href=\"#debug-go-packages\">Debug Go Packages</a></h3>\n<p>To debug a specific package, you can do so by setting the Delve mode to \"debug\". In this case \"program\" should be set to the package name.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Go (Delve)\",\n    \"adapter\": \"Delve\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\"\n  },\n  {\n    \"label\": \"Run server\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    // For Delve, the program can be a package name\n    \"program\": \"./cmd/server\"\n    // \"args\": [],\n    // \"buildFlags\": [],\n  }\n]\n</code></pre>\n<h3 id=\"debug-go-tests\"><a class=\"header\" href=\"#debug-go-tests\">Debug Go Tests</a></h3>\n<p>To debug the tests for a package, set the Delve mode to \"test\".\nThe \"program\" is still the package name, and you can use the \"buildFlags\" to do things like set tags, and the \"args\" to set args on the test binary. (See <code>go help testflags</code> for more information on doing that).</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Run integration tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"program\": \".\",\n    \"buildFlags\": [\"-tags\", \"integration\"]\n    // To filter down to just the test your cursor is in:\n    // \"args\": [\"-test.run\", \"$ZED_SYMBOL\"]\n  }\n]\n</code></pre>\n<h3 id=\"build-and-debug-separately\"><a class=\"header\" href=\"#build-and-debug-separately\">Build and debug separately</a></h3>\n<p>If you need to build your application with a specific command, you can use the \"exec\" mode of Delve. In this case \"program\" should point to an executable,\nand the \"build\" command should build that.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug Prebuilt Unit Tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"program\": \"${ZED_WORKTREE_ROOT}/__debug_unit\",\n    \"args\": [\"-test.v\", \"-test.run=${ZED_SYMBOL}\"],\n    \"build\": {\n      \"command\": \"go\",\n      \"args\": [\n        \"test\",\n        \"-c\",\n        \"-tags\",\n        \"unit\",\n        \"-gcflags\\\"all=-N -l\\\"\",\n        \"-o\",\n        \"__debug_unit\",\n        \"./pkg/...\"\n      ]\n    }\n  }\n]\n</code></pre>\n<h3 id=\"attaching-to-an-existing-instance-of-delve\"><a class=\"header\" href=\"#attaching-to-an-existing-instance-of-delve\">Attaching to an existing instance of Delve</a></h3>\n<p>You might find yourself needing to connect to an existing instance of Delve that's not necessarily running on your machine; in such case, you can use <code>tcp_arguments</code> to instrument Zed's connection to Delve.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"Delve\",\n    \"label\": \"Connect to a running Delve instance\",\n    \"program\": \"/Users/zed/Projects/language_repositories/golang/hello/hello\",\n    \"cwd\": \"/Users/zed/Projects/language_repositories/golang/hello\",\n    \"args\": [],\n    \"env\": {},\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"stopOnEntry\": false,\n    \"tcp_connection\": { \"host\": \"123.456.789.012\", \"port\": 53412 }\n  }\n]\n</code></pre>\n<p>In such case Zed won't spawn a new instance of Delve, as it opts to use an existing one. The consequence of this is that <em>there will be no terminal</em> in Zed; you have to interact with the Delve instance directly, as it handles stdin/stdout of the debuggee.</p>\n<h2 id=\"go-mod\"><a class=\"header\" href=\"#go-mod\">Go Mod</a></h2>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/camdencheek/tree-sitter-go-mod\">camdencheek/tree-sitter-go-mod</a></li>\n<li>Language Server: N/A</li>\n</ul>\n<h2 id=\"go-sum\"><a class=\"header\" href=\"#go-sum\">Go Sum</a></h2>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/amaanq/tree-sitter-go-sum\">amaanq/tree-sitter-go-sum</a></li>\n<li>Language Server: N/A</li>\n</ul>\n<h2 id=\"go-work\"><a class=\"header\" href=\"#go-work\">Go Work</a></h2>\n<ul>\n<li>Tree-sitter:\n<a href=\"https://github.com/d1y/tree-sitter-go-work\">tree-sitter-go-work</a></li>\n<li>Language Server: N/A</li>\n</ul>\n\n</main>",
  "content_text": "Go\nGo support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-go\nLanguage Server: golang/tools/tree/master/gopls\nDebug Adapter: delve\n\nSetup\nWe recommend installing gopls via go's package manager and not via Homebrew or your Linux distribution's package manager.\n\nMake sure you have uninstalled any version of gopls you have installed via your package manager:\n\n# MacOS homebrew\nbrew remove gopls\n# Ubuntu\nsudo apt-get remove gopls\nsudo snap remove gopls\n# Arch\nsudo pacman -R gopls\n\n\nInstall/Update gopls to the latest version using the go module tool:\n\ngo install golang.org/x/tools/gopls@latest\n\n\nEnsure that gopls is in your path:\n\nwhich gopls\ngopls version\n\nIf gopls is not found you will likely need to add export PATH=\"$PATH:$HOME/go/bin\" to your .zshrc / .bash_profile\nInlay Hints\nZed sets the following initialization options for inlay hints:\n\"hints\": {\n    \"assignVariableTypes\": true,\n    \"compositeLiteralFields\": true,\n    \"compositeLiteralTypes\": true,\n    \"constantValues\": true,\n    \"functionTypeParameters\": true,\n    \"parameterNames\": true,\n    \"rangeVariableTypes\": true\n}\n\nto make the language server send back inlay hints when Zed has them enabled in the settings.\nUse\n\"lsp\": {\n    \"gopls\": {\n        \"initialization_options\": {\n            \"hints\": {\n                ....\n            }\n        }\n    }\n}\n\nto override these settings.\nSee gopls inlayHints documentation for more information.\nDebugging\nZed supports zero-configuration debugging of Go tests and entry points (func main). Run debugger: start (f4|f4) to see a contextual list of these preconfigured debug tasks.\nFor more control, you can add debug configurations to .zed/debug.json. See below for examples.\nDebug Go Packages\nTo debug a specific package, you can do so by setting the Delve mode to \"debug\". In this case \"program\" should be set to the package name.\n[\n  {\n    \"label\": \"Go (Delve)\",\n    \"adapter\": \"Delve\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\"\n  },\n  {\n    \"label\": \"Run server\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    // For Delve, the program can be a package name\n    \"program\": \"./cmd/server\"\n    // \"args\": [],\n    // \"buildFlags\": [],\n  }\n]\n\nDebug Go Tests\nTo debug the tests for a package, set the Delve mode to \"test\".\nThe \"program\" is still the package name, and you can use the \"buildFlags\" to do things like set tags, and the \"args\" to set args on the test binary. (See go help testflags for more information on doing that).\n[\n  {\n    \"label\": \"Run integration tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"program\": \".\",\n    \"buildFlags\": [\"-tags\", \"integration\"]\n    // To filter down to just the test your cursor is in:\n    // \"args\": [\"-test.run\", \"$ZED_SYMBOL\"]\n  }\n]\n\nBuild and debug separately\nIf you need to build your application with a specific command, you can use the \"exec\" mode of Delve. In this case \"program\" should point to an executable,\nand the \"build\" command should build that.\n[\n  {\n    \"label\": \"Debug Prebuilt Unit Tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"program\": \"${ZED_WORKTREE_ROOT}/__debug_unit\",\n    \"args\": [\"-test.v\", \"-test.run=${ZED_SYMBOL}\"],\n    \"build\": {\n      \"command\": \"go\",\n      \"args\": [\n        \"test\",\n        \"-c\",\n        \"-tags\",\n        \"unit\",\n        \"-gcflags\\\"all=-N -l\\\"\",\n        \"-o\",\n        \"__debug_unit\",\n        \"./pkg/...\"\n      ]\n    }\n  }\n]\n\nAttaching to an existing instance of Delve\nYou might find yourself needing to connect to an existing instance of Delve that's not necessarily running on your machine; in such case, you can use tcp_arguments to instrument Zed's connection to Delve.\n[\n  {\n    \"adapter\": \"Delve\",\n    \"label\": \"Connect to a running Delve instance\",\n    \"program\": \"/Users/zed/Projects/language_repositories/golang/hello/hello\",\n    \"cwd\": \"/Users/zed/Projects/language_repositories/golang/hello\",\n    \"args\": [],\n    \"env\": {},\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"stopOnEntry\": false,\n    \"tcp_connection\": { \"host\": \"123.456.789.012\", \"port\": 53412 }\n  }\n]\n\nIn such case Zed won't spawn a new instance of Delve, as it opts to use an existing one. The consequence of this is that there will be no terminal in Zed; you have to interact with the Delve instance directly, as it handles stdin/stdout of the debuggee.\nGo Mod\n\nTree-sitter: camdencheek/tree-sitter-go-mod\nLanguage Server: N/A\n\nGo Sum\n\nTree-sitter: amaanq/tree-sitter-go-sum\nLanguage Server: N/A\n\nGo Work\n\nTree-sitter:\ntree-sitter-go-work\nLanguage Server: N/A",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:13:56"
}