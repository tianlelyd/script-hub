{
  "url": "https://zed.dev/docs/ai/mcp.html",
  "title": "Model Context Protocol | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"model-context-protocol\"><a class=\"header\" href=\"#model-context-protocol\">Model Context Protocol</a></h1>\n<p>Zed uses the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a> to interact with context servers.</p>\n<blockquote>\n<p>The Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.</p>\n</blockquote>\n<p>Check out the <a href=\"https://www.anthropic.com/news/model-context-protocol\">Anthropic news post</a> and the <a href=\"https://zed.dev/blog/mcp\">Zed blog post</a> for a general intro to MCP.</p>\n<h2 id=\"installing-mcp-servers\"><a class=\"header\" href=\"#installing-mcp-servers\">Installing MCP Servers</a></h2>\n<h3 id=\"as-extensions\"><a class=\"header\" href=\"#as-extensions\">As Extensions</a></h3>\n<p>One of the ways you can use MCP servers in Zed is by exposing them as an extension.\nTo learn how to create your own, check out the <a href=\"../extensions/mcp-extensions.html\">MCP Server Extensions</a> page for more details.</p>\n<p>Thanks to our awesome community, many MCP servers have already been added as extensions.\nYou can check which ones are available via any of these routes:</p>\n<ol>\n<li><a href=\"https://zed.dev/extensions?filter=context-servers\">the Zed website</a></li>\n<li>in the app, open the Command Palette and run the <code>zed: extensions</code> action</li>\n<li>in the app, go to the Agent Panel's top-right menu and look for the \"View Server Extensions\" menu item</li>\n</ol>\n<p>In any case, here are some of the ones available:</p>\n<ul>\n<li><a href=\"https://zed.dev/extensions/context7-mcp-server\">Context7</a></li>\n<li><a href=\"https://zed.dev/extensions/github-mcp-server\">GitHub</a></li>\n<li><a href=\"https://zed.dev/extensions/puppeteer-mcp-server\">Puppeteer</a></li>\n<li><a href=\"https://zed.dev/extensions/gem\">Gem</a></li>\n<li><a href=\"https://zed.dev/extensions/brave-search-mcp-server\">Brave Search</a></li>\n<li><a href=\"https://github.com/aqrln/prisma-mcp-zed\">Prisma</a></li>\n<li><a href=\"https://zed.dev/extensions/framelink-figma-mcp-server\">Framelink Figma</a></li>\n<li><a href=\"https://zed.dev/extensions/linear-mcp-server\">Linear</a></li>\n<li><a href=\"https://zed.dev/extensions/resend-mcp-server\">Resend</a></li>\n</ul>\n<h3 id=\"as-custom-servers\"><a class=\"header\" href=\"#as-custom-servers\">As Custom Servers</a></h3>\n<p>Creating an extension is not the only way to use MCP servers in Zed.\nYou can connect them by adding their commands directly to your <code>settings.json</code>, like so:</p>\n<pre><code class=\"language-json\">{\n  \"context_servers\": {\n    \"your-mcp-server\": {\n      \"source\": \"custom\",\n      \"command\": \"some-command\",\n      \"args\": [\"arg-1\", \"arg-2\"],\n      \"env\": {}\n    }\n  }\n}\n</code></pre>\n<p>Alternatively, you can also add a custom server by accessing the Agent Panel's Settings view (also accessible via the <code>agent: open settings</code> action).\nFrom there, you can add it through the modal that appears when you click the \"Add Custom Server\" button.</p>\n<h2 id=\"using-mcp-servers\"><a class=\"header\" href=\"#using-mcp-servers\">Using MCP Servers</a></h2>\n<h3 id=\"installation-check\"><a class=\"header\" href=\"#installation-check\">Installation Check</a></h3>\n<p>Regardless of whether you're using MCP servers as an extension or adding them directly, most servers out there need some sort of configuration as part of the set up process.</p>\n<p>In the case of extensions, Zed will show a modal displaying what is required for you to properly set up a given server.\nFor example, the GitHub MCP extension requires you to add a <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\">Personal Access Token</a>.</p>\n<p>In the case of custom servers, make sure you check the provider documentation to determine what type of command, arguments, and environment variables need to be added to the JSON.</p>\n<p>To check whether your MCP server is properly installed, go to the Agent Panel's settings view and watch the indicator dot next to its name.\nIf they're running correctly, the indicator will be green and its tooltip will say \"Server is active\".\nIf not, other colors and tooltip messages will indicate what is happening.</p>\n<h3 id=\"using-in-the-agent-panel\"><a class=\"header\" href=\"#using-in-the-agent-panel\">Using in the Agent Panel</a></h3>\n<p>Once installation is complete, you can return to the Agent Panel and start prompting.\nMentioning your MCP server by name helps the agent pick it up.</p>\n<p>If you want to ensure a given server will be used, you can create <a href=\"./agent-panel.html#custom-profiles\">a custom profile</a> by turning off the built-in tools (either all of them or the ones that would cause conflicts) and turning on only the tools coming from the MCP server.</p>\n<p>As an example, <a href=\"https://container-use.com/agent-integrations#add-container-use-agent-profile-optional\">the Dagger team suggests</a> doing that with their <a href=\"https://zed.dev/extensions/mcp-server-container-use\">Container Use MCP server</a>:</p>\n<pre><code class=\"language-json\">\"agent\": {\n  \"profiles\": {\n    \"container-use\": {\n      \"name\": \"Container Use\",\n      \"tools\": {\n        \"fetch\": true,\n        \"thinking\": true,\n        \"copy_path\": false,\n        \"find_path\": false,\n        \"delete_path\": false,\n        \"create_directory\": false,\n        \"list_directory\": false,\n        \"diagnostics\": false,\n        \"read_file\": false,\n        \"open\": false,\n        \"move_path\": false,\n        \"grep\": false,\n        \"edit_file\": false,\n        \"terminal\": false\n      },\n      \"enable_all_context_servers\": false,\n      \"context_servers\": {\n        \"container-use\": {\n          \"tools\": {\n            \"environment_create\": true,\n            \"environment_add_service\": true,\n            \"environment_update\": true,\n            \"environment_run_cmd\": true,\n            \"environment_open\": true,\n            \"environment_file_write\": true,\n            \"environment_file_read\": true,\n            \"environment_file_list\": true,\n            \"environment_file_delete\": true,\n            \"environment_checkpoint\": true\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"tool-approval\"><a class=\"header\" href=\"#tool-approval\">Tool Approval</a></h3>\n<p>Zed's Agent Panel includes the <code>agent.always_allow_tool_actions</code> setting that, if set to <code>false</code>, will require you to give permission for any editing attempt as well as tool calls coming from MCP servers.</p>\n<p>You can change this by setting this key to <code>true</code> in either your <code>settings.json</code> or through the Agent Panel's settings view.</p>\n\n</main>",
  "content_text": "Model Context Protocol\nZed uses the Model Context Protocol to interact with context servers.\n\nThe Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nCheck out the Anthropic news post and the Zed blog post for a general intro to MCP.\nInstalling MCP Servers\nAs Extensions\nOne of the ways you can use MCP servers in Zed is by exposing them as an extension.\nTo learn how to create your own, check out the MCP Server Extensions page for more details.\nThanks to our awesome community, many MCP servers have already been added as extensions.\nYou can check which ones are available via any of these routes:\n\nthe Zed website\nin the app, open the Command Palette and run the zed: extensions action\nin the app, go to the Agent Panel's top-right menu and look for the \"View Server Extensions\" menu item\n\nIn any case, here are some of the ones available:\n\nContext7\nGitHub\nPuppeteer\nGem\nBrave Search\nPrisma\nFramelink Figma\nLinear\nResend\n\nAs Custom Servers\nCreating an extension is not the only way to use MCP servers in Zed.\nYou can connect them by adding their commands directly to your settings.json, like so:\n{\n  \"context_servers\": {\n    \"your-mcp-server\": {\n      \"source\": \"custom\",\n      \"command\": \"some-command\",\n      \"args\": [\"arg-1\", \"arg-2\"],\n      \"env\": {}\n    }\n  }\n}\n\nAlternatively, you can also add a custom server by accessing the Agent Panel's Settings view (also accessible via the agent: open settings action).\nFrom there, you can add it through the modal that appears when you click the \"Add Custom Server\" button.\nUsing MCP Servers\nInstallation Check\nRegardless of whether you're using MCP servers as an extension or adding them directly, most servers out there need some sort of configuration as part of the set up process.\nIn the case of extensions, Zed will show a modal displaying what is required for you to properly set up a given server.\nFor example, the GitHub MCP extension requires you to add a Personal Access Token.\nIn the case of custom servers, make sure you check the provider documentation to determine what type of command, arguments, and environment variables need to be added to the JSON.\nTo check whether your MCP server is properly installed, go to the Agent Panel's settings view and watch the indicator dot next to its name.\nIf they're running correctly, the indicator will be green and its tooltip will say \"Server is active\".\nIf not, other colors and tooltip messages will indicate what is happening.\nUsing in the Agent Panel\nOnce installation is complete, you can return to the Agent Panel and start prompting.\nMentioning your MCP server by name helps the agent pick it up.\nIf you want to ensure a given server will be used, you can create a custom profile by turning off the built-in tools (either all of them or the ones that would cause conflicts) and turning on only the tools coming from the MCP server.\nAs an example, the Dagger team suggests doing that with their Container Use MCP server:\n\"agent\": {\n  \"profiles\": {\n    \"container-use\": {\n      \"name\": \"Container Use\",\n      \"tools\": {\n        \"fetch\": true,\n        \"thinking\": true,\n        \"copy_path\": false,\n        \"find_path\": false,\n        \"delete_path\": false,\n        \"create_directory\": false,\n        \"list_directory\": false,\n        \"diagnostics\": false,\n        \"read_file\": false,\n        \"open\": false,\n        \"move_path\": false,\n        \"grep\": false,\n        \"edit_file\": false,\n        \"terminal\": false\n      },\n      \"enable_all_context_servers\": false,\n      \"context_servers\": {\n        \"container-use\": {\n          \"tools\": {\n            \"environment_create\": true,\n            \"environment_add_service\": true,\n            \"environment_update\": true,\n            \"environment_run_cmd\": true,\n            \"environment_open\": true,\n            \"environment_file_write\": true,\n            \"environment_file_read\": true,\n            \"environment_file_list\": true,\n            \"environment_file_delete\": true,\n            \"environment_checkpoint\": true\n          }\n        }\n      }\n    }\n  }\n}\n\nTool Approval\nZed's Agent Panel includes the agent.always_allow_tool_actions setting that, if set to false, will require you to give permission for any editing attempt as well as tool calls coming from MCP servers.\nYou can change this by setting this key to true in either your settings.json or through the Agent Panel's settings view.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:12:21"
}