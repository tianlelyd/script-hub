{
  "getting-started.html": {
    "url": "https://zed.dev/docs/getting-started.html",
    "title": "Getting Started | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h1>\n<p>Welcome to Zed! We are excited to have you. Here is a jumping-off point to getting started.</p>\n<h2 id=\"download-zed\"><a class=\"header\" href=\"#download-zed\">Download Zed</a></h2>\n<h3 id=\"macos\"><a class=\"header\" href=\"#macos\">macOS</a></h3>\n<p>Get the latest stable builds via <a href=\"https://zed.dev/download\">the download page</a>. If you want to download our preview build, you can find it on its <a href=\"https://zed.dev/releases/preview\">releases page</a>. After the first manual installation, Zed will periodically check for install updates.</p>\n<p>You can also install Zed stable via Homebrew:</p>\n<pre><code class=\"language-sh\">brew install --cask zed\n</code></pre>\n<p>As well as Zed preview:</p>\n<pre><code class=\"language-sh\">brew install --cask zed@preview\n</code></pre>\n<h3 id=\"linux\"><a class=\"header\" href=\"#linux\">Linux</a></h3>\n<p>For most Linux users, the easiest way to install Zed is through our installation script:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | sh\n</code></pre>\n<p>If you'd like to help us test our new features, you can also install our preview build:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n</code></pre>\n<p>This script supports <code>x86_64</code> and <code>AArch64</code>, as well as common Linux distributions: Ubuntu, Arch, Debian, RedHat, CentOS, Fedora, and more.</p>\n<p>If Zed is installed using this installation script, it can be uninstalled at any time by running the shell command <code>zed --uninstall</code>. The shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.</p>\n<p>If this script is insufficient for your use case, you run into problems running Zed, or there are errors in uninstalling Zed, please see our <a href=\"./linux.html\">Linux-specific documentation</a>.</p>\n<h2 id=\"command-palette\"><a class=\"header\" href=\"#command-palette\">Command Palette</a></h2>\n<p>The Command Palette is the main way to access pretty much any functionality that's available in Zed. Its keybinding is the first one you should make yourself familiar with. To open it, hit: <kbd class=\"keybinding\">cmd-shift-p|ctrl-shift-p</kbd>.</p>\n<p><img alt=\"The opened Command Palette\" src=\"https://zed.dev/img/features/command-palette.jpg\"/></p>\n<p>Try it! Open the Command Palette and type in <code>new file</code>. You should see the list of commands being filtered down to <code>workspace: new file</code>. Hit return and you end up with a new buffer.</p>\n<p>Any time you see instructions that include commands of the form <code>zed: ...</code> or <code>editor: ...</code> and so on that means you need to execute them in the Command Palette.</p>\n<h2 id=\"cli\"><a class=\"header\" href=\"#cli\">CLI</a></h2>\n<p>Zed has a CLI, on Linux this should come with the distribution's Zed package (binary name can vary from distribution to distribution, <code>zed</code> will be used later for brevity).\nFor macOS, the CLI comes in the same package with the editor binary, and could be installed into the system with the <code>cli: install</code> Zed command which will create a symlink to the <code>/usr/local/bin/zed</code>.\nIt can also be built from source out of the <code>cli</code> crate in this repository.</p>\n<p>Use <code>zed --help</code> to see the full list of capabilities.\nGeneral highlights:</p>\n<ul>\n<li>\n<p>Opening another empty Zed window: <code>zed</code></p>\n</li>\n<li>\n<p>Opening a file or directory in Zed: <code>zed /path/to/entry</code> (use <code>-n</code> to open in the new window)</p>\n</li>\n<li>\n<p>Reading from stdin: <code>ps axf | zed -</code></p>\n</li>\n<li>\n<p>Starting Zed with logs in the terminal: <code>zed --foreground</code></p>\n</li>\n<li>\n<p>Uninstalling Zed and all its related files: <code>zed --uninstall</code></p>\n</li>\n</ul>\n<h2 id=\"configure-zed\"><a class=\"header\" href=\"#configure-zed\">Configure Zed</a></h2>\n<p>To open your custom settings to set things like fonts, formatting settings, per-language settings, and more, use the <kbd class=\"keybinding\">cmd-,|ctrl-,</kbd> keybinding.</p>\n<p>To see all available settings, open the Command Palette with <kbd class=\"keybinding\">cmd-shift-p|ctrl-shift-p</kbd> and search for <code>zed: open default settings</code>.\nYou can also check them all out in the <a href=\"./configuring-zed.html\">Configuring Zed</a> documentation.</p>\n<h2 id=\"configure-ai-in-zed\"><a class=\"header\" href=\"#configure-ai-in-zed\">Configure AI in Zed</a></h2>\n<p>Zed smoothly integrates LLMs in multiple ways across the editor.\nVisit <a href=\"./ai/overview.html\">the AI overview page</a> to learn how to quickly get started with LLMs on Zed.</p>\n<h2 id=\"set-up-your-key-bindings\"><a class=\"header\" href=\"#set-up-your-key-bindings\">Set up your key bindings</a></h2>\n<p>To edit your custom keymap and add or remap bindings, you can either use <kbd class=\"keybinding\">cmd-k cmd-s|ctrl-k ctrl-s</kbd> to spawn the Zed Keymap Editor (<code class=\"hljs\">zed: open keymap editor</code>) or you can directly open your Zed Keymap json (<code>~/.config/zed/keymap.json</code>) with <code class=\"hljs\">zed: open keymap</code>.</p>\n<p>To access the default key binding set, open the Command Palette with <kbd class=\"keybinding\">cmd-shift-p|ctrl-shift-p</kbd> and search for \"zed: open default keymap\". See <a href=\"./key-bindings.html\">Key Bindings</a> for more info.</p>\n\n</main>",
    "content_text": "Getting Started\nWelcome to Zed! We are excited to have you. Here is a jumping-off point to getting started.\nDownload Zed\nmacOS\nGet the latest stable builds via the download page. If you want to download our preview build, you can find it on its releases page. After the first manual installation, Zed will periodically check for install updates.\nYou can also install Zed stable via Homebrew:\nbrew install --cask zed\n\nAs well as Zed preview:\nbrew install --cask zed@preview\n\nLinux\nFor most Linux users, the easiest way to install Zed is through our installation script:\ncurl -f https://zed.dev/install.sh | sh\n\nIf you'd like to help us test our new features, you can also install our preview build:\ncurl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n\nThis script supports x86_64 and AArch64, as well as common Linux distributions: Ubuntu, Arch, Debian, RedHat, CentOS, Fedora, and more.\nIf Zed is installed using this installation script, it can be uninstalled at any time by running the shell command zed --uninstall. The shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.\nIf this script is insufficient for your use case, you run into problems running Zed, or there are errors in uninstalling Zed, please see our Linux-specific documentation.\nCommand Palette\nThe Command Palette is the main way to access pretty much any functionality that's available in Zed. Its keybinding is the first one you should make yourself familiar with. To open it, hit: cmd-shift-p|ctrl-shift-p.\n\nTry it! Open the Command Palette and type in new file. You should see the list of commands being filtered down to workspace: new file. Hit return and you end up with a new buffer.\nAny time you see instructions that include commands of the form zed: ... or editor: ... and so on that means you need to execute them in the Command Palette.\nCLI\nZed has a CLI, on Linux this should come with the distribution's Zed package (binary name can vary from distribution to distribution, zed will be used later for brevity).\nFor macOS, the CLI comes in the same package with the editor binary, and could be installed into the system with the cli: install Zed command which will create a symlink to the /usr/local/bin/zed.\nIt can also be built from source out of the cli crate in this repository.\nUse zed --help to see the full list of capabilities.\nGeneral highlights:\n\n\nOpening another empty Zed window: zed\n\n\nOpening a file or directory in Zed: zed /path/to/entry (use -n to open in the new window)\n\n\nReading from stdin: ps axf | zed -\n\n\nStarting Zed with logs in the terminal: zed --foreground\n\n\nUninstalling Zed and all its related files: zed --uninstall\n\n\nConfigure Zed\nTo open your custom settings to set things like fonts, formatting settings, per-language settings, and more, use the cmd-,|ctrl-, keybinding.\nTo see all available settings, open the Command Palette with cmd-shift-p|ctrl-shift-p and search for zed: open default settings.\nYou can also check them all out in the Configuring Zed documentation.\nConfigure AI in Zed\nZed smoothly integrates LLMs in multiple ways across the editor.\nVisit the AI overview page to learn how to quickly get started with LLMs on Zed.\nSet up your key bindings\nTo edit your custom keymap and add or remap bindings, you can either use cmd-k cmd-s|ctrl-k ctrl-s to spawn the Zed Keymap Editor (zed: open keymap editor) or you can directly open your Zed Keymap json (~/.config/zed/keymap.json) with zed: open keymap.\nTo access the default key binding set, open the Command Palette with cmd-shift-p|ctrl-shift-p and search for \"zed: open default keymap\". See Key Bindings for more info.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:10:56"
  },
  "system-requirements.html": {
    "url": "https://zed.dev/docs/system-requirements.html",
    "title": "System Requirements | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"system-requirements\"><a class=\"header\" href=\"#system-requirements\">System Requirements</a></h1>\n<h2 id=\"apple\"><a class=\"header\" href=\"#apple\">Apple</a></h2>\n<h3 id=\"macos\"><a class=\"header\" href=\"#macos\">macOS</a></h3>\n<p>Zed supports the follow macOS releases:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Version</th><th>Codename</th><th>Apple Status</th><th>Zed Status</th></tr></thead><tbody>\n<tr><td>macOS 15.x</td><td>Sequoia</td><td>Supported</td><td>Supported</td></tr>\n<tr><td>macOS 14.x</td><td>Sonoma</td><td>Supported</td><td>Supported</td></tr>\n<tr><td>macOS 13.x</td><td>Ventura</td><td>Supported</td><td>Supported</td></tr>\n<tr><td>macOS 12.x</td><td>Monterey</td><td>EOL 2024-09-16</td><td>Supported</td></tr>\n<tr><td>macOS 11.x</td><td>Big Sur</td><td>EOL 2023-09-26</td><td>Partially Supported</td></tr>\n<tr><td>macOS 10.15.x</td><td>Catalina</td><td>EOL 2022-09-12</td><td>Partially Supported</td></tr>\n<tr><td>macOS 10.14.x</td><td>Mojave</td><td>EOL 2021-10-25</td><td>Unsupported</td></tr>\n</tbody></table>\n</div>\n<p>The macOS releases labelled \"Partially Supported\" (Big Sur and Catalina) do not support screen sharing via Zed Collaboration. These features use the <a href=\"https://livekit.io\">LiveKit SDK</a> which relies upon <a href=\"https://developer.apple.com/documentation/screencapturekit/\">ScreenCaptureKit.framework</a> only available on macOS 12 (Monterey) and newer.</p>\n<h3 id=\"mac-hardware\"><a class=\"header\" href=\"#mac-hardware\">Mac Hardware</a></h3>\n<p>Zed supports machines with Intel (x86_64) or Apple (aarch64) processors that meet the above macOS requirements:</p>\n<ul>\n<li>MacBook Pro (Early 2015 and newer)</li>\n<li>MacBook Air (Early 2015 and newer)</li>\n<li>MacBook (Early 2016 and newer)</li>\n<li>Mac Mini (Late 2014 and newer)</li>\n<li>Mac Pro (Late 2013 or newer)</li>\n<li>iMac (Late 2015 and newer)</li>\n<li>iMac Pro (all models)</li>\n<li>Mac Studio (all models)</li>\n</ul>\n<h2 id=\"linux\"><a class=\"header\" href=\"#linux\">Linux</a></h2>\n<p>Zed supports 64bit Intel/AMD (x86_64) and 64Bit ARM (aarch64) processors.</p>\n<p>Zed requires a Vulkan 1.3 driver, and the following desktop portals:</p>\n<ul>\n<li><code>org.freedesktop.portal.FileChooser</code></li>\n<li><code>org.freedesktop.portal.OpenURI</code></li>\n<li><code>org.freedesktop.portal.Secret</code>, or <code>org.freedesktop.Secrets</code></li>\n</ul>\n<h2 id=\"windows\"><a class=\"header\" href=\"#windows\">Windows</a></h2>\n<p>Not yet available as an official download. Can be built <a href=\"./development/windows.html\">from source</a>.</p>\n<h2 id=\"freebsd\"><a class=\"header\" href=\"#freebsd\">FreeBSD</a></h2>\n<p>Not yet available as an official download. Can be built <a href=\"./development/freebsd.html\">from source</a>.</p>\n<h2 id=\"web\"><a class=\"header\" href=\"#web\">Web</a></h2>\n<p>Not supported at this time. See our <a href=\"https://github.com/zed-industries/zed/issues/5391\">Platform Support issue</a>.</p>\n\n</main>",
    "content_text": "System Requirements\nApple\nmacOS\nZed supports the follow macOS releases:\nVersionCodenameApple StatusZed Status\nmacOS 15.xSequoiaSupportedSupported\nmacOS 14.xSonomaSupportedSupported\nmacOS 13.xVenturaSupportedSupported\nmacOS 12.xMontereyEOL 2024-09-16Supported\nmacOS 11.xBig SurEOL 2023-09-26Partially Supported\nmacOS 10.15.xCatalinaEOL 2022-09-12Partially Supported\nmacOS 10.14.xMojaveEOL 2021-10-25Unsupported\n\n\nThe macOS releases labelled \"Partially Supported\" (Big Sur and Catalina) do not support screen sharing via Zed Collaboration. These features use the LiveKit SDK which relies upon ScreenCaptureKit.framework only available on macOS 12 (Monterey) and newer.\nMac Hardware\nZed supports machines with Intel (x86_64) or Apple (aarch64) processors that meet the above macOS requirements:\n\nMacBook Pro (Early 2015 and newer)\nMacBook Air (Early 2015 and newer)\nMacBook (Early 2016 and newer)\nMac Mini (Late 2014 and newer)\nMac Pro (Late 2013 or newer)\niMac (Late 2015 and newer)\niMac Pro (all models)\nMac Studio (all models)\n\nLinux\nZed supports 64bit Intel/AMD (x86_64) and 64Bit ARM (aarch64) processors.\nZed requires a Vulkan 1.3 driver, and the following desktop portals:\n\norg.freedesktop.portal.FileChooser\norg.freedesktop.portal.OpenURI\norg.freedesktop.portal.Secret, or org.freedesktop.Secrets\n\nWindows\nNot yet available as an official download. Can be built from source.\nFreeBSD\nNot yet available as an official download. Can be built from source.\nWeb\nNot supported at this time. See our Platform Support issue.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:10:58"
  },
  "accounts.html": {
    "url": "https://zed.dev/docs/accounts.html",
    "title": "Accounts | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"accounts\"><a class=\"header\" href=\"#accounts\">Accounts</a></h1>\n<p>Signing in to Zed is not a requirement. You can use most features you'd expect in a code editor without ever doing so. We'll outline the few features that do require signing in, and how to do so, here.</p>\n<h2 id=\"what-features-require-signing-in\"><a class=\"header\" href=\"#what-features-require-signing-in\">What Features Require Signing In?</a></h2>\n<ol>\n<li>All real-time <a href=\"./collaboration.html\">collaboration features</a>.</li>\n<li><a href=\"./ai/overview.html\">LLM-powered features</a>, if you are using Zed as the provider of your LLM models. Alternatively, you can <a href=\"./ai/llm-providers.html#use-your-own-keys\">bring and configure your own API keys</a> if you'd prefer, and avoid having to sign in.</li>\n</ol>\n<h2 id=\"signing-in\"><a class=\"header\" href=\"#signing-in\">Signing In</a></h2>\n<p>Zed uses GitHub's OAuth flow to authenticate users, requiring only the <code>read:user</code> GitHub scope, which grants read-only access to your GitHub profile information.</p>\n<ol>\n<li>Open Zed and click the <code>Sign In</code> button in the top-right corner of the window, or run the <code>client: sign in</code> command from the command palette (<code>cmd-shift-p</code> on macOS or <code>ctrl-shift-p</code> on Windows/Linux).</li>\n<li>Your default web browser will open to the Zed sign-in page.</li>\n<li>Authenticate with your GitHub account when prompted.</li>\n<li>After successful authentication, your browser will display a confirmation, and you'll be automatically signed in to Zed.</li>\n</ol>\n<p><strong>Note</strong>: If you're behind a corporate firewall, ensure that connections to <code>zed.dev</code> and <code>collab.zed.dev</code> are allowed.</p>\n<h2 id=\"signing-out\"><a class=\"header\" href=\"#signing-out\">Signing Out</a></h2>\n<p>To sign out of Zed, you can use either of these methods:</p>\n<ul>\n<li>Click on the profile icon in the upper right corner and select <code>Sign Out</code> from the dropdown menu.</li>\n<li>Open the command palette and run the <code>client: sign out</code> command.</li>\n</ul>\n<h2 id=\"email\"><a class=\"header\" href=\"#email\">Email Addresses</a></h2>\n<p>Your Zed account's email address is the address provided by GitHub OAuth. If you have a public email address then it will be used, otherwise your primary GitHub email address will be used. Changes to your email address on GitHub can be synced to your Zed account by <a href=\"https://zed.dev/sign_in\">signing in to zed.dev</a>.</p>\n<p>Stripe is used for billing, and will use your Zed account's email address when starting a subscription. Changes to your Zed account email address do not currently update the email address used in Stripe. See <a href=\"./ai/billing.html#updating-billing-info\">Updating Billing Information</a> for how to change this email address.</p>\n<h2 id=\"hiding-sign-in-button-from-the-interface\"><a class=\"header\" href=\"#hiding-sign-in-button-from-the-interface\">Hiding Sign In button from the interface</a></h2>\n<p>In case the Sign In feature is not used, it's possible to hide that from the interface by using <code>show_sign_in</code> settings property.\nRefer to <a href=\"./visual-customization.html\">Visual Customization page</a> for more details.</p>\n\n</main>",
    "content_text": "Accounts\nSigning in to Zed is not a requirement. You can use most features you'd expect in a code editor without ever doing so. We'll outline the few features that do require signing in, and how to do so, here.\nWhat Features Require Signing In?\n\nAll real-time collaboration features.\nLLM-powered features, if you are using Zed as the provider of your LLM models. Alternatively, you can bring and configure your own API keys if you'd prefer, and avoid having to sign in.\n\nSigning In\nZed uses GitHub's OAuth flow to authenticate users, requiring only the read:user GitHub scope, which grants read-only access to your GitHub profile information.\n\nOpen Zed and click the Sign In button in the top-right corner of the window, or run the client: sign in command from the command palette (cmd-shift-p on macOS or ctrl-shift-p on Windows/Linux).\nYour default web browser will open to the Zed sign-in page.\nAuthenticate with your GitHub account when prompted.\nAfter successful authentication, your browser will display a confirmation, and you'll be automatically signed in to Zed.\n\nNote: If you're behind a corporate firewall, ensure that connections to zed.dev and collab.zed.dev are allowed.\nSigning Out\nTo sign out of Zed, you can use either of these methods:\n\nClick on the profile icon in the upper right corner and select Sign Out from the dropdown menu.\nOpen the command palette and run the client: sign out command.\n\nEmail Addresses\nYour Zed account's email address is the address provided by GitHub OAuth. If you have a public email address then it will be used, otherwise your primary GitHub email address will be used. Changes to your email address on GitHub can be synced to your Zed account by signing in to zed.dev.\nStripe is used for billing, and will use your Zed account's email address when starting a subscription. Changes to your Zed account email address do not currently update the email address used in Stripe. See Updating Billing Information for how to change this email address.\nHiding Sign In button from the interface\nIn case the Sign In feature is not used, it's possible to hide that from the interface by using show_sign_in settings property.\nRefer to Visual Customization page for more details.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:00"
  },
  "linux.html": {
    "url": "https://zed.dev/docs/linux.html",
    "title": "Linux | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zed-on-linux\"><a class=\"header\" href=\"#zed-on-linux\">Zed on Linux</a></h1>\n<h2 id=\"standard-installation\"><a class=\"header\" href=\"#standard-installation\">Standard Installation</a></h2>\n<p>For most people we recommend using the script on the <a href=\"https://zed.dev/download\">download</a> page to install Zed:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | sh\n</code></pre>\n<p>We also offer a preview build of Zed which receives updates about a week ahead of stable. You can install it with:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n</code></pre>\n<p>The Zed installed by the script works best on systems that:</p>\n<ul>\n<li>have a Vulkan compatible GPU available (for example Linux on an M-series macBook)</li>\n<li>have a system-wide glibc (NixOS and Alpine do not by default)\n<ul>\n<li>x86_64 (Intel/AMD): glibc version &gt;= 2.31 (Ubuntu 20 and newer)</li>\n<li>aarch64 (ARM): glibc version &gt;= 2.35 (Ubuntu 22 and newer)</li>\n</ul>\n</li>\n</ul>\n<p>Both Nix and Alpine have third-party Zed packages available (though they are currently a few weeks out of date). If you'd like to use our builds they do work if you install a glibc compatibility layer. On NixOS you can try <a href=\"https://github.com/Mic92/nix-ld\">nix-ld</a>, and on Alpine <a href=\"https://wiki.alpinelinux.org/wiki/Running_glibc_programs\">gcompat</a>.</p>\n<p>You will need to build from source for:</p>\n<ul>\n<li>architectures other than 64-bit Intel or 64-bit ARM (for example a 32-bit or RISC-V machine)</li>\n<li>Redhat Enterprise Linux 8.x, Rocky Linux 8, AlmaLinux 8, Amazon Linux 2 on all architectures</li>\n<li>Redhat Enterprise Linux 9.x, Rocky Linux 9.3, AlmaLinux 8, Amazon Linux 2023 on aarch64 (x86_x64 OK)</li>\n</ul>\n<h2 id=\"other-ways-to-install-zed-on-linux\"><a class=\"header\" href=\"#other-ways-to-install-zed-on-linux\">Other ways to install Zed on Linux</a></h2>\n<p>Zed is open source, and <a href=\"./development/linux.html\">you can install from source</a>.</p>\n<h3 id=\"installing-via-a-package-manager\"><a class=\"header\" href=\"#installing-via-a-package-manager\">Installing via a package manager</a></h3>\n<p>There are several third-party Zed packages for various Linux distributions and package managers, sometimes under <code>zed-editor</code>. You may be able to install Zed using these packages:</p>\n<ul>\n<li>Flathub: <a href=\"https://flathub.org/apps/dev.zed.Zed\"><code>dev.zed.Zed</code></a></li>\n<li>Arch: <a href=\"https://archlinux.org/packages/extra/x86_64/zed/\"><code>zed</code></a></li>\n<li>Arch (AUR): <a href=\"https://aur.archlinux.org/packages/zed-git\"><code>zed-git</code></a>, <a href=\"https://aur.archlinux.org/packages/zed-preview\"><code>zed-preview</code></a>, <a href=\"https://aur.archlinux.org/packages/zed-preview-bin\"><code>zed-preview-bin</code></a></li>\n<li>Alpine: <code>zed</code> (<a href=\"https://pkgs.alpinelinux.org/package/edge/testing/aarch64/zed\">aarch64</a>) (<a href=\"https://pkgs.alpinelinux.org/package/edge/testing/x86_64/zed\">x86_64</a>)</li>\n<li>Nix: <code>zed-editor</code> (<a href=\"https://search.nixos.org/packages?channel=unstable&amp;show=zed-editor\">unstable</a>)</li>\n<li>Fedora/Ultramarine (Terra): <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/stable\"><code>zed</code></a>, <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/preview\"><code>zed-preview</code></a>, <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/nightly\"><code>zed-nightly</code></a></li>\n<li>Solus: <a href=\"https://github.com/getsolus/packages/tree/main/packages/z/zed\"><code>zed</code></a></li>\n<li>Parabola: <a href=\"https://www.parabola.nu/packages/extra/x86_64/zed/\"><code>zed</code></a></li>\n<li>Manjaro: <a href=\"https://packages.manjaro.org/?query=zed\"><code>zed</code></a></li>\n<li>ALT Linux (Sisyphus): <a href=\"https://packages.altlinux.org/en/sisyphus/srpms/zed/\"><code>zed</code></a></li>\n<li>AOSC OS: <a href=\"https://packages.aosc.io/packages/zed\"><code>zed</code></a></li>\n</ul>\n<p>See <a href=\"https://repology.org/project/zed-editor/versions\">Repology</a> for a list of Zed packages in various repositories.</p>\n<p>When installing a third-party package please be aware that it may not be completely up to date and may be slightly different from the Zed we package (a common change is to rename the binary to <code>zedit</code> or <code>zeditor</code> to avoid conflicting with other packages).</p>\n<p>We'd love your help making Zed available for everyone. If Zed is not yet available for your package manager, and you would like to fix that, we have some notes on <a href=\"./development/linux.html#notes-for-packaging-zed\">how to do it</a>.</p>\n<h3 id=\"downloading-manually\"><a class=\"header\" href=\"#downloading-manually\">Downloading manually</a></h3>\n<p>If you'd prefer, you can install Zed by downloading our pre-built .tar.gz. This is the same artifact that our install script uses, but you can customize the location of your installation by modifying the instructions below:</p>\n<p>Download the <code>.tar.gz</code> file:</p>\n<ul>\n<li><a href=\"https://zed.dev/api/releases/stable/latest/zed-linux-x86_64.tar.gz\">zed-linux-x86_64.tar.gz</a> (<a href=\"https://zed.dev/api/releases/preview/latest/zed-linux-x86_64.tar.gz\">preview</a>)</li>\n<li><a href=\"https://zed.dev/api/releases/stable/latest/zed-linux-aarch64.tar.gz\">zed-linux-aarch64.tar.gz</a>\n(<a href=\"https://zed.dev/api/releases/preview/latest/zed-linux-aarch64.tar.gz\">preview</a>)</li>\n</ul>\n<p>Then ensure that the <code>zed</code> binary in the tarball is on your path. The easiest way is to unpack the tarball and create a symlink:</p>\n<pre><code class=\"language-sh\">mkdir -p ~/.local\n# extract zed to ~/.local/zed.app/\ntar -xvf &lt;path/to/download&gt;.tar.gz -C ~/.local\n# link the zed binary to ~/.local/bin (or another directory in your $PATH)\nln -sf ~/.local/zed.app/bin/zed ~/.local/bin/zed\n</code></pre>\n<p>If you'd like integration with an XDG-compatible desktop environment, you will also need to install the <code>.desktop</code> file:</p>\n<pre><code class=\"language-sh\">cp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g\" ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g\" ~/.local/share/applications/dev.zed.Zed.desktop\n</code></pre>\n<h2 id=\"uninstalling-zed\"><a class=\"header\" href=\"#uninstalling-zed\">Uninstalling Zed</a></h2>\n<h3 id=\"standard-uninstall\"><a class=\"header\" href=\"#standard-uninstall\">Standard Uninstall</a></h3>\n<p>If Zed was installed using the default installation script, it can be uninstalled by supplying the <code>--uninstall</code> flag to the <code>zed</code> shell command</p>\n<pre><code class=\"language-sh\">zed --uninstall\n</code></pre>\n<p>If there are no errors, the shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.</p>\n<p>In the case that the <code>zed</code> shell command was not found in your PATH, you can try one of the following commands</p>\n<pre><code class=\"language-sh\">$HOME/.local/bin/zed --uninstall\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-sh\">$HOME/.local/zed.app/bin.zed --uninstall\n</code></pre>\n<p>The first case might fail if a symlink was not properly established between <code>$HOME/.local/bin/zed</code> and <code>$HOME/.local/zed.app/bin.zed</code>. But the second case should work as long as Zed was installed to its default location.</p>\n<p>If Zed was installed to a different location, you must invoke the <code>zed</code> binary stored in that installation directory and pass the <code>--uninstall</code> flag to it in the same format as the previous commands.</p>\n<h3 id=\"package-manager\"><a class=\"header\" href=\"#package-manager\">Package Manager</a></h3>\n<p>If Zed was installed using a package manager, please consult the documentation for that package manager on how to uninstall a package.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<p>Linux works on a large variety of systems configured in many different ways. We primarily test Zed on a vanilla Ubuntu setup, as it is the most common distribution our users use, that said we do expect it to work on a wide variety of machines.</p>\n<h3 id=\"zed-fails-to-start\"><a class=\"header\" href=\"#zed-fails-to-start\">Zed fails to start</a></h3>\n<p>If you see an error like \"/lib64/libc.so.6: version 'GLIBC_2.29' not found\" it means that your distribution's version of glibc is too old. You can either upgrade your system, or <a href=\"./development/linux.html\">install Zed from source</a>.</p>\n<h3 id=\"graphics-issues\"><a class=\"header\" href=\"#graphics-issues\">Graphics issues</a></h3>\n<h4 id=\"zed-fails-to-open-windows\"><a class=\"header\" href=\"#zed-fails-to-open-windows\">Zed fails to open windows</a></h4>\n<p>Zed requires a GPU to run effectively. Under the hood, we use <a href=\"https://www.vulkan.org/\">Vulkan</a> to communicate with your GPU. If you are seeing problems with performance, or Zed fails to load, it is possible that Vulkan is the culprit.</p>\n<p>If you see a notification saying <code>Zed failed to open a window: NoSupportedDeviceFound</code> this means that Vulkan cannot find a compatible GPU. you can try running <a href=\"https://github.com/krh/vkcube\">vkcube</a> (usually available as part of the <code>vulkaninfo</code> or <code>vulkan-tools</code> package on various distributions) to try to troubleshoot where the issue is coming from like so:</p>\n<pre><code>vkcube\n</code></pre>\n<blockquote>\n<p><strong><em>Note</em></strong>: Try running in both X11 and wayland modes by running <code>vkcube -m [x11|wayland]</code>. Some versions of <code>vkcube</code> use <code>vkcube</code> to run in X11 and <code>vkcube-wayland</code> to run in wayland.</p>\n</blockquote>\n<p>This should output a line describing your current graphics setup and show a rotating cube. If this does not work, you should be able to fix it by installing Vulkan compatible GPU drivers, however in some cases (for example running Linux on an Arm-based MacBook) there is no Vulkan support yet.</p>\n<p>You can find out which graphics card Zed is using by looking in the Zed log (<code>~/.local/share/zed/logs/Zed.log</code>) for <code>Using GPU: ...</code>.</p>\n<p>If you see errors like <code>ERROR_INITIALIZATION_FAILED</code> or <code>GPU Crashed</code> or <code>ERROR_SURFACE_LOST_KHR</code> then you may be able to work around this by installing different drivers for your GPU, or by selecting a different GPU to run on. (See <a href=\"https://github.com/zed-industries/zed/issues/14225\">#14225</a>)</p>\n<p>On some systems the file <code>/etc/prime-discrete</code> can be used to enforce the use of a discrete GPU using <a href=\"https://wiki.archlinux.org/title/PRIME\">PRIME</a>. Depending on the details of your setup, you may need to change the contents of this file to \"on\" (to force discrete graphics) or \"off\" (to force integrated graphics).</p>\n<p>On others, you may be able to the environment variable <code>DRI_PRIME=1</code> when running Zed to force the use of the discrete GPU.</p>\n<p>If you're using an AMD GPU and Zed crashes when selecting long lines, try setting the <code>ZED_PATH_SAMPLE_COUNT=0</code> environment variable. (See <a href=\"https://github.com/zed-industries/zed/issues/26143\">#26143</a>)</p>\n<p>If you're using an AMD GPU, you might get a 'Broken Pipe' error. Try using the RADV or Mesa drivers. (See <a href=\"https://github.com/zed-industries/zed/issues/13880\">#13880</a>)</p>\n<p>If you are using <code>amdvlk</code> you may find that zed only opens when run with <code>sudo $(which zed)</code>. To fix this, remove the <code>amdvlk</code> and <code>lib32-amdvlk</code> packages and install mesa/vulkan instead. (<a href=\"https://github.com/zed-industries/zed/issues/14141\">#14141</a>).</p>\n<p>For more information, the <a href=\"https://wiki.archlinux.org/title/Vulkan\">Arch guide to Vulkan</a> has some good steps that translate well to most distributions.</p>\n<h4 id=\"forcing-zed-to-use-a-specific-gpu\"><a class=\"header\" href=\"#forcing-zed-to-use-a-specific-gpu\">Forcing Zed to use a specific GPU</a></h4>\n<p>There are a few different ways to force Zed to use a specific GPU:</p>\n<h5 id=\"option-a\"><a class=\"header\" href=\"#option-a\">Option A</a></h5>\n<p>You can use the <code>ZED_DEVICE_ID={device_id}</code> environment variable to specify the device ID of the GPU you wish to have Zed use.</p>\n<p>You can obtain the device ID of your GPU by running <code>lspci -nn | grep VGA</code> which will output each GPU on one line like:</p>\n<pre><code>08:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA104 [GeForce RTX 3070] [10de:2484] (rev a1)\n</code></pre>\n<p>where the device ID here is <code>2484</code>. This value is in hexadecimal, so to force Zed to use this specific GPU you would set the environment variable like so:</p>\n<pre><code>ZED_DEVICE_ID=0x2484 zed\n</code></pre>\n<p>Make sure to export the variable if you choose to define it globally in a <code>.bashrc</code> or similar.</p>\n<h5 id=\"option-b\"><a class=\"header\" href=\"#option-b\">Option B</a></h5>\n<p>If you are using Mesa, you can run <code>MESA_VK_DEVICE_SELECT=list zed --foreground</code> to get a list of available GPUs and then export <code>MESA_VK_DEVICE_SELECT=xxxx:yyyy</code> to choose a specific device.</p>\n<h5 id=\"option-c\"><a class=\"header\" href=\"#option-c\">Option C</a></h5>\n<p>Using <a href=\"https://github.com/jiriks74/vkdevicechooser\">vkdevicechooser</a>.</p>\n<h4 id=\"reporting-graphics-issues\"><a class=\"header\" href=\"#reporting-graphics-issues\">Reporting graphics issues</a></h4>\n<p>If Vulkan is configured correctly, and Zed is still not working for you, please <a href=\"https://github.com/zed-industries/zed\">file an issue</a> with as much information as possible.</p>\n<p>When reporting issues where Zed fails to start due to graphics initialization errors on GitHub, it can be impossible to run the <code>zed: copy system specs into clipboard</code> command like we instruct you to in our issue template. We provide an alternative way to collect the system specs specifically for this situation.</p>\n<p>Passing the <code>--system-specs</code> flag to Zed like</p>\n<pre><code class=\"language-sh\">zed --system-specs\n</code></pre>\n<p>will print the system specs to the terminal like so. It is strongly recommended to copy the output verbatim into the issue on GitHub, as it uses markdown formatting to ensure the output is readable.</p>\n<p>Additionally, it is extremely beneficial to provide the contents of your Zed log when reporting such issues. The log is usually located at <code>~/.local/share/zed/logs/Zed.log</code>. The recommended process for producing a helpful log file is as follows:</p>\n<pre><code class=\"language-sh\">truncate -s 0 ~/.local/share/zed/logs/Zed.log # Clear the log file\nZED_LOG=blade_graphics=info zed .\ncat ~/.local/share/zed/logs/Zed.log\n# copy the output\n</code></pre>\n<p>Or, if you have the Zed cli setup, you can do</p>\n<pre><code class=\"language-sh\">ZED_LOG=blade_graphics=info /path/to/zed/cli --foreground .\n# copy the output\n</code></pre>\n<p>It is also highly recommended when pasting the log into a github issue, to do so with the following template:</p>\n<blockquote>\n<p><strong><em>Note</em></strong>: The whitespace in the template is important, and will cause incorrect formatting if not preserved.</p>\n</blockquote>\n<pre><code>&lt;details&gt;&lt;summary&gt;Zed Log&lt;/summary&gt;\n\n```\n{zed log contents}\n```\n\n&lt;/details&gt;\n</code></pre>\n<p>This will cause the logs to be collapsed by default, making it easier to read the issue.</p>\n<h3 id=\"i-cant-open-any-files\"><a class=\"header\" href=\"#i-cant-open-any-files\">I can't open any files</a></h3>\n<h3 id=\"clicking-links-isnt-working\"><a class=\"header\" href=\"#clicking-links-isnt-working\">Clicking links isn't working</a></h3>\n<p>These features are provided by XDG desktop portals, specifically:</p>\n<ul>\n<li><code>org.freedesktop.portal.FileChooser</code></li>\n<li><code>org.freedesktop.portal.OpenURI</code></li>\n</ul>\n<p>Some window managers, such as <code>Hyprland</code>, don't provide a file picker by default. See <a href=\"https://wiki.archlinux.org/title/XDG_Desktop_Portal#List_of_backends_and_interfaces\">this list</a> as a starting point for alternatives.</p>\n<h3 id=\"zed-isnt-remembering-my-api-keys\"><a class=\"header\" href=\"#zed-isnt-remembering-my-api-keys\">Zed isn't remembering my API keys</a></h3>\n<h3 id=\"zed-isnt-remembering-my-login\"><a class=\"header\" href=\"#zed-isnt-remembering-my-login\">Zed isn't remembering my login</a></h3>\n<p>These feature also requires XDG desktop portals, specifically:</p>\n<ul>\n<li><code>org.freedesktop.portal.Secret</code> or</li>\n<li><code>org.freedesktop.Secrets</code></li>\n</ul>\n<p>Zed needs a place to securely store secrets such as your Zed login cookie or your OpenAI API Keys and we use a system provided keychain to do this. Examples of packages that provide this are <code>gnome-keyring</code>, <code>KWallet</code> and <code>keepassxc</code> among others.</p>\n<h3 id=\"could-not-start-inotify\"><a class=\"header\" href=\"#could-not-start-inotify\">Could not start inotify</a></h3>\n<p>Zed relies on inotify to watch your filesystem for changes. If you cannot start inotify then Zed will not work reliably.</p>\n<p>If you are seeing \"too many open files\" then first try <code>sysctl fs.inotify</code>.</p>\n<ul>\n<li>You should see that max_user_instances is 128 or higher (you can change the limit with <code>sudo sysctl fs.inotify.max_user_instances=1024</code>). Zed needs only 1 inotify instance.</li>\n<li>You should see that <code>max_user_watches</code> is 8000 or higher (you can change the limit with <code>sudo sysctl fs.inotify.max_user_watches=64000</code>). Zed needs one watch per directory in all your open projects + one per git repository + a handful more for settings, themes, keymaps, extensions.</li>\n</ul>\n<p>It is also possible that you are running out of file descriptors. You can check the limits with <code>ulimit</code> and update them by editing <code>/etc/security/limits.conf</code>.</p>\n<h3 id=\"no-sound-or-wrong-output-device\"><a class=\"header\" href=\"#no-sound-or-wrong-output-device\">No sound or wrong output device</a></h3>\n<p>If you're not hearing any sound in Zed or the audio is routed to the wrong device, it could be due to a mismatch between audio systems. Zed relies on ALSA, while your system may be using PipeWire or PulseAudio. To resolve this, you need to configure ALSA to route audio through PipeWire/PulseAudio.</p>\n<p>If your system uses PipeWire:</p>\n<ol>\n<li>\n<p><strong>Install the PipeWire ALSA plugin</strong></p>\n<p>On Debian-based systems, run:</p>\n<pre><code class=\"language-bash\">sudo apt install pipewire-alsa\n</code></pre>\n</li>\n<li>\n<p><strong>Configure ALSA to use PipeWire</strong></p>\n<p>Add the following configuration to your ALSA settings file. You can use either <code>~/.asoundrc</code> (user-level) or <code>/etc/asound.conf</code> (system-wide):</p>\n<pre><code class=\"language-bash\">pcm.!default {\n    type pipewire\n}\n\nctl.!default {\n    type pipewire\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Restart your system</strong></p>\n</li>\n</ol>\n<h3 id=\"forcing-x11-scale-factor\"><a class=\"header\" href=\"#forcing-x11-scale-factor\">Forcing X11 scale factor</a></h3>\n<p>On X11 systems, Zed automatically detects the appropriate scale factor for high-DPI displays. The scale factor is determined using the following priority order:</p>\n<ol>\n<li><code>GPUI_X11_SCALE_FACTOR</code> environment variable (if set)</li>\n<li><code>Xft.dpi</code> from X resources database (xrdb)</li>\n<li>Automatic detection via RandR based on monitor resolution and physical size</li>\n</ol>\n<p>If you want to customize the scale factor beyond what Zed detects automatically, you have several options:</p>\n<h4 id=\"check-your-current-scale-factor\"><a class=\"header\" href=\"#check-your-current-scale-factor\">Check your current scale factor</a></h4>\n<p>You can verify if you have <code>Xft.dpi</code> set:</p>\n<pre><code class=\"language-sh\">xrdb -query | grep Xft.dpi\n</code></pre>\n<p>If this command returns no output, Zed is using RandR (X11's monitor management extension) to automatically calculate the scale factor based on your monitor's reported resolution and physical dimensions.</p>\n<h4 id=\"option-1-set-xftdpi-x-resources-database\"><a class=\"header\" href=\"#option-1-set-xftdpi-x-resources-database\">Option 1: Set Xft.dpi (X Resources Database)</a></h4>\n<p><code>Xft.dpi</code> is a standard X11 setting that many applications use for consistent font and UI scaling. Setting this ensures Zed scales the same way as other X11 applications that respect this setting.</p>\n<p>Edit or create the <code>~/.Xresources</code> file:</p>\n<pre><code class=\"language-sh\">vim ~/.Xresources\n</code></pre>\n<p>Add this line with your desired DPI:</p>\n<pre><code class=\"language-sh\">Xft.dpi: 96\n</code></pre>\n<p>Common DPI values:</p>\n<ul>\n<li><code>96</code> for standard 1x scaling</li>\n<li><code>144</code> for 1.5x scaling</li>\n<li><code>192</code> for 2x scaling</li>\n<li><code>288</code> for 3x scaling</li>\n</ul>\n<p>Load the configuration:</p>\n<pre><code class=\"language-sh\">xrdb -merge ~/.Xresources\n</code></pre>\n<p>Restart Zed for the changes to take effect.</p>\n<h4 id=\"option-2-use-the-gpui_x11_scale_factor-environment-variable\"><a class=\"header\" href=\"#option-2-use-the-gpui_x11_scale_factor-environment-variable\">Option 2: Use the GPUI_X11_SCALE_FACTOR environment variable</a></h4>\n<p>This Zed-specific environment variable directly sets the scale factor, bypassing all automatic detection.</p>\n<pre><code class=\"language-sh\">GPUI_X11_SCALE_FACTOR=1.5 zed\n</code></pre>\n<p>You can use decimal values (e.g., <code>1.25</code>, <code>1.5</code>, <code>2.0</code>) or set <code>GPUI_X11_SCALE_FACTOR=randr</code> to force RandR-based detection even when <code>Xft.dpi</code> is set.</p>\n<p>To make this permanent, add it to your shell profile or desktop entry.</p>\n<h4 id=\"option-3-adjust-system-wide-randr-dpi\"><a class=\"header\" href=\"#option-3-adjust-system-wide-randr-dpi\">Option 3: Adjust system-wide RandR DPI</a></h4>\n<p>This changes the reported DPI for your entire X11 session, affecting how RandR calculates scaling for all applications that use it.</p>\n<p>Add this to your <code>.xprofile</code> or <code>.xinitrc</code>:</p>\n<pre><code class=\"language-sh\">xrandr --dpi 192\n</code></pre>\n<p>Replace <code>192</code> with your desired DPI value. This affects the system globally and will be used by Zed's automatic RandR detection when <code>Xft.dpi</code> is not set.</p>\n\n</main>",
    "content_text": "Zed on Linux\nStandard Installation\nFor most people we recommend using the script on the download page to install Zed:\ncurl -f https://zed.dev/install.sh | sh\n\nWe also offer a preview build of Zed which receives updates about a week ahead of stable. You can install it with:\ncurl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n\nThe Zed installed by the script works best on systems that:\n\nhave a Vulkan compatible GPU available (for example Linux on an M-series macBook)\nhave a system-wide glibc (NixOS and Alpine do not by default)\n\nx86_64 (Intel/AMD): glibc version >= 2.31 (Ubuntu 20 and newer)\naarch64 (ARM): glibc version >= 2.35 (Ubuntu 22 and newer)\n\n\n\nBoth Nix and Alpine have third-party Zed packages available (though they are currently a few weeks out of date). If you'd like to use our builds they do work if you install a glibc compatibility layer. On NixOS you can try nix-ld, and on Alpine gcompat.\nYou will need to build from source for:\n\narchitectures other than 64-bit Intel or 64-bit ARM (for example a 32-bit or RISC-V machine)\nRedhat Enterprise Linux 8.x, Rocky Linux 8, AlmaLinux 8, Amazon Linux 2 on all architectures\nRedhat Enterprise Linux 9.x, Rocky Linux 9.3, AlmaLinux 8, Amazon Linux 2023 on aarch64 (x86_x64 OK)\n\nOther ways to install Zed on Linux\nZed is open source, and you can install from source.\nInstalling via a package manager\nThere are several third-party Zed packages for various Linux distributions and package managers, sometimes under zed-editor. You may be able to install Zed using these packages:\n\nFlathub: dev.zed.Zed\nArch: zed\nArch (AUR): zed-git, zed-preview, zed-preview-bin\nAlpine: zed (aarch64) (x86_64)\nNix: zed-editor (unstable)\nFedora/Ultramarine (Terra): zed, zed-preview, zed-nightly\nSolus: zed\nParabola: zed\nManjaro: zed\nALT Linux (Sisyphus): zed\nAOSC OS: zed\n\nSee Repology for a list of Zed packages in various repositories.\nWhen installing a third-party package please be aware that it may not be completely up to date and may be slightly different from the Zed we package (a common change is to rename the binary to zedit or zeditor to avoid conflicting with other packages).\nWe'd love your help making Zed available for everyone. If Zed is not yet available for your package manager, and you would like to fix that, we have some notes on how to do it.\nDownloading manually\nIf you'd prefer, you can install Zed by downloading our pre-built .tar.gz. This is the same artifact that our install script uses, but you can customize the location of your installation by modifying the instructions below:\nDownload the .tar.gz file:\n\nzed-linux-x86_64.tar.gz (preview)\nzed-linux-aarch64.tar.gz\n(preview)\n\nThen ensure that the zed binary in the tarball is on your path. The easiest way is to unpack the tarball and create a symlink:\nmkdir -p ~/.local\n# extract zed to ~/.local/zed.app/\ntar -xvf <path/to/download>.tar.gz -C ~/.local\n# link the zed binary to ~/.local/bin (or another directory in your $PATH)\nln -sf ~/.local/zed.app/bin/zed ~/.local/bin/zed\n\nIf you'd like integration with an XDG-compatible desktop environment, you will also need to install the .desktop file:\ncp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g\" ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g\" ~/.local/share/applications/dev.zed.Zed.desktop\n\nUninstalling Zed\nStandard Uninstall\nIf Zed was installed using the default installation script, it can be uninstalled by supplying the --uninstall flag to the zed shell command\nzed --uninstall\n\nIf there are no errors, the shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.\nIn the case that the zed shell command was not found in your PATH, you can try one of the following commands\n$HOME/.local/bin/zed --uninstall\n\nor\n$HOME/.local/zed.app/bin.zed --uninstall\n\nThe first case might fail if a symlink was not properly established between $HOME/.local/bin/zed and $HOME/.local/zed.app/bin.zed. But the second case should work as long as Zed was installed to its default location.\nIf Zed was installed to a different location, you must invoke the zed binary stored in that installation directory and pass the --uninstall flag to it in the same format as the previous commands.\nPackage Manager\nIf Zed was installed using a package manager, please consult the documentation for that package manager on how to uninstall a package.\nTroubleshooting\nLinux works on a large variety of systems configured in many different ways. We primarily test Zed on a vanilla Ubuntu setup, as it is the most common distribution our users use, that said we do expect it to work on a wide variety of machines.\nZed fails to start\nIf you see an error like \"/lib64/libc.so.6: version 'GLIBC_2.29' not found\" it means that your distribution's version of glibc is too old. You can either upgrade your system, or install Zed from source.\nGraphics issues\nZed fails to open windows\nZed requires a GPU to run effectively. Under the hood, we use Vulkan to communicate with your GPU. If you are seeing problems with performance, or Zed fails to load, it is possible that Vulkan is the culprit.\nIf you see a notification saying Zed failed to open a window: NoSupportedDeviceFound this means that Vulkan cannot find a compatible GPU. you can try running vkcube (usually available as part of the vulkaninfo or vulkan-tools package on various distributions) to try to troubleshoot where the issue is coming from like so:\nvkcube\n\n\nNote: Try running in both X11 and wayland modes by running vkcube -m [x11|wayland]. Some versions of vkcube use vkcube to run in X11 and vkcube-wayland to run in wayland.\n\nThis should output a line describing your current graphics setup and show a rotating cube. If this does not work, you should be able to fix it by installing Vulkan compatible GPU drivers, however in some cases (for example running Linux on an Arm-based MacBook) there is no Vulkan support yet.\nYou can find out which graphics card Zed is using by looking in the Zed log (~/.local/share/zed/logs/Zed.log) for Using GPU: ....\nIf you see errors like ERROR_INITIALIZATION_FAILED or GPU Crashed or ERROR_SURFACE_LOST_KHR then you may be able to work around this by installing different drivers for your GPU, or by selecting a different GPU to run on. (See #14225)\nOn some systems the file /etc/prime-discrete can be used to enforce the use of a discrete GPU using PRIME. Depending on the details of your setup, you may need to change the contents of this file to \"on\" (to force discrete graphics) or \"off\" (to force integrated graphics).\nOn others, you may be able to the environment variable DRI_PRIME=1 when running Zed to force the use of the discrete GPU.\nIf you're using an AMD GPU and Zed crashes when selecting long lines, try setting the ZED_PATH_SAMPLE_COUNT=0 environment variable. (See #26143)\nIf you're using an AMD GPU, you might get a 'Broken Pipe' error. Try using the RADV or Mesa drivers. (See #13880)\nIf you are using amdvlk you may find that zed only opens when run with sudo $(which zed). To fix this, remove the amdvlk and lib32-amdvlk packages and install mesa/vulkan instead. (#14141).\nFor more information, the Arch guide to Vulkan has some good steps that translate well to most distributions.\nForcing Zed to use a specific GPU\nThere are a few different ways to force Zed to use a specific GPU:\nOption A\nYou can use the ZED_DEVICE_ID={device_id} environment variable to specify the device ID of the GPU you wish to have Zed use.\nYou can obtain the device ID of your GPU by running lspci -nn | grep VGA which will output each GPU on one line like:\n08:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA104 [GeForce RTX 3070] [10de:2484] (rev a1)\n\nwhere the device ID here is 2484. This value is in hexadecimal, so to force Zed to use this specific GPU you would set the environment variable like so:\nZED_DEVICE_ID=0x2484 zed\n\nMake sure to export the variable if you choose to define it globally in a .bashrc or similar.\nOption B\nIf you are using Mesa, you can run MESA_VK_DEVICE_SELECT=list zed --foreground to get a list of available GPUs and then export MESA_VK_DEVICE_SELECT=xxxx:yyyy to choose a specific device.\nOption C\nUsing vkdevicechooser.\nReporting graphics issues\nIf Vulkan is configured correctly, and Zed is still not working for you, please file an issue with as much information as possible.\nWhen reporting issues where Zed fails to start due to graphics initialization errors on GitHub, it can be impossible to run the zed: copy system specs into clipboard command like we instruct you to in our issue template. We provide an alternative way to collect the system specs specifically for this situation.\nPassing the --system-specs flag to Zed like\nzed --system-specs\n\nwill print the system specs to the terminal like so. It is strongly recommended to copy the output verbatim into the issue on GitHub, as it uses markdown formatting to ensure the output is readable.\nAdditionally, it is extremely beneficial to provide the contents of your Zed log when reporting such issues. The log is usually located at ~/.local/share/zed/logs/Zed.log. The recommended process for producing a helpful log file is as follows:\ntruncate -s 0 ~/.local/share/zed/logs/Zed.log # Clear the log file\nZED_LOG=blade_graphics=info zed .\ncat ~/.local/share/zed/logs/Zed.log\n# copy the output\n\nOr, if you have the Zed cli setup, you can do\nZED_LOG=blade_graphics=info /path/to/zed/cli --foreground .\n# copy the output\n\nIt is also highly recommended when pasting the log into a github issue, to do so with the following template:\n\nNote: The whitespace in the template is important, and will cause incorrect formatting if not preserved.\n\n<details><summary>Zed Log</summary>\n\n```\n{zed log contents}\n```\n\n</details>\n\nThis will cause the logs to be collapsed by default, making it easier to read the issue.\nI can't open any files\nClicking links isn't working\nThese features are provided by XDG desktop portals, specifically:\n\norg.freedesktop.portal.FileChooser\norg.freedesktop.portal.OpenURI\n\nSome window managers, such as Hyprland, don't provide a file picker by default. See this list as a starting point for alternatives.\nZed isn't remembering my API keys\nZed isn't remembering my login\nThese feature also requires XDG desktop portals, specifically:\n\norg.freedesktop.portal.Secret or\norg.freedesktop.Secrets\n\nZed needs a place to securely store secrets such as your Zed login cookie or your OpenAI API Keys and we use a system provided keychain to do this. Examples of packages that provide this are gnome-keyring, KWallet and keepassxc among others.\nCould not start inotify\nZed relies on inotify to watch your filesystem for changes. If you cannot start inotify then Zed will not work reliably.\nIf you are seeing \"too many open files\" then first try sysctl fs.inotify.\n\nYou should see that max_user_instances is 128 or higher (you can change the limit with sudo sysctl fs.inotify.max_user_instances=1024). Zed needs only 1 inotify instance.\nYou should see that max_user_watches is 8000 or higher (you can change the limit with sudo sysctl fs.inotify.max_user_watches=64000). Zed needs one watch per directory in all your open projects + one per git repository + a handful more for settings, themes, keymaps, extensions.\n\nIt is also possible that you are running out of file descriptors. You can check the limits with ulimit and update them by editing /etc/security/limits.conf.\nNo sound or wrong output device\nIf you're not hearing any sound in Zed or the audio is routed to the wrong device, it could be due to a mismatch between audio systems. Zed relies on ALSA, while your system may be using PipeWire or PulseAudio. To resolve this, you need to configure ALSA to route audio through PipeWire/PulseAudio.\nIf your system uses PipeWire:\n\n\nInstall the PipeWire ALSA plugin\nOn Debian-based systems, run:\nsudo apt install pipewire-alsa\n\n\n\nConfigure ALSA to use PipeWire\nAdd the following configuration to your ALSA settings file. You can use either ~/.asoundrc (user-level) or /etc/asound.conf (system-wide):\npcm.!default {\n    type pipewire\n}\n\nctl.!default {\n    type pipewire\n}\n\n\n\nRestart your system\n\n\nForcing X11 scale factor\nOn X11 systems, Zed automatically detects the appropriate scale factor for high-DPI displays. The scale factor is determined using the following priority order:\n\nGPUI_X11_SCALE_FACTOR environment variable (if set)\nXft.dpi from X resources database (xrdb)\nAutomatic detection via RandR based on monitor resolution and physical size\n\nIf you want to customize the scale factor beyond what Zed detects automatically, you have several options:\nCheck your current scale factor\nYou can verify if you have Xft.dpi set:\nxrdb -query | grep Xft.dpi\n\nIf this command returns no output, Zed is using RandR (X11's monitor management extension) to automatically calculate the scale factor based on your monitor's reported resolution and physical dimensions.\nOption 1: Set Xft.dpi (X Resources Database)\nXft.dpi is a standard X11 setting that many applications use for consistent font and UI scaling. Setting this ensures Zed scales the same way as other X11 applications that respect this setting.\nEdit or create the ~/.Xresources file:\nvim ~/.Xresources\n\nAdd this line with your desired DPI:\nXft.dpi: 96\n\nCommon DPI values:\n\n96 for standard 1x scaling\n144 for 1.5x scaling\n192 for 2x scaling\n288 for 3x scaling\n\nLoad the configuration:\nxrdb -merge ~/.Xresources\n\nRestart Zed for the changes to take effect.\nOption 2: Use the GPUI_X11_SCALE_FACTOR environment variable\nThis Zed-specific environment variable directly sets the scale factor, bypassing all automatic detection.\nGPUI_X11_SCALE_FACTOR=1.5 zed\n\nYou can use decimal values (e.g., 1.25, 1.5, 2.0) or set GPUI_X11_SCALE_FACTOR=randr to force RandR-based detection even when Xft.dpi is set.\nTo make this permanent, add it to your shell profile or desktop entry.\nOption 3: Adjust system-wide RandR DPI\nThis changes the reported DPI for your entire X11 session, affecting how RandR calculates scaling for all applications that use it.\nAdd this to your .xprofile or .xinitrc:\nxrandr --dpi 192\n\nReplace 192 with your desired DPI value. This affects the system globally and will be used by Zed's automatic RandR detection when Xft.dpi is not set.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:02"
  },
  "windows.html": {
    "url": "https://zed.dev/docs/windows.html",
    "title": "Windows | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zed-on-windows\"><a class=\"header\" href=\"#zed-on-windows\">Zed on Windows</a></h1>\n<p>Zed is not supported on Windows (yet). We have limited developer bandwidth, and a\nnew platform is a large undertaking. However, the community has developed\na build of Zed on Windows, and you can compile it yourself with these instructions:</p>\n<ul>\n<li><a href=\"./development/windows.html\">Building for Windows</a></li>\n</ul>\n<p>For now, we welcome contributions from the community to improve Windows support.</p>\n<ul>\n<li><a href=\"https://github.com/zed-industries/zed/issues?q=is%3Aissue+is%3Aopen+label%3Awindows\">GitHub Issues with 'Windows' label</a></li>\n<li><a href=\"https://zed.dev/community-links\">Zed Community Discord</a> -&gt; <code>#windows</code></li>\n</ul>\n\n</main>",
    "content_text": "Zed on Windows\nZed is not supported on Windows (yet). We have limited developer bandwidth, and a\nnew platform is a large undertaking. However, the community has developed\na build of Zed on Windows, and you can compile it yourself with these instructions:\n\nBuilding for Windows\n\nFor now, we welcome contributions from the community to improve Windows support.\n\nGitHub Issues with 'Windows' label\nZed Community Discord -> #windows",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:03"
  },
  "telemetry.html": {
    "url": "https://zed.dev/docs/telemetry.html",
    "title": "Telemetry | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"telemetry-in-zed\"><a class=\"header\" href=\"#telemetry-in-zed\">Telemetry in Zed</a></h1>\n<p>Zed collects anonymous telemetry data to help the team understand how people are using the application and to see what sort of issues they are experiencing.</p>\n<h2 id=\"configuring-telemetry-settings\"><a class=\"header\" href=\"#configuring-telemetry-settings\">Configuring Telemetry Settings</a></h2>\n<p>You have full control over what data is sent out by Zed.\nTo enable or disable some or all telemetry types, open your <code>settings.json</code> file via <code class=\"hljs\">zed: open settings</code>(<kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>) from the command palette.</p>\n<p>Insert and tweak the following:</p>\n<pre><code class=\"language-json\">\"telemetry\": {\n    \"diagnostics\": false,\n    \"metrics\": false\n},\n</code></pre>\n<h2 id=\"dataflow\"><a class=\"header\" href=\"#dataflow\">Dataflow</a></h2>\n<p>Telemetry is sent from the application to our servers. Data is proxied through our servers to enable us to easily switch analytics services. We currently use:</p>\n<ul>\n<li><a href=\"https://sentry.io\">Sentry</a>: Crash-monitoring service - stores diagnostic events</li>\n<li><a href=\"https://snowflake.com\">Snowflake</a>: Data warehouse - stores both diagnostic and metric events</li>\n<li><a href=\"https://www.hex.tech\">Hex</a>: Dashboards and data exploration - accesses data stored in Snowflake</li>\n<li><a href=\"https://www.amplitude.com\">Amplitude</a>: Dashboards and data exploration - accesses data stored in Snowflake</li>\n</ul>\n<h2 id=\"types-of-telemetry\"><a class=\"header\" href=\"#types-of-telemetry\">Types of Telemetry</a></h2>\n<h3 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\">Diagnostics</a></h3>\n<p>Crash reports consist of a <a href=\"https://learn.microsoft.com/en-us/windows/win32/debug/minidump-files\">minidump</a> and some extra debug information. Reports are sent on the first application launch after the crash occurred. We've built dashboards that allow us to visualize the frequency and severity of issues experienced by users. Having these reports sent automatically allows us to begin implementing fixes without the user needing to file a report in our issue tracker. The plots in the dashboards also give us an informal measurement of the stability of Zed.</p>\n<p>You can see what extra data is sent alongside the minidump in the <code>Panic</code> struct in <a href=\"https://github.com/zed-industries/zed/blob/main/crates/telemetry_events/src/telemetry_events.rs\">crates/telemetry_events/src/telemetry_events.rs</a> in the Zed repo. You can find additional information in the <a href=\"./development/debugging-crashes.html\">Debugging Crashes</a> documentation.</p>\n<h3 id=\"client-metrics\"><a class=\"header\" href=\"#client-metrics\">Client-Side Usage Data</a></h3>\n<p>To improve Zed and understand how it is being used in the wild, Zed optionally collects usage data like the following:</p>\n<ul>\n<li>(a) file extensions of opened files;</li>\n<li>(b) features and tools You use within the Editor;</li>\n<li>(c) project statistics (e.g., number of files); and</li>\n<li>(d) frameworks detected in Your projects</li>\n</ul>\n<p>Usage Data does not include any of Your software code or sensitive project details. Metric events are reported over HTTPS, and requests are rate-limited to avoid using significant network bandwidth.</p>\n<p>Usage Data is associated with a secure random telemetry ID which may be linked to Your email address. This linkage currently serves two purposes: (1) it allows Zed to analyze usage patterns over time while maintaining Your privacy; and (2) it enables Zed to reach out to specific user groups for feedback and improvement suggestions.</p>\n<p>You can audit the metrics data that Zed has reported by running the command <code class=\"hljs\">zed: open telemetry log</code> from the command palette, or clicking <code>Help &gt; View Telemetry Log</code> in the application menu.</p>\n<p>You can see the full list of the event types and exactly the data sent for each by inspecting the <code>Event</code> enum and the associated structs in <a href=\"https://github.com/zed-industries/zed/blob/main/crates/telemetry_events/src/telemetry_events.rs\">crates/telemetry_events/src/telemetry_events.rs</a> in the Zed repository.</p>\n<h3 id=\"metrics\"><a class=\"header\" href=\"#metrics\">Server-Side Usage Data</a></h3>\n<p>When using Zed's hosted services, we may collect, generate, and Process data to allow us to support users and improve our hosted offering. Examples include metadata around rate limiting and billing metrics/token usage. Zed does not persistently store user content or use user content to evaluate and/or improve our AI features, unless it is explicitly shared with Zed, and we have a zero-data retention agreement with Anthropic.</p>\n<p>You can see more about our stance on data collection (and that any prompt data shared with Zed is explicitly opt-in) at <a href=\"./ai/ai-improvement.html\">AI Improvement</a>.</p>\n<h2 id=\"concerns-and-questions\"><a class=\"header\" href=\"#concerns-and-questions\">Concerns and Questions</a></h2>\n<p>If you have concerns about telemetry, please feel free to <a href=\"https://github.com/zed-industries/zed/issues/new/choose\">open an issue</a>.</p>\n\n</main>",
    "content_text": "Telemetry in Zed\nZed collects anonymous telemetry data to help the team understand how people are using the application and to see what sort of issues they are experiencing.\nConfiguring Telemetry Settings\nYou have full control over what data is sent out by Zed.\nTo enable or disable some or all telemetry types, open your settings.json file via zed: open settings(cmd-,|ctrl-,) from the command palette.\nInsert and tweak the following:\n\"telemetry\": {\n    \"diagnostics\": false,\n    \"metrics\": false\n},\n\nDataflow\nTelemetry is sent from the application to our servers. Data is proxied through our servers to enable us to easily switch analytics services. We currently use:\n\nSentry: Crash-monitoring service - stores diagnostic events\nSnowflake: Data warehouse - stores both diagnostic and metric events\nHex: Dashboards and data exploration - accesses data stored in Snowflake\nAmplitude: Dashboards and data exploration - accesses data stored in Snowflake\n\nTypes of Telemetry\nDiagnostics\nCrash reports consist of a minidump and some extra debug information. Reports are sent on the first application launch after the crash occurred. We've built dashboards that allow us to visualize the frequency and severity of issues experienced by users. Having these reports sent automatically allows us to begin implementing fixes without the user needing to file a report in our issue tracker. The plots in the dashboards also give us an informal measurement of the stability of Zed.\nYou can see what extra data is sent alongside the minidump in the Panic struct in crates/telemetry_events/src/telemetry_events.rs in the Zed repo. You can find additional information in the Debugging Crashes documentation.\nClient-Side Usage Data\nTo improve Zed and understand how it is being used in the wild, Zed optionally collects usage data like the following:\n\n(a) file extensions of opened files;\n(b) features and tools You use within the Editor;\n(c) project statistics (e.g., number of files); and\n(d) frameworks detected in Your projects\n\nUsage Data does not include any of Your software code or sensitive project details. Metric events are reported over HTTPS, and requests are rate-limited to avoid using significant network bandwidth.\nUsage Data is associated with a secure random telemetry ID which may be linked to Your email address. This linkage currently serves two purposes: (1) it allows Zed to analyze usage patterns over time while maintaining Your privacy; and (2) it enables Zed to reach out to specific user groups for feedback and improvement suggestions.\nYou can audit the metrics data that Zed has reported by running the command zed: open telemetry log from the command palette, or clicking Help > View Telemetry Log in the application menu.\nYou can see the full list of the event types and exactly the data sent for each by inspecting the Event enum and the associated structs in crates/telemetry_events/src/telemetry_events.rs in the Zed repository.\nServer-Side Usage Data\nWhen using Zed's hosted services, we may collect, generate, and Process data to allow us to support users and improve our hosted offering. Examples include metadata around rate limiting and billing metrics/token usage. Zed does not persistently store user content or use user content to evaluate and/or improve our AI features, unless it is explicitly shared with Zed, and we have a zero-data retention agreement with Anthropic.\nYou can see more about our stance on data collection (and that any prompt data shared with Zed is explicitly opt-in) at AI Improvement.\nConcerns and Questions\nIf you have concerns about telemetry, please feel free to open an issue.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:05"
  },
  "workspace-persistence.html": {
    "url": "https://zed.dev/docs/workspace-persistence.html",
    "title": "Workspace Persistence | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"workspace-persistence\"><a class=\"header\" href=\"#workspace-persistence\">Workspace Persistence</a></h1>\n<p>Zed creates local SQLite databases to persist data relating to its workspace and your projects. These databases store, for instance, the tabs and panes you have open in a project, the scroll position of each open file, the list of all projects you've opened (for the recent projects modal picker), etc. You can find and explore these databases in the following locations:</p>\n<ul>\n<li>macOS: <code>~/Library/Application Support/Zed</code></li>\n<li>Linux and FreeBSD: <code>~/.local/share/zed</code> (or within <code>XDG_DATA_HOME</code> or <code>FLATPAK_XDG_DATA_HOME</code>)</li>\n<li>Windows: <code>%LOCALAPPDATA%\\Zed</code></li>\n</ul>\n<p>The naming convention of these databases takes on the form of <code>0-&lt;zed_channel&gt;</code>:</p>\n<ul>\n<li>Stable: <code>0-stable</code></li>\n<li>Preview: <code>0-preview</code></li>\n</ul>\n<p><strong>If you encounter workspace persistence issues in Zed, deleting the database and restarting Zed often resolves the problem, as the database may have been corrupted at some point.</strong> If your issue continues after restarting Zed and regenerating a new database, please <a href=\"https://github.com/zed-industries/zed/issues/new?template=10_bug_report.yml\">file an issue</a>.</p>\n<h2 id=\"settings\"><a class=\"header\" href=\"#settings\">Settings</a></h2>\n<p>You can customize workspace restoration behavior with the following settings:</p>\n<pre><code class=\"language-json\">{\n  // Workspace restoration behavior.\n  //   All workspaces (\"last_session\"), last workspace (\"last_workspace\") or \"none\"\n  \"restore_on_startup\": \"last_session\",\n  // Whether to attempt to restore previous file's state when opening it again.\n  // E.g. for editors, selections, folds and scroll positions are restored\n  \"restore_on_file_reopen\": true,\n  // Whether to automatically close files that have been deleted on disk.\n  \"close_on_file_delete\": false\n}\n</code></pre>\n\n</main>",
    "content_text": "Workspace Persistence\nZed creates local SQLite databases to persist data relating to its workspace and your projects. These databases store, for instance, the tabs and panes you have open in a project, the scroll position of each open file, the list of all projects you've opened (for the recent projects modal picker), etc. You can find and explore these databases in the following locations:\n\nmacOS: ~/Library/Application Support/Zed\nLinux and FreeBSD: ~/.local/share/zed (or within XDG_DATA_HOME or FLATPAK_XDG_DATA_HOME)\nWindows: %LOCALAPPDATA%\\Zed\n\nThe naming convention of these databases takes on the form of 0-<zed_channel>:\n\nStable: 0-stable\nPreview: 0-preview\n\nIf you encounter workspace persistence issues in Zed, deleting the database and restarting Zed often resolves the problem, as the database may have been corrupted at some point. If your issue continues after restarting Zed and regenerating a new database, please file an issue.\nSettings\nYou can customize workspace restoration behavior with the following settings:\n{\n  // Workspace restoration behavior.\n  //   All workspaces (\"last_session\"), last workspace (\"last_workspace\") or \"none\"\n  \"restore_on_startup\": \"last_session\",\n  // Whether to attempt to restore previous file's state when opening it again.\n  // E.g. for editors, selections, folds and scroll positions are restored\n  \"restore_on_file_reopen\": true,\n  // Whether to automatically close files that have been deleted on disk.\n  \"close_on_file_delete\": false\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:07"
  },
  "additional-learning-materials.html": {
    "url": "https://zed.dev/docs/additional-learning-materials.html",
    "title": "Additional Learning Materials | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"additional-learning-materials\"><a class=\"header\" href=\"#additional-learning-materials\">Additional Learning Materials</a></h1>\n<ul>\n<li><a href=\"https://zed.dev/blog/text-manipulation\">Text Manipulation Kung Fu for the Aspiring Black Belt</a></li>\n</ul>\n\n</main>",
    "content_text": "Additional Learning Materials\n\nText Manipulation Kung Fu for the Aspiring Black Belt",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:09"
  },
  "configuring-zed.html": {
    "url": "https://zed.dev/docs/configuring-zed.html",
    "title": "Configuring Zed | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"configuring-zed\"><a class=\"header\" href=\"#configuring-zed\">Configuring Zed</a></h1>\n<p>Zed is designed to be configured: we want to fit your workflow and preferences exactly. We provide default settings that are designed to be a comfortable starting point for as many people as possible, but we hope you will enjoy tweaking it to make it feel incredible.</p>\n<p>In addition to the settings described here, you may also want to change your <a href=\"./themes.html\">theme</a>, configure your <a href=\"./key-bindings.html\">key bindings</a>, set up <a href=\"./tasks.html\">tasks</a> or install <a href=\"https://github.com/zed-industries/extensions\">extensions</a>.</p>\n<h2 id=\"settings-files\"><a class=\"header\" href=\"#settings-files\">Settings files</a></h2>\n<!--\nTBD: Settings files. Rewrite with \"remote settings\" in mind (e.g. `local settings` on the remote host).\nConsider renaming `zed: Open Local Settings` to `zed: Open Project Settings`.\n\nTBD: Add settings documentation about how settings are merged as overlays. E.g. project>local>default. Note how settings that are maps are merged, but settings that are arrays are replaced and must include the defaults.\n-->\n<p>Your settings file can be opened with <kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>. By default it is located at <code>~/.config/zed/settings.json</code>, though if you have XDG_CONFIG_HOME in your environment on Linux it will be at <code>$XDG_CONFIG_HOME/zed/settings.json</code> instead.</p>\n<p>This configuration is merged with any local configuration inside your projects. You can open the project settings by running <code class=\"hljs\">zed: open project settings</code> from the command palette. This will create a <code>.zed</code> directory containing<code>.zed/settings.json</code>.</p>\n<p>Although most projects will only need one settings file at the root, you can add more local settings files for subdirectories as needed. Not all settings can be set in local files, just those that impact the behavior of the editor and language tooling. For example you can set <code>tab_size</code>, <code>formatter</code> etc. but not <code>theme</code>, <code>vim_mode</code> and similar.</p>\n<p>The syntax for configuration files is a super-set of JSON that allows <code>//</code> comments.</p>\n<h2 id=\"default-settings\"><a class=\"header\" href=\"#default-settings\">Default settings</a></h2>\n<p>You can find the default settings for your current Zed by running <code class=\"hljs\">zed: open default settings</code> from the command palette.</p>\n<p>Extensions that provide language servers may also provide default settings for those language servers.</p>\n<h1 id=\"settings\"><a class=\"header\" href=\"#settings\">Settings</a></h1>\n<h2 id=\"active-pane-modifiers\"><a class=\"header\" href=\"#active-pane-modifiers\">Active Pane Modifiers</a></h2>\n<ul>\n<li>Description: Styling settings applied to the active pane.</li>\n<li>Setting: <code>active_pane_modifiers</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"active_pane_modifiers\": {\n    \"border_size\": 0.0,\n    \"inactive_opacity\": 1.0\n  }\n}\n</code></pre>\n<h3 id=\"border-size\"><a class=\"header\" href=\"#border-size\">Border size</a></h3>\n<ul>\n<li>Description: Size of the border surrounding the active pane. When set to 0, the active pane doesn't have any border. The border is drawn inset.</li>\n<li>Setting: <code>border_size</code></li>\n<li>Default: <code>0.0</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Non-negative <code>float</code> values</p>\n<h3 id=\"inactive-opacity\"><a class=\"header\" href=\"#inactive-opacity\">Inactive Opacity</a></h3>\n<ul>\n<li>Description: Opacity of inactive panels. When set to 1.0, the inactive panes have the same opacity as the active one. If set to 0, the inactive panes content will not be visible at all. Values are clamped to the [0.0, 1.0] range.</li>\n<li>Setting: <code>inactive_opacity</code></li>\n<li>Default: <code>1.0</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>float</code> values</p>\n<h2 id=\"bottom-dock-layout\"><a class=\"header\" href=\"#bottom-dock-layout\">Bottom Dock Layout</a></h2>\n<ul>\n<li>Description: Control the layout of the bottom dock, relative to the left and right docks</li>\n<li>Setting: <code>bottom_dock_layout</code></li>\n<li>Default: <code>\"contained\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Contain the bottom dock, giving the full height of the window to the left and right docks</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"bottom_dock_layout\": \"contained\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Give the bottom dock the full width of the window, truncating the left and right docks</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"bottom_dock_layout\": \"full\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Left align the bottom dock, truncating the left dock and giving the right dock the full height of the window</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"bottom_dock_layout\": \"left_aligned\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Right align the bottom dock, giving the left dock the full height of the window and truncating the right dock.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"bottom_dock_layout\": \"right_aligned\"\n}\n</code></pre>\n<h2 id=\"agent-font-size\"><a class=\"header\" href=\"#agent-font-size\">Agent Font Size</a></h2>\n<ul>\n<li>Description: The font size for text in the agent panel. Inherits the UI font size if unset.</li>\n<li>Setting: <code>agent_font_size</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values from <code>6</code> to <code>100</code> pixels (inclusive)</p>\n<h2 id=\"allow-rewrap\"><a class=\"header\" href=\"#allow-rewrap\">Allow Rewrap</a></h2>\n<ul>\n<li>Description: Controls where the <code>editor::Rewrap</code> action is allowed in the current language scope</li>\n<li>Setting: <code>allow_rewrap</code></li>\n<li>Default: <code>\"in_comments\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Allow rewrap in comments only:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"allow_rewrap\": \"in_comments\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Allow rewrap everywhere:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"allow_rewrap\": \"everywhere\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Never allow rewrap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"allow_rewrap\": \"never\"\n}\n</code></pre>\n<p>Note: This setting has no effect in Vim mode, as rewrap is already allowed everywhere.</p>\n<h2 id=\"auto-indent\"><a class=\"header\" href=\"#auto-indent\">Auto Indent</a></h2>\n<ul>\n<li>Description: Whether indentation should be adjusted based on the context whilst typing. This can be specified on a per-language basis.</li>\n<li>Setting: <code>auto_indent</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"auto-indent-on-paste\"><a class=\"header\" href=\"#auto-indent-on-paste\">Auto Indent On Paste</a></h2>\n<ul>\n<li>Description: Whether indentation of pasted content should be adjusted based on the context</li>\n<li>Setting: <code>auto_indent_on_paste</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"auto-install-extensions\"><a class=\"header\" href=\"#auto-install-extensions\">Auto Install extensions</a></h2>\n<ul>\n<li>Description: Define extensions to be autoinstalled or never be installed.</li>\n<li>Setting: <code>auto_install_extension</code></li>\n<li>Default: <code>{ \"html\": true }</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>You can find the names of your currently installed extensions by listing the subfolders under the <a href=\"./extensions/installing-extensions.html#installation-location\">extension installation location</a>:</p>\n<p>On MacOS:</p>\n<pre><code class=\"language-sh\">ls ~/Library/Application\\ Support/Zed/extensions/installed/\n</code></pre>\n<p>On Linux:</p>\n<pre><code class=\"language-sh\">ls ~/.local/share/zed/extensions/installed\n</code></pre>\n<p>Define extensions which should be installed (<code>true</code>) or never installed (<code>false</code>).</p>\n<pre><code class=\"language-json\">{\n  \"auto_install_extensions\": {\n    \"html\": true,\n    \"dockerfile\": true,\n    \"docker-compose\": false\n  }\n}\n</code></pre>\n<h2 id=\"autosave\"><a class=\"header\" href=\"#autosave\">Autosave</a></h2>\n<ul>\n<li>Description: When to automatically save edited buffers.</li>\n<li>Setting: <code>autosave</code></li>\n<li>Default: <code>off</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>To disable autosave, set it to <code>off</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"autosave\": \"off\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>To autosave when focus changes, use <code>on_focus_change</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"autosave\": \"on_focus_change\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>To autosave when the active window changes, use <code>on_window_change</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"autosave\": \"on_window_change\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>To autosave after an inactivity period, use <code>after_delay</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"autosave\": {\n    \"after_delay\": {\n      \"milliseconds\": 1000\n    }\n  }\n}\n</code></pre>\n<h2 id=\"autoscroll-on-clicks\"><a class=\"header\" href=\"#autoscroll-on-clicks\">Autoscroll on Clicks</a></h2>\n<ul>\n<li>Description: Whether to scroll when clicking near the edge of the visible text area.</li>\n<li>Setting: <code>autoscroll_on_clicks</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"auto-signature-help\"><a class=\"header\" href=\"#auto-signature-help\">Auto Signature Help</a></h2>\n<ul>\n<li>Description: Show method signatures in the editor, when inside parentheses</li>\n<li>Setting: <code>auto_signature_help</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"show-signature-help-after-edits\"><a class=\"header\" href=\"#show-signature-help-after-edits\">Show Signature Help After Edits</a></h3>\n<ul>\n<li>Description: Whether to show the signature help after completion or a bracket pair inserted. If <code>auto_signature_help</code> is enabled, this setting will be treated as enabled also.</li>\n<li>Setting: <code>show_signature_help_after_edits</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"auto-update\"><a class=\"header\" href=\"#auto-update\">Auto Update</a></h2>\n<ul>\n<li>Description: Whether or not to automatically check for updates.</li>\n<li>Setting: <code>auto_update</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"base-keymap\"><a class=\"header\" href=\"#base-keymap\">Base Keymap</a></h2>\n<ul>\n<li>Description: Base key bindings scheme. Base keymaps can be overridden with user keymaps.</li>\n<li>Setting: <code>base_keymap</code></li>\n<li>Default: <code>VSCode</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>VSCode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"VSCode\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Atom</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"Atom\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>JetBrains</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"JetBrains\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>None</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"None\"\n}\n</code></pre>\n<ol start=\"5\">\n<li>SublimeText</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"SublimeText\"\n}\n</code></pre>\n<ol start=\"6\">\n<li>TextMate</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"base_keymap\": \"TextMate\"\n}\n</code></pre>\n<h2 id=\"buffer-font-family\"><a class=\"header\" href=\"#buffer-font-family\">Buffer Font Family</a></h2>\n<ul>\n<li>Description: The name of a font to use for rendering text in the editor.</li>\n<li>Setting: <code>buffer_font_family</code></li>\n<li>Default: <code>.ZedMono</code>. This currently aliases to <a href=\"https://lilex.myrt.co\">Lilex</a>.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>The name of any font family installed on the user's system, or <code>\".ZedMono\"</code>.</p>\n<h2 id=\"buffer-font-features\"><a class=\"header\" href=\"#buffer-font-features\">Buffer Font Features</a></h2>\n<ul>\n<li>Description: The OpenType features to enable for text in the editor.</li>\n<li>Setting: <code>buffer_font_features</code></li>\n<li>Default: <code>null</code></li>\n<li>Platform: macOS and Windows.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Zed supports all OpenType features that can be enabled or disabled for a given buffer or terminal font, as well as setting values for font features.</p>\n<p>For example, to disable font ligatures, add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"buffer_font_features\": {\n    \"calt\": false\n  }\n}\n</code></pre>\n<p>You can also set other OpenType features, like setting <code>cv01</code> to <code>7</code>:</p>\n<pre><code class=\"language-json\">{\n  \"buffer_font_features\": {\n    \"cv01\": 7\n  }\n}\n</code></pre>\n<h2 id=\"buffer-font-fallbacks\"><a class=\"header\" href=\"#buffer-font-fallbacks\">Buffer Font Fallbacks</a></h2>\n<ul>\n<li>Description: Set the buffer text's font fallbacks, this will be merged with the platform's default fallbacks.</li>\n<li>Setting: <code>buffer_font_fallbacks</code></li>\n<li>Default: <code>null</code></li>\n<li>Platform: macOS and Windows.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>For example, to use <code>Nerd Font</code> as a fallback, add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"buffer_font_fallbacks\": [\"Nerd Font\"]\n}\n</code></pre>\n<h2 id=\"buffer-font-size\"><a class=\"header\" href=\"#buffer-font-size\">Buffer Font Size</a></h2>\n<ul>\n<li>Description: The default font size for text in the editor.</li>\n<li>Setting: <code>buffer_font_size</code></li>\n<li>Default: <code>15</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values from <code>6</code> to <code>100</code> pixels (inclusive)</p>\n<h2 id=\"buffer-font-weight\"><a class=\"header\" href=\"#buffer-font-weight\">Buffer Font Weight</a></h2>\n<ul>\n<li>Description: The default font weight for text in the editor.</li>\n<li>Setting: <code>buffer_font_weight</code></li>\n<li>Default: <code>400</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values between <code>100</code> and <code>900</code></p>\n<h2 id=\"buffer-line-height\"><a class=\"header\" href=\"#buffer-line-height\">Buffer Line Height</a></h2>\n<ul>\n<li>Description: The default line height for text in the editor.</li>\n<li>Setting: <code>buffer_line_height</code></li>\n<li>Default: <code>\"comfortable\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>\"standard\"</code>, <code>\"comfortable\"</code> or <code>{ \"custom\": float }</code> (<code>1</code> is compact, <code>2</code> is loose)</p>\n<h2 id=\"centered-layout\"><a class=\"header\" href=\"#centered-layout\">Centered Layout</a></h2>\n<ul>\n<li>Description: Configuration for the centered layout mode.</li>\n<li>Setting: <code>centered_layout</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"centered_layout\": {\n  \"left_padding\": 0.2,\n  \"right_padding\": 0.2,\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p>The <code>left_padding</code> and <code>right_padding</code> options define the relative width of the\nleft and right padding of the central pane from the workspace when the centered layout mode is activated. Valid values range is from <code>0</code> to <code>0.4</code>.</p>\n<h2 id=\"close-on-file-delete\"><a class=\"header\" href=\"#close-on-file-delete\">Close on File Delete</a></h2>\n<ul>\n<li>Description: Whether to automatically close editor tabs when their corresponding files are deleted from disk.</li>\n<li>Setting: <code>close_on_file_delete</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<p>When enabled, this setting will automatically close tabs for files that have been deleted from the file system. This is particularly useful for workflows involving temporary or scratch files that are frequently created and deleted. When disabled (default), deleted files remain open with a strikethrough through their tab title.</p>\n<p>Note: Dirty files (files with unsaved changes) will not be automatically closed even when this setting is enabled, ensuring you don't lose unsaved work.</p>\n<h2 id=\"confirm-quit\"><a class=\"header\" href=\"#confirm-quit\">Confirm Quit</a></h2>\n<ul>\n<li>Description: Whether or not to prompt the user to confirm before closing the application.</li>\n<li>Setting: <code>confirm_quit</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"diagnostics-max-severity\"><a class=\"header\" href=\"#diagnostics-max-severity\">Diagnostics Max Severity</a></h2>\n<ul>\n<li>Description: Which level to use to filter out diagnostics displayed in the editor</li>\n<li>Setting: <code>diagnostics_max_severity</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Allow all diagnostics (default):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics_max_severity\": null\n}\n</code></pre>\n<ol start=\"2\">\n<li>Show only errors:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics_max_severity\": \"error\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Show errors and warnings:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics_max_severity\": \"warning\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>Show errors, warnings, and information:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics_max_severity\": \"information\"\n}\n</code></pre>\n<ol start=\"5\">\n<li>Show all including hints:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics_max_severity\": \"hint\"\n}\n</code></pre>\n<h2 id=\"disable-ai\"><a class=\"header\" href=\"#disable-ai\">Disable AI</a></h2>\n<ul>\n<li>Description: Whether to disable all AI features in Zed</li>\n<li>Setting: <code>disable_ai</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"direnv-integration\"><a class=\"header\" href=\"#direnv-integration\">Direnv Integration</a></h2>\n<ul>\n<li>Description: Settings for <a href=\"https://direnv.net/\">direnv</a> integration. Requires <code>direnv</code> to be installed.\n<code>direnv</code> integration make it possible to use the environment variables set by a <code>direnv</code> configuration to detect some language servers in <code>$PATH</code> instead of installing them.\nIt also allows for those environment variables to be used in tasks.</li>\n<li>Setting: <code>load_direnv</code></li>\n<li>Default: <code>\"direct\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>There are two options to choose from:</p>\n<ol>\n<li><code>shell_hook</code>: Use the shell hook to load direnv. This relies on direnv to activate upon entering the directory. Supports POSIX shells and fish.</li>\n<li><code>direct</code>: Use <code>direnv export json</code> to load direnv. This will load direnv directly without relying on the shell hook and might cause some inconsistencies. This allows direnv to work with any shell.</li>\n</ol>\n<h2 id=\"double-click-in-multibuffer\"><a class=\"header\" href=\"#double-click-in-multibuffer\">Double Click In Multibuffer</a></h2>\n<ul>\n<li>Description: What to do when multibuffer is double clicked in some of its excerpts (parts of singleton buffers)</li>\n<li>Setting: <code>double_click_in_multibuffer</code></li>\n<li>Default: <code>\"select\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Behave as a regular buffer and select the whole word (default):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"double_click_in_multibuffer\": \"select\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Open the excerpt clicked as a new buffer in the new tab:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"double_click_in_multibuffer\": \"open\"\n}\n</code></pre>\n<p>For the case of \"open\", regular selection behavior can be achieved by holding <code>alt</code> when double clicking.</p>\n<h2 id=\"drop-target-size\"><a class=\"header\" href=\"#drop-target-size\">Drop Target Size</a></h2>\n<ul>\n<li>Description: Relative size of the drop target in the editor that will open dropped file as a split pane (0-0.5). For example, 0.25 means if you drop onto the top/bottom quarter of the pane a new vertical split will be used, if you drop onto the left/right quarter of the pane a new horizontal split will be used.</li>\n<li>Setting: <code>drop_target_size</code></li>\n<li>Default: <code>0.2</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>float</code> values between <code>0</code> and <code>0.5</code></p>\n<h2 id=\"edit-predictions\"><a class=\"header\" href=\"#edit-predictions\">Edit Predictions</a></h2>\n<ul>\n<li>Description: Settings for edit predictions.</li>\n<li>Setting: <code>edit_predictions</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">  \"edit_predictions\": {\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/.dev.vars\",\n      \"**/secrets.yml\"\n    ]\n  }\n</code></pre>\n<p><strong>Options</strong></p>\n<h3 id=\"disabled-globs\"><a class=\"header\" href=\"#disabled-globs\">Disabled Globs</a></h3>\n<ul>\n<li>Description: A list of globs for which edit predictions should be disabled for. This list adds to a pre-existing, sensible default set of globs. Any additional ones you add are combined with them.</li>\n<li>Setting: <code>disabled_globs</code></li>\n<li>Default: <code>[\"**/.env*\", \"**/*.pem\", \"**/*.key\", \"**/*.cert\", \"**/*.crt\", \"**/.dev.vars\", \"**/secrets.yml\"]</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>List of <code>string</code> values.</p>\n<h2 id=\"edit-predictions-disabled-in\"><a class=\"header\" href=\"#edit-predictions-disabled-in\">Edit Predictions Disabled in</a></h2>\n<ul>\n<li>Description: A list of language scopes in which edit predictions should be disabled.</li>\n<li>Setting: <code>edit_predictions_disabled_in</code></li>\n<li>Default: <code>[]</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>List of <code>string</code> values</p>\n<ol>\n<li>Don't show edit predictions in comments:</li>\n</ol>\n<pre><code class=\"language-json\">\"disabled_in\": [\"comment\"]\n</code></pre>\n<ol start=\"2\">\n<li>Don't show edit predictions in strings and comments:</li>\n</ol>\n<pre><code class=\"language-json\">\"disabled_in\": [\"comment\", \"string\"]\n</code></pre>\n<ol start=\"3\">\n<li>Only in Go, don't show edit predictions in strings and comments:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Go\": {\n      \"edit_predictions_disabled_in\": [\"comment\", \"string\"]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"current-line-highlight\"><a class=\"header\" href=\"#current-line-highlight\">Current Line Highlight</a></h2>\n<ul>\n<li>Description: How to highlight the current line in the editor.</li>\n<li>Setting: <code>current_line_highlight</code></li>\n<li>Default: <code>all</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Don't highlight the current line:</li>\n</ol>\n<pre><code class=\"language-json\">\"current_line_highlight\": \"none\"\n</code></pre>\n<ol start=\"2\">\n<li>Highlight the gutter area:</li>\n</ol>\n<pre><code class=\"language-json\">\"current_line_highlight\": \"gutter\"\n</code></pre>\n<ol start=\"3\">\n<li>Highlight the editor area:</li>\n</ol>\n<pre><code class=\"language-json\">\"current_line_highlight\": \"line\"\n</code></pre>\n<ol start=\"4\">\n<li>Highlight the full line:</li>\n</ol>\n<pre><code class=\"language-json\">\"current_line_highlight\": \"all\"\n</code></pre>\n<h2 id=\"selection-highlight\"><a class=\"header\" href=\"#selection-highlight\">Selection Highlight</a></h2>\n<ul>\n<li>Description: Whether to highlight all occurrences of the selected text in an editor.</li>\n<li>Setting: <code>selection_highlight</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<h2 id=\"rounded-selection\"><a class=\"header\" href=\"#rounded-selection\">Rounded Selection</a></h2>\n<ul>\n<li>Description: Whether the text selection should have rounded corners.</li>\n<li>Setting: <code>rounded_selection</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<h2 id=\"cursor-blink\"><a class=\"header\" href=\"#cursor-blink\">Cursor Blink</a></h2>\n<ul>\n<li>Description: Whether or not the cursor blinks.</li>\n<li>Setting: <code>cursor_blink</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"cursor-shape\"><a class=\"header\" href=\"#cursor-shape\">Cursor Shape</a></h2>\n<ul>\n<li>Description: Cursor shape for the default editor.</li>\n<li>Setting: <code>cursor_shape</code></li>\n<li>Default: <code>bar</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>A vertical bar:</li>\n</ol>\n<pre><code class=\"language-json\">\"cursor_shape\": \"bar\"\n</code></pre>\n<ol start=\"2\">\n<li>A block that surrounds the following character:</li>\n</ol>\n<pre><code class=\"language-json\">\"cursor_shape\": \"block\"\n</code></pre>\n<ol start=\"3\">\n<li>An underline / underscore that runs along the following character:</li>\n</ol>\n<pre><code class=\"language-json\">\"cursor_shape\": \"underline\"\n</code></pre>\n<ol start=\"4\">\n<li>An box drawn around the following character:</li>\n</ol>\n<pre><code class=\"language-json\">\"cursor_shape\": \"hollow\"\n</code></pre>\n<h2 id=\"gutter\"><a class=\"header\" href=\"#gutter\">Gutter</a></h2>\n<ul>\n<li>Description: Settings for the editor gutter</li>\n<li>Setting: <code>gutter</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"gutter\": {\n    \"line_numbers\": true,\n    \"runnables\": true,\n    \"breakpoints\": true,\n    \"folds\": true,\n    \"min_line_number_digits\": 4\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>line_numbers</code>: Whether to show line numbers in the gutter</li>\n<li><code>runnables</code>: Whether to show runnable buttons in the gutter</li>\n<li><code>breakpoints</code>: Whether to show breakpoints in the gutter</li>\n<li><code>folds</code>: Whether to show fold buttons in the gutter</li>\n<li><code>min_line_number_digits</code>: Minimum number of characters to reserve space for in the gutter</li>\n</ul>\n<h2 id=\"hide-mouse\"><a class=\"header\" href=\"#hide-mouse\">Hide Mouse</a></h2>\n<ul>\n<li>Description: Determines when the mouse cursor should be hidden in an editor or input box.</li>\n<li>Setting: <code>hide_mouse</code></li>\n<li>Default: <code>on_typing_and_movement</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Never hide the mouse cursor:</li>\n</ol>\n<pre><code class=\"language-json\">\"hide_mouse\": \"never\"\n</code></pre>\n<ol start=\"2\">\n<li>Hide only when typing:</li>\n</ol>\n<pre><code class=\"language-json\">\"hide_mouse\": \"on_typing\"\n</code></pre>\n<ol start=\"3\">\n<li>Hide on both typing and cursor movement:</li>\n</ol>\n<pre><code class=\"language-json\">\"hide_mouse\": \"on_typing_and_movement\"\n</code></pre>\n<h2 id=\"snippet-sort-order\"><a class=\"header\" href=\"#snippet-sort-order\">Snippet Sort Order</a></h2>\n<ul>\n<li>Description: Determines how snippets are sorted relative to other completion items.</li>\n<li>Setting: <code>snippet_sort_order</code></li>\n<li>Default: <code>inline</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Place snippets at the top of the completion list:</li>\n</ol>\n<pre><code class=\"language-json\">\"snippet_sort_order\": \"top\"\n</code></pre>\n<ol start=\"2\">\n<li>Place snippets normally without any preference:</li>\n</ol>\n<pre><code class=\"language-json\">\"snippet_sort_order\": \"inline\"\n</code></pre>\n<ol start=\"3\">\n<li>Place snippets at the bottom of the completion list:</li>\n</ol>\n<pre><code class=\"language-json\">\"snippet_sort_order\": \"bottom\"\n</code></pre>\n<ol start=\"4\">\n<li>Do not show snippets in the completion list at all:</li>\n</ol>\n<pre><code class=\"language-json\">\"snippet_sort_order\": \"none\"\n</code></pre>\n<h2 id=\"editor-scrollbar\"><a class=\"header\" href=\"#editor-scrollbar\">Editor Scrollbar</a></h2>\n<ul>\n<li>Description: Whether or not to show the editor scrollbar and various elements in it.</li>\n<li>Setting: <code>scrollbar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": \"auto\",\n  \"cursors\": true,\n  \"git_diff\": true,\n  \"search_results\": true,\n  \"selected_text\": true,\n  \"selected_symbol\": true,\n  \"diagnostics\": \"all\",\n  \"axes\": {\n    \"horizontal\": true,\n    \"vertical\": true,\n  },\n},\n</code></pre>\n<h3 id=\"show-mode\"><a class=\"header\" href=\"#show-mode\">Show Mode</a></h3>\n<ul>\n<li>Description: When to show the editor scrollbar.</li>\n<li>Setting: <code>show</code></li>\n<li>Default: <code>auto</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show the scrollbar if there's important information or follow the system's configured behavior:</li>\n</ol>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": \"auto\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Match the system's configured behavior:</li>\n</ol>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": \"system\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Always show the scrollbar:</li>\n</ol>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": \"always\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>Never show the scrollbar:</li>\n</ol>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": \"never\"\n}\n</code></pre>\n<h3 id=\"cursor-indicators\"><a class=\"header\" href=\"#cursor-indicators\">Cursor Indicators</a></h3>\n<ul>\n<li>Description: Whether to show cursor positions in the scrollbar.</li>\n<li>Setting: <code>cursors</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"git-diff-indicators\"><a class=\"header\" href=\"#git-diff-indicators\">Git Diff Indicators</a></h3>\n<ul>\n<li>Description: Whether to show git diff indicators in the scrollbar.</li>\n<li>Setting: <code>git_diff</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"search-results-indicators\"><a class=\"header\" href=\"#search-results-indicators\">Search Results Indicators</a></h3>\n<ul>\n<li>Description: Whether to show buffer search results in the scrollbar.</li>\n<li>Setting: <code>search_results</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"selected-text-indicators\"><a class=\"header\" href=\"#selected-text-indicators\">Selected Text Indicators</a></h3>\n<ul>\n<li>Description: Whether to show selected text occurrences in the scrollbar.</li>\n<li>Setting: <code>selected_text</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"selected-symbols-indicators\"><a class=\"header\" href=\"#selected-symbols-indicators\">Selected Symbols Indicators</a></h3>\n<ul>\n<li>Description: Whether to show selected symbol occurrences in the scrollbar.</li>\n<li>Setting: <code>selected_symbol</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\">Diagnostics</a></h3>\n<ul>\n<li>Description: Which diagnostic indicators to show in the scrollbar.</li>\n<li>Setting: <code>diagnostics</code></li>\n<li>Default: <code>all</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show all diagnostics:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": \"all\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Do not show any diagnostics:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": \"none\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Show only errors:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": \"error\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>Show only errors and warnings:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": \"warning\"\n}\n</code></pre>\n<ol start=\"5\">\n<li>Show only errors, warnings, and information:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": \"information\"\n}\n</code></pre>\n<h3 id=\"axes\"><a class=\"header\" href=\"#axes\">Axes</a></h3>\n<ul>\n<li>Description: Forcefully enable or disable the scrollbar for each axis</li>\n<li>Setting: <code>axes</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"axes\": {\n    \"horizontal\": true,\n    \"vertical\": true,\n  },\n}\n</code></pre>\n<h4 id=\"horizontal\"><a class=\"header\" href=\"#horizontal\">Horizontal</a></h4>\n<ul>\n<li>Description: When false, forcefully disables the horizontal scrollbar. Otherwise, obey other settings.</li>\n<li>Setting: <code>horizontal</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h4 id=\"vertical\"><a class=\"header\" href=\"#vertical\">Vertical</a></h4>\n<ul>\n<li>Description: When false, forcefully disables the vertical scrollbar. Otherwise, obey other settings.</li>\n<li>Setting: <code>vertical</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"minimap\"><a class=\"header\" href=\"#minimap\">Minimap</a></h2>\n<ul>\n<li>Description: Settings related to the editor's minimap, which provides an overview of your document.</li>\n<li>Setting: <code>minimap</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"show\": \"never\",\n    \"thumb\": \"always\",\n    \"thumb_border\": \"left_open\",\n    \"current_line_highlight\": null\n  }\n}\n</code></pre>\n<h3 id=\"show-mode-1\"><a class=\"header\" href=\"#show-mode-1\">Show Mode</a></h3>\n<ul>\n<li>Description: When to show the minimap in the editor.</li>\n<li>Setting: <code>show</code></li>\n<li>Default: <code>never</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Always show the minimap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show\": \"always\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Show the minimap if the editor's scrollbars are visible:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show\": \"auto\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Never show the minimap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show\": \"never\"\n}\n</code></pre>\n<h3 id=\"thumb-display\"><a class=\"header\" href=\"#thumb-display\">Thumb Display</a></h3>\n<ul>\n<li>Description: When to show the minimap thumb (the visible editor area) in the minimap.</li>\n<li>Setting: <code>thumb</code></li>\n<li>Default: <code>always</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show the minimap thumb when hovering over the minimap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb\": \"hover\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Always show the minimap thumb:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb\": \"always\"\n}\n</code></pre>\n<h3 id=\"thumb-border\"><a class=\"header\" href=\"#thumb-border\">Thumb Border</a></h3>\n<ul>\n<li>Description: How the minimap thumb border should look.</li>\n<li>Setting: <code>thumb_border</code></li>\n<li>Default: <code>left_open</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Display a border on all sides of the thumb:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb_border\": \"full\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Display a border on all sides except the left side:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb_border\": \"left_open\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Display a border on all sides except the right side:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb_border\": \"right_open\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>Display a border only on the left side:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb_border\": \"left_only\"\n}\n</code></pre>\n<ol start=\"5\">\n<li>Display the thumb without any border:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"thumb_border\": \"none\"\n}\n</code></pre>\n<h3 id=\"current-line-highlight-1\"><a class=\"header\" href=\"#current-line-highlight-1\">Current Line Highlight</a></h3>\n<ul>\n<li>Description: How to highlight the current line in the minimap.</li>\n<li>Setting: <code>current_line_highlight</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Inherit the editor's current line highlight setting:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"current_line_highlight\": null\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Highlight the current line in the minimap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"current_line_highlight\": \"line\"\n  }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"current_line_highlight\": \"all\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Do not highlight the current line in the minimap:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"current_line_highlight\": \"gutter\"\n  }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-json\">{\n  \"minimap\": {\n    \"current_line_highlight\": \"none\"\n  }\n}\n</code></pre>\n<h2 id=\"editor-tab-bar\"><a class=\"header\" href=\"#editor-tab-bar\">Editor Tab Bar</a></h2>\n<ul>\n<li>Description: Settings related to the editor's tab bar.</li>\n<li>Settings: <code>tab_bar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"tab_bar\": {\n  \"show\": true,\n  \"show_nav_history_buttons\": true,\n  \"show_tab_bar_buttons\": true\n}\n</code></pre>\n<h3 id=\"show\"><a class=\"header\" href=\"#show\">Show</a></h3>\n<ul>\n<li>Description: Whether or not to show the tab bar in the editor.</li>\n<li>Setting: <code>show</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"navigation-history-buttons\"><a class=\"header\" href=\"#navigation-history-buttons\">Navigation History Buttons</a></h3>\n<ul>\n<li>Description: Whether or not to show the navigation history buttons.</li>\n<li>Setting: <code>show_nav_history_buttons</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"tab-bar-buttons\"><a class=\"header\" href=\"#tab-bar-buttons\">Tab Bar Buttons</a></h3>\n<ul>\n<li>Description: Whether or not to show the tab bar buttons.</li>\n<li>Setting: <code>show_tab_bar_buttons</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"editor-tabs\"><a class=\"header\" href=\"#editor-tabs\">Editor Tabs</a></h2>\n<ul>\n<li>Description: Configuration for the editor tabs.</li>\n<li>Setting: <code>tabs</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"tabs\": {\n  \"close_position\": \"right\",\n  \"file_icons\": false,\n  \"git_status\": false,\n  \"activate_on_close\": \"history\",\n  \"show_close_button\": \"hover\",\n  \"show_diagnostics\": \"off\"\n},\n</code></pre>\n<h3 id=\"close-position\"><a class=\"header\" href=\"#close-position\">Close Position</a></h3>\n<ul>\n<li>Description: Where to display close button within a tab.</li>\n<li>Setting: <code>close_position</code></li>\n<li>Default: <code>right</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Display the close button on the right:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"close_position\": \"right\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Display the close button on the left:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"close_position\": \"left\"\n}\n</code></pre>\n<h3 id=\"file-icons\"><a class=\"header\" href=\"#file-icons\">File Icons</a></h3>\n<ul>\n<li>Description: Whether to show the file icon for a tab.</li>\n<li>Setting: <code>file_icons</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<h3 id=\"git-status\"><a class=\"header\" href=\"#git-status\">Git Status</a></h3>\n<ul>\n<li>Description: Whether or not to show Git file status in tab.</li>\n<li>Setting: <code>git_status</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<h3 id=\"activate-on-close\"><a class=\"header\" href=\"#activate-on-close\">Activate on close</a></h3>\n<ul>\n<li>Description: What to do after closing the current tab.</li>\n<li>Setting: <code>activate_on_close</code></li>\n<li>Default: <code>history</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Activate the tab that was open previously:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"activate_on_close\": \"history\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Activate the right neighbour tab if present:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"activate_on_close\": \"neighbour\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Activate the left neighbour tab if present:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"activate_on_close\": \"left_neighbour\"\n}\n</code></pre>\n<h3 id=\"show-close-button\"><a class=\"header\" href=\"#show-close-button\">Show close button</a></h3>\n<ul>\n<li>Description: Controls the appearance behavior of the tab's close button.</li>\n<li>Setting: <code>show_close_button</code></li>\n<li>Default: <code>hover</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show it just upon hovering the tab:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_close_button\": \"hover\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Show it persistently:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_close_button\": \"always\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Never show it, even if hovering it:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_close_button\": \"hidden\"\n}\n</code></pre>\n<h3 id=\"show-diagnostics\"><a class=\"header\" href=\"#show-diagnostics\">Show Diagnostics</a></h3>\n<ul>\n<li>Description: Whether to show diagnostics indicators in tabs. This setting only works when file icons are active and controls which files with diagnostic issues to mark.</li>\n<li>Setting: <code>show_diagnostics</code></li>\n<li>Default: <code>off</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Do not mark any files:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_diagnostics\": \"off\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Only mark files with errors:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_diagnostics\": \"errors\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Mark files with errors and warnings:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"show_diagnostics\": \"all\"\n}\n</code></pre>\n<h3 id=\"show-inline-code-actions\"><a class=\"header\" href=\"#show-inline-code-actions\">Show Inline Code Actions</a></h3>\n<ul>\n<li>Description: Whether to show code action button at start of buffer line.</li>\n<li>Setting: <code>inline_code_actions</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"drag-and-drop-selection\"><a class=\"header\" href=\"#drag-and-drop-selection\">Drag And Drop Selection</a></h3>\n<ul>\n<li>Description: Whether to allow drag and drop text selection in buffer. <code>delay</code> is the milliseconds that must elapse before drag and drop is allowed. Otherwise, a new text selection is created.</li>\n<li>Setting: <code>drag_and_drop_selection</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"drag_and_drop_selection\": {\n  \"enabled\": true,\n  \"delay\": 300\n}\n</code></pre>\n<h2 id=\"editor-toolbar\"><a class=\"header\" href=\"#editor-toolbar\">Editor Toolbar</a></h2>\n<ul>\n<li>Description: Whether or not to show various elements in the editor toolbar.</li>\n<li>Setting: <code>toolbar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"toolbar\": {\n  \"breadcrumbs\": true,\n  \"quick_actions\": true,\n  \"selections_menu\": true,\n  \"agent_review\": true,\n  \"code_actions\": false\n},\n</code></pre>\n<p><strong>Options</strong></p>\n<p>Each option controls displaying of a particular toolbar element. If all elements are hidden, the editor toolbar is not displayed.</p>\n<h2 id=\"use-system-tabs\"><a class=\"header\" href=\"#use-system-tabs\">Use System Tabs</a></h2>\n<ul>\n<li>Description: Whether to allow windows to tab together based on the user’s tabbing preference (macOS only).</li>\n<li>Setting: <code>use_system_window_tabs</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>This setting enables integration with macOS’s native window tabbing feature. When set to <code>true</code>, Zed windows can be grouped together as tabs in a single macOS window, following the system-wide tabbing preferences set by the user (such as \"Always\", \"In Full Screen\", or \"Never\"). This setting is only available on macOS.</p>\n<h2 id=\"enable-language-server\"><a class=\"header\" href=\"#enable-language-server\">Enable Language Server</a></h2>\n<ul>\n<li>Description: Whether or not to use language servers to provide code intelligence.</li>\n<li>Setting: <code>enable_language_server</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"ensure-final-newline-on-save\"><a class=\"header\" href=\"#ensure-final-newline-on-save\">Ensure Final Newline On Save</a></h2>\n<ul>\n<li>Description: Removes any lines containing only whitespace at the end of the file and ensures just one newline at the end.</li>\n<li>Setting: <code>ensure_final_newline_on_save</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"expand-excerpt-lines\"><a class=\"header\" href=\"#expand-excerpt-lines\">Expand Excerpt Lines</a></h2>\n<ul>\n<li>Description: The default number of lines to expand excerpts in the multibuffer by</li>\n<li>Setting: <code>expand_excerpt_lines</code></li>\n<li>Default: <code>5</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive <code>integer</code> values</p>\n<h2 id=\"excerpt-context-lines\"><a class=\"header\" href=\"#excerpt-context-lines\">Excerpt Context Lines</a></h2>\n<ul>\n<li>Description: The number of lines of context to provide when showing excerpts in the multibuffer.</li>\n<li>Setting: <code>excerpt_context_lines</code></li>\n<li>Default: <code>2</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive <code>integer</code> value between 1 and 32. Values outside of this range will be clamped to this range.</p>\n<h2 id=\"extend-comment-on-newline\"><a class=\"header\" href=\"#extend-comment-on-newline\">Extend Comment On Newline</a></h2>\n<ul>\n<li>Description: Whether to start a new line with a comment when a previous line is a comment as well.</li>\n<li>Setting: <code>extend_comment_on_newline</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"status-bar\"><a class=\"header\" href=\"#status-bar\">Status Bar</a></h2>\n<ul>\n<li>Description: Control various elements in the status bar. Note that some items in the status bar have their own settings set elsewhere.</li>\n<li>Setting: <code>status_bar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"status_bar\": {\n  \"active_language_button\": true,\n  \"cursor_position_button\": true\n},\n</code></pre>\n<h2 id=\"lsp\"><a class=\"header\" href=\"#lsp\">LSP</a></h2>\n<ul>\n<li>Description: Configuration for language servers.</li>\n<li>Setting: <code>lsp</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>The following settings can be overridden for specific language servers:</p>\n<ul>\n<li><code>initialization_options</code></li>\n<li><code>settings</code></li>\n</ul>\n<p>To override configuration for a language server, add an entry for that language server's name to the <code>lsp</code> value.</p>\n<p>Some options are passed via <code>initialization_options</code> to the language server. These are for options which must be specified at language server startup and when changed will require restarting the language server.</p>\n<p>For example to pass the <code>check</code> option to <code>rust-analyzer</code>, use the following configuration:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"rust-analyzer\": {\n    \"initialization_options\": {\n      \"check\": {\n        \"command\": \"clippy\" // rust-analyzer.check.command (default: \"check\")\n      }\n    }\n  }\n}\n</code></pre>\n<p>While other options may be changed at a runtime and should be placed under <code>settings</code>:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"yaml-language-server\": {\n    \"settings\": {\n      \"yaml\": {\n        \"keyOrdering\": true // Enforces alphabetical ordering of keys in maps\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"global-lsp-settings\"><a class=\"header\" href=\"#global-lsp-settings\">Global LSP Settings</a></h2>\n<ul>\n<li>Description: Configuration for global LSP settings that apply to all language servers</li>\n<li>Setting: <code>global_lsp_settings</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"global_lsp_settings\": {\n    \"button\": true\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>button</code>: Whether to show the LSP status button in the status bar</li>\n</ul>\n<h2 id=\"lsp-highlight-debounce\"><a class=\"header\" href=\"#lsp-highlight-debounce\">LSP Highlight Debounce</a></h2>\n<ul>\n<li>Description: The debounce delay in milliseconds before querying highlights from the language server based on the current cursor location.</li>\n<li>Setting: <code>lsp_highlight_debounce</code></li>\n<li>Default: <code>75</code></li>\n</ul>\n<h2 id=\"global-lsp-settings-1\"><a class=\"header\" href=\"#global-lsp-settings-1\">Global LSP Settings</a></h2>\n<ul>\n<li>Description: Common language server settings.</li>\n<li>Setting: <code>global_lsp_settings</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"global_lsp_settings\": {\n  \"button\": true\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values representing milliseconds</p>\n<h2 id=\"features\"><a class=\"header\" href=\"#features\">Features</a></h2>\n<ul>\n<li>Description: Features that can be globally enabled or disabled</li>\n<li>Setting: <code>features</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"zed\"\n  }\n}\n</code></pre>\n<h3 id=\"edit-prediction-provider\"><a class=\"header\" href=\"#edit-prediction-provider\">Edit Prediction Provider</a></h3>\n<ul>\n<li>Description: Which edit prediction provider to use</li>\n<li>Setting: <code>edit_prediction_provider</code></li>\n<li>Default: <code>\"zed\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use Zeta as the edit prediction provider:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"zed\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Use Copilot as the edit prediction provider:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"copilot\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Use Supermaven as the edit prediction provider:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"supermaven\"\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Turn off edit predictions across all providers</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"none\"\n  }\n}\n</code></pre>\n<h2 id=\"format-on-save\"><a class=\"header\" href=\"#format-on-save\">Format On Save</a></h2>\n<ul>\n<li>Description: Whether or not to perform a buffer format before saving.</li>\n<li>Setting: <code>format_on_save</code></li>\n<li>Default: <code>on</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>on</code>, enables format on save obeying <code>formatter</code> setting:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"format_on_save\": \"on\"\n}\n</code></pre>\n<ol start=\"2\">\n<li><code>off</code>, disables format on save:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"format_on_save\": \"off\"\n}\n</code></pre>\n<h2 id=\"formatter\"><a class=\"header\" href=\"#formatter\">Formatter</a></h2>\n<ul>\n<li>Description: How to perform a buffer format.</li>\n<li>Setting: <code>formatter</code></li>\n<li>Default: <code>auto</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>To use the current language server, use <code>\"language_server\"</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"formatter\": \"language_server\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Or to use an external command, use <code>\"external\"</code>. Specify the name of the formatting program to run, and an array of arguments to pass to the program. The buffer's text will be passed to the program on stdin, and the formatted output should be written to stdout. For example, the following command would strip trailing spaces using <a href=\"https://linux.die.net/man/1/sed\"><code>sed(1)</code></a>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"formatter\": {\n    \"external\": {\n      \"command\": \"sed\",\n      \"arguments\": [\"-e\", \"s/ *$//\"]\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>External formatters may optionally include a <code>{buffer_path}</code> placeholder which at runtime will include the path of the buffer being formatted. Formatters operate by receiving file content via standard input, reformatting it and then outputting it to standard output and so normally don't know the filename of what they are formatting. Tools like Prettier support receiving the file path via a command line argument which can then used to impact formatting decisions.</li>\n</ol>\n<p>WARNING: <code>{buffer_path}</code> should not be used to direct your formatter to read from a filename. Your formatter should only read from standard input and should not read or write files directly.</p>\n<pre><code class=\"language-json\">  \"formatter\": {\n    \"external\": {\n      \"command\": \"prettier\",\n      \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n    }\n  }\n</code></pre>\n<ol start=\"4\">\n<li>Or to use code actions provided by the connected language servers, use <code>\"code_actions\"</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"formatter\": {\n    \"code_actions\": {\n      // Use ESLint's --fix:\n      \"source.fixAll.eslint\": true,\n      // Organize imports on save:\n      \"source.organizeImports\": true\n    }\n  }\n}\n</code></pre>\n<ol start=\"5\">\n<li>Or to use multiple formatters consecutively, use an array of formatters:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"formatter\": [\n    { \"language_server\": { \"name\": \"rust-analyzer\" } },\n    {\n      \"external\": {\n        \"command\": \"sed\",\n        \"arguments\": [\"-e\", \"s/ *$//\"]\n      }\n    }\n  ]\n}\n</code></pre>\n<p>Here <code>rust-analyzer</code> will be used first to format the code, followed by a call of sed.\nIf any of the formatters fails, the subsequent ones will still be executed.</p>\n<h2 id=\"code-actions-on-format\"><a class=\"header\" href=\"#code-actions-on-format\">Code Actions On Format</a></h2>\n<ul>\n<li>Description: The code actions to perform with the primary language server when formatting the buffer.</li>\n<li>Setting: <code>code_actions_on_format</code></li>\n<li>Default: <code>{}</code>, except for Go it's <code>{ \"source.organizeImports\": true }</code></li>\n</ul>\n<p><strong>Examples</strong></p>\n<!--\nTBD: Add Python Ruff source.organizeImports example\n-->\n<ol>\n<li>Organize imports on format in TypeScript and TSX buffers:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"TypeScript\": {\n      \"code_actions_on_format\": {\n        \"source.organizeImports\": true\n      }\n    },\n    \"TSX\": {\n      \"code_actions_on_format\": {\n        \"source.organizeImports\": true\n      }\n    }\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Run ESLint <code>fixAll</code> code action when formatting:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Run only a single ESLint rule when using <code>fixAll</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"auto-close\"><a class=\"header\" href=\"#auto-close\">Auto close</a></h2>\n<ul>\n<li>Description: Whether to automatically add matching closing characters when typing opening parenthesis, bracket, brace, single or double quote characters.</li>\n<li>Setting: <code>use_autoclose</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"always-treat-brackets-as-autoclosed\"><a class=\"header\" href=\"#always-treat-brackets-as-autoclosed\">Always Treat Brackets As Autoclosed</a></h2>\n<ul>\n<li>Description: Controls how the editor handles the autoclosed characters.</li>\n<li>Setting: <code>always_treat_brackets_as_autoclosed</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<p><strong>Example</strong></p>\n<p>If the setting is set to <code>true</code>:</p>\n<ol>\n<li>Enter in the editor: <code>)))</code></li>\n<li>Move the cursor to the start: <code>^)))</code></li>\n<li>Enter again: <code>)))</code></li>\n</ol>\n<p>The result is still <code>)))</code> and not <code>))))))</code>, which is what it would be by default.</p>\n<h2 id=\"file-scan-exclusions\"><a class=\"header\" href=\"#file-scan-exclusions\">File Scan Exclusions</a></h2>\n<ul>\n<li>Setting: <code>file_scan_exclusions</code></li>\n<li>Description: Files or globs of files that will be excluded by Zed entirely. They will be skipped during file scans, file searches, and not be displayed in the project file tree. Overrides <code>file_scan_inclusions</code>.</li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"file_scan_exclusions\": [\n  \"**/.git\",\n  \"**/.svn\",\n  \"**/.hg\",\n  \"**/.jj\",\n  \"**/CVS\",\n  \"**/.DS_Store\",\n  \"**/Thumbs.db\",\n  \"**/.classpath\",\n  \"**/.settings\"\n],\n</code></pre>\n<p>Note, specifying <code>file_scan_exclusions</code> in settings.json will override the defaults (shown above). If you are looking to exclude additional items you will need to include all the default values in your settings.</p>\n<h2 id=\"file-scan-inclusions\"><a class=\"header\" href=\"#file-scan-inclusions\">File Scan Inclusions</a></h2>\n<ul>\n<li>Setting: <code>file_scan_inclusions</code></li>\n<li>Description: Files or globs of files that will be included by Zed, even when ignored by git. This is useful for files that are not tracked by git, but are still important to your project. Note that globs that are overly broad can slow down Zed's file scanning. <code>file_scan_exclusions</code> takes precedence over these inclusions.</li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"file_scan_inclusions\": [\".env*\"],\n</code></pre>\n<h2 id=\"file-types\"><a class=\"header\" href=\"#file-types\">File Types</a></h2>\n<ul>\n<li>Setting: <code>file_types</code></li>\n<li>Description: Configure how Zed selects a language for a file based on its filename or extension. Supports glob entries.</li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"file_types\": {\n  \"JSONC\": [\"**/.zed/**/*.json\", \"**/zed/**/*.json\", \"**/Zed/**/*.json\", \"**/.vscode/**/*.json\"],\n  \"Shell Script\": [\".env.*\"]\n}\n</code></pre>\n<p><strong>Examples</strong></p>\n<p>To interpret all <code>.c</code> files as C++, files called <code>MyLockFile</code> as TOML and files starting with <code>Dockerfile</code> as Dockerfile:</p>\n<pre><code class=\"language-json\">{\n  \"file_types\": {\n    \"C++\": [\"c\"],\n    \"TOML\": [\"MyLockFile\"],\n    \"Dockerfile\": [\"Dockerfile*\"]\n  }\n}\n</code></pre>\n<h2 id=\"diagnostics-1\"><a class=\"header\" href=\"#diagnostics-1\">Diagnostics</a></h2>\n<ul>\n<li>Description: Configuration for diagnostics-related features.</li>\n<li>Setting: <code>diagnostics</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"include_warnings\": true,\n    \"inline\": {\n      \"enabled\": false\n    },\n    \"update_with_cursor\": false,\n    \"primary_only\": false,\n    \"use_rendered\": false\n  }\n}\n</code></pre>\n<h3 id=\"inline-diagnostics\"><a class=\"header\" href=\"#inline-diagnostics\">Inline Diagnostics</a></h3>\n<ul>\n<li>Description: Whether or not to show diagnostics information inline.</li>\n<li>Setting: <code>inline</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": false,\n      \"update_debounce_ms\": 150,\n      \"padding\": 4,\n      \"min_column\": 0,\n      \"max_severity\": null\n    }\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Enable inline diagnostics.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true\n    }\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Delay diagnostic updates until some time after the last diagnostic update.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"update_debounce_ms\": 150\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Set padding between the end of the source line and the start of the diagnostic.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"padding\": 4\n    }\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Horizontally align inline diagnostics at the given column.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"min_column\": 80\n    }\n  }\n}\n</code></pre>\n<ol start=\"5\">\n<li>Show only warning and error diagnostics.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"max_severity\": \"warning\"\n    }\n  }\n}\n</code></pre>\n<h2 id=\"git\"><a class=\"header\" href=\"#git\">Git</a></h2>\n<ul>\n<li>Description: Configuration for git-related features.</li>\n<li>Setting: <code>git</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"git_gutter\": \"tracked_files\",\n    \"inline_blame\": {\n      \"enabled\": true\n    },\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n</code></pre>\n<h3 id=\"git-gutter\"><a class=\"header\" href=\"#git-gutter\">Git Gutter</a></h3>\n<ul>\n<li>Description: Whether or not to show the git gutter.</li>\n<li>Setting: <code>git_gutter</code></li>\n<li>Default: <code>tracked_files</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show git gutter in tracked files</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"git_gutter\": \"tracked_files\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Hide git gutter</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"git_gutter\": \"hide\"\n  }\n}\n</code></pre>\n<h3 id=\"gutter-debounce\"><a class=\"header\" href=\"#gutter-debounce\">Gutter Debounce</a></h3>\n<ul>\n<li>Description: Sets the debounce threshold (in milliseconds) after which changes are reflected in the git gutter.</li>\n<li>Setting: <code>gutter_debounce</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values representing milliseconds</p>\n<p>Example:</p>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"gutter_debounce\": 100\n  }\n}\n</code></pre>\n<h3 id=\"inline-git-blame\"><a class=\"header\" href=\"#inline-git-blame\">Inline Git Blame</a></h3>\n<ul>\n<li>Description: Whether or not to show git blame information inline, on the currently focused line.</li>\n<li>Setting: <code>inline_blame</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": true\n    }\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Disable inline git blame:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": false\n    }\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Only show inline git blame after a delay (that starts after cursor stops moving):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"delay_ms\": 500\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Show a commit summary next to the commit date and author:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"show_commit_summary\": true\n    }\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Use this as the minimum column at which to display inline blame information:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"min_column\": 80\n    }\n  }\n}\n</code></pre>\n<ol start=\"5\">\n<li>Set the padding between the end of the line and the inline blame hint, in ems:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"inline_blame\": {\n      \"padding\": 10\n    }\n  }\n}\n</code></pre>\n<h3 id=\"hunk-style\"><a class=\"header\" href=\"#hunk-style\">Hunk Style</a></h3>\n<ul>\n<li>Description: What styling we should use for the diff hunks.</li>\n<li>Setting: <code>hunk_style</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show the staged hunks faded out and with a border:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Show unstaged hunks faded out and with a border:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git\": {\n    \"hunk_style\": \"unstaged_hollow\"\n  }\n}\n</code></pre>\n<h2 id=\"go-to-definition-fallback\"><a class=\"header\" href=\"#go-to-definition-fallback\">Go to Definition Fallback</a></h2>\n<ul>\n<li>Description: What to do when the \"go to definition\" action fails to find a definition</li>\n<li>Setting: <code>go_to_definition_fallback</code></li>\n<li>Default: <code>\"find_all_references\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Do nothing:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"go_to_definition_fallback\": \"none\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Find references for the same symbol (default):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"go_to_definition_fallback\": \"find_all_references\"\n}\n</code></pre>\n<h2 id=\"hard-tabs\"><a class=\"header\" href=\"#hard-tabs\">Hard Tabs</a></h2>\n<ul>\n<li>Description: Whether to indent lines using tab characters or multiple spaces.</li>\n<li>Setting: <code>hard_tabs</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"helix-mode\"><a class=\"header\" href=\"#helix-mode\">Helix Mode</a></h2>\n<ul>\n<li>Description: Whether or not to enable Helix mode. Enabling <code>helix_mode</code> also enables <code>vim_mode</code>. See the <a href=\"./helix.html\">Helix documentation</a> for more details.</li>\n<li>Setting: <code>helix_mode</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"indent-guides\"><a class=\"header\" href=\"#indent-guides\">Indent Guides</a></h2>\n<ul>\n<li>Description: Configuration related to indent guides. Indent guides can be configured separately for each language.</li>\n<li>Setting: <code>indent_guides</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"line_width\": 1,\n    \"active_line_width\": 1,\n    \"coloring\": \"fixed\",\n    \"background_coloring\": \"disabled\"\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Disable indent guides</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"enabled\": false\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Enable indent guides for a specific language.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Python\": {\n      \"indent_guides\": {\n        \"enabled\": true\n      }\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Enable indent aware coloring (\"rainbow indentation\").\nThe colors that are used for different indentation levels are defined in the theme (theme key: <code>accents</code>). They can be customized by using theme overrides.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"coloring\": \"indent_aware\"\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Enable indent aware background coloring (\"rainbow indentation\").\nThe colors that are used for different indentation levels are defined in the theme (theme key: <code>accents</code>). They can be customized by using theme overrides.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"coloring\": \"indent_aware\",\n    \"background_coloring\": \"indent_aware\"\n  }\n}\n</code></pre>\n<h2 id=\"hover-popover-enabled\"><a class=\"header\" href=\"#hover-popover-enabled\">Hover Popover Enabled</a></h2>\n<ul>\n<li>Description: Whether or not to show the informational hover box when moving the mouse over symbols in the editor.</li>\n<li>Setting: <code>hover_popover_enabled</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"hover-popover-delay\"><a class=\"header\" href=\"#hover-popover-delay\">Hover Popover Delay</a></h2>\n<ul>\n<li>Description: Time to wait in milliseconds before showing the informational hover box.</li>\n<li>Setting: <code>hover_popover_delay</code></li>\n<li>Default: <code>300</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values representing milliseconds</p>\n<h2 id=\"icon-theme\"><a class=\"header\" href=\"#icon-theme\">Icon Theme</a></h2>\n<ul>\n<li>Description: The icon theme setting can be specified in two forms - either as the name of an icon theme or as an object containing the <code>mode</code>, <code>dark</code>, and <code>light</code> icon themes for files/folders inside Zed.</li>\n<li>Setting: <code>icon_theme</code></li>\n<li>Default: <code>Zed (Default)</code></li>\n</ul>\n<h3 id=\"icon-theme-object\"><a class=\"header\" href=\"#icon-theme-object\">Icon Theme Object</a></h3>\n<ul>\n<li>Description: Specify the icon theme using an object that includes the <code>mode</code>, <code>dark</code>, and <code>light</code>.</li>\n<li>Setting: <code>icon_theme</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"icon_theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"Zed (Default)\",\n  \"light\": \"Zed (Default)\"\n},\n</code></pre>\n<h3 id=\"mode\"><a class=\"header\" href=\"#mode\">Mode</a></h3>\n<ul>\n<li>Description: Specify the icon theme mode.</li>\n<li>Setting: <code>mode</code></li>\n<li>Default: <code>system</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Set the icon theme to dark mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"dark\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Set the icon theme to light mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"light\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Set the icon theme to system mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"system\"\n}\n</code></pre>\n<h3 id=\"dark\"><a class=\"header\" href=\"#dark\">Dark</a></h3>\n<ul>\n<li>Description: The name of the dark icon theme.</li>\n<li>Setting: <code>dark</code></li>\n<li>Default: <code>Zed (Default)</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Run the <code>icon theme selector: toggle</code> action in the command palette to see a current list of valid icon themes names.</p>\n<h3 id=\"light\"><a class=\"header\" href=\"#light\">Light</a></h3>\n<ul>\n<li>Description: The name of the light icon theme.</li>\n<li>Setting: <code>light</code></li>\n<li>Default: <code>Zed (Default)</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Run the <code>icon theme selector: toggle</code> action in the command palette to see a current list of valid icon themes names.</p>\n<h2 id=\"image-viewer\"><a class=\"header\" href=\"#image-viewer\">Image Viewer</a></h2>\n<ul>\n<li>Description: Settings for image viewer functionality</li>\n<li>Setting: <code>image_viewer</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"image_viewer\": {\n    \"unit\": \"binary\"\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<h3 id=\"unit\"><a class=\"header\" href=\"#unit\">Unit</a></h3>\n<ul>\n<li>Description: The unit for image file sizes</li>\n<li>Setting: <code>unit</code></li>\n<li>Default: <code>\"binary\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use binary units (KiB, MiB):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"image_viewer\": {\n    \"unit\": \"binary\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Use decimal units (KB, MB):</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"image_viewer\": {\n    \"unit\": \"decimal\"\n  }\n}\n</code></pre>\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay hints</a></h2>\n<ul>\n<li>Description: Configuration for displaying extra text with hints in the editor.</li>\n<li>Setting: <code>inlay_hints</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"inlay_hints\": {\n  \"enabled\": false,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true,\n  \"show_background\": false,\n  \"edit_debounce_ms\": 700,\n  \"scroll_debounce_ms\": 50,\n  \"toggle_on_modifiers_press\": null\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p>Inlay hints querying consists of two parts: editor (client) and LSP server.\nWith the inlay settings above are changed to enable the hints, editor will start to query certain types of hints and react on LSP hint refresh request from the server.\nAt this point, the server may or may not return hints depending on its implementation, further configuration might be needed, refer to the corresponding LSP server documentation.</p>\n<p>The following languages have inlay hints preconfigured by Zed:</p>\n<ul>\n<li><a href=\"https://docs.zed.dev/languages/go\">Go</a></li>\n<li><a href=\"https://docs.zed.dev/languages/rust\">Rust</a></li>\n<li><a href=\"https://docs.zed.dev/languages/svelte\">Svelte</a></li>\n<li><a href=\"https://docs.zed.dev/languages/typescript\">Typescript</a></li>\n</ul>\n<p>Use the <code>lsp</code> section for the server configuration. Examples are provided in the corresponding language documentation.</p>\n<p>Hints are not instantly queried in Zed, two kinds of debounces are used, either may be set to 0 to be disabled.\nSettings-related hint updates are not debounced.</p>\n<p>All possible config values for <code>toggle_on_modifiers_press</code> are:</p>\n<pre><code class=\"language-json\">\"inlay_hints\": {\n  \"toggle_on_modifiers_press\": {\n    \"control\": true,\n    \"shift\": true,\n    \"alt\": true,\n    \"platform\": true,\n    \"function\": true\n  }\n}\n</code></pre>\n<p>Unspecified values have a <code>false</code> value, hints won't be toggled if all the modifiers are <code>false</code> or not all the modifiers are pressed.</p>\n<h2 id=\"journal\"><a class=\"header\" href=\"#journal\">Journal</a></h2>\n<ul>\n<li>Description: Configuration for the journal.</li>\n<li>Setting: <code>journal</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"journal\": {\n  \"path\": \"~\",\n  \"hour_format\": \"hour12\"\n}\n</code></pre>\n<h3 id=\"path\"><a class=\"header\" href=\"#path\">Path</a></h3>\n<ul>\n<li>Description: The path of the directory where journal entries are stored.</li>\n<li>Setting: <code>path</code></li>\n<li>Default: <code>~</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>string</code> values</p>\n<h3 id=\"hour-format\"><a class=\"header\" href=\"#hour-format\">Hour Format</a></h3>\n<ul>\n<li>Description: The format to use for displaying hours in the journal.</li>\n<li>Setting: <code>hour_format</code></li>\n<li>Default: <code>hour12</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>12-hour format:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"hour_format\": \"hour12\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>24-hour format:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"hour_format\": \"hour24\"\n}\n</code></pre>\n<h2 id=\"jsx-tag-auto-close\"><a class=\"header\" href=\"#jsx-tag-auto-close\">JSX Tag Auto Close</a></h2>\n<ul>\n<li>Description: Whether to automatically close JSX tags</li>\n<li>Setting: <code>jsx_tag_auto_close</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"jsx_tag_auto_close\": {\n    \"enabled\": true\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>enabled</code>: Whether to enable automatic JSX tag closing</li>\n</ul>\n<h2 id=\"languages\"><a class=\"header\" href=\"#languages\">Languages</a></h2>\n<ul>\n<li>Description: Configuration for specific languages.</li>\n<li>Setting: <code>languages</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>To override settings for a language, add an entry for that languages name to the <code>languages</code> value. Example:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"C\": {\n    \"format_on_save\": \"off\",\n    \"preferred_line_length\": 64,\n    \"soft_wrap\": \"preferred_line_length\"\n  },\n  \"JSON\": {\n    \"tab_size\": 4\n  }\n}\n</code></pre>\n<p>The following settings can be overridden for each specific language:</p>\n<ul>\n<li><a href=\"#enable-language-server\"><code>enable_language_server</code></a></li>\n<li><a href=\"#ensure-final-newline-on-save\"><code>ensure_final_newline_on_save</code></a></li>\n<li><a href=\"#format-on-save\"><code>format_on_save</code></a></li>\n<li><a href=\"#formatter\"><code>formatter</code></a></li>\n<li><a href=\"#hard-tabs\"><code>hard_tabs</code></a></li>\n<li><a href=\"#preferred-line-length\"><code>preferred_line_length</code></a></li>\n<li><a href=\"#remove-trailing-whitespace-on-save\"><code>remove_trailing_whitespace_on_save</code></a></li>\n<li><a href=\"#show-edit-predictions\"><code>show_edit_predictions</code></a></li>\n<li><a href=\"#show-whitespaces\"><code>show_whitespaces</code></a></li>\n<li><a href=\"#soft-wrap\"><code>soft_wrap</code></a></li>\n<li><a href=\"#tab-size\"><code>tab_size</code></a></li>\n<li><a href=\"#use-autoclose\"><code>use_autoclose</code></a></li>\n<li><a href=\"#always-treat-brackets-as-autoclosed\"><code>always_treat_brackets_as_autoclosed</code></a></li>\n</ul>\n<p>These values take in the same options as the root-level settings with the same name.</p>\n<h2 id=\"language-models\"><a class=\"header\" href=\"#language-models\">Language Models</a></h2>\n<ul>\n<li>Description: Configuration for language model providers</li>\n<li>Setting: <code>language_models</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"anthropic\": {\n      \"api_url\": \"https://api.anthropic.com\"\n    },\n    \"google\": {\n      \"api_url\": \"https://generativelanguage.googleapis.com\"\n    },\n    \"ollama\": {\n      \"api_url\": \"http://localhost:11434\"\n    },\n    \"openai\": {\n      \"api_url\": \"https://api.openai.com/v1\"\n    }\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p>Configuration for various AI model providers including API URLs and authentication settings.</p>\n<h2 id=\"line-indicator-format\"><a class=\"header\" href=\"#line-indicator-format\">Line Indicator Format</a></h2>\n<ul>\n<li>Description: Format for line indicator in the status bar</li>\n<li>Setting: <code>line_indicator_format</code></li>\n<li>Default: <code>\"short\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Short format:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"line_indicator_format\": \"short\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Long format:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"line_indicator_format\": \"long\"\n}\n</code></pre>\n<h2 id=\"linked-edits\"><a class=\"header\" href=\"#linked-edits\">Linked Edits</a></h2>\n<ul>\n<li>Description: Whether to perform linked edits of associated ranges, if the language server supports it. For example, when editing opening <code>&lt;html&gt;</code> tag, the contents of the closing <code>&lt;/html&gt;</code> tag will be edited as well.</li>\n<li>Setting: <code>linked_edits</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"lsp-document-colors\"><a class=\"header\" href=\"#lsp-document-colors\">LSP Document Colors</a></h2>\n<ul>\n<li>Description: Whether to show document color information from the language server</li>\n<li>Setting: <code>lsp_document_colors</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"max-tabs\"><a class=\"header\" href=\"#max-tabs\">Max Tabs</a></h2>\n<ul>\n<li>Description: Maximum number of tabs to show in the tab bar</li>\n<li>Setting: <code>max_tabs</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive <code>integer</code> values or <code>null</code> for unlimited tabs</p>\n<h2 id=\"middle-click-paste-linux-only\"><a class=\"header\" href=\"#middle-click-paste-linux-only\">Middle Click Paste (Linux only)</a></h2>\n<ul>\n<li>Description: Enable middle-click paste on Linux</li>\n<li>Setting: <code>middle_click_paste</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"multi-cursor-modifier\"><a class=\"header\" href=\"#multi-cursor-modifier\">Multi Cursor Modifier</a></h2>\n<ul>\n<li>Description: Determines the modifier to be used to add multiple cursors with the mouse. The open hover link mouse gestures will adapt such that it do not conflict with the multicursor modifier.</li>\n<li>Setting: <code>multi_cursor_modifier</code></li>\n<li>Default: <code>alt</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Maps to <code>Alt</code> on Linux and Windows and to <code>Option</code> on MacOS:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"multi_cursor_modifier\": \"alt\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Maps <code>Control</code> on Linux and Windows and to <code>Command</code> on MacOS:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"multi_cursor_modifier\": \"cmd_or_ctrl\" // alias: \"cmd\", \"ctrl\"\n}\n</code></pre>\n<h2 id=\"node\"><a class=\"header\" href=\"#node\">Node</a></h2>\n<ul>\n<li>Description: Configuration for Node.js integration</li>\n<li>Setting: <code>node</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"node\": {\n    \"ignore_system_version\": false,\n    \"path\": null,\n    \"npm_path\": null\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>ignore_system_version</code>: Whether to ignore the system Node.js version</li>\n<li><code>path</code>: Custom path to Node.js binary</li>\n<li><code>npm_path</code>: Custom path to npm binary</li>\n</ul>\n<h2 id=\"network-proxy\"><a class=\"header\" href=\"#network-proxy\">Network Proxy</a></h2>\n<ul>\n<li>Description: Configure a network proxy for Zed.</li>\n<li>Setting: <code>proxy</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>The proxy setting must contain a URL to the proxy.</p>\n<p>The following URI schemes are supported:</p>\n<ul>\n<li><code>http</code></li>\n<li><code>https</code></li>\n<li><code>socks4</code> - SOCKS4 proxy with local DNS</li>\n<li><code>socks4a</code> - SOCKS4 proxy with remote DNS</li>\n<li><code>socks5</code> - SOCKS5 proxy with local DNS</li>\n<li><code>socks5h</code> - SOCKS5 proxy with remote DNS</li>\n</ul>\n<p><code>http</code> will be used when no scheme is specified.</p>\n<p>By default no proxy will be used, or Zed will attempt to retrieve proxy settings from environment variables, such as <code>http_proxy</code>, <code>HTTP_PROXY</code>, <code>https_proxy</code>, <code>HTTPS_PROXY</code>, <code>all_proxy</code>, <code>ALL_PROXY</code>, <code>no_proxy</code> and <code>NO_PROXY</code>.</p>\n<p>For example, to set an <code>http</code> proxy, add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"proxy\": \"http://127.0.0.1:10809\"\n}\n</code></pre>\n<p>Or to set a <code>socks5</code> proxy:</p>\n<pre><code class=\"language-json\">{\n  \"proxy\": \"socks5h://localhost:10808\"\n}\n</code></pre>\n<p>If you wish to exclude certain hosts from using the proxy, set the <code>NO_PROXY</code> environment variable. This accepts a comma-separated list of hostnames, host suffixes, IPv4/IPv6 addresses or blocks that should not use the proxy. For example if your environment included <code>NO_PROXY=\"google.com, 192.168.1.0/24\"</code> all hosts in <code>192.168.1.*</code>, <code>google.com</code> and <code>*.google.com</code> would bypass the proxy. See <a href=\"https://docs.rs/reqwest/latest/reqwest/struct.NoProxy.html#method.from_string\">reqwest NoProxy docs</a> for more.</p>\n<h2 id=\"on-last-window-closed\"><a class=\"header\" href=\"#on-last-window-closed\">On Last Window Closed</a></h2>\n<ul>\n<li>Description: What to do when the last window is closed</li>\n<li>Setting: <code>on_last_window_closed</code></li>\n<li>Default: <code>\"platform_default\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use platform default behavior:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"on_last_window_closed\": \"platform_default\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Always quit the application:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"on_last_window_closed\": \"quit_app\"\n}\n</code></pre>\n<h2 id=\"profiles\"><a class=\"header\" href=\"#profiles\">Profiles</a></h2>\n<ul>\n<li>Description: Configuration profiles that can be applied on top of existing settings</li>\n<li>Setting: <code>profiles</code></li>\n<li>Default: <code>{}</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Configuration object for defining settings profiles. Example:</p>\n<pre><code class=\"language-json\">{\n  \"profiles\": {\n    \"presentation\": {\n      \"buffer_font_size\": 20,\n      \"ui_font_size\": 18,\n      \"theme\": \"One Light\"\n    }\n  }\n}\n</code></pre>\n<h2 id=\"preview-tabs\"><a class=\"header\" href=\"#preview-tabs\">Preview tabs</a></h2>\n<ul>\n<li>\n<p>Description:\nPreview tabs allow you to open files in preview mode, where they close automatically when you switch to another file unless you explicitly pin them. This is useful for quickly viewing files without cluttering your workspace. Preview tabs display their file names in italics. <br/>\nThere are several ways to convert a preview tab into a regular tab:</p>\n<ul>\n<li>Double-clicking on the file</li>\n<li>Double-clicking on the tab header</li>\n<li>Using the <code>project_panel::OpenPermanent</code> action</li>\n<li>Editing the file</li>\n<li>Dragging the file to a different pane</li>\n</ul>\n</li>\n<li>\n<p>Setting: <code>preview_tabs</code></p>\n</li>\n<li>\n<p>Default:</p>\n</li>\n</ul>\n<pre><code class=\"language-json\">\"preview_tabs\": {\n  \"enabled\": true,\n  \"enable_preview_from_file_finder\": false,\n  \"enable_preview_from_code_navigation\": false,\n}\n</code></pre>\n<h3 id=\"enable-preview-from-file-finder\"><a class=\"header\" href=\"#enable-preview-from-file-finder\">Enable preview from file finder</a></h3>\n<ul>\n<li>Description: Determines whether to open files in preview mode when selected from the file finder.</li>\n<li>Setting: <code>enable_preview_from_file_finder</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"enable-preview-from-code-navigation\"><a class=\"header\" href=\"#enable-preview-from-code-navigation\">Enable preview from code navigation</a></h3>\n<ul>\n<li>Description: Determines whether a preview tab gets replaced when code navigation is used to navigate away from the tab.</li>\n<li>Setting: <code>enable_preview_from_code_navigation</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"file-finder\"><a class=\"header\" href=\"#file-finder\">File Finder</a></h2>\n<h3 id=\"file-icons-1\"><a class=\"header\" href=\"#file-icons-1\">File Icons</a></h3>\n<ul>\n<li>Description: Whether to show file icons in the file finder.</li>\n<li>Setting: <code>file_icons</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3 id=\"modal-max-width\"><a class=\"header\" href=\"#modal-max-width\">Modal Max Width</a></h3>\n<ul>\n<li>Description: Max-width of the file finder modal. It can take one of these values: <code>small</code>, <code>medium</code>, <code>large</code>, <code>xlarge</code>, and <code>full</code>.</li>\n<li>Setting: <code>modal_max_width</code></li>\n<li>Default: <code>small</code></li>\n</ul>\n<h3 id=\"skip-focus-for-active-in-search\"><a class=\"header\" href=\"#skip-focus-for-active-in-search\">Skip Focus For Active In Search</a></h3>\n<ul>\n<li>Description: Determines whether the file finder should skip focus for the active file in search results.</li>\n<li>Setting: <code>skip_focus_for_active_in_search</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<h2 id=\"pane-split-direction-horizontal\"><a class=\"header\" href=\"#pane-split-direction-horizontal\">Pane Split Direction Horizontal</a></h2>\n<ul>\n<li>Description: The direction that you want to split panes horizontally</li>\n<li>Setting: <code>pane_split_direction_horizontal</code></li>\n<li>Default: <code>\"up\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Split upward:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"pane_split_direction_horizontal\": \"up\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Split downward:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"pane_split_direction_horizontal\": \"down\"\n}\n</code></pre>\n<h2 id=\"pane-split-direction-vertical\"><a class=\"header\" href=\"#pane-split-direction-vertical\">Pane Split Direction Vertical</a></h2>\n<ul>\n<li>Description: The direction that you want to split panes vertically</li>\n<li>Setting: <code>pane_split_direction_vertical</code></li>\n<li>Default: <code>\"left\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Split to the left:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"pane_split_direction_vertical\": \"left\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Split to the right:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"pane_split_direction_vertical\": \"right\"\n}\n</code></pre>\n<h2 id=\"preferred-line-length\"><a class=\"header\" href=\"#preferred-line-length\">Preferred Line Length</a></h2>\n<ul>\n<li>Description: The column at which to soft-wrap lines, for buffers where soft-wrap is enabled.</li>\n<li>Setting: <code>preferred_line_length</code></li>\n<li>Default: <code>80</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values</p>\n<h2 id=\"private-files\"><a class=\"header\" href=\"#private-files\">Private Files</a></h2>\n<ul>\n<li>Description: Globs to match against file paths to determine if a file is private</li>\n<li>Setting: <code>private_files</code></li>\n<li>Default: <code>[\"**/.env*\", \"**/*.pem\", \"**/*.key\", \"**/*.cert\", \"**/*.crt\", \"**/secrets.yml\"]</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>List of <code>string</code> glob patterns</p>\n<h2 id=\"projects-online-by-default\"><a class=\"header\" href=\"#projects-online-by-default\">Projects Online By Default</a></h2>\n<ul>\n<li>Description: Whether or not to show the online projects view by default.</li>\n<li>Setting: <code>projects_online_by_default</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"read-ssh-config\"><a class=\"header\" href=\"#read-ssh-config\">Read SSH Config</a></h2>\n<ul>\n<li>Description: Whether to read SSH configuration files</li>\n<li>Setting: <code>read_ssh_config</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"redact-private-values\"><a class=\"header\" href=\"#redact-private-values\">Redact Private Values</a></h2>\n<ul>\n<li>Description: Hide the values of variables from visual display in private files</li>\n<li>Setting: <code>redact_private_values</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"relative-line-numbers\"><a class=\"header\" href=\"#relative-line-numbers\">Relative Line Numbers</a></h2>\n<ul>\n<li>Description: Whether to show relative line numbers in the gutter</li>\n<li>Setting: <code>relative_line_numbers</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"remove-trailing-whitespace-on-save\"><a class=\"header\" href=\"#remove-trailing-whitespace-on-save\">Remove Trailing Whitespace On Save</a></h2>\n<ul>\n<li>Description: Whether or not to remove any trailing whitespace from lines of a buffer before saving it.</li>\n<li>Setting: <code>remove_trailing_whitespace_on_save</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"resize-all-panels-in-dock\"><a class=\"header\" href=\"#resize-all-panels-in-dock\">Resize All Panels In Dock</a></h2>\n<ul>\n<li>Description: Whether to resize all the panels in a dock when resizing the dock. Can be a combination of \"left\", \"right\" and \"bottom\".</li>\n<li>Setting: <code>resize_all_panels_in_dock</code></li>\n<li>Default: <code>[\"left\"]</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>List of strings containing any combination of:</p>\n<ul>\n<li><code>\"left\"</code>: Resize left dock panels together</li>\n<li><code>\"right\"</code>: Resize right dock panels together</li>\n<li><code>\"bottom\"</code>: Resize bottom dock panels together</li>\n</ul>\n<h2 id=\"restore-on-file-reopen\"><a class=\"header\" href=\"#restore-on-file-reopen\">Restore on File Reopen</a></h2>\n<ul>\n<li>Description: Whether to attempt to restore previous file's state when opening it again. The state is stored per pane.</li>\n<li>Setting: <code>restore_on_file_reopen</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"restore-on-startup\"><a class=\"header\" href=\"#restore-on-startup\">Restore on Startup</a></h2>\n<ul>\n<li>Description: Controls session restoration on startup.</li>\n<li>Setting: <code>restore_on_startup</code></li>\n<li>Default: <code>last_session</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Restore all workspaces that were open when quitting Zed:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"restore_on_startup\": \"last_session\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Restore the workspace that was closed last:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"restore_on_startup\": \"last_workspace\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Always start with an empty editor:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"restore_on_startup\": \"none\"\n}\n</code></pre>\n<h2 id=\"scroll-beyond-last-line\"><a class=\"header\" href=\"#scroll-beyond-last-line\">Scroll Beyond Last Line</a></h2>\n<ul>\n<li>Description: Whether the editor will scroll beyond the last line</li>\n<li>Setting: <code>scroll_beyond_last_line</code></li>\n<li>Default: <code>\"one_page\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Scroll one page beyond the last line by one page:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"scroll_beyond_last_line\": \"one_page\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>The editor will scroll beyond the last line by the same amount of lines as <code>vertical_scroll_margin</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"scroll_beyond_last_line\": \"vertical_scroll_margin\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>The editor will not scroll beyond the last line:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"scroll_beyond_last_line\": \"off\"\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"scroll-sensitivity\"><a class=\"header\" href=\"#scroll-sensitivity\">Scroll Sensitivity</a></h2>\n<ul>\n<li>Description: Scroll sensitivity multiplier. This multiplier is applied to both the horizontal and vertical delta values while scrolling.</li>\n<li>Setting: <code>scroll_sensitivity</code></li>\n<li>Default: <code>1.0</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive <code>float</code> values</p>\n<h3 id=\"fast-scroll-sensitivity\"><a class=\"header\" href=\"#fast-scroll-sensitivity\">Fast Scroll Sensitivity</a></h3>\n<ul>\n<li>Description: Scroll sensitivity multiplier for fast scrolling. This multiplier is applied to both the horizontal and vertical delta values while scrolling. Fast scrolling happens when a user holds the alt or option key while scrolling.</li>\n<li>Setting: <code>fast_scroll_sensitivity</code></li>\n<li>Default: <code>4.0</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive <code>float</code> values</p>\n<h3 id=\"horizontal-scroll-margin\"><a class=\"header\" href=\"#horizontal-scroll-margin\">Horizontal Scroll Margin</a></h3>\n<ul>\n<li>Description: The number of characters to keep on either side when scrolling with the mouse</li>\n<li>Setting: <code>horizontal_scroll_margin</code></li>\n<li>Default: <code>5</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Non-negative <code>integer</code> values</p>\n<h3 id=\"vertical-scroll-margin\"><a class=\"header\" href=\"#vertical-scroll-margin\">Vertical Scroll Margin</a></h3>\n<ul>\n<li>Description: The number of lines to keep above/below the cursor when scrolling with the keyboard</li>\n<li>Setting: <code>vertical_scroll_margin</code></li>\n<li>Default: <code>3</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Non-negative <code>integer</code> values</p>\n<h2 id=\"search\"><a class=\"header\" href=\"#search\">Search</a></h2>\n<ul>\n<li>Description: Search options to enable by default when opening new project and buffer searches.</li>\n<li>Setting: <code>search</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"search\": {\n  \"whole_word\": false,\n  \"case_sensitive\": false,\n  \"include_ignored\": false,\n  \"regex\": false\n},\n</code></pre>\n<h2 id=\"search-wrap\"><a class=\"header\" href=\"#search-wrap\">Search Wrap</a></h2>\n<ul>\n<li>Description: If <code>search_wrap</code> is disabled, search result do not wrap around the end of the file</li>\n<li>Setting: <code>search_wrap</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<h2 id=\"seed-search-query-from-cursor\"><a class=\"header\" href=\"#seed-search-query-from-cursor\">Seed Search Query From Cursor</a></h2>\n<ul>\n<li>Description: When to populate a new search's query based on the text under the cursor.</li>\n<li>Setting: <code>seed_search_query_from_cursor</code></li>\n<li>Default: <code>always</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>always</code> always populate the search query with the word under the cursor</li>\n<li><code>selection</code> only populate the search query when there is text selected</li>\n<li><code>never</code> never populate the search query</li>\n</ol>\n<h2 id=\"use-smartcase-search\"><a class=\"header\" href=\"#use-smartcase-search\">Use Smartcase Search</a></h2>\n<ul>\n<li>Description: When enabled, automatically adjusts search case sensitivity based on your query. If your search query contains any uppercase letters, the search becomes case-sensitive; if it contains only lowercase letters, the search becomes case-insensitive. <br/>\nThis applies to both in-file searches and project-wide searches.</li>\n<li>Setting: <code>use_smartcase_search</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<p>Examples:</p>\n<ul>\n<li>Searching for \"function\" would match \"function\", \"Function\", \"FUNCTION\", etc.</li>\n<li>Searching for \"Function\" would only match \"Function\", not \"function\" or \"FUNCTION\"</li>\n</ul>\n<h2 id=\"show-call-status-icon\"><a class=\"header\" href=\"#show-call-status-icon\">Show Call Status Icon</a></h2>\n<ul>\n<li>Description: Whether or not to show the call status icon in the status bar.</li>\n<li>Setting: <code>show_call_status_icon</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"completions\"><a class=\"header\" href=\"#completions\">Completions</a></h2>\n<ul>\n<li>Description: Controls how completions are processed for this language.</li>\n<li>Setting: <code>completions</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"completions\": {\n    \"words\": \"fallback\",\n    \"words_min_length\": 3,\n    \"lsp\": true,\n    \"lsp_fetch_timeout_ms\": 0,\n    \"lsp_insert_mode\": \"replace_suffix\"\n  }\n}\n</code></pre>\n<h3 id=\"words\"><a class=\"header\" href=\"#words\">Words</a></h3>\n<ul>\n<li>Description: Controls how words are completed. For large documents, not all words may be fetched for completion.</li>\n<li>Setting: <code>words</code></li>\n<li>Default: <code>fallback</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>enabled</code> - Always fetch document's words for completions along with LSP completions</li>\n<li><code>fallback</code> - Only if LSP response errors or times out, use document's words to show completions</li>\n<li><code>disabled</code> - Never fetch or complete document's words for completions (word-based completions can still be queried via a separate action)</li>\n</ol>\n<h3 id=\"min-words-query-length\"><a class=\"header\" href=\"#min-words-query-length\">Min Words Query Length</a></h3>\n<ul>\n<li>Description: Minimum number of characters required to automatically trigger word-based completions.\nBefore that value, it's still possible to trigger the words-based completion manually with the corresponding editor command.</li>\n<li>Setting: <code>words_min_length</code></li>\n<li>Default: <code>3</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Positive integer values</p>\n<h3 id=\"lsp-1\"><a class=\"header\" href=\"#lsp-1\">LSP</a></h3>\n<ul>\n<li>Description: Whether to fetch LSP completions or not.</li>\n<li>Setting: <code>lsp</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"lsp-fetch-timeout-ms\"><a class=\"header\" href=\"#lsp-fetch-timeout-ms\">LSP Fetch Timeout (ms)</a></h3>\n<ul>\n<li>Description: When fetching LSP completions, determines how long to wait for a response of a particular server. When set to 0, waits indefinitely.</li>\n<li>Setting: <code>lsp_fetch_timeout_ms</code></li>\n<li>Default: <code>0</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values representing milliseconds</p>\n<h3 id=\"lsp-insert-mode\"><a class=\"header\" href=\"#lsp-insert-mode\">LSP Insert Mode</a></h3>\n<ul>\n<li>Description: Controls what range to replace when accepting LSP completions.</li>\n<li>Setting: <code>lsp_insert_mode</code></li>\n<li>Default: <code>replace_suffix</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>insert</code> - Replaces text before the cursor, using the <code>insert</code> range described in the LSP specification</li>\n<li><code>replace</code> - Replaces text before and after the cursor, using the <code>replace</code> range described in the LSP specification</li>\n<li><code>replace_subsequence</code> - Behaves like <code>\"replace\"</code> if the text that would be replaced is a subsequence of the completion text, and like <code>\"insert\"</code> otherwise</li>\n<li><code>replace_suffix</code> - Behaves like <code>\"replace\"</code> if the text after the cursor is a suffix of the completion, and like <code>\"insert\"</code> otherwise</li>\n</ol>\n<h2 id=\"show-completions-on-input\"><a class=\"header\" href=\"#show-completions-on-input\">Show Completions On Input</a></h2>\n<ul>\n<li>Description: Whether or not to show completions as you type.</li>\n<li>Setting: <code>show_completions_on_input</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"show-completion-documentation\"><a class=\"header\" href=\"#show-completion-documentation\">Show Completion Documentation</a></h2>\n<ul>\n<li>Description: Whether to display inline and alongside documentation for items in the completions menu.</li>\n<li>Setting: <code>show_completion_documentation</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"show-edit-predictions\"><a class=\"header\" href=\"#show-edit-predictions\">Show Edit Predictions</a></h2>\n<ul>\n<li>Description: Whether to show edit predictions as you type or manually by triggering <code>editor::ShowEditPrediction</code>.</li>\n<li>Setting: <code>show_edit_predictions</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"show-whitespaces\"><a class=\"header\" href=\"#show-whitespaces\">Show Whitespaces</a></h2>\n<ul>\n<li>Description: Whether or not to render whitespace characters in the editor.</li>\n<li>Setting: <code>show_whitespaces</code></li>\n<li>Default: <code>selection</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>all</code></li>\n<li><code>selection</code></li>\n<li><code>none</code></li>\n<li><code>boundary</code></li>\n</ol>\n<h2 id=\"soft-wrap\"><a class=\"header\" href=\"#soft-wrap\">Soft Wrap</a></h2>\n<ul>\n<li>Description: Whether or not to automatically wrap lines of text to fit editor / preferred width.</li>\n<li>Setting: <code>soft_wrap</code></li>\n<li>Default: <code>none</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>none</code> to avoid wrapping generally, unless the line is too long</li>\n<li><code>prefer_line</code> (deprecated, same as <code>none</code>)</li>\n<li><code>editor_width</code> to wrap lines that overflow the editor width</li>\n<li><code>preferred_line_length</code> to wrap lines that overflow <code>preferred_line_length</code> config value</li>\n<li><code>bounded</code> to wrap lines at the minimum of <code>editor_width</code> and <code>preferred_line_length</code></li>\n</ol>\n<h2 id=\"show-wrap-guides\"><a class=\"header\" href=\"#show-wrap-guides\">Show Wrap Guides</a></h2>\n<ul>\n<li>Description: Whether to show wrap guides (vertical rulers) in the editor. Setting this to true will show a guide at the 'preferred_line_length' value if 'soft_wrap' is set to 'preferred_line_length', and will show any additional guides as specified by the 'wrap_guides' setting.</li>\n<li>Setting: <code>show_wrap_guides</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"use-on-type-format\"><a class=\"header\" href=\"#use-on-type-format\">Use On Type Format</a></h2>\n<ul>\n<li>Description: Whether to use additional LSP queries to format (and amend) the code after every \"trigger\" symbol input, defined by LSP server capabilities</li>\n<li>Setting: <code>use_on_type_format</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"use-auto-surround\"><a class=\"header\" href=\"#use-auto-surround\">Use Auto Surround</a></h2>\n<ul>\n<li>Description: Whether to automatically surround selected text when typing opening parenthesis, bracket, brace, single or double quote characters. For example, when you select text and type (, Zed will surround the text with ().</li>\n<li>Setting: <code>use_auto_surround</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"use-system-path-prompts\"><a class=\"header\" href=\"#use-system-path-prompts\">Use System Path Prompts</a></h2>\n<ul>\n<li>Description: Whether to use the system provided dialogs for Open and Save As. When set to false, Zed will use the built-in keyboard-first pickers.</li>\n<li>Setting: <code>use_system_path_prompts</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"use-system-prompts\"><a class=\"header\" href=\"#use-system-prompts\">Use System Prompts</a></h2>\n<ul>\n<li>Description: Whether to use the system provided dialogs for prompts, such as confirmation prompts. When set to false, Zed will use its built-in prompts. Note that on Linux, this option is ignored and Zed will always use the built-in prompts.</li>\n<li>Setting: <code>use_system_prompts</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"wrap-guides-vertical-rulers\"><a class=\"header\" href=\"#wrap-guides-vertical-rulers\">Wrap Guides (Vertical Rulers)</a></h2>\n<ul>\n<li>Description: Where to display vertical rulers as wrap-guides. Disable by setting <code>show_wrap_guides</code> to <code>false</code>.</li>\n<li>Setting: <code>wrap_guides</code></li>\n<li>Default: []</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>List of <code>integer</code> column numbers</p>\n<h2 id=\"tab-size\"><a class=\"header\" href=\"#tab-size\">Tab Size</a></h2>\n<ul>\n<li>Description: The number of spaces to use for each tab character.</li>\n<li>Setting: <code>tab_size</code></li>\n<li>Default: <code>4</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values</p>\n<h2 id=\"tasks\"><a class=\"header\" href=\"#tasks\">Tasks</a></h2>\n<ul>\n<li>Description: Configuration for tasks that can be run within Zed</li>\n<li>Setting: <code>tasks</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"tasks\": {\n    \"variables\": {},\n    \"enabled\": true,\n    \"prefer_lsp\": false\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>variables</code>: Custom variables for task configuration</li>\n<li><code>enabled</code>: Whether tasks are enabled</li>\n<li><code>prefer_lsp</code>: Whether to prefer LSP-provided tasks over Zed language extension ones</li>\n</ul>\n<h2 id=\"telemetry\"><a class=\"header\" href=\"#telemetry\">Telemetry</a></h2>\n<ul>\n<li>Description: Control what info is collected by Zed.</li>\n<li>Setting: <code>telemetry</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"telemetry\": {\n  \"diagnostics\": true,\n  \"metrics\": true\n},\n</code></pre>\n<p><strong>Options</strong></p>\n<h3 id=\"diagnostics-2\"><a class=\"header\" href=\"#diagnostics-2\">Diagnostics</a></h3>\n<ul>\n<li>Description: Setting for sending debug-related data, such as crash reports.</li>\n<li>Setting: <code>diagnostics</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h3 id=\"metrics\"><a class=\"header\" href=\"#metrics\">Metrics</a></h3>\n<ul>\n<li>Description: Setting for sending anonymized usage data, such what languages you're using Zed with.</li>\n<li>Setting: <code>metrics</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<h2 id=\"terminal\"><a class=\"header\" href=\"#terminal\">Terminal</a></h2>\n<ul>\n<li>Description: Configuration for the terminal.</li>\n<li>Setting: <code>terminal</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"alternate_scroll\": \"off\",\n    \"blinking\": \"terminal_controlled\",\n    \"copy_on_select\": false,\n    \"keep_selection_on_copy\": false,\n    \"dock\": \"bottom\",\n    \"default_width\": 640,\n    \"default_height\": 320,\n    \"detect_venv\": {\n      \"on\": {\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        \"activate_script\": \"default\"\n      }\n    },\n    \"env\": {},\n    \"font_family\": null,\n    \"font_features\": null,\n    \"font_size\": null,\n    \"line_height\": \"comfortable\",\n    \"minimum_contrast\": 45,\n    \"option_as_meta\": false,\n    \"button\": true,\n    \"shell\": \"system\",\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    },\n    \"working_directory\": \"current_project_directory\",\n    \"scrollbar\": {\n      \"show\": null\n    }\n  }\n}\n</code></pre>\n<h3 id=\"terminal-dock\"><a class=\"header\" href=\"#terminal-dock\">Terminal: Dock</a></h3>\n<ul>\n<li>Description: Control the position of the dock</li>\n<li>Setting: <code>dock</code></li>\n<li>Default: <code>bottom</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>\"bottom\"</code>, <code>\"left\"</code> or <code>\"right\"</code></p>\n<h3 id=\"terminal-alternate-scroll\"><a class=\"header\" href=\"#terminal-alternate-scroll\">Terminal: Alternate Scroll</a></h3>\n<ul>\n<li>Description: Set whether Alternate Scroll mode (DECSET code: <code>?1007</code>) is active by default. Alternate Scroll mode converts mouse scroll events into up / down key presses when in the alternate screen (e.g. when running applications like vim or less). The terminal can still set and unset this mode with ANSI escape codes.</li>\n<li>Setting: <code>alternate_scroll</code></li>\n<li>Default: <code>off</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Default alternate scroll mode to off</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"alternate_scroll\": \"off\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Default alternate scroll mode to on</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"alternate_scroll\": \"on\"\n  }\n}\n</code></pre>\n<h3 id=\"terminal-blinking\"><a class=\"header\" href=\"#terminal-blinking\">Terminal: Blinking</a></h3>\n<ul>\n<li>Description: Set the cursor blinking behavior in the terminal</li>\n<li>Setting: <code>blinking</code></li>\n<li>Default: <code>terminal_controlled</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Never blink the cursor, ignore the terminal mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"blinking\": \"off\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Default the cursor blink to off, but allow the terminal to turn blinking on</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"blinking\": \"terminal_controlled\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Always blink the cursor, ignore the terminal mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"blinking\": \"on\"\n  }\n}\n</code></pre>\n<h3 id=\"terminal-copy-on-select\"><a class=\"header\" href=\"#terminal-copy-on-select\">Terminal: Copy On Select</a></h3>\n<ul>\n<li>Description: Whether or not selecting text in the terminal will automatically copy to the system clipboard.</li>\n<li>Setting: <code>copy_on_select</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"copy_on_select\": true\n  }\n}\n</code></pre>\n<h3 id=\"terminal-cursor-shape\"><a class=\"header\" href=\"#terminal-cursor-shape\">Terminal: Cursor Shape</a></h3>\n<ul>\n<li>Description: Whether or not selecting text in the terminal will automatically copy to the system clipboard.</li>\n<li>Setting: <code>cursor_shape</code></li>\n<li>Default: <code>null</code> (defaults to block)</li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>A block that surrounds the following character</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"cursor_shape\": \"block\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>A vertical bar</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"cursor_shape\": \"bar\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>An underline / underscore that runs along the following character</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"cursor_shape\": \"underline\"\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>A box drawn around the following character</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"cursor_shape\": \"hollow\"\n  }\n}\n</code></pre>\n<h3 id=\"terminal-keep-selection-on-copy\"><a class=\"header\" href=\"#terminal-keep-selection-on-copy\">Terminal: Keep Selection On Copy</a></h3>\n<ul>\n<li>Description: Whether or not to keep the selection in the terminal after copying text.</li>\n<li>Setting: <code>keep_selection_on_copy</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"keep_selection_on_copy\": true\n  }\n}\n</code></pre>\n<h3 id=\"terminal-env\"><a class=\"header\" href=\"#terminal-env\">Terminal: Env</a></h3>\n<ul>\n<li>Description: Any key-value pairs added to this object will be added to the terminal's environment. Keys must be unique, use <code>:</code> to separate multiple values in a single variable</li>\n<li>Setting: <code>env</code></li>\n<li>Default: <code>{}</code></li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"env\": {\n      \"ZED\": \"1\",\n      \"KEY\": \"value1:value2\"\n    }\n  }\n}\n</code></pre>\n<h3 id=\"terminal-font-size\"><a class=\"header\" href=\"#terminal-font-size\">Terminal: Font Size</a></h3>\n<ul>\n<li>Description: What font size to use for the terminal. When not set defaults to matching the editor's font size</li>\n<li>Setting: <code>font_size</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"font_size\": 15\n  }\n}\n</code></pre>\n<h3 id=\"terminal-font-family\"><a class=\"header\" href=\"#terminal-font-family\">Terminal: Font Family</a></h3>\n<ul>\n<li>Description: What font to use for the terminal. When not set, defaults to matching the editor's font.</li>\n<li>Setting: <code>font_family</code></li>\n<li>Default: <code>null</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>The name of any font family installed on the user's system</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"font_family\": \"Berkeley Mono\"\n  }\n}\n</code></pre>\n<h3 id=\"terminal-font-features\"><a class=\"header\" href=\"#terminal-font-features\">Terminal: Font Features</a></h3>\n<ul>\n<li>Description: What font features to use for the terminal. When not set, defaults to matching the editor's font features.</li>\n<li>Setting: <code>font_features</code></li>\n<li>Default: <code>null</code></li>\n<li>Platform: macOS and Windows.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>See Buffer Font Features</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"font_features\": {\n      \"calt\": false\n      // See Buffer Font Features for more features\n    }\n  }\n}\n</code></pre>\n<h3 id=\"terminal-line-height\"><a class=\"header\" href=\"#terminal-line-height\">Terminal: Line Height</a></h3>\n<ul>\n<li>Description: Set the terminal's line height.</li>\n<li>Setting: <code>line_height</code></li>\n<li>Default: <code>comfortable</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use a line height that's <code>comfortable</code> for reading, 1.618. (default)</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"line_height\": \"comfortable\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Use a <code>standard</code> line height, 1.3. This option is useful for TUIs, particularly if they use box characters</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"line_height\": \"standard\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Use a custom line height.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"line_height\": {\n      \"custom\": 2\n    }\n  }\n}\n</code></pre>\n<h3 id=\"terminal-minimum-contrast\"><a class=\"header\" href=\"#terminal-minimum-contrast\">Terminal: Minimum Contrast</a></h3>\n<ul>\n<li>Description: Controls the minimum contrast between foreground and background colors in the terminal. Uses the APCA (Accessible Perceptual Contrast Algorithm) for color adjustments. Set this to 0 to disable this feature.</li>\n<li>Setting: <code>minimum_contrast</code></li>\n<li>Default: <code>45</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values from 0 to 106. Common recommended values:</p>\n<ul>\n<li><code>0</code>: No contrast adjustment</li>\n<li><code>45</code>: Minimum for large fluent text (default)</li>\n<li><code>60</code>: Minimum for other content text</li>\n<li><code>75</code>: Minimum for body text</li>\n<li><code>90</code>: Preferred for body text</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"minimum_contrast\": 45\n  }\n}\n</code></pre>\n<h3 id=\"terminal-option-as-meta\"><a class=\"header\" href=\"#terminal-option-as-meta\">Terminal: Option As Meta</a></h3>\n<ul>\n<li>Description: Re-interprets the option keys to act like a 'meta' key, like in Emacs.</li>\n<li>Setting: <code>option_as_meta</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"option_as_meta\": true\n  }\n}\n</code></pre>\n<h3 id=\"terminal-shell\"><a class=\"header\" href=\"#terminal-shell\">Terminal: Shell</a></h3>\n<ul>\n<li>Description: What shell to use when launching the terminal.</li>\n<li>Setting: <code>shell</code></li>\n<li>Default: <code>system</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use the system's default terminal configuration (usually the <code>/etc/passwd</code> file).</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"shell\": \"system\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>A program to launch:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"shell\": {\n      \"program\": \"sh\"\n    }\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>A program with arguments:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"shell\": {\n      \"with_arguments\": {\n        \"program\": \"/bin/bash\",\n        \"args\": [\"--login\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"terminal-detect_venv\"><a class=\"header\" href=\"#terminal-detect_venv\">Terminal: Detect Virtual Environments</a></h2>\n<ul>\n<li>Description: Activate the <a href=\"https://docs.python.org/3/library/venv.html\">Python Virtual Environment</a>, if one is found, in the terminal's working directory (as resolved by the working_directory and automatically activating the virtual environment.</li>\n<li>Setting: <code>detect_venv</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"detect_venv\": {\n      \"on\": {\n        // Default directories to search for virtual environments, relative\n        // to the current working directory. We recommend overriding this\n        // in your project's settings, rather than globally.\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        // Can also be `csh`, `fish`, and `nushell`\n        \"activate_script\": \"default\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>Disable with:</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"detect_venv\": \"off\"\n  }\n}\n</code></pre>\n<h2 id=\"terminal-toolbar\"><a class=\"header\" href=\"#terminal-toolbar\">Terminal: Toolbar</a></h2>\n<ul>\n<li>Description: Whether or not to show various elements in the terminal toolbar.</li>\n<li>Setting: <code>toolbar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    }\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<p>At the moment, only the <code>breadcrumbs</code> option is available, it controls displaying of the terminal title that can be changed via <code>PROMPT_COMMAND</code>.</p>\n<p>If the terminal title is empty, the breadcrumbs won't be shown.</p>\n<p>The shell running in the terminal needs to be configured to emit the title.</p>\n<p>Example command to set the title: <code>echo -e \"\\e]2;New Title\\007\";</code></p>\n<h3 id=\"terminal-button\"><a class=\"header\" href=\"#terminal-button\">Terminal: Button</a></h3>\n<ul>\n<li>Description: Control to show or hide the terminal button in the status bar</li>\n<li>Setting: <code>button</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"button\": false\n  }\n}\n</code></pre>\n<h3 id=\"terminal-working-directory\"><a class=\"header\" href=\"#terminal-working-directory\">Terminal: Working Directory</a></h3>\n<ul>\n<li>Description: What working directory to use when launching the terminal.</li>\n<li>Setting: <code>working_directory</code></li>\n<li>Default: <code>\"current_project_directory\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use the current file's project directory. Will Fallback to the first project directory strategy if unsuccessful</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"working_directory\": \"current_project_directory\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Use the first project in this workspace's directory. Will fallback to using this platform's home directory.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"working_directory\": \"first_project_directory\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Always use this platform's home directory (if we can find it)</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"working_directory\": \"always_home\"\n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>Always use a specific directory. This value will be shell expanded. If this path is not a valid directory the terminal will default to this platform's home directory.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"terminal\": {\n    \"working_directory\": {\n      \"always\": {\n        \"directory\": \"~/zed/projects/\"\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"theme\"><a class=\"header\" href=\"#theme\">Theme</a></h2>\n<ul>\n<li>Description: The theme setting can be specified in two forms - either as the name of a theme or as an object containing the <code>mode</code>, <code>dark</code>, and <code>light</code> themes for the Zed UI.</li>\n<li>Setting: <code>theme</code></li>\n<li>Default: <code>One Dark</code></li>\n</ul>\n<h3 id=\"theme-object\"><a class=\"header\" href=\"#theme-object\">Theme Object</a></h3>\n<ul>\n<li>Description: Specify the theme using an object that includes the <code>mode</code>, <code>dark</code>, and <code>light</code> themes.</li>\n<li>Setting: <code>theme</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"One Dark\",\n  \"light\": \"One Light\"\n},\n</code></pre>\n<h3 id=\"mode-1\"><a class=\"header\" href=\"#mode-1\">Mode</a></h3>\n<ul>\n<li>Description: Specify theme mode.</li>\n<li>Setting: <code>mode</code></li>\n<li>Default: <code>system</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Set the theme to dark mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"dark\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Set the theme to light mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"light\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Set the theme to system mode</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"mode\": \"system\"\n}\n</code></pre>\n<h3 id=\"dark-1\"><a class=\"header\" href=\"#dark-1\">Dark</a></h3>\n<ul>\n<li>Description: The name of the dark Zed theme to use for the UI.</li>\n<li>Setting: <code>dark</code></li>\n<li>Default: <code>One Dark</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Run the <code>theme selector: toggle</code> action in the command palette to see a current list of valid themes names.</p>\n<h3 id=\"light-1\"><a class=\"header\" href=\"#light-1\">Light</a></h3>\n<ul>\n<li>Description: The name of the light Zed theme to use for the UI.</li>\n<li>Setting: <code>light</code></li>\n<li>Default: <code>One Light</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Run the <code>theme selector: toggle</code> action in the command palette to see a current list of valid themes names.</p>\n<h2 id=\"title-bar\"><a class=\"header\" href=\"#title-bar\">Title Bar</a></h2>\n<ul>\n<li>Description: Whether or not to show various elements in the title bar</li>\n<li>Setting: <code>title_bar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"title_bar\": {\n  \"show_branch_icon\": false,\n  \"show_branch_name\": true,\n  \"show_project_items\": true,\n  \"show_onboarding_banner\": true,\n  \"show_user_picture\": true,\n  \"show_sign_in\": true,\n  \"show_menus\": false\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>show_branch_icon</code>: Whether to show the branch icon beside branch switcher in the titlebar</li>\n<li><code>show_branch_name</code>: Whether to show the branch name button in the titlebar</li>\n<li><code>show_project_items</code>: Whether to show the project host and name in the titlebar</li>\n<li><code>show_onboarding_banner</code>: Whether to show onboarding banners in the titlebar</li>\n<li><code>show_user_picture</code>: Whether to show user picture in the titlebar</li>\n<li><code>show_sign_in</code>: Whether to show the sign in button in the titlebar</li>\n<li><code>show_menus</code>: Whether to show the menus in the titlebar</li>\n</ul>\n<h2 id=\"vim\"><a class=\"header\" href=\"#vim\">Vim</a></h2>\n<ul>\n<li>Description: Whether or not to enable vim mode.</li>\n<li>Setting: <code>vim_mode</code></li>\n<li>Default: <code>false</code></li>\n</ul>\n<h2 id=\"when-closing-with-no-tabs\"><a class=\"header\" href=\"#when-closing-with-no-tabs\">When Closing With No Tabs</a></h2>\n<ul>\n<li>Description: Whether the window should be closed when using 'close active item' on a window with no tabs</li>\n<li>Setting: <code>when_closing_with_no_tabs</code></li>\n<li>Default: <code>\"platform_default\"</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Use platform default behavior:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"when_closing_with_no_tabs\": \"platform_default\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Always close the window:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"when_closing_with_no_tabs\": \"close_window\"\n}\n</code></pre>\n<ol start=\"3\">\n<li>Never close the window:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"when_closing_with_no_tabs\": \"keep_window_open\"\n}\n</code></pre>\n<h2 id=\"project-panel\"><a class=\"header\" href=\"#project-panel\">Project Panel</a></h2>\n<ul>\n<li>Description: Customize project panel</li>\n<li>Setting: <code>project_panel</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"project_panel\": {\n    \"button\": true,\n    \"default_width\": 240,\n    \"dock\": \"left\",\n    \"entry_spacing\": \"comfortable\",\n    \"file_icons\": true,\n    \"folder_icons\": true,\n    \"git_status\": true,\n    \"indent_size\": 20,\n    \"auto_reveal_entries\": true,\n    \"auto_fold_dirs\": true,\n    \"drag_and_drop\": true,\n    \"scrollbar\": {\n      \"show\": null\n    },\n    \"sticky_scroll\": true,\n    \"show_diagnostics\": \"all\",\n    \"indent_guides\": {\n      \"show\": \"always\"\n    },\n    \"hide_root\": false,\n    \"starts_open\": true\n  }\n}\n</code></pre>\n<h3 id=\"dock\"><a class=\"header\" href=\"#dock\">Dock</a></h3>\n<ul>\n<li>Description: Control the position of the dock</li>\n<li>Setting: <code>dock</code></li>\n<li>Default: <code>left</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Default dock position to left</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"dock\": \"left\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Default dock position to right</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"dock\": \"right\"\n}\n</code></pre>\n<h3 id=\"entry-spacing\"><a class=\"header\" href=\"#entry-spacing\">Entry Spacing</a></h3>\n<ul>\n<li>Description: Spacing between worktree entries</li>\n<li>Setting: <code>entry_spacing</code></li>\n<li>Default: <code>comfortable</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Comfortable entry spacing</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"entry_spacing\": \"comfortable\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>Standard entry spacing</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"entry_spacing\": \"standard\"\n}\n</code></pre>\n<h3 id=\"git-status-1\"><a class=\"header\" href=\"#git-status-1\">Git Status</a></h3>\n<ul>\n<li>Description: Indicates newly created and updated files</li>\n<li>Setting: <code>git_status</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Default enable git status</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git_status\": true\n}\n</code></pre>\n<ol start=\"2\">\n<li>Default disable git status</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"git_status\": false\n}\n</code></pre>\n<h3 id=\"default-width\"><a class=\"header\" href=\"#default-width\">Default Width</a></h3>\n<ul>\n<li>Description: Customize default width taken by project panel</li>\n<li>Setting: <code>default_width</code></li>\n<li>Default: <code>240</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>float</code> values</p>\n<h3 id=\"auto-reveal-entries\"><a class=\"header\" href=\"#auto-reveal-entries\">Auto Reveal Entries</a></h3>\n<ul>\n<li>Description: Whether to reveal it in the project panel automatically, when a corresponding project entry becomes active. Gitignored entries are never auto revealed.</li>\n<li>Setting: <code>auto_reveal_entries</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Enable auto reveal entries</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"auto_reveal_entries\": true\n}\n</code></pre>\n<ol start=\"2\">\n<li>Disable auto reveal entries</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"auto_reveal_entries\": false\n}\n</code></pre>\n<h3 id=\"auto-fold-dirs\"><a class=\"header\" href=\"#auto-fold-dirs\">Auto Fold Dirs</a></h3>\n<ul>\n<li>Description: Whether to fold directories automatically when directory has only one directory inside.</li>\n<li>Setting: <code>auto_fold_dirs</code></li>\n<li>Default: <code>true</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Enable auto fold dirs</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"auto_fold_dirs\": true\n}\n</code></pre>\n<ol start=\"2\">\n<li>Disable auto fold dirs</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"auto_fold_dirs\": false\n}\n</code></pre>\n<h3 id=\"indent-size\"><a class=\"header\" href=\"#indent-size\">Indent Size</a></h3>\n<ul>\n<li>Description: Amount of indentation (in pixels) for nested items.</li>\n<li>Setting: <code>indent_size</code></li>\n<li>Default: <code>20</code></li>\n</ul>\n<h3 id=\"indent-guides-show\"><a class=\"header\" href=\"#indent-guides-show\">Indent Guides: Show</a></h3>\n<ul>\n<li>Description: Whether to show indent guides in the project panel.</li>\n<li>Setting: <code>indent_guides</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"indent_guides\": {\n  \"show\": \"always\"\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show indent guides in the project panel</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"show\": \"always\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Hide indent guides in the project panel</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"indent_guides\": {\n    \"show\": \"never\"\n  }\n}\n</code></pre>\n<h3 id=\"scrollbar-show\"><a class=\"header\" href=\"#scrollbar-show\">Scrollbar: Show</a></h3>\n<ul>\n<li>Description: Whether to show a scrollbar in the project panel. Possible values: null, \"auto\", \"system\", \"always\", \"never\". Inherits editor settings when absent, see its description for more details.</li>\n<li>Setting: <code>scrollbar</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"scrollbar\": {\n  \"show\": null\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ol>\n<li>Show scrollbar in the project panel</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"scrollbar\": {\n    \"show\": \"always\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Hide scrollbar in the project panel</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"scrollbar\": {\n    \"show\": \"never\"\n  }\n}\n</code></pre>\n<h2 id=\"agent\"><a class=\"header\" href=\"#agent\">Agent</a></h2>\n<p>Visit <a href=\"./ai/configuration.html\">the Configuration page</a> under the AI section to learn more about all the agent-related settings.</p>\n<h2 id=\"collaboration-panel\"><a class=\"header\" href=\"#collaboration-panel\">Collaboration Panel</a></h2>\n<ul>\n<li>Description: Customizations for the collaboration panel.</li>\n<li>Setting: <code>collaboration_panel</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"collaboration_panel\": {\n    \"button\": true,\n    \"dock\": \"left\",\n    \"default_width\": 240\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>button</code>: Whether to show the collaboration panel button in the status bar</li>\n<li><code>dock</code>: Where to dock the collaboration panel. Can be <code>left</code> or <code>right</code></li>\n<li><code>default_width</code>: Default width of the collaboration panel</li>\n</ul>\n<h2 id=\"chat-panel\"><a class=\"header\" href=\"#chat-panel\">Chat Panel</a></h2>\n<ul>\n<li>Description: Customizations for the chat panel.</li>\n<li>Setting: <code>chat_panel</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"chat_panel\": {\n    \"button\": \"when_in_call\",\n    \"dock\": \"right\",\n    \"default_width\": 240\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>button</code>: When to show the chat panel button in the status bar. Can be <code>never</code>, <code>always</code>, or <code>when_in_call</code>.</li>\n<li><code>dock</code>: Where to dock the chat panel. Can be 'left' or 'right'</li>\n<li><code>default_width</code>: Default width of the chat panel</li>\n</ul>\n<h2 id=\"debugger\"><a class=\"header\" href=\"#debugger\">Debugger</a></h2>\n<ul>\n<li>Description: Configuration for debugger panel and settings</li>\n<li>Setting: <code>debugger</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"stepping_granularity\": \"line\",\n    \"save_breakpoints\": true,\n    \"dock\": \"bottom\",\n    \"button\": true\n  }\n}\n</code></pre>\n<p>See the <a href=\"./debugger.html\">debugger page</a> for more information about debugging support within Zed.</p>\n<h2 id=\"git-panel\"><a class=\"header\" href=\"#git-panel\">Git Panel</a></h2>\n<ul>\n<li>Description: Setting to customize the behavior of the git panel.</li>\n<li>Setting: <code>git_panel</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"git_panel\": {\n    \"button\": true,\n    \"dock\": \"left\",\n    \"default_width\": 360,\n    \"status_style\": \"icon\",\n    \"fallback_branch_name\": \"main\",\n    \"sort_by_path\": false,\n    \"collapse_untracked_diff\": false,\n    \"scrollbar\": {\n      \"show\": null\n    }\n  }\n}\n</code></pre>\n<p><strong>Options</strong></p>\n<ul>\n<li><code>button</code>: Whether to show the git panel button in the status bar</li>\n<li><code>dock</code>: Where to dock the git panel. Can be <code>left</code> or <code>right</code></li>\n<li><code>default_width</code>: Default width of the git panel</li>\n<li><code>status_style</code>: How to display git status. Can be <code>label_color</code> or <code>icon</code></li>\n<li><code>fallback_branch_name</code>: What branch name to use if <code>init.defaultBranch</code> is not set</li>\n<li><code>sort_by_path</code>: Whether to sort entries in the panel by path or by status (the default)</li>\n<li><code>collapse_untracked_diff</code>: Whether to collapse untracked files in the diff panel</li>\n<li><code>scrollbar</code>: When to show the scrollbar in the git panel</li>\n</ul>\n<h2 id=\"outline-panel\"><a class=\"header\" href=\"#outline-panel\">Outline Panel</a></h2>\n<ul>\n<li>Description: Customize outline Panel</li>\n<li>Setting: <code>outline_panel</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"outline_panel\": {\n  \"button\": true,\n  \"default_width\": 300,\n  \"dock\": \"left\",\n  \"file_icons\": true,\n  \"folder_icons\": true,\n  \"git_status\": true,\n  \"indent_size\": 20,\n  \"auto_reveal_entries\": true,\n  \"auto_fold_dirs\": true,\n  \"indent_guides\": {\n    \"show\": \"always\"\n  },\n  \"scrollbar\": {\n    \"show\": null\n  }\n}\n</code></pre>\n<h2 id=\"calls\"><a class=\"header\" href=\"#calls\">Calls</a></h2>\n<ul>\n<li>Description: Customize behavior when participating in a call</li>\n<li>Setting: <code>calls</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"calls\": {\n  // Join calls with the microphone live by default\n  \"mute_on_join\": false,\n  // Share your project when you are the first to join a channel\n  \"share_on_join\": false\n},\n</code></pre>\n<h2 id=\"unnecessary-code-fade\"><a class=\"header\" href=\"#unnecessary-code-fade\">Unnecessary Code Fade</a></h2>\n<ul>\n<li>Description: How much to fade out unused code.</li>\n<li>Setting: <code>unnecessary_code_fade</code></li>\n<li>Default: <code>0.3</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Float values between <code>0.0</code> and <code>0.9</code>, where:</p>\n<ul>\n<li><code>0.0</code> means no fading (unused code looks the same as used code)</li>\n<li><code>0.9</code> means maximum fading (unused code is very faint but still visible)</li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-json\">{\n  \"unnecessary_code_fade\": 0.5\n}\n</code></pre>\n<h2 id=\"ui-font-family\"><a class=\"header\" href=\"#ui-font-family\">UI Font Family</a></h2>\n<ul>\n<li>Description: The name of the font to use for text in the UI.</li>\n<li>Setting: <code>ui_font_family</code></li>\n<li>Default: <code>.ZedSans</code>. This currently aliases to <a href=\"https://www.ibm.com/plex/\">IBM Plex</a>.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>The name of any font family installed on the system, <code>\".ZedSans\"</code> to use the Zed-provided default, or <code>\".SystemUIFont\"</code> to use the system's default UI font (on macOS and Windows).</p>\n<h2 id=\"ui-font-features\"><a class=\"header\" href=\"#ui-font-features\">UI Font Features</a></h2>\n<ul>\n<li>Description: The OpenType features to enable for text in the UI.</li>\n<li>Setting: <code>ui_font_features</code></li>\n<li>Default:</li>\n</ul>\n<pre><code class=\"language-json\">\"ui_font_features\": {\n  \"calt\": false\n}\n</code></pre>\n<ul>\n<li>Platform: macOS and Windows.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>Zed supports all OpenType features that can be enabled or disabled for a given UI font, as well as setting values for font features.</p>\n<p>For example, to disable font ligatures, add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"ui_font_features\": {\n    \"calt\": false\n  }\n}\n</code></pre>\n<p>You can also set other OpenType features, like setting <code>cv01</code> to <code>7</code>:</p>\n<pre><code class=\"language-json\">{\n  \"ui_font_features\": {\n    \"cv01\": 7\n  }\n}\n</code></pre>\n<h2 id=\"ui-font-fallbacks\"><a class=\"header\" href=\"#ui-font-fallbacks\">UI Font Fallbacks</a></h2>\n<ul>\n<li>Description: The font fallbacks to use for text in the UI.</li>\n<li>Setting: <code>ui_font_fallbacks</code></li>\n<li>Default: <code>null</code></li>\n<li>Platform: macOS and Windows.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>For example, to use <code>Nerd Font</code> as a fallback, add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"ui_font_fallbacks\": [\"Nerd Font\"]\n}\n</code></pre>\n<h2 id=\"ui-font-size\"><a class=\"header\" href=\"#ui-font-size\">UI Font Size</a></h2>\n<ul>\n<li>Description: The default font size for text in the UI.</li>\n<li>Setting: <code>ui_font_size</code></li>\n<li>Default: <code>16</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values from <code>6</code> to <code>100</code> pixels (inclusive)</p>\n<h2 id=\"ui-font-weight\"><a class=\"header\" href=\"#ui-font-weight\">UI Font Weight</a></h2>\n<ul>\n<li>Description: The default font weight for text in the UI.</li>\n<li>Setting: <code>ui_font_weight</code></li>\n<li>Default: <code>400</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values between <code>100</code> and <code>900</code></p>\n<h2 id=\"an-example-configuration\"><a class=\"header\" href=\"#an-example-configuration\">An example configuration:</a></h2>\n<pre><code class=\"language-json\">// ~/.config/zed/settings.json\n{\n  \"theme\": \"cave-light\",\n  \"tab_size\": 2,\n  \"preferred_line_length\": 80,\n  \"soft_wrap\": \"none\",\n\n  \"buffer_font_size\": 18,\n  \"buffer_font_family\": \".ZedMono\",\n\n  \"autosave\": \"on_focus_change\",\n  \"format_on_save\": \"off\",\n  \"vim_mode\": false,\n  \"projects_online_by_default\": true,\n  \"terminal\": {\n    \"font_family\": \"FiraCode Nerd Font Mono\",\n    \"blinking\": \"off\"\n  },\n  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"language_server\",\n      \"preferred_line_length\": 64,\n      \"soft_wrap\": \"preferred_line_length\"\n    }\n  }\n}\n</code></pre>\n\n</main>",
    "content_text": "Configuring Zed\nZed is designed to be configured: we want to fit your workflow and preferences exactly. We provide default settings that are designed to be a comfortable starting point for as many people as possible, but we hope you will enjoy tweaking it to make it feel incredible.\nIn addition to the settings described here, you may also want to change your theme, configure your key bindings, set up tasks or install extensions.\nSettings files\n\nYour settings file can be opened with cmd-,|ctrl-,. By default it is located at ~/.config/zed/settings.json, though if you have XDG_CONFIG_HOME in your environment on Linux it will be at $XDG_CONFIG_HOME/zed/settings.json instead.\nThis configuration is merged with any local configuration inside your projects. You can open the project settings by running zed: open project settings from the command palette. This will create a .zed directory containing.zed/settings.json.\nAlthough most projects will only need one settings file at the root, you can add more local settings files for subdirectories as needed. Not all settings can be set in local files, just those that impact the behavior of the editor and language tooling. For example you can set tab_size, formatter etc. but not theme, vim_mode and similar.\nThe syntax for configuration files is a super-set of JSON that allows // comments.\nDefault settings\nYou can find the default settings for your current Zed by running zed: open default settings from the command palette.\nExtensions that provide language servers may also provide default settings for those language servers.\nSettings\nActive Pane Modifiers\n\nDescription: Styling settings applied to the active pane.\nSetting: active_pane_modifiers\nDefault:\n\n{\n  \"active_pane_modifiers\": {\n    \"border_size\": 0.0,\n    \"inactive_opacity\": 1.0\n  }\n}\n\nBorder size\n\nDescription: Size of the border surrounding the active pane. When set to 0, the active pane doesn't have any border. The border is drawn inset.\nSetting: border_size\nDefault: 0.0\n\nOptions\nNon-negative float values\nInactive Opacity\n\nDescription: Opacity of inactive panels. When set to 1.0, the inactive panes have the same opacity as the active one. If set to 0, the inactive panes content will not be visible at all. Values are clamped to the [0.0, 1.0] range.\nSetting: inactive_opacity\nDefault: 1.0\n\nOptions\nfloat values\nBottom Dock Layout\n\nDescription: Control the layout of the bottom dock, relative to the left and right docks\nSetting: bottom_dock_layout\nDefault: \"contained\"\n\nOptions\n\nContain the bottom dock, giving the full height of the window to the left and right docks\n\n{\n  \"bottom_dock_layout\": \"contained\"\n}\n\n\nGive the bottom dock the full width of the window, truncating the left and right docks\n\n{\n  \"bottom_dock_layout\": \"full\"\n}\n\n\nLeft align the bottom dock, truncating the left dock and giving the right dock the full height of the window\n\n{\n  \"bottom_dock_layout\": \"left_aligned\"\n}\n\n\nRight align the bottom dock, giving the left dock the full height of the window and truncating the right dock.\n\n{\n  \"bottom_dock_layout\": \"right_aligned\"\n}\n\nAgent Font Size\n\nDescription: The font size for text in the agent panel. Inherits the UI font size if unset.\nSetting: agent_font_size\nDefault: null\n\nOptions\ninteger values from 6 to 100 pixels (inclusive)\nAllow Rewrap\n\nDescription: Controls where the editor::Rewrap action is allowed in the current language scope\nSetting: allow_rewrap\nDefault: \"in_comments\"\n\nOptions\n\nAllow rewrap in comments only:\n\n{\n  \"allow_rewrap\": \"in_comments\"\n}\n\n\nAllow rewrap everywhere:\n\n{\n  \"allow_rewrap\": \"everywhere\"\n}\n\n\nNever allow rewrap:\n\n{\n  \"allow_rewrap\": \"never\"\n}\n\nNote: This setting has no effect in Vim mode, as rewrap is already allowed everywhere.\nAuto Indent\n\nDescription: Whether indentation should be adjusted based on the context whilst typing. This can be specified on a per-language basis.\nSetting: auto_indent\nDefault: true\n\nOptions\nboolean values\nAuto Indent On Paste\n\nDescription: Whether indentation of pasted content should be adjusted based on the context\nSetting: auto_indent_on_paste\nDefault: true\n\nOptions\nboolean values\nAuto Install extensions\n\nDescription: Define extensions to be autoinstalled or never be installed.\nSetting: auto_install_extension\nDefault: { \"html\": true }\n\nOptions\nYou can find the names of your currently installed extensions by listing the subfolders under the extension installation location:\nOn MacOS:\nls ~/Library/Application\\ Support/Zed/extensions/installed/\n\nOn Linux:\nls ~/.local/share/zed/extensions/installed\n\nDefine extensions which should be installed (true) or never installed (false).\n{\n  \"auto_install_extensions\": {\n    \"html\": true,\n    \"dockerfile\": true,\n    \"docker-compose\": false\n  }\n}\n\nAutosave\n\nDescription: When to automatically save edited buffers.\nSetting: autosave\nDefault: off\n\nOptions\n\nTo disable autosave, set it to off:\n\n{\n  \"autosave\": \"off\"\n}\n\n\nTo autosave when focus changes, use on_focus_change:\n\n{\n  \"autosave\": \"on_focus_change\"\n}\n\n\nTo autosave when the active window changes, use on_window_change:\n\n{\n  \"autosave\": \"on_window_change\"\n}\n\n\nTo autosave after an inactivity period, use after_delay:\n\n{\n  \"autosave\": {\n    \"after_delay\": {\n      \"milliseconds\": 1000\n    }\n  }\n}\n\nAutoscroll on Clicks\n\nDescription: Whether to scroll when clicking near the edge of the visible text area.\nSetting: autoscroll_on_clicks\nDefault: false\n\nOptions\nboolean values\nAuto Signature Help\n\nDescription: Show method signatures in the editor, when inside parentheses\nSetting: auto_signature_help\nDefault: false\n\nOptions\nboolean values\nShow Signature Help After Edits\n\nDescription: Whether to show the signature help after completion or a bracket pair inserted. If auto_signature_help is enabled, this setting will be treated as enabled also.\nSetting: show_signature_help_after_edits\nDefault: false\n\nOptions\nboolean values\nAuto Update\n\nDescription: Whether or not to automatically check for updates.\nSetting: auto_update\nDefault: true\n\nOptions\nboolean values\nBase Keymap\n\nDescription: Base key bindings scheme. Base keymaps can be overridden with user keymaps.\nSetting: base_keymap\nDefault: VSCode\n\nOptions\n\nVSCode\n\n{\n  \"base_keymap\": \"VSCode\"\n}\n\n\nAtom\n\n{\n  \"base_keymap\": \"Atom\"\n}\n\n\nJetBrains\n\n{\n  \"base_keymap\": \"JetBrains\"\n}\n\n\nNone\n\n{\n  \"base_keymap\": \"None\"\n}\n\n\nSublimeText\n\n{\n  \"base_keymap\": \"SublimeText\"\n}\n\n\nTextMate\n\n{\n  \"base_keymap\": \"TextMate\"\n}\n\nBuffer Font Family\n\nDescription: The name of a font to use for rendering text in the editor.\nSetting: buffer_font_family\nDefault: .ZedMono. This currently aliases to Lilex.\n\nOptions\nThe name of any font family installed on the user's system, or \".ZedMono\".\nBuffer Font Features\n\nDescription: The OpenType features to enable for text in the editor.\nSetting: buffer_font_features\nDefault: null\nPlatform: macOS and Windows.\n\nOptions\nZed supports all OpenType features that can be enabled or disabled for a given buffer or terminal font, as well as setting values for font features.\nFor example, to disable font ligatures, add the following to your settings:\n{\n  \"buffer_font_features\": {\n    \"calt\": false\n  }\n}\n\nYou can also set other OpenType features, like setting cv01 to 7:\n{\n  \"buffer_font_features\": {\n    \"cv01\": 7\n  }\n}\n\nBuffer Font Fallbacks\n\nDescription: Set the buffer text's font fallbacks, this will be merged with the platform's default fallbacks.\nSetting: buffer_font_fallbacks\nDefault: null\nPlatform: macOS and Windows.\n\nOptions\nFor example, to use Nerd Font as a fallback, add the following to your settings:\n{\n  \"buffer_font_fallbacks\": [\"Nerd Font\"]\n}\n\nBuffer Font Size\n\nDescription: The default font size for text in the editor.\nSetting: buffer_font_size\nDefault: 15\n\nOptions\ninteger values from 6 to 100 pixels (inclusive)\nBuffer Font Weight\n\nDescription: The default font weight for text in the editor.\nSetting: buffer_font_weight\nDefault: 400\n\nOptions\ninteger values between 100 and 900\nBuffer Line Height\n\nDescription: The default line height for text in the editor.\nSetting: buffer_line_height\nDefault: \"comfortable\"\n\nOptions\n\"standard\", \"comfortable\" or { \"custom\": float } (1 is compact, 2 is loose)\nCentered Layout\n\nDescription: Configuration for the centered layout mode.\nSetting: centered_layout\nDefault:\n\n\"centered_layout\": {\n  \"left_padding\": 0.2,\n  \"right_padding\": 0.2,\n}\n\nOptions\nThe left_padding and right_padding options define the relative width of the\nleft and right padding of the central pane from the workspace when the centered layout mode is activated. Valid values range is from 0 to 0.4.\nClose on File Delete\n\nDescription: Whether to automatically close editor tabs when their corresponding files are deleted from disk.\nSetting: close_on_file_delete\nDefault: false\n\nOptions\nboolean values\nWhen enabled, this setting will automatically close tabs for files that have been deleted from the file system. This is particularly useful for workflows involving temporary or scratch files that are frequently created and deleted. When disabled (default), deleted files remain open with a strikethrough through their tab title.\nNote: Dirty files (files with unsaved changes) will not be automatically closed even when this setting is enabled, ensuring you don't lose unsaved work.\nConfirm Quit\n\nDescription: Whether or not to prompt the user to confirm before closing the application.\nSetting: confirm_quit\nDefault: false\n\nOptions\nboolean values\nDiagnostics Max Severity\n\nDescription: Which level to use to filter out diagnostics displayed in the editor\nSetting: diagnostics_max_severity\nDefault: null\n\nOptions\n\nAllow all diagnostics (default):\n\n{\n  \"diagnostics_max_severity\": null\n}\n\n\nShow only errors:\n\n{\n  \"diagnostics_max_severity\": \"error\"\n}\n\n\nShow errors and warnings:\n\n{\n  \"diagnostics_max_severity\": \"warning\"\n}\n\n\nShow errors, warnings, and information:\n\n{\n  \"diagnostics_max_severity\": \"information\"\n}\n\n\nShow all including hints:\n\n{\n  \"diagnostics_max_severity\": \"hint\"\n}\n\nDisable AI\n\nDescription: Whether to disable all AI features in Zed\nSetting: disable_ai\nDefault: false\n\nOptions\nboolean values\nDirenv Integration\n\nDescription: Settings for direnv integration. Requires direnv to be installed.\ndirenv integration make it possible to use the environment variables set by a direnv configuration to detect some language servers in $PATH instead of installing them.\nIt also allows for those environment variables to be used in tasks.\nSetting: load_direnv\nDefault: \"direct\"\n\nOptions\nThere are two options to choose from:\n\nshell_hook: Use the shell hook to load direnv. This relies on direnv to activate upon entering the directory. Supports POSIX shells and fish.\ndirect: Use direnv export json to load direnv. This will load direnv directly without relying on the shell hook and might cause some inconsistencies. This allows direnv to work with any shell.\n\nDouble Click In Multibuffer\n\nDescription: What to do when multibuffer is double clicked in some of its excerpts (parts of singleton buffers)\nSetting: double_click_in_multibuffer\nDefault: \"select\"\n\nOptions\n\nBehave as a regular buffer and select the whole word (default):\n\n{\n  \"double_click_in_multibuffer\": \"select\"\n}\n\n\nOpen the excerpt clicked as a new buffer in the new tab:\n\n{\n  \"double_click_in_multibuffer\": \"open\"\n}\n\nFor the case of \"open\", regular selection behavior can be achieved by holding alt when double clicking.\nDrop Target Size\n\nDescription: Relative size of the drop target in the editor that will open dropped file as a split pane (0-0.5). For example, 0.25 means if you drop onto the top/bottom quarter of the pane a new vertical split will be used, if you drop onto the left/right quarter of the pane a new horizontal split will be used.\nSetting: drop_target_size\nDefault: 0.2\n\nOptions\nfloat values between 0 and 0.5\nEdit Predictions\n\nDescription: Settings for edit predictions.\nSetting: edit_predictions\nDefault:\n\n  \"edit_predictions\": {\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/.dev.vars\",\n      \"**/secrets.yml\"\n    ]\n  }\n\nOptions\nDisabled Globs\n\nDescription: A list of globs for which edit predictions should be disabled for. This list adds to a pre-existing, sensible default set of globs. Any additional ones you add are combined with them.\nSetting: disabled_globs\nDefault: [\"**/.env*\", \"**/*.pem\", \"**/*.key\", \"**/*.cert\", \"**/*.crt\", \"**/.dev.vars\", \"**/secrets.yml\"]\n\nOptions\nList of string values.\nEdit Predictions Disabled in\n\nDescription: A list of language scopes in which edit predictions should be disabled.\nSetting: edit_predictions_disabled_in\nDefault: []\n\nOptions\nList of string values\n\nDon't show edit predictions in comments:\n\n\"disabled_in\": [\"comment\"]\n\n\nDon't show edit predictions in strings and comments:\n\n\"disabled_in\": [\"comment\", \"string\"]\n\n\nOnly in Go, don't show edit predictions in strings and comments:\n\n{\n  \"languages\": {\n    \"Go\": {\n      \"edit_predictions_disabled_in\": [\"comment\", \"string\"]\n    }\n  }\n}\n\nCurrent Line Highlight\n\nDescription: How to highlight the current line in the editor.\nSetting: current_line_highlight\nDefault: all\n\nOptions\n\nDon't highlight the current line:\n\n\"current_line_highlight\": \"none\"\n\n\nHighlight the gutter area:\n\n\"current_line_highlight\": \"gutter\"\n\n\nHighlight the editor area:\n\n\"current_line_highlight\": \"line\"\n\n\nHighlight the full line:\n\n\"current_line_highlight\": \"all\"\n\nSelection Highlight\n\nDescription: Whether to highlight all occurrences of the selected text in an editor.\nSetting: selection_highlight\nDefault: true\n\nRounded Selection\n\nDescription: Whether the text selection should have rounded corners.\nSetting: rounded_selection\nDefault: true\n\nCursor Blink\n\nDescription: Whether or not the cursor blinks.\nSetting: cursor_blink\nDefault: true\n\nOptions\nboolean values\nCursor Shape\n\nDescription: Cursor shape for the default editor.\nSetting: cursor_shape\nDefault: bar\n\nOptions\n\nA vertical bar:\n\n\"cursor_shape\": \"bar\"\n\n\nA block that surrounds the following character:\n\n\"cursor_shape\": \"block\"\n\n\nAn underline / underscore that runs along the following character:\n\n\"cursor_shape\": \"underline\"\n\n\nAn box drawn around the following character:\n\n\"cursor_shape\": \"hollow\"\n\nGutter\n\nDescription: Settings for the editor gutter\nSetting: gutter\nDefault:\n\n{\n  \"gutter\": {\n    \"line_numbers\": true,\n    \"runnables\": true,\n    \"breakpoints\": true,\n    \"folds\": true,\n    \"min_line_number_digits\": 4\n  }\n}\n\nOptions\n\nline_numbers: Whether to show line numbers in the gutter\nrunnables: Whether to show runnable buttons in the gutter\nbreakpoints: Whether to show breakpoints in the gutter\nfolds: Whether to show fold buttons in the gutter\nmin_line_number_digits: Minimum number of characters to reserve space for in the gutter\n\nHide Mouse\n\nDescription: Determines when the mouse cursor should be hidden in an editor or input box.\nSetting: hide_mouse\nDefault: on_typing_and_movement\n\nOptions\n\nNever hide the mouse cursor:\n\n\"hide_mouse\": \"never\"\n\n\nHide only when typing:\n\n\"hide_mouse\": \"on_typing\"\n\n\nHide on both typing and cursor movement:\n\n\"hide_mouse\": \"on_typing_and_movement\"\n\nSnippet Sort Order\n\nDescription: Determines how snippets are sorted relative to other completion items.\nSetting: snippet_sort_order\nDefault: inline\n\nOptions\n\nPlace snippets at the top of the completion list:\n\n\"snippet_sort_order\": \"top\"\n\n\nPlace snippets normally without any preference:\n\n\"snippet_sort_order\": \"inline\"\n\n\nPlace snippets at the bottom of the completion list:\n\n\"snippet_sort_order\": \"bottom\"\n\n\nDo not show snippets in the completion list at all:\n\n\"snippet_sort_order\": \"none\"\n\nEditor Scrollbar\n\nDescription: Whether or not to show the editor scrollbar and various elements in it.\nSetting: scrollbar\nDefault:\n\n\"scrollbar\": {\n  \"show\": \"auto\",\n  \"cursors\": true,\n  \"git_diff\": true,\n  \"search_results\": true,\n  \"selected_text\": true,\n  \"selected_symbol\": true,\n  \"diagnostics\": \"all\",\n  \"axes\": {\n    \"horizontal\": true,\n    \"vertical\": true,\n  },\n},\n\nShow Mode\n\nDescription: When to show the editor scrollbar.\nSetting: show\nDefault: auto\n\nOptions\n\nShow the scrollbar if there's important information or follow the system's configured behavior:\n\n\"scrollbar\": {\n  \"show\": \"auto\"\n}\n\n\nMatch the system's configured behavior:\n\n\"scrollbar\": {\n  \"show\": \"system\"\n}\n\n\nAlways show the scrollbar:\n\n\"scrollbar\": {\n  \"show\": \"always\"\n}\n\n\nNever show the scrollbar:\n\n\"scrollbar\": {\n  \"show\": \"never\"\n}\n\nCursor Indicators\n\nDescription: Whether to show cursor positions in the scrollbar.\nSetting: cursors\nDefault: true\n\nOptions\nboolean values\nGit Diff Indicators\n\nDescription: Whether to show git diff indicators in the scrollbar.\nSetting: git_diff\nDefault: true\n\nOptions\nboolean values\nSearch Results Indicators\n\nDescription: Whether to show buffer search results in the scrollbar.\nSetting: search_results\nDefault: true\n\nOptions\nboolean values\nSelected Text Indicators\n\nDescription: Whether to show selected text occurrences in the scrollbar.\nSetting: selected_text\nDefault: true\n\nOptions\nboolean values\nSelected Symbols Indicators\n\nDescription: Whether to show selected symbol occurrences in the scrollbar.\nSetting: selected_symbol\nDefault: true\n\nOptions\nboolean values\nDiagnostics\n\nDescription: Which diagnostic indicators to show in the scrollbar.\nSetting: diagnostics\nDefault: all\n\nOptions\n\nShow all diagnostics:\n\n{\n  \"diagnostics\": \"all\"\n}\n\n\nDo not show any diagnostics:\n\n{\n  \"diagnostics\": \"none\"\n}\n\n\nShow only errors:\n\n{\n  \"diagnostics\": \"error\"\n}\n\n\nShow only errors and warnings:\n\n{\n  \"diagnostics\": \"warning\"\n}\n\n\nShow only errors, warnings, and information:\n\n{\n  \"diagnostics\": \"information\"\n}\n\nAxes\n\nDescription: Forcefully enable or disable the scrollbar for each axis\nSetting: axes\nDefault:\n\n\"scrollbar\": {\n  \"axes\": {\n    \"horizontal\": true,\n    \"vertical\": true,\n  },\n}\n\nHorizontal\n\nDescription: When false, forcefully disables the horizontal scrollbar. Otherwise, obey other settings.\nSetting: horizontal\nDefault: true\n\nOptions\nboolean values\nVertical\n\nDescription: When false, forcefully disables the vertical scrollbar. Otherwise, obey other settings.\nSetting: vertical\nDefault: true\n\nOptions\nboolean values\nMinimap\n\nDescription: Settings related to the editor's minimap, which provides an overview of your document.\nSetting: minimap\nDefault:\n\n{\n  \"minimap\": {\n    \"show\": \"never\",\n    \"thumb\": \"always\",\n    \"thumb_border\": \"left_open\",\n    \"current_line_highlight\": null\n  }\n}\n\nShow Mode\n\nDescription: When to show the minimap in the editor.\nSetting: show\nDefault: never\n\nOptions\n\nAlways show the minimap:\n\n{\n  \"show\": \"always\"\n}\n\n\nShow the minimap if the editor's scrollbars are visible:\n\n{\n  \"show\": \"auto\"\n}\n\n\nNever show the minimap:\n\n{\n  \"show\": \"never\"\n}\n\nThumb Display\n\nDescription: When to show the minimap thumb (the visible editor area) in the minimap.\nSetting: thumb\nDefault: always\n\nOptions\n\nShow the minimap thumb when hovering over the minimap:\n\n{\n  \"thumb\": \"hover\"\n}\n\n\nAlways show the minimap thumb:\n\n{\n  \"thumb\": \"always\"\n}\n\nThumb Border\n\nDescription: How the minimap thumb border should look.\nSetting: thumb_border\nDefault: left_open\n\nOptions\n\nDisplay a border on all sides of the thumb:\n\n{\n  \"thumb_border\": \"full\"\n}\n\n\nDisplay a border on all sides except the left side:\n\n{\n  \"thumb_border\": \"left_open\"\n}\n\n\nDisplay a border on all sides except the right side:\n\n{\n  \"thumb_border\": \"right_open\"\n}\n\n\nDisplay a border only on the left side:\n\n{\n  \"thumb_border\": \"left_only\"\n}\n\n\nDisplay the thumb without any border:\n\n{\n  \"thumb_border\": \"none\"\n}\n\nCurrent Line Highlight\n\nDescription: How to highlight the current line in the minimap.\nSetting: current_line_highlight\nDefault: null\n\nOptions\n\nInherit the editor's current line highlight setting:\n\n{\n  \"minimap\": {\n    \"current_line_highlight\": null\n  }\n}\n\n\nHighlight the current line in the minimap:\n\n{\n  \"minimap\": {\n    \"current_line_highlight\": \"line\"\n  }\n}\n\nor\n{\n  \"minimap\": {\n    \"current_line_highlight\": \"all\"\n  }\n}\n\n\nDo not highlight the current line in the minimap:\n\n{\n  \"minimap\": {\n    \"current_line_highlight\": \"gutter\"\n  }\n}\n\nor\n{\n  \"minimap\": {\n    \"current_line_highlight\": \"none\"\n  }\n}\n\nEditor Tab Bar\n\nDescription: Settings related to the editor's tab bar.\nSettings: tab_bar\nDefault:\n\n\"tab_bar\": {\n  \"show\": true,\n  \"show_nav_history_buttons\": true,\n  \"show_tab_bar_buttons\": true\n}\n\nShow\n\nDescription: Whether or not to show the tab bar in the editor.\nSetting: show\nDefault: true\n\nOptions\nboolean values\nNavigation History Buttons\n\nDescription: Whether or not to show the navigation history buttons.\nSetting: show_nav_history_buttons\nDefault: true\n\nOptions\nboolean values\nTab Bar Buttons\n\nDescription: Whether or not to show the tab bar buttons.\nSetting: show_tab_bar_buttons\nDefault: true\n\nOptions\nboolean values\nEditor Tabs\n\nDescription: Configuration for the editor tabs.\nSetting: tabs\nDefault:\n\n\"tabs\": {\n  \"close_position\": \"right\",\n  \"file_icons\": false,\n  \"git_status\": false,\n  \"activate_on_close\": \"history\",\n  \"show_close_button\": \"hover\",\n  \"show_diagnostics\": \"off\"\n},\n\nClose Position\n\nDescription: Where to display close button within a tab.\nSetting: close_position\nDefault: right\n\nOptions\n\nDisplay the close button on the right:\n\n{\n  \"close_position\": \"right\"\n}\n\n\nDisplay the close button on the left:\n\n{\n  \"close_position\": \"left\"\n}\n\nFile Icons\n\nDescription: Whether to show the file icon for a tab.\nSetting: file_icons\nDefault: false\n\nGit Status\n\nDescription: Whether or not to show Git file status in tab.\nSetting: git_status\nDefault: false\n\nActivate on close\n\nDescription: What to do after closing the current tab.\nSetting: activate_on_close\nDefault: history\n\nOptions\n\nActivate the tab that was open previously:\n\n{\n  \"activate_on_close\": \"history\"\n}\n\n\nActivate the right neighbour tab if present:\n\n{\n  \"activate_on_close\": \"neighbour\"\n}\n\n\nActivate the left neighbour tab if present:\n\n{\n  \"activate_on_close\": \"left_neighbour\"\n}\n\nShow close button\n\nDescription: Controls the appearance behavior of the tab's close button.\nSetting: show_close_button\nDefault: hover\n\nOptions\n\nShow it just upon hovering the tab:\n\n{\n  \"show_close_button\": \"hover\"\n}\n\n\nShow it persistently:\n\n{\n  \"show_close_button\": \"always\"\n}\n\n\nNever show it, even if hovering it:\n\n{\n  \"show_close_button\": \"hidden\"\n}\n\nShow Diagnostics\n\nDescription: Whether to show diagnostics indicators in tabs. This setting only works when file icons are active and controls which files with diagnostic issues to mark.\nSetting: show_diagnostics\nDefault: off\n\nOptions\n\nDo not mark any files:\n\n{\n  \"show_diagnostics\": \"off\"\n}\n\n\nOnly mark files with errors:\n\n{\n  \"show_diagnostics\": \"errors\"\n}\n\n\nMark files with errors and warnings:\n\n{\n  \"show_diagnostics\": \"all\"\n}\n\nShow Inline Code Actions\n\nDescription: Whether to show code action button at start of buffer line.\nSetting: inline_code_actions\nDefault: true\n\nOptions\nboolean values\nDrag And Drop Selection\n\nDescription: Whether to allow drag and drop text selection in buffer. delay is the milliseconds that must elapse before drag and drop is allowed. Otherwise, a new text selection is created.\nSetting: drag_and_drop_selection\nDefault:\n\n\"drag_and_drop_selection\": {\n  \"enabled\": true,\n  \"delay\": 300\n}\n\nEditor Toolbar\n\nDescription: Whether or not to show various elements in the editor toolbar.\nSetting: toolbar\nDefault:\n\n\"toolbar\": {\n  \"breadcrumbs\": true,\n  \"quick_actions\": true,\n  \"selections_menu\": true,\n  \"agent_review\": true,\n  \"code_actions\": false\n},\n\nOptions\nEach option controls displaying of a particular toolbar element. If all elements are hidden, the editor toolbar is not displayed.\nUse System Tabs\n\nDescription: Whether to allow windows to tab together based on the user’s tabbing preference (macOS only).\nSetting: use_system_window_tabs\nDefault: false\n\nOptions\nThis setting enables integration with macOS’s native window tabbing feature. When set to true, Zed windows can be grouped together as tabs in a single macOS window, following the system-wide tabbing preferences set by the user (such as \"Always\", \"In Full Screen\", or \"Never\"). This setting is only available on macOS.\nEnable Language Server\n\nDescription: Whether or not to use language servers to provide code intelligence.\nSetting: enable_language_server\nDefault: true\n\nOptions\nboolean values\nEnsure Final Newline On Save\n\nDescription: Removes any lines containing only whitespace at the end of the file and ensures just one newline at the end.\nSetting: ensure_final_newline_on_save\nDefault: true\n\nOptions\nboolean values\nExpand Excerpt Lines\n\nDescription: The default number of lines to expand excerpts in the multibuffer by\nSetting: expand_excerpt_lines\nDefault: 5\n\nOptions\nPositive integer values\nExcerpt Context Lines\n\nDescription: The number of lines of context to provide when showing excerpts in the multibuffer.\nSetting: excerpt_context_lines\nDefault: 2\n\nOptions\nPositive integer value between 1 and 32. Values outside of this range will be clamped to this range.\nExtend Comment On Newline\n\nDescription: Whether to start a new line with a comment when a previous line is a comment as well.\nSetting: extend_comment_on_newline\nDefault: true\n\nOptions\nboolean values\nStatus Bar\n\nDescription: Control various elements in the status bar. Note that some items in the status bar have their own settings set elsewhere.\nSetting: status_bar\nDefault:\n\n\"status_bar\": {\n  \"active_language_button\": true,\n  \"cursor_position_button\": true\n},\n\nLSP\n\nDescription: Configuration for language servers.\nSetting: lsp\nDefault: null\n\nOptions\nThe following settings can be overridden for specific language servers:\n\ninitialization_options\nsettings\n\nTo override configuration for a language server, add an entry for that language server's name to the lsp value.\nSome options are passed via initialization_options to the language server. These are for options which must be specified at language server startup and when changed will require restarting the language server.\nFor example to pass the check option to rust-analyzer, use the following configuration:\n\"lsp\": {\n  \"rust-analyzer\": {\n    \"initialization_options\": {\n      \"check\": {\n        \"command\": \"clippy\" // rust-analyzer.check.command (default: \"check\")\n      }\n    }\n  }\n}\n\nWhile other options may be changed at a runtime and should be placed under settings:\n\"lsp\": {\n  \"yaml-language-server\": {\n    \"settings\": {\n      \"yaml\": {\n        \"keyOrdering\": true // Enforces alphabetical ordering of keys in maps\n      }\n    }\n  }\n}\n\nGlobal LSP Settings\n\nDescription: Configuration for global LSP settings that apply to all language servers\nSetting: global_lsp_settings\nDefault:\n\n{\n  \"global_lsp_settings\": {\n    \"button\": true\n  }\n}\n\nOptions\n\nbutton: Whether to show the LSP status button in the status bar\n\nLSP Highlight Debounce\n\nDescription: The debounce delay in milliseconds before querying highlights from the language server based on the current cursor location.\nSetting: lsp_highlight_debounce\nDefault: 75\n\nGlobal LSP Settings\n\nDescription: Common language server settings.\nSetting: global_lsp_settings\nDefault:\n\n\"global_lsp_settings\": {\n  \"button\": true\n}\n\nOptions\ninteger values representing milliseconds\nFeatures\n\nDescription: Features that can be globally enabled or disabled\nSetting: features\nDefault:\n\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"zed\"\n  }\n}\n\nEdit Prediction Provider\n\nDescription: Which edit prediction provider to use\nSetting: edit_prediction_provider\nDefault: \"zed\"\n\nOptions\n\nUse Zeta as the edit prediction provider:\n\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"zed\"\n  }\n}\n\n\nUse Copilot as the edit prediction provider:\n\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"copilot\"\n  }\n}\n\n\nUse Supermaven as the edit prediction provider:\n\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"supermaven\"\n  }\n}\n\n\nTurn off edit predictions across all providers\n\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"none\"\n  }\n}\n\nFormat On Save\n\nDescription: Whether or not to perform a buffer format before saving.\nSetting: format_on_save\nDefault: on\n\nOptions\n\non, enables format on save obeying formatter setting:\n\n{\n  \"format_on_save\": \"on\"\n}\n\n\noff, disables format on save:\n\n{\n  \"format_on_save\": \"off\"\n}\n\nFormatter\n\nDescription: How to perform a buffer format.\nSetting: formatter\nDefault: auto\n\nOptions\n\nTo use the current language server, use \"language_server\":\n\n{\n  \"formatter\": \"language_server\"\n}\n\n\nOr to use an external command, use \"external\". Specify the name of the formatting program to run, and an array of arguments to pass to the program. The buffer's text will be passed to the program on stdin, and the formatted output should be written to stdout. For example, the following command would strip trailing spaces using sed(1):\n\n{\n  \"formatter\": {\n    \"external\": {\n      \"command\": \"sed\",\n      \"arguments\": [\"-e\", \"s/ *$//\"]\n    }\n  }\n}\n\n\nExternal formatters may optionally include a {buffer_path} placeholder which at runtime will include the path of the buffer being formatted. Formatters operate by receiving file content via standard input, reformatting it and then outputting it to standard output and so normally don't know the filename of what they are formatting. Tools like Prettier support receiving the file path via a command line argument which can then used to impact formatting decisions.\n\nWARNING: {buffer_path} should not be used to direct your formatter to read from a filename. Your formatter should only read from standard input and should not read or write files directly.\n  \"formatter\": {\n    \"external\": {\n      \"command\": \"prettier\",\n      \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n    }\n  }\n\n\nOr to use code actions provided by the connected language servers, use \"code_actions\":\n\n{\n  \"formatter\": {\n    \"code_actions\": {\n      // Use ESLint's --fix:\n      \"source.fixAll.eslint\": true,\n      // Organize imports on save:\n      \"source.organizeImports\": true\n    }\n  }\n}\n\n\nOr to use multiple formatters consecutively, use an array of formatters:\n\n{\n  \"formatter\": [\n    { \"language_server\": { \"name\": \"rust-analyzer\" } },\n    {\n      \"external\": {\n        \"command\": \"sed\",\n        \"arguments\": [\"-e\", \"s/ *$//\"]\n      }\n    }\n  ]\n}\n\nHere rust-analyzer will be used first to format the code, followed by a call of sed.\nIf any of the formatters fails, the subsequent ones will still be executed.\nCode Actions On Format\n\nDescription: The code actions to perform with the primary language server when formatting the buffer.\nSetting: code_actions_on_format\nDefault: {}, except for Go it's { \"source.organizeImports\": true }\n\nExamples\n\n\nOrganize imports on format in TypeScript and TSX buffers:\n\n{\n  \"languages\": {\n    \"TypeScript\": {\n      \"code_actions_on_format\": {\n        \"source.organizeImports\": true\n      }\n    },\n    \"TSX\": {\n      \"code_actions_on_format\": {\n        \"source.organizeImports\": true\n      }\n    }\n  }\n}\n\n\nRun ESLint fixAll code action when formatting:\n\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n\n\nRun only a single ESLint rule when using fixAll:\n\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n\nAuto close\n\nDescription: Whether to automatically add matching closing characters when typing opening parenthesis, bracket, brace, single or double quote characters.\nSetting: use_autoclose\nDefault: true\n\nOptions\nboolean values\nAlways Treat Brackets As Autoclosed\n\nDescription: Controls how the editor handles the autoclosed characters.\nSetting: always_treat_brackets_as_autoclosed\nDefault: false\n\nOptions\nboolean values\nExample\nIf the setting is set to true:\n\nEnter in the editor: )))\nMove the cursor to the start: ^)))\nEnter again: )))\n\nThe result is still ))) and not )))))), which is what it would be by default.\nFile Scan Exclusions\n\nSetting: file_scan_exclusions\nDescription: Files or globs of files that will be excluded by Zed entirely. They will be skipped during file scans, file searches, and not be displayed in the project file tree. Overrides file_scan_inclusions.\nDefault:\n\n\"file_scan_exclusions\": [\n  \"**/.git\",\n  \"**/.svn\",\n  \"**/.hg\",\n  \"**/.jj\",\n  \"**/CVS\",\n  \"**/.DS_Store\",\n  \"**/Thumbs.db\",\n  \"**/.classpath\",\n  \"**/.settings\"\n],\n\nNote, specifying file_scan_exclusions in settings.json will override the defaults (shown above). If you are looking to exclude additional items you will need to include all the default values in your settings.\nFile Scan Inclusions\n\nSetting: file_scan_inclusions\nDescription: Files or globs of files that will be included by Zed, even when ignored by git. This is useful for files that are not tracked by git, but are still important to your project. Note that globs that are overly broad can slow down Zed's file scanning. file_scan_exclusions takes precedence over these inclusions.\nDefault:\n\n\"file_scan_inclusions\": [\".env*\"],\n\nFile Types\n\nSetting: file_types\nDescription: Configure how Zed selects a language for a file based on its filename or extension. Supports glob entries.\nDefault:\n\n\"file_types\": {\n  \"JSONC\": [\"**/.zed/**/*.json\", \"**/zed/**/*.json\", \"**/Zed/**/*.json\", \"**/.vscode/**/*.json\"],\n  \"Shell Script\": [\".env.*\"]\n}\n\nExamples\nTo interpret all .c files as C++, files called MyLockFile as TOML and files starting with Dockerfile as Dockerfile:\n{\n  \"file_types\": {\n    \"C++\": [\"c\"],\n    \"TOML\": [\"MyLockFile\"],\n    \"Dockerfile\": [\"Dockerfile*\"]\n  }\n}\n\nDiagnostics\n\nDescription: Configuration for diagnostics-related features.\nSetting: diagnostics\nDefault:\n\n{\n  \"diagnostics\": {\n    \"include_warnings\": true,\n    \"inline\": {\n      \"enabled\": false\n    },\n    \"update_with_cursor\": false,\n    \"primary_only\": false,\n    \"use_rendered\": false\n  }\n}\n\nInline Diagnostics\n\nDescription: Whether or not to show diagnostics information inline.\nSetting: inline\nDefault:\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": false,\n      \"update_debounce_ms\": 150,\n      \"padding\": 4,\n      \"min_column\": 0,\n      \"max_severity\": null\n    }\n  }\n}\n\nOptions\n\nEnable inline diagnostics.\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true\n    }\n  }\n}\n\n\nDelay diagnostic updates until some time after the last diagnostic update.\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"update_debounce_ms\": 150\n    }\n  }\n}\n\n\nSet padding between the end of the source line and the start of the diagnostic.\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"padding\": 4\n    }\n  }\n}\n\n\nHorizontally align inline diagnostics at the given column.\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"min_column\": 80\n    }\n  }\n}\n\n\nShow only warning and error diagnostics.\n\n{\n  \"diagnostics\": {\n    \"inline\": {\n      \"enabled\": true,\n      \"max_severity\": \"warning\"\n    }\n  }\n}\n\nGit\n\nDescription: Configuration for git-related features.\nSetting: git\nDefault:\n\n{\n  \"git\": {\n    \"git_gutter\": \"tracked_files\",\n    \"inline_blame\": {\n      \"enabled\": true\n    },\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n\nGit Gutter\n\nDescription: Whether or not to show the git gutter.\nSetting: git_gutter\nDefault: tracked_files\n\nOptions\n\nShow git gutter in tracked files\n\n{\n  \"git\": {\n    \"git_gutter\": \"tracked_files\"\n  }\n}\n\n\nHide git gutter\n\n{\n  \"git\": {\n    \"git_gutter\": \"hide\"\n  }\n}\n\nGutter Debounce\n\nDescription: Sets the debounce threshold (in milliseconds) after which changes are reflected in the git gutter.\nSetting: gutter_debounce\nDefault: null\n\nOptions\ninteger values representing milliseconds\nExample:\n{\n  \"git\": {\n    \"gutter_debounce\": 100\n  }\n}\n\nInline Git Blame\n\nDescription: Whether or not to show git blame information inline, on the currently focused line.\nSetting: inline_blame\nDefault:\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": true\n    }\n  }\n}\n\nOptions\n\nDisable inline git blame:\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": false\n    }\n  }\n}\n\n\nOnly show inline git blame after a delay (that starts after cursor stops moving):\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"delay_ms\": 500\n    }\n  }\n}\n\n\nShow a commit summary next to the commit date and author:\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"show_commit_summary\": true\n    }\n  }\n}\n\n\nUse this as the minimum column at which to display inline blame information:\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"min_column\": 80\n    }\n  }\n}\n\n\nSet the padding between the end of the line and the inline blame hint, in ems:\n\n{\n  \"git\": {\n    \"inline_blame\": {\n      \"padding\": 10\n    }\n  }\n}\n\nHunk Style\n\nDescription: What styling we should use for the diff hunks.\nSetting: hunk_style\nDefault:\n\n{\n  \"git\": {\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n\nOptions\n\nShow the staged hunks faded out and with a border:\n\n{\n  \"git\": {\n    \"hunk_style\": \"staged_hollow\"\n  }\n}\n\n\nShow unstaged hunks faded out and with a border:\n\n{\n  \"git\": {\n    \"hunk_style\": \"unstaged_hollow\"\n  }\n}\n\nGo to Definition Fallback\n\nDescription: What to do when the \"go to definition\" action fails to find a definition\nSetting: go_to_definition_fallback\nDefault: \"find_all_references\"\n\nOptions\n\nDo nothing:\n\n{\n  \"go_to_definition_fallback\": \"none\"\n}\n\n\nFind references for the same symbol (default):\n\n{\n  \"go_to_definition_fallback\": \"find_all_references\"\n}\n\nHard Tabs\n\nDescription: Whether to indent lines using tab characters or multiple spaces.\nSetting: hard_tabs\nDefault: false\n\nOptions\nboolean values\nHelix Mode\n\nDescription: Whether or not to enable Helix mode. Enabling helix_mode also enables vim_mode. See the Helix documentation for more details.\nSetting: helix_mode\nDefault: false\n\nOptions\nboolean values\nIndent Guides\n\nDescription: Configuration related to indent guides. Indent guides can be configured separately for each language.\nSetting: indent_guides\nDefault:\n\n{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"line_width\": 1,\n    \"active_line_width\": 1,\n    \"coloring\": \"fixed\",\n    \"background_coloring\": \"disabled\"\n  }\n}\n\nOptions\n\nDisable indent guides\n\n{\n  \"indent_guides\": {\n    \"enabled\": false\n  }\n}\n\n\nEnable indent guides for a specific language.\n\n{\n  \"languages\": {\n    \"Python\": {\n      \"indent_guides\": {\n        \"enabled\": true\n      }\n    }\n  }\n}\n\n\nEnable indent aware coloring (\"rainbow indentation\").\nThe colors that are used for different indentation levels are defined in the theme (theme key: accents). They can be customized by using theme overrides.\n\n{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"coloring\": \"indent_aware\"\n  }\n}\n\n\nEnable indent aware background coloring (\"rainbow indentation\").\nThe colors that are used for different indentation levels are defined in the theme (theme key: accents). They can be customized by using theme overrides.\n\n{\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"coloring\": \"indent_aware\",\n    \"background_coloring\": \"indent_aware\"\n  }\n}\n\nHover Popover Enabled\n\nDescription: Whether or not to show the informational hover box when moving the mouse over symbols in the editor.\nSetting: hover_popover_enabled\nDefault: true\n\nOptions\nboolean values\nHover Popover Delay\n\nDescription: Time to wait in milliseconds before showing the informational hover box.\nSetting: hover_popover_delay\nDefault: 300\n\nOptions\ninteger values representing milliseconds\nIcon Theme\n\nDescription: The icon theme setting can be specified in two forms - either as the name of an icon theme or as an object containing the mode, dark, and light icon themes for files/folders inside Zed.\nSetting: icon_theme\nDefault: Zed (Default)\n\nIcon Theme Object\n\nDescription: Specify the icon theme using an object that includes the mode, dark, and light.\nSetting: icon_theme\nDefault:\n\n\"icon_theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"Zed (Default)\",\n  \"light\": \"Zed (Default)\"\n},\n\nMode\n\nDescription: Specify the icon theme mode.\nSetting: mode\nDefault: system\n\nOptions\n\nSet the icon theme to dark mode\n\n{\n  \"mode\": \"dark\"\n}\n\n\nSet the icon theme to light mode\n\n{\n  \"mode\": \"light\"\n}\n\n\nSet the icon theme to system mode\n\n{\n  \"mode\": \"system\"\n}\n\nDark\n\nDescription: The name of the dark icon theme.\nSetting: dark\nDefault: Zed (Default)\n\nOptions\nRun the icon theme selector: toggle action in the command palette to see a current list of valid icon themes names.\nLight\n\nDescription: The name of the light icon theme.\nSetting: light\nDefault: Zed (Default)\n\nOptions\nRun the icon theme selector: toggle action in the command palette to see a current list of valid icon themes names.\nImage Viewer\n\nDescription: Settings for image viewer functionality\nSetting: image_viewer\nDefault:\n\n{\n  \"image_viewer\": {\n    \"unit\": \"binary\"\n  }\n}\n\nOptions\nUnit\n\nDescription: The unit for image file sizes\nSetting: unit\nDefault: \"binary\"\n\nOptions\n\nUse binary units (KiB, MiB):\n\n{\n  \"image_viewer\": {\n    \"unit\": \"binary\"\n  }\n}\n\n\nUse decimal units (KB, MB):\n\n{\n  \"image_viewer\": {\n    \"unit\": \"decimal\"\n  }\n}\n\nInlay hints\n\nDescription: Configuration for displaying extra text with hints in the editor.\nSetting: inlay_hints\nDefault:\n\n\"inlay_hints\": {\n  \"enabled\": false,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true,\n  \"show_background\": false,\n  \"edit_debounce_ms\": 700,\n  \"scroll_debounce_ms\": 50,\n  \"toggle_on_modifiers_press\": null\n}\n\nOptions\nInlay hints querying consists of two parts: editor (client) and LSP server.\nWith the inlay settings above are changed to enable the hints, editor will start to query certain types of hints and react on LSP hint refresh request from the server.\nAt this point, the server may or may not return hints depending on its implementation, further configuration might be needed, refer to the corresponding LSP server documentation.\nThe following languages have inlay hints preconfigured by Zed:\n\nGo\nRust\nSvelte\nTypescript\n\nUse the lsp section for the server configuration. Examples are provided in the corresponding language documentation.\nHints are not instantly queried in Zed, two kinds of debounces are used, either may be set to 0 to be disabled.\nSettings-related hint updates are not debounced.\nAll possible config values for toggle_on_modifiers_press are:\n\"inlay_hints\": {\n  \"toggle_on_modifiers_press\": {\n    \"control\": true,\n    \"shift\": true,\n    \"alt\": true,\n    \"platform\": true,\n    \"function\": true\n  }\n}\n\nUnspecified values have a false value, hints won't be toggled if all the modifiers are false or not all the modifiers are pressed.\nJournal\n\nDescription: Configuration for the journal.\nSetting: journal\nDefault:\n\n\"journal\": {\n  \"path\": \"~\",\n  \"hour_format\": \"hour12\"\n}\n\nPath\n\nDescription: The path of the directory where journal entries are stored.\nSetting: path\nDefault: ~\n\nOptions\nstring values\nHour Format\n\nDescription: The format to use for displaying hours in the journal.\nSetting: hour_format\nDefault: hour12\n\nOptions\n\n12-hour format:\n\n{\n  \"hour_format\": \"hour12\"\n}\n\n\n24-hour format:\n\n{\n  \"hour_format\": \"hour24\"\n}\n\nJSX Tag Auto Close\n\nDescription: Whether to automatically close JSX tags\nSetting: jsx_tag_auto_close\nDefault:\n\n{\n  \"jsx_tag_auto_close\": {\n    \"enabled\": true\n  }\n}\n\nOptions\n\nenabled: Whether to enable automatic JSX tag closing\n\nLanguages\n\nDescription: Configuration for specific languages.\nSetting: languages\nDefault: null\n\nOptions\nTo override settings for a language, add an entry for that languages name to the languages value. Example:\n\"languages\": {\n  \"C\": {\n    \"format_on_save\": \"off\",\n    \"preferred_line_length\": 64,\n    \"soft_wrap\": \"preferred_line_length\"\n  },\n  \"JSON\": {\n    \"tab_size\": 4\n  }\n}\n\nThe following settings can be overridden for each specific language:\n\nenable_language_server\nensure_final_newline_on_save\nformat_on_save\nformatter\nhard_tabs\npreferred_line_length\nremove_trailing_whitespace_on_save\nshow_edit_predictions\nshow_whitespaces\nsoft_wrap\ntab_size\nuse_autoclose\nalways_treat_brackets_as_autoclosed\n\nThese values take in the same options as the root-level settings with the same name.\nLanguage Models\n\nDescription: Configuration for language model providers\nSetting: language_models\nDefault:\n\n{\n  \"language_models\": {\n    \"anthropic\": {\n      \"api_url\": \"https://api.anthropic.com\"\n    },\n    \"google\": {\n      \"api_url\": \"https://generativelanguage.googleapis.com\"\n    },\n    \"ollama\": {\n      \"api_url\": \"http://localhost:11434\"\n    },\n    \"openai\": {\n      \"api_url\": \"https://api.openai.com/v1\"\n    }\n  }\n}\n\nOptions\nConfiguration for various AI model providers including API URLs and authentication settings.\nLine Indicator Format\n\nDescription: Format for line indicator in the status bar\nSetting: line_indicator_format\nDefault: \"short\"\n\nOptions\n\nShort format:\n\n{\n  \"line_indicator_format\": \"short\"\n}\n\n\nLong format:\n\n{\n  \"line_indicator_format\": \"long\"\n}\n\nLinked Edits\n\nDescription: Whether to perform linked edits of associated ranges, if the language server supports it. For example, when editing opening <html> tag, the contents of the closing </html> tag will be edited as well.\nSetting: linked_edits\nDefault: true\n\nOptions\nboolean values\nLSP Document Colors\n\nDescription: Whether to show document color information from the language server\nSetting: lsp_document_colors\nDefault: true\n\nOptions\nboolean values\nMax Tabs\n\nDescription: Maximum number of tabs to show in the tab bar\nSetting: max_tabs\nDefault: null\n\nOptions\nPositive integer values or null for unlimited tabs\nMiddle Click Paste (Linux only)\n\nDescription: Enable middle-click paste on Linux\nSetting: middle_click_paste\nDefault: true\n\nOptions\nboolean values\nMulti Cursor Modifier\n\nDescription: Determines the modifier to be used to add multiple cursors with the mouse. The open hover link mouse gestures will adapt such that it do not conflict with the multicursor modifier.\nSetting: multi_cursor_modifier\nDefault: alt\n\nOptions\n\nMaps to Alt on Linux and Windows and to Option on MacOS:\n\n{\n  \"multi_cursor_modifier\": \"alt\"\n}\n\n\nMaps Control on Linux and Windows and to Command on MacOS:\n\n{\n  \"multi_cursor_modifier\": \"cmd_or_ctrl\" // alias: \"cmd\", \"ctrl\"\n}\n\nNode\n\nDescription: Configuration for Node.js integration\nSetting: node\nDefault:\n\n{\n  \"node\": {\n    \"ignore_system_version\": false,\n    \"path\": null,\n    \"npm_path\": null\n  }\n}\n\nOptions\n\nignore_system_version: Whether to ignore the system Node.js version\npath: Custom path to Node.js binary\nnpm_path: Custom path to npm binary\n\nNetwork Proxy\n\nDescription: Configure a network proxy for Zed.\nSetting: proxy\nDefault: null\n\nOptions\nThe proxy setting must contain a URL to the proxy.\nThe following URI schemes are supported:\n\nhttp\nhttps\nsocks4 - SOCKS4 proxy with local DNS\nsocks4a - SOCKS4 proxy with remote DNS\nsocks5 - SOCKS5 proxy with local DNS\nsocks5h - SOCKS5 proxy with remote DNS\n\nhttp will be used when no scheme is specified.\nBy default no proxy will be used, or Zed will attempt to retrieve proxy settings from environment variables, such as http_proxy, HTTP_PROXY, https_proxy, HTTPS_PROXY, all_proxy, ALL_PROXY, no_proxy and NO_PROXY.\nFor example, to set an http proxy, add the following to your settings:\n{\n  \"proxy\": \"http://127.0.0.1:10809\"\n}\n\nOr to set a socks5 proxy:\n{\n  \"proxy\": \"socks5h://localhost:10808\"\n}\n\nIf you wish to exclude certain hosts from using the proxy, set the NO_PROXY environment variable. This accepts a comma-separated list of hostnames, host suffixes, IPv4/IPv6 addresses or blocks that should not use the proxy. For example if your environment included NO_PROXY=\"google.com, 192.168.1.0/24\" all hosts in 192.168.1.*, google.com and *.google.com would bypass the proxy. See reqwest NoProxy docs for more.\nOn Last Window Closed\n\nDescription: What to do when the last window is closed\nSetting: on_last_window_closed\nDefault: \"platform_default\"\n\nOptions\n\nUse platform default behavior:\n\n{\n  \"on_last_window_closed\": \"platform_default\"\n}\n\n\nAlways quit the application:\n\n{\n  \"on_last_window_closed\": \"quit_app\"\n}\n\nProfiles\n\nDescription: Configuration profiles that can be applied on top of existing settings\nSetting: profiles\nDefault: {}\n\nOptions\nConfiguration object for defining settings profiles. Example:\n{\n  \"profiles\": {\n    \"presentation\": {\n      \"buffer_font_size\": 20,\n      \"ui_font_size\": 18,\n      \"theme\": \"One Light\"\n    }\n  }\n}\n\nPreview tabs\n\n\nDescription:\nPreview tabs allow you to open files in preview mode, where they close automatically when you switch to another file unless you explicitly pin them. This is useful for quickly viewing files without cluttering your workspace. Preview tabs display their file names in italics. \nThere are several ways to convert a preview tab into a regular tab:\n\nDouble-clicking on the file\nDouble-clicking on the tab header\nUsing the project_panel::OpenPermanent action\nEditing the file\nDragging the file to a different pane\n\n\n\nSetting: preview_tabs\n\n\nDefault:\n\n\n\"preview_tabs\": {\n  \"enabled\": true,\n  \"enable_preview_from_file_finder\": false,\n  \"enable_preview_from_code_navigation\": false,\n}\n\nEnable preview from file finder\n\nDescription: Determines whether to open files in preview mode when selected from the file finder.\nSetting: enable_preview_from_file_finder\nDefault: false\n\nOptions\nboolean values\nEnable preview from code navigation\n\nDescription: Determines whether a preview tab gets replaced when code navigation is used to navigate away from the tab.\nSetting: enable_preview_from_code_navigation\nDefault: false\n\nOptions\nboolean values\nFile Finder\nFile Icons\n\nDescription: Whether to show file icons in the file finder.\nSetting: file_icons\nDefault: true\n\nModal Max Width\n\nDescription: Max-width of the file finder modal. It can take one of these values: small, medium, large, xlarge, and full.\nSetting: modal_max_width\nDefault: small\n\nSkip Focus For Active In Search\n\nDescription: Determines whether the file finder should skip focus for the active file in search results.\nSetting: skip_focus_for_active_in_search\nDefault: true\n\nPane Split Direction Horizontal\n\nDescription: The direction that you want to split panes horizontally\nSetting: pane_split_direction_horizontal\nDefault: \"up\"\n\nOptions\n\nSplit upward:\n\n{\n  \"pane_split_direction_horizontal\": \"up\"\n}\n\n\nSplit downward:\n\n{\n  \"pane_split_direction_horizontal\": \"down\"\n}\n\nPane Split Direction Vertical\n\nDescription: The direction that you want to split panes vertically\nSetting: pane_split_direction_vertical\nDefault: \"left\"\n\nOptions\n\nSplit to the left:\n\n{\n  \"pane_split_direction_vertical\": \"left\"\n}\n\n\nSplit to the right:\n\n{\n  \"pane_split_direction_vertical\": \"right\"\n}\n\nPreferred Line Length\n\nDescription: The column at which to soft-wrap lines, for buffers where soft-wrap is enabled.\nSetting: preferred_line_length\nDefault: 80\n\nOptions\ninteger values\nPrivate Files\n\nDescription: Globs to match against file paths to determine if a file is private\nSetting: private_files\nDefault: [\"**/.env*\", \"**/*.pem\", \"**/*.key\", \"**/*.cert\", \"**/*.crt\", \"**/secrets.yml\"]\n\nOptions\nList of string glob patterns\nProjects Online By Default\n\nDescription: Whether or not to show the online projects view by default.\nSetting: projects_online_by_default\nDefault: true\n\nOptions\nboolean values\nRead SSH Config\n\nDescription: Whether to read SSH configuration files\nSetting: read_ssh_config\nDefault: true\n\nOptions\nboolean values\nRedact Private Values\n\nDescription: Hide the values of variables from visual display in private files\nSetting: redact_private_values\nDefault: false\n\nOptions\nboolean values\nRelative Line Numbers\n\nDescription: Whether to show relative line numbers in the gutter\nSetting: relative_line_numbers\nDefault: false\n\nOptions\nboolean values\nRemove Trailing Whitespace On Save\n\nDescription: Whether or not to remove any trailing whitespace from lines of a buffer before saving it.\nSetting: remove_trailing_whitespace_on_save\nDefault: true\n\nOptions\nboolean values\nResize All Panels In Dock\n\nDescription: Whether to resize all the panels in a dock when resizing the dock. Can be a combination of \"left\", \"right\" and \"bottom\".\nSetting: resize_all_panels_in_dock\nDefault: [\"left\"]\n\nOptions\nList of strings containing any combination of:\n\n\"left\": Resize left dock panels together\n\"right\": Resize right dock panels together\n\"bottom\": Resize bottom dock panels together\n\nRestore on File Reopen\n\nDescription: Whether to attempt to restore previous file's state when opening it again. The state is stored per pane.\nSetting: restore_on_file_reopen\nDefault: true\n\nOptions\nboolean values\nRestore on Startup\n\nDescription: Controls session restoration on startup.\nSetting: restore_on_startup\nDefault: last_session\n\nOptions\n\nRestore all workspaces that were open when quitting Zed:\n\n{\n  \"restore_on_startup\": \"last_session\"\n}\n\n\nRestore the workspace that was closed last:\n\n{\n  \"restore_on_startup\": \"last_workspace\"\n}\n\n\nAlways start with an empty editor:\n\n{\n  \"restore_on_startup\": \"none\"\n}\n\nScroll Beyond Last Line\n\nDescription: Whether the editor will scroll beyond the last line\nSetting: scroll_beyond_last_line\nDefault: \"one_page\"\n\nOptions\n\nScroll one page beyond the last line by one page:\n\n{\n  \"scroll_beyond_last_line\": \"one_page\"\n}\n\n\nThe editor will scroll beyond the last line by the same amount of lines as vertical_scroll_margin:\n\n{\n  \"scroll_beyond_last_line\": \"vertical_scroll_margin\"\n}\n\n\nThe editor will not scroll beyond the last line:\n\n{\n  \"scroll_beyond_last_line\": \"off\"\n}\n\nOptions\nboolean values\nScroll Sensitivity\n\nDescription: Scroll sensitivity multiplier. This multiplier is applied to both the horizontal and vertical delta values while scrolling.\nSetting: scroll_sensitivity\nDefault: 1.0\n\nOptions\nPositive float values\nFast Scroll Sensitivity\n\nDescription: Scroll sensitivity multiplier for fast scrolling. This multiplier is applied to both the horizontal and vertical delta values while scrolling. Fast scrolling happens when a user holds the alt or option key while scrolling.\nSetting: fast_scroll_sensitivity\nDefault: 4.0\n\nOptions\nPositive float values\nHorizontal Scroll Margin\n\nDescription: The number of characters to keep on either side when scrolling with the mouse\nSetting: horizontal_scroll_margin\nDefault: 5\n\nOptions\nNon-negative integer values\nVertical Scroll Margin\n\nDescription: The number of lines to keep above/below the cursor when scrolling with the keyboard\nSetting: vertical_scroll_margin\nDefault: 3\n\nOptions\nNon-negative integer values\nSearch\n\nDescription: Search options to enable by default when opening new project and buffer searches.\nSetting: search\nDefault:\n\n\"search\": {\n  \"whole_word\": false,\n  \"case_sensitive\": false,\n  \"include_ignored\": false,\n  \"regex\": false\n},\n\nSearch Wrap\n\nDescription: If search_wrap is disabled, search result do not wrap around the end of the file\nSetting: search_wrap\nDefault: true\n\nSeed Search Query From Cursor\n\nDescription: When to populate a new search's query based on the text under the cursor.\nSetting: seed_search_query_from_cursor\nDefault: always\n\nOptions\n\nalways always populate the search query with the word under the cursor\nselection only populate the search query when there is text selected\nnever never populate the search query\n\nUse Smartcase Search\n\nDescription: When enabled, automatically adjusts search case sensitivity based on your query. If your search query contains any uppercase letters, the search becomes case-sensitive; if it contains only lowercase letters, the search becomes case-insensitive. \nThis applies to both in-file searches and project-wide searches.\nSetting: use_smartcase_search\nDefault: false\n\nOptions\nboolean values\nExamples:\n\nSearching for \"function\" would match \"function\", \"Function\", \"FUNCTION\", etc.\nSearching for \"Function\" would only match \"Function\", not \"function\" or \"FUNCTION\"\n\nShow Call Status Icon\n\nDescription: Whether or not to show the call status icon in the status bar.\nSetting: show_call_status_icon\nDefault: true\n\nOptions\nboolean values\nCompletions\n\nDescription: Controls how completions are processed for this language.\nSetting: completions\nDefault:\n\n{\n  \"completions\": {\n    \"words\": \"fallback\",\n    \"words_min_length\": 3,\n    \"lsp\": true,\n    \"lsp_fetch_timeout_ms\": 0,\n    \"lsp_insert_mode\": \"replace_suffix\"\n  }\n}\n\nWords\n\nDescription: Controls how words are completed. For large documents, not all words may be fetched for completion.\nSetting: words\nDefault: fallback\n\nOptions\n\nenabled - Always fetch document's words for completions along with LSP completions\nfallback - Only if LSP response errors or times out, use document's words to show completions\ndisabled - Never fetch or complete document's words for completions (word-based completions can still be queried via a separate action)\n\nMin Words Query Length\n\nDescription: Minimum number of characters required to automatically trigger word-based completions.\nBefore that value, it's still possible to trigger the words-based completion manually with the corresponding editor command.\nSetting: words_min_length\nDefault: 3\n\nOptions\nPositive integer values\nLSP\n\nDescription: Whether to fetch LSP completions or not.\nSetting: lsp\nDefault: true\n\nOptions\nboolean values\nLSP Fetch Timeout (ms)\n\nDescription: When fetching LSP completions, determines how long to wait for a response of a particular server. When set to 0, waits indefinitely.\nSetting: lsp_fetch_timeout_ms\nDefault: 0\n\nOptions\ninteger values representing milliseconds\nLSP Insert Mode\n\nDescription: Controls what range to replace when accepting LSP completions.\nSetting: lsp_insert_mode\nDefault: replace_suffix\n\nOptions\n\ninsert - Replaces text before the cursor, using the insert range described in the LSP specification\nreplace - Replaces text before and after the cursor, using the replace range described in the LSP specification\nreplace_subsequence - Behaves like \"replace\" if the text that would be replaced is a subsequence of the completion text, and like \"insert\" otherwise\nreplace_suffix - Behaves like \"replace\" if the text after the cursor is a suffix of the completion, and like \"insert\" otherwise\n\nShow Completions On Input\n\nDescription: Whether or not to show completions as you type.\nSetting: show_completions_on_input\nDefault: true\n\nOptions\nboolean values\nShow Completion Documentation\n\nDescription: Whether to display inline and alongside documentation for items in the completions menu.\nSetting: show_completion_documentation\nDefault: true\n\nOptions\nboolean values\nShow Edit Predictions\n\nDescription: Whether to show edit predictions as you type or manually by triggering editor::ShowEditPrediction.\nSetting: show_edit_predictions\nDefault: true\n\nOptions\nboolean values\nShow Whitespaces\n\nDescription: Whether or not to render whitespace characters in the editor.\nSetting: show_whitespaces\nDefault: selection\n\nOptions\n\nall\nselection\nnone\nboundary\n\nSoft Wrap\n\nDescription: Whether or not to automatically wrap lines of text to fit editor / preferred width.\nSetting: soft_wrap\nDefault: none\n\nOptions\n\nnone to avoid wrapping generally, unless the line is too long\nprefer_line (deprecated, same as none)\neditor_width to wrap lines that overflow the editor width\npreferred_line_length to wrap lines that overflow preferred_line_length config value\nbounded to wrap lines at the minimum of editor_width and preferred_line_length\n\nShow Wrap Guides\n\nDescription: Whether to show wrap guides (vertical rulers) in the editor. Setting this to true will show a guide at the 'preferred_line_length' value if 'soft_wrap' is set to 'preferred_line_length', and will show any additional guides as specified by the 'wrap_guides' setting.\nSetting: show_wrap_guides\nDefault: true\n\nOptions\nboolean values\nUse On Type Format\n\nDescription: Whether to use additional LSP queries to format (and amend) the code after every \"trigger\" symbol input, defined by LSP server capabilities\nSetting: use_on_type_format\nDefault: true\n\nOptions\nboolean values\nUse Auto Surround\n\nDescription: Whether to automatically surround selected text when typing opening parenthesis, bracket, brace, single or double quote characters. For example, when you select text and type (, Zed will surround the text with ().\nSetting: use_auto_surround\nDefault: true\n\nOptions\nboolean values\nUse System Path Prompts\n\nDescription: Whether to use the system provided dialogs for Open and Save As. When set to false, Zed will use the built-in keyboard-first pickers.\nSetting: use_system_path_prompts\nDefault: true\n\nOptions\nboolean values\nUse System Prompts\n\nDescription: Whether to use the system provided dialogs for prompts, such as confirmation prompts. When set to false, Zed will use its built-in prompts. Note that on Linux, this option is ignored and Zed will always use the built-in prompts.\nSetting: use_system_prompts\nDefault: true\n\nOptions\nboolean values\nWrap Guides (Vertical Rulers)\n\nDescription: Where to display vertical rulers as wrap-guides. Disable by setting show_wrap_guides to false.\nSetting: wrap_guides\nDefault: []\n\nOptions\nList of integer column numbers\nTab Size\n\nDescription: The number of spaces to use for each tab character.\nSetting: tab_size\nDefault: 4\n\nOptions\ninteger values\nTasks\n\nDescription: Configuration for tasks that can be run within Zed\nSetting: tasks\nDefault:\n\n{\n  \"tasks\": {\n    \"variables\": {},\n    \"enabled\": true,\n    \"prefer_lsp\": false\n  }\n}\n\nOptions\n\nvariables: Custom variables for task configuration\nenabled: Whether tasks are enabled\nprefer_lsp: Whether to prefer LSP-provided tasks over Zed language extension ones\n\nTelemetry\n\nDescription: Control what info is collected by Zed.\nSetting: telemetry\nDefault:\n\n\"telemetry\": {\n  \"diagnostics\": true,\n  \"metrics\": true\n},\n\nOptions\nDiagnostics\n\nDescription: Setting for sending debug-related data, such as crash reports.\nSetting: diagnostics\nDefault: true\n\nOptions\nboolean values\nMetrics\n\nDescription: Setting for sending anonymized usage data, such what languages you're using Zed with.\nSetting: metrics\nDefault: true\n\nOptions\nboolean values\nTerminal\n\nDescription: Configuration for the terminal.\nSetting: terminal\nDefault:\n\n{\n  \"terminal\": {\n    \"alternate_scroll\": \"off\",\n    \"blinking\": \"terminal_controlled\",\n    \"copy_on_select\": false,\n    \"keep_selection_on_copy\": false,\n    \"dock\": \"bottom\",\n    \"default_width\": 640,\n    \"default_height\": 320,\n    \"detect_venv\": {\n      \"on\": {\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        \"activate_script\": \"default\"\n      }\n    },\n    \"env\": {},\n    \"font_family\": null,\n    \"font_features\": null,\n    \"font_size\": null,\n    \"line_height\": \"comfortable\",\n    \"minimum_contrast\": 45,\n    \"option_as_meta\": false,\n    \"button\": true,\n    \"shell\": \"system\",\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    },\n    \"working_directory\": \"current_project_directory\",\n    \"scrollbar\": {\n      \"show\": null\n    }\n  }\n}\n\nTerminal: Dock\n\nDescription: Control the position of the dock\nSetting: dock\nDefault: bottom\n\nOptions\n\"bottom\", \"left\" or \"right\"\nTerminal: Alternate Scroll\n\nDescription: Set whether Alternate Scroll mode (DECSET code: ?1007) is active by default. Alternate Scroll mode converts mouse scroll events into up / down key presses when in the alternate screen (e.g. when running applications like vim or less). The terminal can still set and unset this mode with ANSI escape codes.\nSetting: alternate_scroll\nDefault: off\n\nOptions\n\nDefault alternate scroll mode to off\n\n{\n  \"terminal\": {\n    \"alternate_scroll\": \"off\"\n  }\n}\n\n\nDefault alternate scroll mode to on\n\n{\n  \"terminal\": {\n    \"alternate_scroll\": \"on\"\n  }\n}\n\nTerminal: Blinking\n\nDescription: Set the cursor blinking behavior in the terminal\nSetting: blinking\nDefault: terminal_controlled\n\nOptions\n\nNever blink the cursor, ignore the terminal mode\n\n{\n  \"terminal\": {\n    \"blinking\": \"off\"\n  }\n}\n\n\nDefault the cursor blink to off, but allow the terminal to turn blinking on\n\n{\n  \"terminal\": {\n    \"blinking\": \"terminal_controlled\"\n  }\n}\n\n\nAlways blink the cursor, ignore the terminal mode\n\n{\n  \"terminal\": {\n    \"blinking\": \"on\"\n  }\n}\n\nTerminal: Copy On Select\n\nDescription: Whether or not selecting text in the terminal will automatically copy to the system clipboard.\nSetting: copy_on_select\nDefault: false\n\nOptions\nboolean values\nExample\n{\n  \"terminal\": {\n    \"copy_on_select\": true\n  }\n}\n\nTerminal: Cursor Shape\n\nDescription: Whether or not selecting text in the terminal will automatically copy to the system clipboard.\nSetting: cursor_shape\nDefault: null (defaults to block)\n\nOptions\n\nA block that surrounds the following character\n\n{\n  \"terminal\": {\n    \"cursor_shape\": \"block\"\n  }\n}\n\n\nA vertical bar\n\n{\n  \"terminal\": {\n    \"cursor_shape\": \"bar\"\n  }\n}\n\n\nAn underline / underscore that runs along the following character\n\n{\n  \"terminal\": {\n    \"cursor_shape\": \"underline\"\n  }\n}\n\n\nA box drawn around the following character\n\n{\n  \"terminal\": {\n    \"cursor_shape\": \"hollow\"\n  }\n}\n\nTerminal: Keep Selection On Copy\n\nDescription: Whether or not to keep the selection in the terminal after copying text.\nSetting: keep_selection_on_copy\nDefault: false\n\nOptions\nboolean values\nExample\n{\n  \"terminal\": {\n    \"keep_selection_on_copy\": true\n  }\n}\n\nTerminal: Env\n\nDescription: Any key-value pairs added to this object will be added to the terminal's environment. Keys must be unique, use : to separate multiple values in a single variable\nSetting: env\nDefault: {}\n\nExample\n{\n  \"terminal\": {\n    \"env\": {\n      \"ZED\": \"1\",\n      \"KEY\": \"value1:value2\"\n    }\n  }\n}\n\nTerminal: Font Size\n\nDescription: What font size to use for the terminal. When not set defaults to matching the editor's font size\nSetting: font_size\nDefault: null\n\nOptions\ninteger values\n{\n  \"terminal\": {\n    \"font_size\": 15\n  }\n}\n\nTerminal: Font Family\n\nDescription: What font to use for the terminal. When not set, defaults to matching the editor's font.\nSetting: font_family\nDefault: null\n\nOptions\nThe name of any font family installed on the user's system\n{\n  \"terminal\": {\n    \"font_family\": \"Berkeley Mono\"\n  }\n}\n\nTerminal: Font Features\n\nDescription: What font features to use for the terminal. When not set, defaults to matching the editor's font features.\nSetting: font_features\nDefault: null\nPlatform: macOS and Windows.\n\nOptions\nSee Buffer Font Features\n{\n  \"terminal\": {\n    \"font_features\": {\n      \"calt\": false\n      // See Buffer Font Features for more features\n    }\n  }\n}\n\nTerminal: Line Height\n\nDescription: Set the terminal's line height.\nSetting: line_height\nDefault: comfortable\n\nOptions\n\nUse a line height that's comfortable for reading, 1.618. (default)\n\n{\n  \"terminal\": {\n    \"line_height\": \"comfortable\"\n  }\n}\n\n\nUse a standard line height, 1.3. This option is useful for TUIs, particularly if they use box characters\n\n{\n  \"terminal\": {\n    \"line_height\": \"standard\"\n  }\n}\n\n\nUse a custom line height.\n\n{\n  \"terminal\": {\n    \"line_height\": {\n      \"custom\": 2\n    }\n  }\n}\n\nTerminal: Minimum Contrast\n\nDescription: Controls the minimum contrast between foreground and background colors in the terminal. Uses the APCA (Accessible Perceptual Contrast Algorithm) for color adjustments. Set this to 0 to disable this feature.\nSetting: minimum_contrast\nDefault: 45\n\nOptions\ninteger values from 0 to 106. Common recommended values:\n\n0: No contrast adjustment\n45: Minimum for large fluent text (default)\n60: Minimum for other content text\n75: Minimum for body text\n90: Preferred for body text\n\n{\n  \"terminal\": {\n    \"minimum_contrast\": 45\n  }\n}\n\nTerminal: Option As Meta\n\nDescription: Re-interprets the option keys to act like a 'meta' key, like in Emacs.\nSetting: option_as_meta\nDefault: false\n\nOptions\nboolean values\n{\n  \"terminal\": {\n    \"option_as_meta\": true\n  }\n}\n\nTerminal: Shell\n\nDescription: What shell to use when launching the terminal.\nSetting: shell\nDefault: system\n\nOptions\n\nUse the system's default terminal configuration (usually the /etc/passwd file).\n\n{\n  \"terminal\": {\n    \"shell\": \"system\"\n  }\n}\n\n\nA program to launch:\n\n{\n  \"terminal\": {\n    \"shell\": {\n      \"program\": \"sh\"\n    }\n  }\n}\n\n\nA program with arguments:\n\n{\n  \"terminal\": {\n    \"shell\": {\n      \"with_arguments\": {\n        \"program\": \"/bin/bash\",\n        \"args\": [\"--login\"]\n      }\n    }\n  }\n}\n\nTerminal: Detect Virtual Environments\n\nDescription: Activate the Python Virtual Environment, if one is found, in the terminal's working directory (as resolved by the working_directory and automatically activating the virtual environment.\nSetting: detect_venv\nDefault:\n\n{\n  \"terminal\": {\n    \"detect_venv\": {\n      \"on\": {\n        // Default directories to search for virtual environments, relative\n        // to the current working directory. We recommend overriding this\n        // in your project's settings, rather than globally.\n        \"directories\": [\".env\", \"env\", \".venv\", \"venv\"],\n        // Can also be `csh`, `fish`, and `nushell`\n        \"activate_script\": \"default\"\n      }\n    }\n  }\n}\n\nDisable with:\n{\n  \"terminal\": {\n    \"detect_venv\": \"off\"\n  }\n}\n\nTerminal: Toolbar\n\nDescription: Whether or not to show various elements in the terminal toolbar.\nSetting: toolbar\nDefault:\n\n{\n  \"terminal\": {\n    \"toolbar\": {\n      \"breadcrumbs\": true\n    }\n  }\n}\n\nOptions\nAt the moment, only the breadcrumbs option is available, it controls displaying of the terminal title that can be changed via PROMPT_COMMAND.\nIf the terminal title is empty, the breadcrumbs won't be shown.\nThe shell running in the terminal needs to be configured to emit the title.\nExample command to set the title: echo -e \"\\e]2;New Title\\007\";\nTerminal: Button\n\nDescription: Control to show or hide the terminal button in the status bar\nSetting: button\nDefault: true\n\nOptions\nboolean values\n{\n  \"terminal\": {\n    \"button\": false\n  }\n}\n\nTerminal: Working Directory\n\nDescription: What working directory to use when launching the terminal.\nSetting: working_directory\nDefault: \"current_project_directory\"\n\nOptions\n\nUse the current file's project directory. Will Fallback to the first project directory strategy if unsuccessful\n\n{\n  \"terminal\": {\n    \"working_directory\": \"current_project_directory\"\n  }\n}\n\n\nUse the first project in this workspace's directory. Will fallback to using this platform's home directory.\n\n{\n  \"terminal\": {\n    \"working_directory\": \"first_project_directory\"\n  }\n}\n\n\nAlways use this platform's home directory (if we can find it)\n\n{\n  \"terminal\": {\n    \"working_directory\": \"always_home\"\n  }\n}\n\n\nAlways use a specific directory. This value will be shell expanded. If this path is not a valid directory the terminal will default to this platform's home directory.\n\n{\n  \"terminal\": {\n    \"working_directory\": {\n      \"always\": {\n        \"directory\": \"~/zed/projects/\"\n      }\n    }\n  }\n}\n\nTheme\n\nDescription: The theme setting can be specified in two forms - either as the name of a theme or as an object containing the mode, dark, and light themes for the Zed UI.\nSetting: theme\nDefault: One Dark\n\nTheme Object\n\nDescription: Specify the theme using an object that includes the mode, dark, and light themes.\nSetting: theme\nDefault:\n\n\"theme\": {\n  \"mode\": \"system\",\n  \"dark\": \"One Dark\",\n  \"light\": \"One Light\"\n},\n\nMode\n\nDescription: Specify theme mode.\nSetting: mode\nDefault: system\n\nOptions\n\nSet the theme to dark mode\n\n{\n  \"mode\": \"dark\"\n}\n\n\nSet the theme to light mode\n\n{\n  \"mode\": \"light\"\n}\n\n\nSet the theme to system mode\n\n{\n  \"mode\": \"system\"\n}\n\nDark\n\nDescription: The name of the dark Zed theme to use for the UI.\nSetting: dark\nDefault: One Dark\n\nOptions\nRun the theme selector: toggle action in the command palette to see a current list of valid themes names.\nLight\n\nDescription: The name of the light Zed theme to use for the UI.\nSetting: light\nDefault: One Light\n\nOptions\nRun the theme selector: toggle action in the command palette to see a current list of valid themes names.\nTitle Bar\n\nDescription: Whether or not to show various elements in the title bar\nSetting: title_bar\nDefault:\n\n\"title_bar\": {\n  \"show_branch_icon\": false,\n  \"show_branch_name\": true,\n  \"show_project_items\": true,\n  \"show_onboarding_banner\": true,\n  \"show_user_picture\": true,\n  \"show_sign_in\": true,\n  \"show_menus\": false\n}\n\nOptions\n\nshow_branch_icon: Whether to show the branch icon beside branch switcher in the titlebar\nshow_branch_name: Whether to show the branch name button in the titlebar\nshow_project_items: Whether to show the project host and name in the titlebar\nshow_onboarding_banner: Whether to show onboarding banners in the titlebar\nshow_user_picture: Whether to show user picture in the titlebar\nshow_sign_in: Whether to show the sign in button in the titlebar\nshow_menus: Whether to show the menus in the titlebar\n\nVim\n\nDescription: Whether or not to enable vim mode.\nSetting: vim_mode\nDefault: false\n\nWhen Closing With No Tabs\n\nDescription: Whether the window should be closed when using 'close active item' on a window with no tabs\nSetting: when_closing_with_no_tabs\nDefault: \"platform_default\"\n\nOptions\n\nUse platform default behavior:\n\n{\n  \"when_closing_with_no_tabs\": \"platform_default\"\n}\n\n\nAlways close the window:\n\n{\n  \"when_closing_with_no_tabs\": \"close_window\"\n}\n\n\nNever close the window:\n\n{\n  \"when_closing_with_no_tabs\": \"keep_window_open\"\n}\n\nProject Panel\n\nDescription: Customize project panel\nSetting: project_panel\nDefault:\n\n{\n  \"project_panel\": {\n    \"button\": true,\n    \"default_width\": 240,\n    \"dock\": \"left\",\n    \"entry_spacing\": \"comfortable\",\n    \"file_icons\": true,\n    \"folder_icons\": true,\n    \"git_status\": true,\n    \"indent_size\": 20,\n    \"auto_reveal_entries\": true,\n    \"auto_fold_dirs\": true,\n    \"drag_and_drop\": true,\n    \"scrollbar\": {\n      \"show\": null\n    },\n    \"sticky_scroll\": true,\n    \"show_diagnostics\": \"all\",\n    \"indent_guides\": {\n      \"show\": \"always\"\n    },\n    \"hide_root\": false,\n    \"starts_open\": true\n  }\n}\n\nDock\n\nDescription: Control the position of the dock\nSetting: dock\nDefault: left\n\nOptions\n\nDefault dock position to left\n\n{\n  \"dock\": \"left\"\n}\n\n\nDefault dock position to right\n\n{\n  \"dock\": \"right\"\n}\n\nEntry Spacing\n\nDescription: Spacing between worktree entries\nSetting: entry_spacing\nDefault: comfortable\n\nOptions\n\nComfortable entry spacing\n\n{\n  \"entry_spacing\": \"comfortable\"\n}\n\n\nStandard entry spacing\n\n{\n  \"entry_spacing\": \"standard\"\n}\n\nGit Status\n\nDescription: Indicates newly created and updated files\nSetting: git_status\nDefault: true\n\nOptions\n\nDefault enable git status\n\n{\n  \"git_status\": true\n}\n\n\nDefault disable git status\n\n{\n  \"git_status\": false\n}\n\nDefault Width\n\nDescription: Customize default width taken by project panel\nSetting: default_width\nDefault: 240\n\nOptions\nfloat values\nAuto Reveal Entries\n\nDescription: Whether to reveal it in the project panel automatically, when a corresponding project entry becomes active. Gitignored entries are never auto revealed.\nSetting: auto_reveal_entries\nDefault: true\n\nOptions\n\nEnable auto reveal entries\n\n{\n  \"auto_reveal_entries\": true\n}\n\n\nDisable auto reveal entries\n\n{\n  \"auto_reveal_entries\": false\n}\n\nAuto Fold Dirs\n\nDescription: Whether to fold directories automatically when directory has only one directory inside.\nSetting: auto_fold_dirs\nDefault: true\n\nOptions\n\nEnable auto fold dirs\n\n{\n  \"auto_fold_dirs\": true\n}\n\n\nDisable auto fold dirs\n\n{\n  \"auto_fold_dirs\": false\n}\n\nIndent Size\n\nDescription: Amount of indentation (in pixels) for nested items.\nSetting: indent_size\nDefault: 20\n\nIndent Guides: Show\n\nDescription: Whether to show indent guides in the project panel.\nSetting: indent_guides\nDefault:\n\n\"indent_guides\": {\n  \"show\": \"always\"\n}\n\nOptions\n\nShow indent guides in the project panel\n\n{\n  \"indent_guides\": {\n    \"show\": \"always\"\n  }\n}\n\n\nHide indent guides in the project panel\n\n{\n  \"indent_guides\": {\n    \"show\": \"never\"\n  }\n}\n\nScrollbar: Show\n\nDescription: Whether to show a scrollbar in the project panel. Possible values: null, \"auto\", \"system\", \"always\", \"never\". Inherits editor settings when absent, see its description for more details.\nSetting: scrollbar\nDefault:\n\n\"scrollbar\": {\n  \"show\": null\n}\n\nOptions\n\nShow scrollbar in the project panel\n\n{\n  \"scrollbar\": {\n    \"show\": \"always\"\n  }\n}\n\n\nHide scrollbar in the project panel\n\n{\n  \"scrollbar\": {\n    \"show\": \"never\"\n  }\n}\n\nAgent\nVisit the Configuration page under the AI section to learn more about all the agent-related settings.\nCollaboration Panel\n\nDescription: Customizations for the collaboration panel.\nSetting: collaboration_panel\nDefault:\n\n{\n  \"collaboration_panel\": {\n    \"button\": true,\n    \"dock\": \"left\",\n    \"default_width\": 240\n  }\n}\n\nOptions\n\nbutton: Whether to show the collaboration panel button in the status bar\ndock: Where to dock the collaboration panel. Can be left or right\ndefault_width: Default width of the collaboration panel\n\nChat Panel\n\nDescription: Customizations for the chat panel.\nSetting: chat_panel\nDefault:\n\n{\n  \"chat_panel\": {\n    \"button\": \"when_in_call\",\n    \"dock\": \"right\",\n    \"default_width\": 240\n  }\n}\n\nOptions\n\nbutton: When to show the chat panel button in the status bar. Can be never, always, or when_in_call.\ndock: Where to dock the chat panel. Can be 'left' or 'right'\ndefault_width: Default width of the chat panel\n\nDebugger\n\nDescription: Configuration for debugger panel and settings\nSetting: debugger\nDefault:\n\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"line\",\n    \"save_breakpoints\": true,\n    \"dock\": \"bottom\",\n    \"button\": true\n  }\n}\n\nSee the debugger page for more information about debugging support within Zed.\nGit Panel\n\nDescription: Setting to customize the behavior of the git panel.\nSetting: git_panel\nDefault:\n\n{\n  \"git_panel\": {\n    \"button\": true,\n    \"dock\": \"left\",\n    \"default_width\": 360,\n    \"status_style\": \"icon\",\n    \"fallback_branch_name\": \"main\",\n    \"sort_by_path\": false,\n    \"collapse_untracked_diff\": false,\n    \"scrollbar\": {\n      \"show\": null\n    }\n  }\n}\n\nOptions\n\nbutton: Whether to show the git panel button in the status bar\ndock: Where to dock the git panel. Can be left or right\ndefault_width: Default width of the git panel\nstatus_style: How to display git status. Can be label_color or icon\nfallback_branch_name: What branch name to use if init.defaultBranch is not set\nsort_by_path: Whether to sort entries in the panel by path or by status (the default)\ncollapse_untracked_diff: Whether to collapse untracked files in the diff panel\nscrollbar: When to show the scrollbar in the git panel\n\nOutline Panel\n\nDescription: Customize outline Panel\nSetting: outline_panel\nDefault:\n\n\"outline_panel\": {\n  \"button\": true,\n  \"default_width\": 300,\n  \"dock\": \"left\",\n  \"file_icons\": true,\n  \"folder_icons\": true,\n  \"git_status\": true,\n  \"indent_size\": 20,\n  \"auto_reveal_entries\": true,\n  \"auto_fold_dirs\": true,\n  \"indent_guides\": {\n    \"show\": \"always\"\n  },\n  \"scrollbar\": {\n    \"show\": null\n  }\n}\n\nCalls\n\nDescription: Customize behavior when participating in a call\nSetting: calls\nDefault:\n\n\"calls\": {\n  // Join calls with the microphone live by default\n  \"mute_on_join\": false,\n  // Share your project when you are the first to join a channel\n  \"share_on_join\": false\n},\n\nUnnecessary Code Fade\n\nDescription: How much to fade out unused code.\nSetting: unnecessary_code_fade\nDefault: 0.3\n\nOptions\nFloat values between 0.0 and 0.9, where:\n\n0.0 means no fading (unused code looks the same as used code)\n0.9 means maximum fading (unused code is very faint but still visible)\n\nExample\n{\n  \"unnecessary_code_fade\": 0.5\n}\n\nUI Font Family\n\nDescription: The name of the font to use for text in the UI.\nSetting: ui_font_family\nDefault: .ZedSans. This currently aliases to IBM Plex.\n\nOptions\nThe name of any font family installed on the system, \".ZedSans\" to use the Zed-provided default, or \".SystemUIFont\" to use the system's default UI font (on macOS and Windows).\nUI Font Features\n\nDescription: The OpenType features to enable for text in the UI.\nSetting: ui_font_features\nDefault:\n\n\"ui_font_features\": {\n  \"calt\": false\n}\n\n\nPlatform: macOS and Windows.\n\nOptions\nZed supports all OpenType features that can be enabled or disabled for a given UI font, as well as setting values for font features.\nFor example, to disable font ligatures, add the following to your settings:\n{\n  \"ui_font_features\": {\n    \"calt\": false\n  }\n}\n\nYou can also set other OpenType features, like setting cv01 to 7:\n{\n  \"ui_font_features\": {\n    \"cv01\": 7\n  }\n}\n\nUI Font Fallbacks\n\nDescription: The font fallbacks to use for text in the UI.\nSetting: ui_font_fallbacks\nDefault: null\nPlatform: macOS and Windows.\n\nOptions\nFor example, to use Nerd Font as a fallback, add the following to your settings:\n{\n  \"ui_font_fallbacks\": [\"Nerd Font\"]\n}\n\nUI Font Size\n\nDescription: The default font size for text in the UI.\nSetting: ui_font_size\nDefault: 16\n\nOptions\ninteger values from 6 to 100 pixels (inclusive)\nUI Font Weight\n\nDescription: The default font weight for text in the UI.\nSetting: ui_font_weight\nDefault: 400\n\nOptions\ninteger values between 100 and 900\nAn example configuration:\n// ~/.config/zed/settings.json\n{\n  \"theme\": \"cave-light\",\n  \"tab_size\": 2,\n  \"preferred_line_length\": 80,\n  \"soft_wrap\": \"none\",\n\n  \"buffer_font_size\": 18,\n  \"buffer_font_family\": \".ZedMono\",\n\n  \"autosave\": \"on_focus_change\",\n  \"format_on_save\": \"off\",\n  \"vim_mode\": false,\n  \"projects_online_by_default\": true,\n  \"terminal\": {\n    \"font_family\": \"FiraCode Nerd Font Mono\",\n    \"blinking\": \"off\"\n  },\n  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"language_server\",\n      \"preferred_line_length\": 64,\n      \"soft_wrap\": \"preferred_line_length\"\n    }\n  }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:11"
  },
  "configuring-languages.html": {
    "url": "https://zed.dev/docs/configuring-languages.html",
    "title": "Configuring Languages | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"configuring-supported-languages\"><a class=\"header\" href=\"#configuring-supported-languages\">Configuring supported languages</a></h1>\n<p>Zed offers powerful customization options for each programming language it supports. This guide will walk you through the various ways you can tailor your coding experience to your preferences and project requirements.</p>\n<p>Zed's language support is built on two main technologies:</p>\n<ol>\n<li>Tree-sitter: This handles syntax highlighting and structure-based features like the outline panel.</li>\n<li>Language Server Protocol (LSP): This provides semantic features such as code completion and diagnostics.</li>\n</ol>\n<p>These components work together to provide Zed's language capabilities.</p>\n<p>In this guide, we'll cover:</p>\n<ul>\n<li>Language-specific settings</li>\n<li>File associations</li>\n<li>Working with language servers</li>\n<li>Formatting and linting configuration</li>\n<li>Customizing syntax highlighting and themes</li>\n<li>Advanced language features</li>\n</ul>\n<p>By the end of this guide, you should know how to configure and customize supported languages in Zed.</p>\n<p>For a comprehensive list of languages supported by Zed and their specific configurations, see our <a href=\"./languages.html\">Supported Languages</a> page. To go further, you could explore developing your own extensions to add support for additional languages or enhance existing functionality. For more information on creating language extensions, see our <a href=\"./extensions/languages.html\">Language Extensions</a> guide.</p>\n<h2 id=\"language-specific-settings\"><a class=\"header\" href=\"#language-specific-settings\">Language-specific Settings</a></h2>\n<p>Zed allows you to override global settings for individual languages. These custom configurations are defined in your <code>settings.json</code> file under the <code>languages</code> key.</p>\n<p>Here's an example of language-specific settings:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"Python\": {\n    \"tab_size\": 4,\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  },\n  \"JavaScript\": {\n    \"tab_size\": 2,\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can customize a wide range of settings for each language, including:</p>\n<ul>\n<li><a href=\"./configuring-zed.html#tab-size\"><code>tab_size</code></a>: The number of spaces for each indentation level</li>\n<li><a href=\"./configuring-zed.html#formatter\"><code>formatter</code></a>: The tool used for code formatting</li>\n<li><a href=\"./configuring-zed.html#format-on-save\"><code>format_on_save</code></a>: Whether to automatically format code when saving</li>\n<li><a href=\"./configuring-zed.html#enable-language-server\"><code>enable_language_server</code></a>: Toggle language server support</li>\n<li><a href=\"./configuring-zed.html#hard-tabs\"><code>hard_tabs</code></a>: Use tabs instead of spaces for indentation</li>\n<li><a href=\"./configuring-zed.html#preferred-line-length\"><code>preferred_line_length</code></a>: The recommended maximum line length</li>\n<li><a href=\"./configuring-zed.html#soft-wrap\"><code>soft_wrap</code></a>: How to wrap long lines of code</li>\n<li><a href=\"./configuring-zed.html#show-completions-on-input\"><code>show_completions_on_input</code></a>: Whether or not to show completions as you type</li>\n<li><a href=\"./configuring-zed.html#show-completion-documentation\"><code>show_completion_documentation</code></a>: Whether to display inline and alongside documentation for items in the completions menu</li>\n</ul>\n<p>These settings allow you to maintain specific coding styles across different languages and projects.</p>\n<h2 id=\"file-associations\"><a class=\"header\" href=\"#file-associations\">File Associations</a></h2>\n<p>Zed automatically detects file types based on their extensions, but you can customize these associations to fit your workflow.</p>\n<p>To set up custom file associations, use the <a href=\"./configuring-zed.html#file-types\"><code>file_types</code></a> setting in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">\"file_types\": {\n  \"C++\": [\"c\"],\n  \"TOML\": [\"MyLockFile\"],\n  \"Dockerfile\": [\"Dockerfile*\"]\n}\n</code></pre>\n<p>This configuration tells Zed to:</p>\n<ul>\n<li>Treat <code>.c</code> files as C++ instead of C</li>\n<li>Recognize files named \"MyLockFile\" as TOML</li>\n<li>Apply Dockerfile syntax to any file starting with \"Dockerfile\"</li>\n</ul>\n<p>You can use glob patterns for more flexible matching, allowing you to handle complex naming conventions in your projects.</p>\n<h2 id=\"working-with-language-servers\"><a class=\"header\" href=\"#working-with-language-servers\">Working with Language Servers</a></h2>\n<p>Language servers are a crucial part of Zed's intelligent coding features, providing capabilities like auto-completion, go-to-definition, and real-time error checking.</p>\n<h3 id=\"what-are-language-servers\"><a class=\"header\" href=\"#what-are-language-servers\">What are Language Servers?</a></h3>\n<p>Language servers implement the Language Server Protocol (LSP), which standardizes communication between the editor and language-specific tools. This allows Zed to support advanced features for multiple programming languages without implementing each feature separately.</p>\n<p>Some key features provided by language servers include:</p>\n<ul>\n<li>Code completion</li>\n<li>Error checking and diagnostics</li>\n<li>Code navigation (go to definition, find references)</li>\n<li>Code actions (Rename, extract method)</li>\n<li>Hover information</li>\n<li>Workspace symbol search</li>\n</ul>\n<h3 id=\"managing-language-servers\"><a class=\"header\" href=\"#managing-language-servers\">Managing Language Servers</a></h3>\n<p>Zed simplifies language server management for users:</p>\n<ol>\n<li>\n<p>Automatic Download: When you open a file with a matching file type, Zed automatically downloads the appropriate language server. Zed may prompt you to install an extension for known file types.</p>\n</li>\n<li>\n<p>Storage Location:</p>\n<ul>\n<li>macOS: <code>~/Library/Application Support/Zed/languages</code></li>\n<li>Linux: <code>$XDG_DATA_HOME/languages</code>, <code>$FLATPAK_XDG_DATA_HOME/languages</code>, or <code>$HOME/.local/share</code></li>\n</ul>\n</li>\n<li>\n<p>Automatic Updates: Zed keeps your language servers up-to-date, ensuring you always have the latest features and improvements.</p>\n</li>\n</ol>\n<h3 id=\"choosing-language-servers\"><a class=\"header\" href=\"#choosing-language-servers\">Choosing Language Servers</a></h3>\n<p>Some languages in Zed offer multiple language server options. You might have multiple extensions installed that bundle language servers targeting the same language, potentially leading to overlapping capabilities. To ensure you get the functionality you prefer, Zed allows you to prioritize which language servers are used and in what order.</p>\n<p>You can specify your preference using the <code>language_servers</code> setting:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n</code></pre>\n<p>In this example:</p>\n<ul>\n<li><code>intelephense</code> is set as the primary language server</li>\n<li><code>phpactor</code> is disabled (note the <code>!</code> prefix)</li>\n<li><code>...</code> expands to the rest of the language servers that are registered for PHP</li>\n</ul>\n<p>This configuration allows you to tailor the language server setup to your specific needs, ensuring that you get the most suitable functionality for your development workflow.</p>\n<h3 id=\"configuring-language-servers\"><a class=\"header\" href=\"#configuring-language-servers\">Configuring Language Servers</a></h3>\n<p>Many language servers accept custom configuration options. You can set these in the <code>lsp</code> section of your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"check\": {\n          \"command\": \"clippy\"\n        }\n      }\n    }\n  }\n</code></pre>\n<p>This example configures the Rust Analyzer to use Clippy for additional linting when saving files.</p>\n<h4 id=\"nested-objects\"><a class=\"header\" href=\"#nested-objects\">Nested objects</a></h4>\n<p>When configuring language server options in Zed, it's important to use nested objects rather than dot-delimited strings. This is particularly relevant when working with more complex configurations. Let's look at a real-world example using the TypeScript language server:</p>\n<p>Suppose you want to configure the following settings for TypeScript:</p>\n<ul>\n<li>Enable strict null checks</li>\n<li>Set the target ECMAScript version to ES2020</li>\n</ul>\n<p>Here's how you would structure these settings in Zed's <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"typescript-language-server\": {\n    \"initialization_options\": {\n      // These are not supported (VSCode dotted style):\n      // \"preferences.strictNullChecks\": true,\n      // \"preferences.target\": \"ES2020\"\n      //\n      // These is correct (nested notation):\n      \"preferences\": {\n        \"strictNullChecks\": true,\n        \"target\": \"ES2020\"\n      },\n    }\n  }\n}\n</code></pre>\n<h4 id=\"possible-configuration-options\"><a class=\"header\" href=\"#possible-configuration-options\">Possible configuration options</a></h4>\n<p>Depending on how a particular language server is implemented, they may depend on different configuration options, both specified in the LSP.</p>\n<ul>\n<li><a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#version_3_17_0\">initializationOptions</a></li>\n</ul>\n<p>Sent once during language server startup, requires server's restart to reapply changes.</p>\n<p>For example, rust-analyzer and clangd rely on this way of configuring only.</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"checkOnSave\": false\n      }\n    }\n  }\n</code></pre>\n<ul>\n<li><a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_configuration\">Configuration Request</a></li>\n</ul>\n<p>May be queried by the server multiple times.\nMost of the servers would rely on this way of configuring only.</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"tailwindcss-language-server\": {\n    \"settings\": {\n      \"tailwindCSS\": {\n        \"emmetCompletions\": true,\n      },\n    }\n  }\n}\n</code></pre>\n<p>Apart of the LSP-related server configuration options, certain servers in Zed allow configuring the way binary is launched by Zed.</p>\n<p>Language servers are automatically downloaded or launched if found in your path, if you wish to specify an explicit alternate binary you can specify that in settings:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        // Whether to fetch the binary from the internet, or attempt to find locally.\n        \"ignore_system_version\": false,\n        \"path\": \"/path/to/langserver/bin\",\n        \"arguments\": [\"--option\", \"value\"],\n        \"env\": {\n          \"FOO\": \"BAR\"\n        }\n      }\n    }\n  }\n</code></pre>\n<h3 id=\"enabling-or-disabling-language-servers\"><a class=\"header\" href=\"#enabling-or-disabling-language-servers\">Enabling or Disabling Language Servers</a></h3>\n<p>You can toggle language server support globally or per-language:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Markdown\": {\n      \"enable_language_server\": false\n    }\n  }\n</code></pre>\n<p>This disables the language server for Markdown files, which can be useful for performance in large documentation projects. You can configure this globally in your <code>~/.config/zed/settings.json</code> or inside a <code>.zed/settings.json</code> in your project directory.</p>\n<h2 id=\"formatting-and-linting\"><a class=\"header\" href=\"#formatting-and-linting\">Formatting and Linting</a></h2>\n<p>Zed provides support for code formatting and linting to maintain consistent code style and catch potential issues early.</p>\n<h3 id=\"configuring-formatters\"><a class=\"header\" href=\"#configuring-formatters\">Configuring Formatters</a></h3>\n<p>Zed supports both built-in and external formatters. See <a href=\"./configuring-zed.html#formatter\"><code>formatter</code></a> docs for more. You can configure formatters globally or per-language in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"format_on_save\": \"on\"\n  },\n  \"Rust\": {\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  }\n}\n</code></pre>\n<p>This example uses Prettier for JavaScript and the language server's formatter for Rust, both set to format on save.</p>\n<p>To disable formatting for a specific language:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"Markdown\": {\n    \"format_on_save\": \"off\"\n  }\n}\n</code></pre>\n<h3 id=\"setting-up-linters\"><a class=\"header\" href=\"#setting-up-linters\">Setting Up Linters</a></h3>\n<p>Linting in Zed is typically handled by language servers. Many language servers allow you to configure linting rules:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"eslint\": {\n    \"settings\": {\n      \"codeActionOnSave\": {\n        \"rules\": [\"import/order\"]\n      }\n    }\n  }\n}\n</code></pre>\n<p>This configuration sets up ESLint to organize imports on save for JavaScript files.</p>\n<p>To run linter fixes automatically on save:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"JavaScript\": {\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    }\n  }\n}\n</code></pre>\n<h3 id=\"integrating-formatting-and-linting\"><a class=\"header\" href=\"#integrating-formatting-and-linting\">Integrating Formatting and Linting</a></h3>\n<p>Zed allows you to run both formatting and linting on save. Here's an example that uses Prettier for formatting and ESLint for linting JavaScript files:</p>\n<pre><code class=\"language-json\">\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    },\n    \"format_on_save\": \"on\"\n  }\n}\n</code></pre>\n<h3 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h3>\n<p>If you encounter issues with formatting or linting:</p>\n<ol>\n<li>Check Zed's log file for error messages (Use the command palette: <code>zed: open log</code>)</li>\n<li>Ensure external tools (formatters, linters) are correctly installed and in your PATH</li>\n<li>Verify configurations in both Zed settings and language-specific config files (e.g., <code>.eslintrc</code>, <code>.prettierrc</code>)</li>\n</ol>\n<h2 id=\"syntax-highlighting-and-themes\"><a class=\"header\" href=\"#syntax-highlighting-and-themes\">Syntax Highlighting and Themes</a></h2>\n<p>Zed offers customization options for syntax highlighting and themes, allowing you to tailor the visual appearance of your code.</p>\n<h3 id=\"customizing-syntax-highlighting\"><a class=\"header\" href=\"#customizing-syntax-highlighting\">Customizing Syntax Highlighting</a></h3>\n<p>Zed uses Tree-sitter grammars for syntax highlighting. Override the default highlighting using the <code>experimental.theme_overrides</code> setting.</p>\n<p>This example makes comments italic and changes the color of strings:</p>\n<pre><code class=\"language-json\">\"experimental.theme_overrides\": {\n  \"syntax\": {\n    \"comment\": {\n      \"font_style\": \"italic\"\n    },\n    \"string\": {\n      \"color\": \"#00AA00\"\n    }\n  }\n}\n</code></pre>\n<h3 id=\"selecting-and-customizing-themes\"><a class=\"header\" href=\"#selecting-and-customizing-themes\">Selecting and Customizing Themes</a></h3>\n<p>Change your theme:</p>\n<ol>\n<li>Use the theme selector (<kbd class=\"keybinding\">cmd-k cmd-t|ctrl-k ctrl-t</kbd>)</li>\n<li>Or set it in your <code>settings.json</code>:</li>\n</ol>\n<pre><code class=\"language-json\">\"theme\": {\n  \"mode\": \"dark\",\n  \"dark\": \"One Dark\",\n  \"light\": \"GitHub Light\"\n}\n</code></pre>\n<p>Create custom themes by creating a JSON file in <code>~/.config/zed/themes/</code>. Zed will automatically detect and make available any themes in this directory.</p>\n<h3 id=\"using-theme-extensions\"><a class=\"header\" href=\"#using-theme-extensions\">Using Theme Extensions</a></h3>\n<p>Zed supports theme extensions. Browse and install theme extensions from the Extensions panel (<kbd class=\"keybinding\">cmd-shift-x|ctrl-shift-x</kbd>).</p>\n<p>To create your own theme extension, refer to the <a href=\"./extensions/themes.html\">Developing Theme Extensions</a> guide.</p>\n<h2 id=\"using-language-server-features\"><a class=\"header\" href=\"#using-language-server-features\">Using Language Server Features</a></h2>\n<h3 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h3>\n<p>Inlay hints provide additional information inline in your code, such as parameter names or inferred types. Configure inlay hints in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">\"inlay_hints\": {\n  \"enabled\": true,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true\n}\n</code></pre>\n<p>For language-specific inlay hint settings, refer to the documentation for each language.</p>\n<h3 id=\"code-actions\"><a class=\"header\" href=\"#code-actions\">Code Actions</a></h3>\n<p>Code actions provide quick fixes and refactoring options. Access code actions using the <code>editor: Toggle Code Actions</code> command or by clicking the lightbulb icon that appears next to your cursor when actions are available.</p>\n<h3 id=\"go-to-definition-and-references\"><a class=\"header\" href=\"#go-to-definition-and-references\">Go To Definition and References</a></h3>\n<p>Use these commands to navigate your codebase:</p>\n<ul>\n<li><code>editor: Go to Definition</code> (<kbd>f12|f12</kbd>)</li>\n<li><code>editor: Go to Type Definition</code> (<kbd>cmd-f12|ctrl-f12</kbd>)</li>\n<li><code>editor: Find All References</code> (<kbd>shift-f12|shift-f12</kbd>)</li>\n</ul>\n<h3 id=\"rename-symbol\"><a class=\"header\" href=\"#rename-symbol\">Rename Symbol</a></h3>\n<p>To rename a symbol across your project:</p>\n<ol>\n<li>Place your cursor on the symbol</li>\n<li>Use the <code>editor: Rename Symbol</code> command (<kbd>f2|f2</kbd>)</li>\n<li>Enter the new name and press Enter</li>\n</ol>\n<p>These features depend on the capabilities of the language server for each language.</p>\n<p>When renaming a symbol that spans multiple files, Zed will open a preview in a multibuffer. This allows you to review all the changes across your project before applying them. To confirm the rename, simply save the multibuffer. If you decide not to proceed with the rename, you can undo the changes or close the multibuffer without saving.</p>\n<h3 id=\"hover-information\"><a class=\"header\" href=\"#hover-information\">Hover Information</a></h3>\n<p>Use the <code>editor: Show Hover</code> command to display information about the symbol under the cursor. This often includes type information, documentation, and links to relevant resources.</p>\n<h3 id=\"workspace-symbol-search\"><a class=\"header\" href=\"#workspace-symbol-search\">Workspace Symbol Search</a></h3>\n<p>The <code>workspace: Open Symbol</code> command allows you to search for symbols (functions, classes, variables) across your entire project. This is useful for quickly navigating large codebases.</p>\n<h3 id=\"code-completion\"><a class=\"header\" href=\"#code-completion\">Code Completion</a></h3>\n<p>Zed provides intelligent code completion suggestions as you type. You can manually trigger completion with the <code>editor: Show Completions</code> command. Use <kbd>tab|tab</kbd> or <kbd>enter|enter</kbd> to accept suggestions.</p>\n<h3 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\">Diagnostics</a></h3>\n<p>Language servers provide real-time diagnostics (errors, warnings, hints) as you code. View all diagnostics for your project using the <code>diagnostics: Toggle</code> command.</p>\n\n</main>",
    "content_text": "Configuring supported languages\nZed offers powerful customization options for each programming language it supports. This guide will walk you through the various ways you can tailor your coding experience to your preferences and project requirements.\nZed's language support is built on two main technologies:\n\nTree-sitter: This handles syntax highlighting and structure-based features like the outline panel.\nLanguage Server Protocol (LSP): This provides semantic features such as code completion and diagnostics.\n\nThese components work together to provide Zed's language capabilities.\nIn this guide, we'll cover:\n\nLanguage-specific settings\nFile associations\nWorking with language servers\nFormatting and linting configuration\nCustomizing syntax highlighting and themes\nAdvanced language features\n\nBy the end of this guide, you should know how to configure and customize supported languages in Zed.\nFor a comprehensive list of languages supported by Zed and their specific configurations, see our Supported Languages page. To go further, you could explore developing your own extensions to add support for additional languages or enhance existing functionality. For more information on creating language extensions, see our Language Extensions guide.\nLanguage-specific Settings\nZed allows you to override global settings for individual languages. These custom configurations are defined in your settings.json file under the languages key.\nHere's an example of language-specific settings:\n\"languages\": {\n  \"Python\": {\n    \"tab_size\": 4,\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  },\n  \"JavaScript\": {\n    \"tab_size\": 2,\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    }\n  }\n}\n\nYou can customize a wide range of settings for each language, including:\n\ntab_size: The number of spaces for each indentation level\nformatter: The tool used for code formatting\nformat_on_save: Whether to automatically format code when saving\nenable_language_server: Toggle language server support\nhard_tabs: Use tabs instead of spaces for indentation\npreferred_line_length: The recommended maximum line length\nsoft_wrap: How to wrap long lines of code\nshow_completions_on_input: Whether or not to show completions as you type\nshow_completion_documentation: Whether to display inline and alongside documentation for items in the completions menu\n\nThese settings allow you to maintain specific coding styles across different languages and projects.\nFile Associations\nZed automatically detects file types based on their extensions, but you can customize these associations to fit your workflow.\nTo set up custom file associations, use the file_types setting in your settings.json:\n\"file_types\": {\n  \"C++\": [\"c\"],\n  \"TOML\": [\"MyLockFile\"],\n  \"Dockerfile\": [\"Dockerfile*\"]\n}\n\nThis configuration tells Zed to:\n\nTreat .c files as C++ instead of C\nRecognize files named \"MyLockFile\" as TOML\nApply Dockerfile syntax to any file starting with \"Dockerfile\"\n\nYou can use glob patterns for more flexible matching, allowing you to handle complex naming conventions in your projects.\nWorking with Language Servers\nLanguage servers are a crucial part of Zed's intelligent coding features, providing capabilities like auto-completion, go-to-definition, and real-time error checking.\nWhat are Language Servers?\nLanguage servers implement the Language Server Protocol (LSP), which standardizes communication between the editor and language-specific tools. This allows Zed to support advanced features for multiple programming languages without implementing each feature separately.\nSome key features provided by language servers include:\n\nCode completion\nError checking and diagnostics\nCode navigation (go to definition, find references)\nCode actions (Rename, extract method)\nHover information\nWorkspace symbol search\n\nManaging Language Servers\nZed simplifies language server management for users:\n\n\nAutomatic Download: When you open a file with a matching file type, Zed automatically downloads the appropriate language server. Zed may prompt you to install an extension for known file types.\n\n\nStorage Location:\n\nmacOS: ~/Library/Application Support/Zed/languages\nLinux: $XDG_DATA_HOME/languages, $FLATPAK_XDG_DATA_HOME/languages, or $HOME/.local/share\n\n\n\nAutomatic Updates: Zed keeps your language servers up-to-date, ensuring you always have the latest features and improvements.\n\n\nChoosing Language Servers\nSome languages in Zed offer multiple language server options. You might have multiple extensions installed that bundle language servers targeting the same language, potentially leading to overlapping capabilities. To ensure you get the functionality you prefer, Zed allows you to prioritize which language servers are used and in what order.\nYou can specify your preference using the language_servers setting:\n  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n\nIn this example:\n\nintelephense is set as the primary language server\nphpactor is disabled (note the ! prefix)\n... expands to the rest of the language servers that are registered for PHP\n\nThis configuration allows you to tailor the language server setup to your specific needs, ensuring that you get the most suitable functionality for your development workflow.\nConfiguring Language Servers\nMany language servers accept custom configuration options. You can set these in the lsp section of your settings.json:\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"check\": {\n          \"command\": \"clippy\"\n        }\n      }\n    }\n  }\n\nThis example configures the Rust Analyzer to use Clippy for additional linting when saving files.\nNested objects\nWhen configuring language server options in Zed, it's important to use nested objects rather than dot-delimited strings. This is particularly relevant when working with more complex configurations. Let's look at a real-world example using the TypeScript language server:\nSuppose you want to configure the following settings for TypeScript:\n\nEnable strict null checks\nSet the target ECMAScript version to ES2020\n\nHere's how you would structure these settings in Zed's settings.json:\n\"lsp\": {\n  \"typescript-language-server\": {\n    \"initialization_options\": {\n      // These are not supported (VSCode dotted style):\n      // \"preferences.strictNullChecks\": true,\n      // \"preferences.target\": \"ES2020\"\n      //\n      // These is correct (nested notation):\n      \"preferences\": {\n        \"strictNullChecks\": true,\n        \"target\": \"ES2020\"\n      },\n    }\n  }\n}\n\nPossible configuration options\nDepending on how a particular language server is implemented, they may depend on different configuration options, both specified in the LSP.\n\ninitializationOptions\n\nSent once during language server startup, requires server's restart to reapply changes.\nFor example, rust-analyzer and clangd rely on this way of configuring only.\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"checkOnSave\": false\n      }\n    }\n  }\n\n\nConfiguration Request\n\nMay be queried by the server multiple times.\nMost of the servers would rely on this way of configuring only.\n\"lsp\": {\n  \"tailwindcss-language-server\": {\n    \"settings\": {\n      \"tailwindCSS\": {\n        \"emmetCompletions\": true,\n      },\n    }\n  }\n}\n\nApart of the LSP-related server configuration options, certain servers in Zed allow configuring the way binary is launched by Zed.\nLanguage servers are automatically downloaded or launched if found in your path, if you wish to specify an explicit alternate binary you can specify that in settings:\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        // Whether to fetch the binary from the internet, or attempt to find locally.\n        \"ignore_system_version\": false,\n        \"path\": \"/path/to/langserver/bin\",\n        \"arguments\": [\"--option\", \"value\"],\n        \"env\": {\n          \"FOO\": \"BAR\"\n        }\n      }\n    }\n  }\n\nEnabling or Disabling Language Servers\nYou can toggle language server support globally or per-language:\n  \"languages\": {\n    \"Markdown\": {\n      \"enable_language_server\": false\n    }\n  }\n\nThis disables the language server for Markdown files, which can be useful for performance in large documentation projects. You can configure this globally in your ~/.config/zed/settings.json or inside a .zed/settings.json in your project directory.\nFormatting and Linting\nZed provides support for code formatting and linting to maintain consistent code style and catch potential issues early.\nConfiguring Formatters\nZed supports both built-in and external formatters. See formatter docs for more. You can configure formatters globally or per-language in your settings.json:\n\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"format_on_save\": \"on\"\n  },\n  \"Rust\": {\n    \"formatter\": \"language_server\",\n    \"format_on_save\": \"on\"\n  }\n}\n\nThis example uses Prettier for JavaScript and the language server's formatter for Rust, both set to format on save.\nTo disable formatting for a specific language:\n\"languages\": {\n  \"Markdown\": {\n    \"format_on_save\": \"off\"\n  }\n}\n\nSetting Up Linters\nLinting in Zed is typically handled by language servers. Many language servers allow you to configure linting rules:\n\"lsp\": {\n  \"eslint\": {\n    \"settings\": {\n      \"codeActionOnSave\": {\n        \"rules\": [\"import/order\"]\n      }\n    }\n  }\n}\n\nThis configuration sets up ESLint to organize imports on save for JavaScript files.\nTo run linter fixes automatically on save:\n\"languages\": {\n  \"JavaScript\": {\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    }\n  }\n}\n\nIntegrating Formatting and Linting\nZed allows you to run both formatting and linting on save. Here's an example that uses Prettier for formatting and ESLint for linting JavaScript files:\n\"languages\": {\n  \"JavaScript\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"prettier\",\n        \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n      }\n    },\n    \"code_actions_on_format\": {\n      \"source.fixAll.eslint\": true\n    },\n    \"format_on_save\": \"on\"\n  }\n}\n\nTroubleshooting\nIf you encounter issues with formatting or linting:\n\nCheck Zed's log file for error messages (Use the command palette: zed: open log)\nEnsure external tools (formatters, linters) are correctly installed and in your PATH\nVerify configurations in both Zed settings and language-specific config files (e.g., .eslintrc, .prettierrc)\n\nSyntax Highlighting and Themes\nZed offers customization options for syntax highlighting and themes, allowing you to tailor the visual appearance of your code.\nCustomizing Syntax Highlighting\nZed uses Tree-sitter grammars for syntax highlighting. Override the default highlighting using the experimental.theme_overrides setting.\nThis example makes comments italic and changes the color of strings:\n\"experimental.theme_overrides\": {\n  \"syntax\": {\n    \"comment\": {\n      \"font_style\": \"italic\"\n    },\n    \"string\": {\n      \"color\": \"#00AA00\"\n    }\n  }\n}\n\nSelecting and Customizing Themes\nChange your theme:\n\nUse the theme selector (cmd-k cmd-t|ctrl-k ctrl-t)\nOr set it in your settings.json:\n\n\"theme\": {\n  \"mode\": \"dark\",\n  \"dark\": \"One Dark\",\n  \"light\": \"GitHub Light\"\n}\n\nCreate custom themes by creating a JSON file in ~/.config/zed/themes/. Zed will automatically detect and make available any themes in this directory.\nUsing Theme Extensions\nZed supports theme extensions. Browse and install theme extensions from the Extensions panel (cmd-shift-x|ctrl-shift-x).\nTo create your own theme extension, refer to the Developing Theme Extensions guide.\nUsing Language Server Features\nInlay Hints\nInlay hints provide additional information inline in your code, such as parameter names or inferred types. Configure inlay hints in your settings.json:\n\"inlay_hints\": {\n  \"enabled\": true,\n  \"show_type_hints\": true,\n  \"show_parameter_hints\": true,\n  \"show_other_hints\": true\n}\n\nFor language-specific inlay hint settings, refer to the documentation for each language.\nCode Actions\nCode actions provide quick fixes and refactoring options. Access code actions using the editor: Toggle Code Actions command or by clicking the lightbulb icon that appears next to your cursor when actions are available.\nGo To Definition and References\nUse these commands to navigate your codebase:\n\neditor: Go to Definition (f12|f12)\neditor: Go to Type Definition (cmd-f12|ctrl-f12)\neditor: Find All References (shift-f12|shift-f12)\n\nRename Symbol\nTo rename a symbol across your project:\n\nPlace your cursor on the symbol\nUse the editor: Rename Symbol command (f2|f2)\nEnter the new name and press Enter\n\nThese features depend on the capabilities of the language server for each language.\nWhen renaming a symbol that spans multiple files, Zed will open a preview in a multibuffer. This allows you to review all the changes across your project before applying them. To confirm the rename, simply save the multibuffer. If you decide not to proceed with the rename, you can undo the changes or close the multibuffer without saving.\nHover Information\nUse the editor: Show Hover command to display information about the symbol under the cursor. This often includes type information, documentation, and links to relevant resources.\nWorkspace Symbol Search\nThe workspace: Open Symbol command allows you to search for symbols (functions, classes, variables) across your entire project. This is useful for quickly navigating large codebases.\nCode Completion\nZed provides intelligent code completion suggestions as you type. You can manually trigger completion with the editor: Show Completions command. Use tab|tab or enter|enter to accept suggestions.\nDiagnostics\nLanguage servers provide real-time diagnostics (errors, warnings, hints) as you code. View all diagnostics for your project using the diagnostics: Toggle command.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:14"
  },
  "key-bindings.html": {
    "url": "https://zed.dev/docs/key-bindings.html",
    "title": "Key bindings | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"key-bindings\"><a class=\"header\" href=\"#key-bindings\">Key bindings</a></h1>\n<p>Zed has a very customizable key binding system — you can tweak everything to work exactly how your fingers expect!</p>\n<h2 id=\"predefined-keymaps\"><a class=\"header\" href=\"#predefined-keymaps\">Predefined keymaps</a></h2>\n<p>If you're used to a specific editor's defaults you can set a <code>base_keymap</code> in your <a href=\"./configuring-zed.html\">settings file</a>. We currently have:</p>\n<ul>\n<li>VSCode (default)</li>\n<li>Atom</li>\n<li>Emacs (Beta)</li>\n<li>JetBrains</li>\n<li>SublimeText</li>\n<li>TextMate</li>\n<li>None (disables <em>all</em> key bindings)</li>\n</ul>\n<p>You can also enable <code>vim_mode</code> or <code>helix_mode</code>, which add modal bindings. For more information, see the documentation for <a href=\"./vim.html\">Vim mode</a> and <a href=\"./helix.html\">Helix mode</a>.</p>\n<h2 id=\"user-keymaps\"><a class=\"header\" href=\"#user-keymaps\">User keymaps</a></h2>\n<p>Zed reads your keymap from <code>~/.config/zed/keymap.json</code>. You can open the file within Zed with <code class=\"hljs\">zed: open keymap</code> from the command palette or to spawn the Zed Keymap Editor (<code class=\"hljs\">zed: open keymap editor</code>) use <kbd class=\"keybinding\">cmd-k cmd-s|ctrl-k ctrl-s</kbd>.</p>\n<p>The file contains a JSON array of objects with <code>\"bindings\"</code>. If no <code>\"context\"</code> is set the bindings are always active. If it is set the binding is only active when the <a href=\"#contexts\">context matches</a>.</p>\n<p>Within each binding section a <a href=\"#keybinding-syntax\">key sequence</a> is mapped to an <a href=\"#actions\">action</a>. If conflicts are detected they are resolved as <a href=\"#precedence\">described below</a>.</p>\n<p>If you are using a non-QWERTY, Latin-character keyboard, you may want to set <code>use_key_equivalents</code> to <code>true</code>. See <a href=\"#non-qwerty-keyboards\">Non-QWERTY keyboards</a> for more information.</p>\n<p>For example:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"bindings\": {\n      \"ctrl-right\": \"editor::SelectLargerSyntaxNode\",\n      \"ctrl-left\": \"editor::SelectSmallerSyntaxNode\"\n    }\n  },\n  {\n    \"context\": \"ProjectPanel &amp;&amp; not_editing\",\n    \"bindings\": {\n      \"o\": \"project_panel::Open\"\n    }\n  }\n]\n</code></pre>\n<p>You can see all of Zed's default bindings in the default keymaps for <a href=\"https://github.com/zed-industries/zed/blob/main/assets/keymaps/default-macos.json\">MacOS</a> or <a href=\"https://github.com/zed-industries/zed/blob/main/assets/keymaps/default-linux.json\">Linux</a>.</p>\n<p>If you want to debug problems with custom keymaps you can use <code>dev: Open Key Context View</code> from the command palette. Please file <a href=\"https://github.com/zed-industries/zed\">an issue</a> if you run into something you think should work but isn't.</p>\n<h3 id=\"keybinding-syntax\"><a class=\"header\" href=\"#keybinding-syntax\">Keybinding syntax</a></h3>\n<p>Zed has the ability to match against not just a single keypress, but a sequence of keys typed in order. Each key in the <code>\"bindings\"</code> map is a sequence of keypresses separated with a space.</p>\n<p>Each keypress is a sequence of modifiers followed by a key. The modifiers are:</p>\n<ul>\n<li><code>ctrl-</code> The control key</li>\n<li><code>cmd-</code>, <code>win-</code> or <code>super-</code> for the platform modifier (Command on macOS, Windows key on Windows, and the Super key on Linux).</li>\n<li><code>alt-</code> for alt (option on macOS)</li>\n<li><code>shift-</code> The shift key</li>\n<li><code>fn-</code> The function key</li>\n<li><code>secondary-</code> Equivalent to <code>cmd</code> when Zed is running on macOS and <code>ctrl</code> when on Windows and Linux</li>\n</ul>\n<p>The keys can be any single unicode codepoint that your keyboard generates (for example <code>a</code>, <code>0</code>, <code>£</code> or <code>ç</code>), or any named key (<code>tab</code>, <code>f1</code>, <code>shift</code>, or <code>cmd</code>). If you are using a non-Latin layout (e.g. Cyrillic), you can bind either to the cyrillic character, or the latin character that key generates with <code>cmd</code> pressed.</p>\n<p>A few examples:</p>\n<pre><code class=\"language-json\"> \"bindings\": {\n   \"cmd-k cmd-s\": \"zed::OpenKeymap\", // matches ⌘-k then ⌘-s\n   \"space e\": \"editor::Complete\", // type space then e\n   \"ç\": \"editor::Complete\", // matches ⌥-c\n   \"shift shift\": \"file_finder::Toggle\", // matches pressing and releasing shift twice\n }\n</code></pre>\n<p>The <code>shift-</code> modifier can only be used in combination with a letter to indicate the uppercase version. For example <code>shift-g</code> matches typing <code>G</code>. Although on many keyboards shift is used to type punctuation characters like <code>(</code>, the keypress is not considered to be modified and so <code>shift-(</code> does not match.</p>\n<p>The <code>alt-</code> modifier can be used on many layouts to generate a different key. For example on macOS US keyboard the combination <code>alt-c</code> types <code>ç</code>. You can match against either in your keymap file, though by convention Zed spells this combination as <code>alt-c</code>.</p>\n<p>It is possible to match against typing a modifier key on its own. For example <code>shift shift</code> can be used to implement JetBrains search everywhere shortcut. In this case the binding happens on key release instead of keypress.</p>\n<h3 id=\"contexts\"><a class=\"header\" href=\"#contexts\">Contexts</a></h3>\n<p>If a binding group has a <code>\"context\"</code> key it will be matched against the currently active contexts in Zed.</p>\n<p>Zed's contexts make up a tree, with the root being <code>Workspace</code>. Workspaces contain Panes and Panels, and Panes contain Editors, etc. The easiest way to see what contexts are active at a given moment is the key context view, which you can get to with <code>dev: Open Key Context View</code> in the command palette.</p>\n<p>For example:</p>\n<pre><code># in an editor, it might look like this:\nWorkspace os=macos keyboard_layout=com.apple.keylayout.QWERTY\n  Pane\n    Editor mode=full extension=md vim_mode=insert\n\n# in the project panel\nWorkspace os=macos\n  Dock\n    ProjectPanel not_editing\n</code></pre>\n<p>Context expressions can contain the following syntax:</p>\n<ul>\n<li><code>X &amp;&amp; Y</code>, <code>X || Y</code> to and/or two conditions</li>\n<li><code>!X</code> to check that a condition is false</li>\n<li><code>(X)</code> for grouping</li>\n<li><code>X &gt; Y</code> to match if an ancestor in the tree matches X and this layer matches Y.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li><code>\"context\": \"Editor\"</code> - matches any editor (including inline inputs)</li>\n<li><code>\"context\": \"Editor &amp;&amp; mode=full\"</code> - matches the main editors used for editing code</li>\n<li><code>\"context\": \"!Editor &amp;&amp; !Terminal\"</code> - matches anywhere except where an Editor or Terminal is focused</li>\n<li><code>\"context\": \"os=macos &gt; Editor\"</code> - matches any editor on macOS.</li>\n</ul>\n<p>It's worth noting that attributes are only available on the node they are defined on. This means that if you want to (for example) only enable a keybinding when the debugger is stopped in vim normal mode, you need to do <code>debugger_stopped &gt; vim_mode == normal</code>.</p>\n<p>Note: Before Zed v0.197.x, the ! operator only looked at one node at a time, and <code>&gt;</code> meant \"parent\" not \"ancestor\". This meant that <code>!Editor</code> would match the context <code>Workspace &gt; Pane &gt; Editor</code>, because (confusingly) the Pane matches <code>!Editor</code>, and that <code>os=macos &gt; Editor</code> did not match the context <code>Workspace &gt; Pane &gt; Editor</code> because of the intermediate <code>Pane</code> node.</p>\n<p>If you're using Vim mode, we have information on how <a href=\"./vim.html#contexts\">vim modes influence the context</a>. Helix mode is built on top of Vim mode and uses the same contexts.</p>\n<h3 id=\"actions\"><a class=\"header\" href=\"#actions\">Actions</a></h3>\n<p>Pretty much all of Zed's functionality is exposed as actions. Although there is\nno explicitly documented list, you can find most of them by searching in the\ncommand palette, by looking in the default keymaps for\n<a href=\"https://github.com/zed-industries/zed/blob/main/assets/keymaps/default-macos.json\">MacOS</a>\nor\n<a href=\"https://github.com/zed-industries/zed/blob/main/assets/keymaps/default-linux.json\">Linux</a>, or by using Zed's autocomplete in your keymap file.</p>\n<p>Most actions do not require any arguments, and so you can bind them as strings: <code>\"ctrl-a\": \"language_selector::Toggle\"</code>. Some require a single argument, and must be bound as an array: <code>\"cmd-1\": [\"workspace::ActivatePane\", 0]</code>. Some actions require multiple arguments, and are bound as an array of a string and an object: <code>\"ctrl-a\": [\"pane::DeploySearch\", { \"replace_enabled\": true }]</code>.</p>\n<h3 id=\"precedence\"><a class=\"header\" href=\"#precedence\">Precedence</a></h3>\n<p>When multiple keybindings have the same keystroke and are active at the same time, precedence is resolved in two ways:</p>\n<ul>\n<li>Bindings that match on lower nodes in the context tree win. This means that if you have a binding with a context of <code>Editor</code> it will take precedence over a binding with a context of <code>Workspace</code>. Bindings with no context match at the lowest level in the tree.</li>\n<li>If there are multiple bindings that match at the same level in the tree, then the binding defined later takes precedence. As user keybindings are loaded after system keybindings, this allows user bindings to take precedence over builtin keybindings.</li>\n</ul>\n<p>The other kind of conflict that arises is when you have two bindings, one of which is a prefix of the other. For example if you have <code>\"ctrl-w\":\"editor::DeleteToNextWordEnd\"</code> and <code>\"ctrl-w left\":\"editor::DeleteToEndOfLine\"</code>.</p>\n<p>When this happens, and both bindings are active in the current context, Zed will wait for 1 second after you type <code>ctrl-w</code> to see if you're about to type <code>left</code>. If you don't type anything, or if you type a different key, then <code>DeleteToNextWordEnd</code> will be triggered. If you do, then <code>DeleteToEndOfLine</code> will be triggered.</p>\n<h3 id=\"non-qwerty-keyboards\"><a class=\"header\" href=\"#non-qwerty-keyboards\">Non-QWERTY keyboards</a></h3>\n<p>Zed's support for non-QWERTY keyboards is still a work in progress.</p>\n<p>If your keyboard can type the full ASCII ranges (DVORAK, COLEMAK, etc.) then shortcuts should work as you expect.</p>\n<p>Otherwise, read on...</p>\n<h4 id=\"macos\"><a class=\"header\" href=\"#macos\">macOS</a></h4>\n<p>On Cyrillic, Hebrew, Armenian, and other keyboards that are mostly non-ASCII; macOS automatically maps keys to the ASCII range when <code>cmd</code> is held. Zed takes this a step further and it can always match key-presses against either the ASCII layout, or the real layout regardless of modifiers, and regardless of the <code>use_key_equivalents</code> setting. For example in Thai, pressing <code>ctrl-ๆ</code> will match bindings associated with <code>ctrl-q</code> or <code>ctrl-ๆ</code></p>\n<p>On keyboards that support extended Latin alphabets (French AZERTY, German QWERTZ, etc.) it is often not possible to type the entire ASCII range without <code>option</code>. This introduces an ambiguity, <code>option-2</code> produces <code>@</code>. To ensure that all the builtin keyboard shortcuts can still be typed on these keyboards we move key-bindings around. For example, shortcuts bound to <code>@</code> on QWERTY are moved to <code>\"</code> on a Spanish layout. This mapping is based on the macOS system defaults and can be seen by running <code>dev: Open Key Context View</code> from the command palette.</p>\n<p>If you are defining shortcuts in your personal keymap, you can opt into the key equivalent mapping by setting <code>use_key_equivalents</code> to <code>true</code> in your keymap:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"use_key_equivalents\": true,\n    \"bindings\": {\n      \"ctrl-&gt;\": \"editor::Indent\" // parsed as ctrl-: when a German QWERTZ keyboard is active\n    }\n  }\n]\n</code></pre>\n<h3 id=\"linux\"><a class=\"header\" href=\"#linux\">Linux</a></h3>\n<p>Since v0.196.0 on Linux if the key that you type doesn't produce an ASCII character then we use the QWERTY-layout equivalent key for keyboard shortcuts. This means that many shortcuts can be typed on many layouts.</p>\n<p>We do not yet move shortcuts around to ensure that all the builtin shortcuts can be typed on every layout; so if there are some ASCII characters that cannot be typed, and your keyboard layout has different ASCII characters on the same keys as would be needed to type them, you may need to add custom key bindings to make this work. We do intend to fix this at some point, and help is very much wanted!</p>\n<h2 id=\"tips-and-tricks\"><a class=\"header\" href=\"#tips-and-tricks\">Tips and tricks</a></h2>\n<h3 id=\"disabling-a-binding\"><a class=\"header\" href=\"#disabling-a-binding\">Disabling a binding</a></h3>\n<p>If you'd like a given binding to do nothing in a given context you can use\n<code>null</code> as the action. This is useful if you hit the keybinding by accident and\nwant to disable it, or if you want to type the character that would be typed by\nthe sequence, or if you want to disable multikey bindings starting with that key.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": null // cmd-r will do nothing when the Workspace context is active\n    }\n  }\n]\n</code></pre>\n<p>A <code>null</code> binding follows the same precedence rules as normal actions. So disables all bindings that would match further up in the tree too. If you'd like a binding that matches further up in the tree to take precedence over a lower binding, you need to rebind it to the action you want in the context you want.</p>\n<p>This is useful for preventing Zed from falling back to a default keybinding when the action you specified is conditional and propagates. For example, <code>buffer_search::DeployReplace</code> only triggers when the search bar is not in view. If the search bar is in view, it would propagate and trigger the default action set for that binding, such as opening the right dock. To prevent this from happening:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": null // cmd-r will do nothing when the search bar is in view\n    }\n  },\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": \"buffer_search::DeployReplace\" // cmd-r will deploy replace when the search bar is not in view\n    }\n  }\n]\n</code></pre>\n<h3 id=\"remapping-keys\"><a class=\"header\" href=\"#remapping-keys\">Remapping keys</a></h3>\n<p>A common request is to be able to map from a single keystroke to a sequence. You can do this with the <code>workspace::SendKeystrokes</code> action.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"bindings\": {\n      // Move down four times\n      \"alt-down\": [\"workspace::SendKeystrokes\", \"down down down down\"],\n      // Expand the selection (editor::SelectLargerSyntaxNode);\n      // copy to the clipboard; and then undo the selection expansion.\n      \"cmd-alt-c\": [\n        \"workspace::SendKeystrokes\",\n        \"ctrl-shift-right ctrl-shift-right ctrl-shift-right cmd-c ctrl-shift-left ctrl-shift-left ctrl-shift-left\"\n      ]\n    }\n  },\n  {\n    \"context\": \"Editor &amp;&amp; vim_mode == insert\",\n    \"bindings\": {\n      \"j k\": [\"workspace::SendKeystrokes\", \"escape\"]\n    }\n  }\n]\n</code></pre>\n<p>There are some limitations to this, notably:</p>\n<ul>\n<li>Any asynchronous operation will not happen until after all your key bindings have been dispatched. For example this means that while you can use a binding to open a file (as in the <code>cmd-alt-r</code> example) you cannot send further keystrokes and hope to have them interpreted by the new view.</li>\n<li>Other examples of asynchronous things are: opening the command palette, communicating with a language server, changing the language of a buffer, anything that hits the network.</li>\n<li>There is a limit of 100 simulated keys at a time.</li>\n</ul>\n<p>The argument to <code>SendKeystrokes</code> is a space-separated list of keystrokes (using the same syntax as above). Due to the way that keystrokes are parsed, any segment that is not recognized as a keypress will be sent verbatim to the currently focused input field.</p>\n<p>If the argument to <code>SendKeystrokes</code> contains the binding used to trigger it, it will use the next-highest-precedence definition of that binding. This allows you to extend the default behavior of a key binding.</p>\n<h3 id=\"forward-keys-to-terminal\"><a class=\"header\" href=\"#forward-keys-to-terminal\">Forward keys to terminal</a></h3>\n<p>If you're on Linux or Windows, you might find yourself wanting to forward key combinations to the built-in terminal instead of them being handled by Zed.</p>\n<p>For example, <code>ctrl-n</code> creates a new tab in Zed on Linux. If you want to send <code>ctrl-n</code> to the built-in terminal when it's focused, add the following to your keymap:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Terminal\",\n  \"bindings\": {\n    \"ctrl-n\": [\"terminal::SendKeystroke\", \"ctrl-n\"]\n  }\n}\n</code></pre>\n<h3 id=\"task-key-bindings\"><a class=\"header\" href=\"#task-key-bindings\">Task Key bindings</a></h3>\n<p>You can also bind keys to launch Zed Tasks defined in your tasks.json.\nSee the <a href=\"tasks.html#custom-keybindings-for-tasks\">tasks documentation</a> for more.</p>\n\n</main>",
    "content_text": "Key bindings\nZed has a very customizable key binding system — you can tweak everything to work exactly how your fingers expect!\nPredefined keymaps\nIf you're used to a specific editor's defaults you can set a base_keymap in your settings file. We currently have:\n\nVSCode (default)\nAtom\nEmacs (Beta)\nJetBrains\nSublimeText\nTextMate\nNone (disables all key bindings)\n\nYou can also enable vim_mode or helix_mode, which add modal bindings. For more information, see the documentation for Vim mode and Helix mode.\nUser keymaps\nZed reads your keymap from ~/.config/zed/keymap.json. You can open the file within Zed with zed: open keymap from the command palette or to spawn the Zed Keymap Editor (zed: open keymap editor) use cmd-k cmd-s|ctrl-k ctrl-s.\nThe file contains a JSON array of objects with \"bindings\". If no \"context\" is set the bindings are always active. If it is set the binding is only active when the context matches.\nWithin each binding section a key sequence is mapped to an action. If conflicts are detected they are resolved as described below.\nIf you are using a non-QWERTY, Latin-character keyboard, you may want to set use_key_equivalents to true. See Non-QWERTY keyboards for more information.\nFor example:\n[\n  {\n    \"bindings\": {\n      \"ctrl-right\": \"editor::SelectLargerSyntaxNode\",\n      \"ctrl-left\": \"editor::SelectSmallerSyntaxNode\"\n    }\n  },\n  {\n    \"context\": \"ProjectPanel && not_editing\",\n    \"bindings\": {\n      \"o\": \"project_panel::Open\"\n    }\n  }\n]\n\nYou can see all of Zed's default bindings in the default keymaps for MacOS or Linux.\nIf you want to debug problems with custom keymaps you can use dev: Open Key Context View from the command palette. Please file an issue if you run into something you think should work but isn't.\nKeybinding syntax\nZed has the ability to match against not just a single keypress, but a sequence of keys typed in order. Each key in the \"bindings\" map is a sequence of keypresses separated with a space.\nEach keypress is a sequence of modifiers followed by a key. The modifiers are:\n\nctrl- The control key\ncmd-, win- or super- for the platform modifier (Command on macOS, Windows key on Windows, and the Super key on Linux).\nalt- for alt (option on macOS)\nshift- The shift key\nfn- The function key\nsecondary- Equivalent to cmd when Zed is running on macOS and ctrl when on Windows and Linux\n\nThe keys can be any single unicode codepoint that your keyboard generates (for example a, 0, £ or ç), or any named key (tab, f1, shift, or cmd). If you are using a non-Latin layout (e.g. Cyrillic), you can bind either to the cyrillic character, or the latin character that key generates with cmd pressed.\nA few examples:\n \"bindings\": {\n   \"cmd-k cmd-s\": \"zed::OpenKeymap\", // matches ⌘-k then ⌘-s\n   \"space e\": \"editor::Complete\", // type space then e\n   \"ç\": \"editor::Complete\", // matches ⌥-c\n   \"shift shift\": \"file_finder::Toggle\", // matches pressing and releasing shift twice\n }\n\nThe shift- modifier can only be used in combination with a letter to indicate the uppercase version. For example shift-g matches typing G. Although on many keyboards shift is used to type punctuation characters like (, the keypress is not considered to be modified and so shift-( does not match.\nThe alt- modifier can be used on many layouts to generate a different key. For example on macOS US keyboard the combination alt-c types ç. You can match against either in your keymap file, though by convention Zed spells this combination as alt-c.\nIt is possible to match against typing a modifier key on its own. For example shift shift can be used to implement JetBrains search everywhere shortcut. In this case the binding happens on key release instead of keypress.\nContexts\nIf a binding group has a \"context\" key it will be matched against the currently active contexts in Zed.\nZed's contexts make up a tree, with the root being Workspace. Workspaces contain Panes and Panels, and Panes contain Editors, etc. The easiest way to see what contexts are active at a given moment is the key context view, which you can get to with dev: Open Key Context View in the command palette.\nFor example:\n# in an editor, it might look like this:\nWorkspace os=macos keyboard_layout=com.apple.keylayout.QWERTY\n  Pane\n    Editor mode=full extension=md vim_mode=insert\n\n# in the project panel\nWorkspace os=macos\n  Dock\n    ProjectPanel not_editing\n\nContext expressions can contain the following syntax:\n\nX && Y, X || Y to and/or two conditions\n!X to check that a condition is false\n(X) for grouping\nX > Y to match if an ancestor in the tree matches X and this layer matches Y.\n\nFor example:\n\n\"context\": \"Editor\" - matches any editor (including inline inputs)\n\"context\": \"Editor && mode=full\" - matches the main editors used for editing code\n\"context\": \"!Editor && !Terminal\" - matches anywhere except where an Editor or Terminal is focused\n\"context\": \"os=macos > Editor\" - matches any editor on macOS.\n\nIt's worth noting that attributes are only available on the node they are defined on. This means that if you want to (for example) only enable a keybinding when the debugger is stopped in vim normal mode, you need to do debugger_stopped > vim_mode == normal.\nNote: Before Zed v0.197.x, the ! operator only looked at one node at a time, and > meant \"parent\" not \"ancestor\". This meant that !Editor would match the context Workspace > Pane > Editor, because (confusingly) the Pane matches !Editor, and that os=macos > Editor did not match the context Workspace > Pane > Editor because of the intermediate Pane node.\nIf you're using Vim mode, we have information on how vim modes influence the context. Helix mode is built on top of Vim mode and uses the same contexts.\nActions\nPretty much all of Zed's functionality is exposed as actions. Although there is\nno explicitly documented list, you can find most of them by searching in the\ncommand palette, by looking in the default keymaps for\nMacOS\nor\nLinux, or by using Zed's autocomplete in your keymap file.\nMost actions do not require any arguments, and so you can bind them as strings: \"ctrl-a\": \"language_selector::Toggle\". Some require a single argument, and must be bound as an array: \"cmd-1\": [\"workspace::ActivatePane\", 0]. Some actions require multiple arguments, and are bound as an array of a string and an object: \"ctrl-a\": [\"pane::DeploySearch\", { \"replace_enabled\": true }].\nPrecedence\nWhen multiple keybindings have the same keystroke and are active at the same time, precedence is resolved in two ways:\n\nBindings that match on lower nodes in the context tree win. This means that if you have a binding with a context of Editor it will take precedence over a binding with a context of Workspace. Bindings with no context match at the lowest level in the tree.\nIf there are multiple bindings that match at the same level in the tree, then the binding defined later takes precedence. As user keybindings are loaded after system keybindings, this allows user bindings to take precedence over builtin keybindings.\n\nThe other kind of conflict that arises is when you have two bindings, one of which is a prefix of the other. For example if you have \"ctrl-w\":\"editor::DeleteToNextWordEnd\" and \"ctrl-w left\":\"editor::DeleteToEndOfLine\".\nWhen this happens, and both bindings are active in the current context, Zed will wait for 1 second after you type ctrl-w to see if you're about to type left. If you don't type anything, or if you type a different key, then DeleteToNextWordEnd will be triggered. If you do, then DeleteToEndOfLine will be triggered.\nNon-QWERTY keyboards\nZed's support for non-QWERTY keyboards is still a work in progress.\nIf your keyboard can type the full ASCII ranges (DVORAK, COLEMAK, etc.) then shortcuts should work as you expect.\nOtherwise, read on...\nmacOS\nOn Cyrillic, Hebrew, Armenian, and other keyboards that are mostly non-ASCII; macOS automatically maps keys to the ASCII range when cmd is held. Zed takes this a step further and it can always match key-presses against either the ASCII layout, or the real layout regardless of modifiers, and regardless of the use_key_equivalents setting. For example in Thai, pressing ctrl-ๆ will match bindings associated with ctrl-q or ctrl-ๆ\nOn keyboards that support extended Latin alphabets (French AZERTY, German QWERTZ, etc.) it is often not possible to type the entire ASCII range without option. This introduces an ambiguity, option-2 produces @. To ensure that all the builtin keyboard shortcuts can still be typed on these keyboards we move key-bindings around. For example, shortcuts bound to @ on QWERTY are moved to \" on a Spanish layout. This mapping is based on the macOS system defaults and can be seen by running dev: Open Key Context View from the command palette.\nIf you are defining shortcuts in your personal keymap, you can opt into the key equivalent mapping by setting use_key_equivalents to true in your keymap:\n[\n  {\n    \"use_key_equivalents\": true,\n    \"bindings\": {\n      \"ctrl->\": \"editor::Indent\" // parsed as ctrl-: when a German QWERTZ keyboard is active\n    }\n  }\n]\n\nLinux\nSince v0.196.0 on Linux if the key that you type doesn't produce an ASCII character then we use the QWERTY-layout equivalent key for keyboard shortcuts. This means that many shortcuts can be typed on many layouts.\nWe do not yet move shortcuts around to ensure that all the builtin shortcuts can be typed on every layout; so if there are some ASCII characters that cannot be typed, and your keyboard layout has different ASCII characters on the same keys as would be needed to type them, you may need to add custom key bindings to make this work. We do intend to fix this at some point, and help is very much wanted!\nTips and tricks\nDisabling a binding\nIf you'd like a given binding to do nothing in a given context you can use\nnull as the action. This is useful if you hit the keybinding by accident and\nwant to disable it, or if you want to type the character that would be typed by\nthe sequence, or if you want to disable multikey bindings starting with that key.\n[\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": null // cmd-r will do nothing when the Workspace context is active\n    }\n  }\n]\n\nA null binding follows the same precedence rules as normal actions. So disables all bindings that would match further up in the tree too. If you'd like a binding that matches further up in the tree to take precedence over a lower binding, you need to rebind it to the action you want in the context you want.\nThis is useful for preventing Zed from falling back to a default keybinding when the action you specified is conditional and propagates. For example, buffer_search::DeployReplace only triggers when the search bar is not in view. If the search bar is in view, it would propagate and trigger the default action set for that binding, such as opening the right dock. To prevent this from happening:\n[\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": null // cmd-r will do nothing when the search bar is in view\n    }\n  },\n  {\n    \"context\": \"Workspace\",\n    \"bindings\": {\n      \"cmd-r\": \"buffer_search::DeployReplace\" // cmd-r will deploy replace when the search bar is not in view\n    }\n  }\n]\n\nRemapping keys\nA common request is to be able to map from a single keystroke to a sequence. You can do this with the workspace::SendKeystrokes action.\n[\n  {\n    \"bindings\": {\n      // Move down four times\n      \"alt-down\": [\"workspace::SendKeystrokes\", \"down down down down\"],\n      // Expand the selection (editor::SelectLargerSyntaxNode);\n      // copy to the clipboard; and then undo the selection expansion.\n      \"cmd-alt-c\": [\n        \"workspace::SendKeystrokes\",\n        \"ctrl-shift-right ctrl-shift-right ctrl-shift-right cmd-c ctrl-shift-left ctrl-shift-left ctrl-shift-left\"\n      ]\n    }\n  },\n  {\n    \"context\": \"Editor && vim_mode == insert\",\n    \"bindings\": {\n      \"j k\": [\"workspace::SendKeystrokes\", \"escape\"]\n    }\n  }\n]\n\nThere are some limitations to this, notably:\n\nAny asynchronous operation will not happen until after all your key bindings have been dispatched. For example this means that while you can use a binding to open a file (as in the cmd-alt-r example) you cannot send further keystrokes and hope to have them interpreted by the new view.\nOther examples of asynchronous things are: opening the command palette, communicating with a language server, changing the language of a buffer, anything that hits the network.\nThere is a limit of 100 simulated keys at a time.\n\nThe argument to SendKeystrokes is a space-separated list of keystrokes (using the same syntax as above). Due to the way that keystrokes are parsed, any segment that is not recognized as a keypress will be sent verbatim to the currently focused input field.\nIf the argument to SendKeystrokes contains the binding used to trigger it, it will use the next-highest-precedence definition of that binding. This allows you to extend the default behavior of a key binding.\nForward keys to terminal\nIf you're on Linux or Windows, you might find yourself wanting to forward key combinations to the built-in terminal instead of them being handled by Zed.\nFor example, ctrl-n creates a new tab in Zed on Linux. If you want to send ctrl-n to the built-in terminal when it's focused, add the following to your keymap:\n{\n  \"context\": \"Terminal\",\n  \"bindings\": {\n    \"ctrl-n\": [\"terminal::SendKeystroke\", \"ctrl-n\"]\n  }\n}\n\nTask Key bindings\nYou can also bind keys to launch Zed Tasks defined in your tasks.json.\nSee the tasks documentation for more.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:16"
  },
  "all-actions.html": {
    "url": "https://zed.dev/docs/all-actions.html",
    "title": "All Actions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h2 id=\"all-actions\"><a class=\"header\" href=\"#all-actions\">All Actions</a></h2>\n<dl style=\"line-height: 1.8;\">\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>activity indicator: show error message</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDisplays error messages from language servers in the status bar.<br/>\nKeymap Name: <code>activity_indicator::ShowErrorMessage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: accept suggested context</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAccepts the suggested context item.<br/>\nKeymap Name: <code>agent::AcceptSuggestedContext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: add context server</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a context server to the configuration.<br/>\nKeymap Name: <code>agent::AddContextServer</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: chat</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a chat conversation with the agent.<br/>\nKeymap Name: <code>agent::Chat</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: chat with follow</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a chat conversation with follow-up enabled.<br/>\nKeymap Name: <code>agent::ChatWithFollow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: continue thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nContinues the current thread.<br/>\nKeymap Name: <code>agent::ContinueThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: continue with burn mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nContinues the thread with burn mode enabled.<br/>\nKeymap Name: <code>agent::ContinueWithBurnMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: cycle next inline assist</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles to the next inline assist suggestion.<br/>\nKeymap Name: <code>agent::CycleNextInlineAssist</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: cycle previous inline assist</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles to the previous inline assist suggestion.<br/>\nKeymap Name: <code>agent::CyclePreviousInlineAssist</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: delete recently open thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the recently opened thread from history.<br/>\nKeymap Name: <code>agent::DeleteRecentlyOpenThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: expand message editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the message editor to full size.<br/>\nKeymap Name: <code>agent::ExpandMessageEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: focus down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves focus down in the interface.<br/>\nKeymap Name: <code>agent::FocusDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: focus left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves focus left in the interface.<br/>\nKeymap Name: <code>agent::FocusLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: focus right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves focus right in the interface.<br/>\nKeymap Name: <code>agent::FocusRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: focus up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves focus up in the interface.<br/>\nKeymap Name: <code>agent::FocusUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: follow</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFollows the agent's suggestions.<br/>\nKeymap Name: <code>agent::Follow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: keep</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeeps the current suggestion or change.<br/>\nKeymap Name: <code>agent::Keep</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: keep all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeeps all suggestions or changes.<br/>\nKeymap Name: <code>agent::KeepAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: manage profiles</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the profile management interface for configuring agent tools and settings.<br/>\nKeymap Name: <code>agent::ManageProfiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: new external agent thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new external agent conversation thread.<br/>\nKeymap Name: <code>agent::NewExternalAgentThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: new native agent thread from summary</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>agent::NewNativeAgentThreadFromSummary</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: new text thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new text-based conversation thread.<br/>\nKeymap Name: <code>agent::NewTextThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: new thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new conversation thread, optionally based on an existing thread.<br/>\nKeymap Name: <code>agent::NewThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open acp onboarding modal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the ACP onboarding modal.<br/>\nKeymap Name: <code>agent::OpenAcpOnboardingModal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open active thread as markdown</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the active thread as a markdown file.<br/>\nKeymap Name: <code>agent::OpenActiveThreadAsMarkdown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open agent diff</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the agent diff view to review changes.<br/>\nKeymap Name: <code>agent::OpenAgentDiff</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open claude code onboarding modal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the Claude Code onboarding modal.<br/>\nKeymap Name: <code>agent::OpenClaudeCodeOnboardingModal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open history</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the conversation history view.<br/>\nKeymap Name: <code>agent::OpenHistory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open onboarding modal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the agent onboarding modal.<br/>\nKeymap Name: <code>agent::OpenOnboardingModal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open rules library</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the rules library for managing agent rules and prompts.<br/>\nKeymap Name: <code>agent::OpenRulesLibrary</code><br/>\nDeprecated Aliases:<code>assistant::OpenRulesLibrary</code>, <code>assistant::DeployPromptLibrary</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: open settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the agent settings panel.<br/>\nKeymap Name: <code>agent::OpenSettings</code><br/>\nDeprecated Aliases:<code>agent::OpenConfiguration</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: quote selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nQuotes the current selection in the agent panel's message editor.<br/>\nKeymap Name: <code>agent::QuoteSelection</code><br/>\nDeprecated Aliases:<code>assistant::QuoteSelection</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reauthenticate agent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nTriggers re-authentication on Gemini<br/>\nKeymap Name: <code>agent::ReauthenticateAgent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reject</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRejects the current suggestion or change.<br/>\nKeymap Name: <code>agent::Reject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reject all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRejects all suggestions or changes.<br/>\nKeymap Name: <code>agent::RejectAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: remove all context</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves all added context from the current conversation.<br/>\nKeymap Name: <code>agent::RemoveAllContext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: remove focused context</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the currently focused context item.<br/>\nKeymap Name: <code>agent::RemoveFocusedContext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: remove selected thread</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the currently selected thread.<br/>\nKeymap Name: <code>agent::RemoveSelectedThread</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reset onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the agent onboarding state.<br/>\nKeymap Name: <code>agent::ResetOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reset trial end upsell</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the trial end upsell notification.<br/>\nKeymap Name: <code>agent::ResetTrialEndUpsell</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: reset trial upsell</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the trial upsell notification.<br/>\nKeymap Name: <code>agent::ResetTrialUpsell</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle burn mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles burn mode for faster responses.<br/>\nKeymap Name: <code>agent::ToggleBurnMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle context picker</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the context picker interface for adding files, symbols, or other context.<br/>\nKeymap Name: <code>agent::ToggleContextPicker</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>agent::ToggleFocus</code><br/>\nDeprecated Aliases:<code>assistant::ToggleFocus</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle model selector</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the language model selector dropdown.<br/>\nKeymap Name: <code>agent::ToggleModelSelector</code><br/>\nDeprecated Aliases:<code>assistant::ToggleModelSelector</code>, <code>assistant2::ToggleModelSelector</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle navigation menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the navigation menu for switching between threads and views.<br/>\nKeymap Name: <code>agent::ToggleNavigationMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle new thread menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the menu to create new agent threads.<br/>\nKeymap Name: <code>agent::ToggleNewThreadMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle options menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the options menu for agent settings and preferences.<br/>\nKeymap Name: <code>agent::ToggleOptionsMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>agent: toggle profile selector</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the profile selector for switching between agent profiles.<br/>\nKeymap Name: <code>agent::ToggleProfileSelector</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>app menu: activate menu left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the menu item on the left.<br/>\nKeymap Name: <code>app_menu::ActivateMenuLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>app menu: activate menu right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the menu item on the right.<br/>\nKeymap Name: <code>app_menu::ActivateMenuRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>app menu: open application menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>app_menu::OpenApplicationMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: assist</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSends the current message to the assistant.<br/>\nKeymap Name: <code>assistant::Assist</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: confirm command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms and executes the entered slash command.<br/>\nKeymap Name: <code>assistant::ConfirmCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: copy code</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies code from the assistant's response to the clipboard.<br/>\nKeymap Name: <code>assistant::CopyCode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: cycle message role</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles between user and assistant message roles.<br/>\nKeymap Name: <code>assistant::CycleMessageRole</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: inline assist</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeploys the assistant interface with the specified configuration.<br/>\nKeymap Name: <code>assistant::InlineAssist</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: insert into editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts the selected text into the active editor.<br/>\nKeymap Name: <code>assistant::InsertIntoEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: show configuration</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the assistant configuration panel.<br/>\nKeymap Name: <code>assistant::ShowConfiguration</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>assistant: split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the conversation at the current cursor position.<br/>\nKeymap Name: <code>assistant::Split</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>auto update: check</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nChecks for available updates.<br/>\nKeymap Name: <code>auto_update::Check</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>auto update: dismiss error message</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDismisses the update error message.<br/>\nKeymap Name: <code>auto_update::DismissErrorMessage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>auto update: view release notes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the release notes for the current version in a browser.<br/>\nKeymap Name: <code>auto_update::ViewReleaseNotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>auto update: view release notes locally</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the release notes for the current version in a new tab.<br/>\nKeymap Name: <code>auto_update::ViewReleaseNotesLocally</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>buffer search: deploy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the buffer search interface with the specified configuration.<br/>\nKeymap Name: <code>buffer_search::Deploy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>buffer search: deploy replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeploys the search and replace interface.<br/>\nKeymap Name: <code>buffer_search::DeployReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>buffer search: dismiss</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDismisses the search bar.<br/>\nKeymap Name: <code>buffer_search::Dismiss</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>buffer search: focus editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses back on the editor.<br/>\nKeymap Name: <code>buffer_search::FocusEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>channel modal: remove member</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the selected member from the channel.<br/>\nKeymap Name: <code>channel_modal::RemoveMember</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>channel modal: select next control</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next control in the channel modal.<br/>\nKeymap Name: <code>channel_modal::SelectNextControl</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>channel modal: toggle member admin</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles admin status for the selected member.<br/>\nKeymap Name: <code>channel_modal::ToggleMemberAdmin</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>channel modal: toggle mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles between invite members and manage members mode.<br/>\nKeymap Name: <code>channel_modal::ToggleMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>chat panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the chat panel.<br/>\nKeymap Name: <code>chat_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>cli: install</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInstalls the Zed CLI tool to the system PATH.<br/>\nKeymap Name: <code>cli::Install</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>cli: register zed scheme</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRegisters the zed:// URL scheme handler.<br/>\nKeymap Name: <code>cli::RegisterZedScheme</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>client: reconnect</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReconnects to the collaboration server.<br/>\nKeymap Name: <code>client::Reconnect</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>client: sign in</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSigns in to Zed account.<br/>\nKeymap Name: <code>client::SignIn</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>client: sign out</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSigns out of Zed account.<br/>\nKeymap Name: <code>client::SignOut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: copy link</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies a link to the current position in the channel buffer.<br/>\nKeymap Name: <code>collab::CopyLink</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: deafen</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeafens yourself (mute both microphone and speakers).<br/>\nKeymap Name: <code>collab::Deafen</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: leave call</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nLeaves the current call.<br/>\nKeymap Name: <code>collab::LeaveCall</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: mute</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMutes your microphone.<br/>\nKeymap Name: <code>collab::Mute</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: open channel notes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the channel notes for the current call.\n<p>If you want to open a specific channel, use <code>zed::OpenZedUrl</code> with a channel notes URL -\ncan be copied via \"Copy link to section\" in the context menu of the channel notes\nbuffer. These URLs look like <code>https://zed.dev/channel/channel-name-CHANNEL_ID/notes</code>.<br/>\nKeymap Name: <code>collab::OpenChannelNotes</code><br/></p>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: screen share</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShares your screen with collaborators.<br/>\nKeymap Name: <code>collab::ScreenShare</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: share project</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShares the current project with collaborators.<br/>\nKeymap Name: <code>collab::ShareProject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: switch branch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to a different git branch.<br/>\nKeymap Name: <code>collab::SwitchBranch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: toggle deafen</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles deafen mode (mute both microphone and speakers).<br/>\nKeymap Name: <code>collab::ToggleDeafen</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: toggle mute</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles microphone mute.<br/>\nKeymap Name: <code>collab::ToggleMute</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: toggle project menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the project menu dropdown.<br/>\nKeymap Name: <code>collab::ToggleProjectMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: toggle screen sharing</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles screen sharing on or off.<br/>\nKeymap Name: <code>collab::ToggleScreenSharing</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab: toggle user menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the user menu dropdown.<br/>\nKeymap Name: <code>collab::ToggleUserMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: collapse selected channel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses the selected channel in the tree view.<br/>\nKeymap Name: <code>collab_panel::CollapseSelectedChannel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: expand selected channel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the selected channel in the tree view.<br/>\nKeymap Name: <code>collab_panel::ExpandSelectedChannel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: insert space</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a space character in the filter input.<br/>\nKeymap Name: <code>collab_panel::InsertSpace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: move channel down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the selected channel down in the list.<br/>\nKeymap Name: <code>collab_panel::MoveChannelDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: move channel up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the selected channel up in the list.<br/>\nKeymap Name: <code>collab_panel::MoveChannelUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: move selected</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the selected item to the current location.<br/>\nKeymap Name: <code>collab_panel::MoveSelected</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: remove</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the selected channel or contact.<br/>\nKeymap Name: <code>collab_panel::Remove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: secondary</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the context menu for the selected item.<br/>\nKeymap Name: <code>collab_panel::Secondary</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: start move channel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts moving a channel to a new location.<br/>\nKeymap Name: <code>collab_panel::StartMoveChannel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>collab panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the collaboration panel.<br/>\nKeymap Name: <code>collab_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>command palette: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the command palette.<br/>\nKeymap Name: <code>command_palette::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>console: watch expression</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds an expression to the watch list.<br/>\nKeymap Name: <code>console::WatchExpression</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>context server: restart</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestarts the context server.<br/>\nKeymap Name: <code>context_server::Restart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: next suggestion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles to the next Copilot suggestion.<br/>\nKeymap Name: <code>copilot::NextSuggestion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: previous suggestion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles to the previous Copilot suggestion.<br/>\nKeymap Name: <code>copilot::PreviousSuggestion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: reinstall</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReinstalls the Copilot language server.<br/>\nKeymap Name: <code>copilot::Reinstall</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: sign in</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSigns in to GitHub Copilot.<br/>\nKeymap Name: <code>copilot::SignIn</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: sign out</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSigns out of GitHub Copilot.<br/>\nKeymap Name: <code>copilot::SignOut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>copilot: suggest</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRequests a code completion suggestion from Copilot.<br/>\nKeymap Name: <code>copilot::Suggest</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debug panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the debug panel.<br/>\nKeymap Name: <code>debug_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: clear all breakpoints</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears all breakpoints in the project.<br/>\nKeymap Name: <code>debugger::ClearAllBreakpoints</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: continue</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nContinues execution until the next breakpoint.<br/>\nKeymap Name: <code>debugger::Continue</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: detach</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDetaches the debugger from the running process.<br/>\nKeymap Name: <code>debugger::Detach</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: evaluate selected text</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEvaluates the selected text in the debugger context.<br/>\nKeymap Name: <code>debugger::EvaluateSelectedText</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus breakpoint list</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the breakpoint list panel.<br/>\nKeymap Name: <code>debugger::FocusBreakpointList</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus console</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the debugger console panel.<br/>\nKeymap Name: <code>debugger::FocusConsole</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus frames</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the call stack frames panel.<br/>\nKeymap Name: <code>debugger::FocusFrames</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus loaded sources</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the loaded sources panel.<br/>\nKeymap Name: <code>debugger::FocusLoadedSources</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus modules</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the loaded modules panel.<br/>\nKeymap Name: <code>debugger::FocusModules</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus terminal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the terminal panel.<br/>\nKeymap Name: <code>debugger::FocusTerminal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: focus variables</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the variables panel.<br/>\nKeymap Name: <code>debugger::FocusVariables</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: go to selected address</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>debugger::GoToSelectedAddress</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: next breakpoint property</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next breakpoint property in the list.<br/>\nKeymap Name: <code>debugger::NextBreakpointProperty</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: open onboarding modal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the debugger onboarding modal.<br/>\nKeymap Name: <code>debugger::OpenOnboardingModal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: open project debug tasks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the project debug tasks configuration.<br/>\nKeymap Name: <code>debugger::OpenProjectDebugTasks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: pause</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPauses the currently running program.<br/>\nKeymap Name: <code>debugger::Pause</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: previous breakpoint property</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous breakpoint property in the list.<br/>\nKeymap Name: <code>debugger::PreviousBreakpointProperty</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: rerun</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReruns the last debugging session.<br/>\nKeymap Name: <code>debugger::Rerun</code><br/>\nDeprecated Aliases:<code>debugger::RerunLastSession</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: rerun session</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReruns the current debugging session with the same configuration.<br/>\nKeymap Name: <code>debugger::RerunSession</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: reset onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the debugger onboarding state.<br/>\nKeymap Name: <code>debugger::ResetOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: restart</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestarts the current debugging session.<br/>\nKeymap Name: <code>debugger::Restart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: run to cursor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns program execution to the current cursor position.<br/>\nKeymap Name: <code>debugger::RunToCursor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: show stack trace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the stack trace for the current thread.<br/>\nKeymap Name: <code>debugger::ShowStackTrace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a new debugging session.<br/>\nKeymap Name: <code>debugger::Start</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: step back</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSteps back to the previous statement.<br/>\nKeymap Name: <code>debugger::StepBack</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: step into</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSteps into the next function call.<br/>\nKeymap Name: <code>debugger::StepInto</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: step out</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSteps out of the current function.<br/>\nKeymap Name: <code>debugger::StepOut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: step over</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSteps over the current line.<br/>\nKeymap Name: <code>debugger::StepOver</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: stop</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStops the debugging session.<br/>\nKeymap Name: <code>debugger::Stop</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle data breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection down by a specified number of lines.\nSet a data breakpoint on the selected variable or memory region.<br/>\nKeymap Name: <code>debugger::ToggleDataBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle enable breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the enabled state of a breakpoint.<br/>\nKeymap Name: <code>debugger::ToggleEnableBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle expand item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles expansion of the selected item in the debugger UI.<br/>\nKeymap Name: <code>debugger::ToggleExpandItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle ignore breakpoints</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles whether to ignore all breakpoints.<br/>\nKeymap Name: <code>debugger::ToggleIgnoreBreakpoints</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle session picker</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the session picker dropdown.<br/>\nKeymap Name: <code>debugger::ToggleSessionPicker</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle thread picker</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the thread picker dropdown.<br/>\nKeymap Name: <code>debugger::ToggleThreadPicker</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: toggle user frames</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggle the user frame filter in the stack frame list\nWhen toggled on, only frames from the user's code are shown\nWhen toggled off, all frames are shown<br/>\nKeymap Name: <code>debugger::ToggleUserFrames</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>debugger: unset breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves a breakpoint.<br/>\nKeymap Name: <code>debugger::UnsetBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: capture audio</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRecord 10s of audio from your current microphone<br/>\nKeymap Name: <code>dev::CaptureAudio</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: copy debug adapter arguments</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies debug adapter launch arguments to clipboard.<br/>\nKeymap Name: <code>dev::CopyDebugAdapterArguments</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open acp logs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>dev::OpenAcpLogs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open debug adapter logs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the debug adapter protocol logs viewer.<br/>\nKeymap Name: <code>dev::OpenDebugAdapterLogs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open key context view</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the key context view for debugging keybindings.<br/>\nKeymap Name: <code>dev::OpenKeyContextView</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open language server logs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the language server protocol logs viewer.<br/>\nKeymap Name: <code>dev::OpenLanguageServerLogs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open syntax tree view</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the syntax tree view for the current file.<br/>\nKeymap Name: <code>dev::OpenSyntaxTreeView</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: open theme preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the theme preview window.<br/>\nKeymap Name: <code>dev::OpenThemePreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>dev: toggle inspector</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the developer inspector for debugging UI elements.<br/>\nKeymap Name: <code>dev::ToggleInspector</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>diagnostics: deploy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the project diagnostics view.<br/>\nKeymap Name: <code>diagnostics::Deploy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>diagnostics: toggle diagnostics refresh</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles automatic refresh of diagnostics.<br/>\nKeymap Name: <code>diagnostics::ToggleDiagnosticsRefresh</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>diagnostics: toggle warnings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the display of warning-level diagnostics.<br/>\nKeymap Name: <code>diagnostics::ToggleWarnings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>edit prediction: clear history</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears the edit prediction history.<br/>\nKeymap Name: <code>edit_prediction::ClearHistory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>edit prediction: rate completions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the rate completions modal.<br/>\nKeymap Name: <code>edit_prediction::RateCompletions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>edit prediction: reset onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the edit prediction onboarding state.<br/>\nKeymap Name: <code>edit_prediction::ResetOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>edit prediction: toggle menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the edit prediction menu.<br/>\nKeymap Name: <code>edit_prediction::ToggleMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: accept edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAccepts the full edit prediction.<br/>\nKeymap Name: <code>editor::AcceptEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: accept partial edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAccepts a partial edit prediction.<br/>\nKeymap Name: <code>editor::AcceptPartialEditPrediction</code><br/>\nDeprecated Aliases:<code>editor::AcceptPartialCopilotSuggestion</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: add selection above</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a cursor above the current selection.<br/>\nKeymap Name: <code>editor::AddSelectionAbove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: add selection below</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a cursor below the current selection.<br/>\nKeymap Name: <code>editor::AddSelectionBelow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: apply all diff hunks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies all diff hunks in the editor.<br/>\nKeymap Name: <code>editor::ApplyAllDiffHunks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: apply diff hunk</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies the diff hunk at the current position.<br/>\nKeymap Name: <code>editor::ApplyDiffHunk</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: auto indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAutomatically adjusts indentation based on context.<br/>\nKeymap Name: <code>editor::AutoIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: backspace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the character before the cursor.<br/>\nKeymap Name: <code>editor::Backspace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: backtab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves a tab character or outdents.<br/>\nKeymap Name: <code>editor::Backtab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: blame hover</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows git blame information for the current line.<br/>\nKeymap Name: <code>editor::BlameHover</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: cancel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCancels the current operation.<br/>\nKeymap Name: <code>editor::Cancel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: cancel flycheck</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCancels the running flycheck operation.<br/>\nKeymap Name: <code>editor::CancelFlycheck</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: cancel language server work</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCancels pending language server work.<br/>\nKeymap Name: <code>editor::CancelLanguageServerWork</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: clear flycheck</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears flycheck results.<br/>\nKeymap Name: <code>editor::ClearFlycheck</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: compose completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nComposes multiple completion suggestions into a single completion.<br/>\nKeymap Name: <code>editor::ComposeCompletion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: confirm code action</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms and applies the currently selected code action.<br/>\nKeymap Name: <code>editor::ConfirmCodeAction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: confirm completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms and accepts the currently selected completion suggestion.<br/>\nKeymap Name: <code>editor::ConfirmCompletion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: confirm completion insert</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms completion by inserting at cursor.<br/>\nKeymap Name: <code>editor::ConfirmCompletionInsert</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: confirm completion replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms completion by replacing existing text.<br/>\nKeymap Name: <code>editor::ConfirmCompletionReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: confirm rename</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms the rename operation.<br/>\nKeymap Name: <code>editor::ConfirmRename</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: context menu first</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the first item in the context menu.<br/>\nKeymap Name: <code>editor::ContextMenuFirst</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: context menu last</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the last item in the context menu.<br/>\nKeymap Name: <code>editor::ContextMenuLast</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: context menu next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next item in the context menu.<br/>\nKeymap Name: <code>editor::ContextMenuNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: context menu previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous item in the context menu.<br/>\nKeymap Name: <code>editor::ContextMenuPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert indentation to spaces</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts indentation from tabs to spaces.<br/>\nKeymap Name: <code>editor::ConvertIndentationToSpaces</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert indentation to tabs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts indentation from spaces to tabs.<br/>\nKeymap Name: <code>editor::ConvertIndentationToTabs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to kebab case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to kebab-case.<br/>\nKeymap Name: <code>editor::ConvertToKebabCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to lower camel case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to lowerCamelCase.<br/>\nKeymap Name: <code>editor::ConvertToLowerCamelCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to lower case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to lowercase.<br/>\nKeymap Name: <code>editor::ConvertToLowerCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to opposite case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the case of selected text.<br/>\nKeymap Name: <code>editor::ConvertToOppositeCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to rot13</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT13 cipher to selected text.<br/>\nKeymap Name: <code>editor::ConvertToRot13</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to rot47</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT47 cipher to selected text.<br/>\nKeymap Name: <code>editor::ConvertToRot47</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to sentence case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to sentence case.<br/>\nKeymap Name: <code>editor::ConvertToSentenceCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to snake case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to snake_case.<br/>\nKeymap Name: <code>editor::ConvertToSnakeCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to title case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to Title Case.<br/>\nKeymap Name: <code>editor::ConvertToTitleCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to upper camel case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to UpperCamelCase.<br/>\nKeymap Name: <code>editor::ConvertToUpperCamelCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: convert to upper case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to UPPERCASE.<br/>\nKeymap Name: <code>editor::ConvertToUpperCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies selected text to the clipboard.<br/>\nKeymap Name: <code>editor::Copy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy and trim</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies selected text to the clipboard with leading/trailing whitespace trimmed.<br/>\nKeymap Name: <code>editor::CopyAndTrim</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy file location</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the current file location to the clipboard.<br/>\nKeymap Name: <code>editor::CopyFileLocation</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy file name</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the current file name to the clipboard.<br/>\nKeymap Name: <code>editor::CopyFileName</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy file name without extension</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the file name without extension to the clipboard.<br/>\nKeymap Name: <code>editor::CopyFileNameWithoutExtension</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy highlight json</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the highlighted text as JSON.<br/>\nKeymap Name: <code>editor::CopyHighlightJson</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: copy permalink to line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies a permalink to the current line.<br/>\nKeymap Name: <code>editor::CopyPermalinkToLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: cut</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCuts selected text to the clipboard.<br/>\nKeymap Name: <code>editor::Cut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: cut to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCuts from cursor to end of line.<br/>\nKeymap Name: <code>editor::CutToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the character after the cursor.<br/>\nKeymap Name: <code>editor::Delete</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the current line.<br/>\nKeymap Name: <code>editor::DeleteLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to beginning of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes from the cursor to the beginning of the current line.<br/>\nKeymap Name: <code>editor::DeleteToBeginningOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes from cursor to end of line.<br/>\nKeymap Name: <code>editor::DeleteToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to next subword end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes to the end of the next subword.<br/>\nKeymap Name: <code>editor::DeleteToNextSubwordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to next word end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes from the cursor to the end of the next word.\nStops before the end of the next word, if whitespace sequences of length &gt;= 2 are encountered.<br/>\nKeymap Name: <code>editor::DeleteToNextWordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to previous subword start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes to the start of the previous subword.<br/>\nKeymap Name: <code>editor::DeleteToPreviousSubwordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: delete to previous word start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes from the cursor to the start of the previous word.\nStops before the start of the previous word, if whitespace sequences of length &gt;= 2 are encountered.<br/>\nKeymap Name: <code>editor::DeleteToPreviousWordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: diff clipboard with selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDiffs the text stored in the clipboard against the current selection.<br/>\nKeymap Name: <code>editor::DiffClipboardWithSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: disable breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDisables the breakpoint at the current line.<br/>\nKeymap Name: <code>editor::DisableBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: display cursor names</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDisplays names of all active cursors.<br/>\nKeymap Name: <code>editor::DisplayCursorNames</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: duplicate line down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDuplicates the current line below.<br/>\nKeymap Name: <code>editor::DuplicateLineDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: duplicate line up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDuplicates the current line above.<br/>\nKeymap Name: <code>editor::DuplicateLineUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: duplicate selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDuplicates the current selection.<br/>\nKeymap Name: <code>editor::DuplicateSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: edit log breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEdits the log message for a breakpoint.<br/>\nKeymap Name: <code>editor::EditLogBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: enable breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEnables the breakpoint at the current line.<br/>\nKeymap Name: <code>editor::EnableBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: expand all diff hunks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands all diff hunks in the editor.<br/>\nKeymap Name: <code>editor::ExpandAllDiffHunks</code><br/>\nDeprecated Aliases:<code>editor::ExpandAllHunkDiffs</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: expand excerpts</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands all excerpts in the editor.<br/>\nKeymap Name: <code>editor::ExpandExcerpts</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: expand excerpts down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands excerpts below the current position.<br/>\nKeymap Name: <code>editor::ExpandExcerptsDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: expand excerpts up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands excerpts above the current position.<br/>\nKeymap Name: <code>editor::ExpandExcerptsUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: expand macro recursively</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands macros recursively at cursor position.<br/>\nKeymap Name: <code>editor::ExpandMacroRecursively</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: find all references</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinds all references to the symbol at cursor.<br/>\nKeymap Name: <code>editor::FindAllReferences</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: find next match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinds the next match in the search.<br/>\nKeymap Name: <code>editor::FindNextMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: find previous match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinds the previous match in the search.<br/>\nKeymap Name: <code>editor::FindPreviousMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds the current code block.<br/>\nKeymap Name: <code>editor::Fold</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds all foldable regions in the editor.<br/>\nKeymap Name: <code>editor::FoldAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold at level</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds all code blocks at the specified indentation level.<br/>\nKeymap Name: <code>editor::FoldAtLevel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold function bodies</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds all function bodies in the editor.<br/>\nKeymap Name: <code>editor::FoldFunctionBodies</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold recursive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds the current code block and all its children.<br/>\nKeymap Name: <code>editor::FoldRecursive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: fold selected ranges</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds the selected ranges.<br/>\nKeymap Name: <code>editor::FoldSelectedRanges</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: format</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFormats the entire document.<br/>\nKeymap Name: <code>editor::Format</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: format selections</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFormats only the selected text.<br/>\nKeymap Name: <code>editor::FormatSelections</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to declaration</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the declaration of the symbol at cursor.<br/>\nKeymap Name: <code>editor::GoToDeclaration</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to declaration split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to declaration in a split pane.<br/>\nKeymap Name: <code>editor::GoToDeclarationSplit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to definition</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the definition of the symbol at cursor.<br/>\nKeymap Name: <code>editor::GoToDefinition</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to definition split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to definition in a split pane.<br/>\nKeymap Name: <code>editor::GoToDefinitionSplit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to diagnostic</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the next diagnostic in the file.<br/>\nKeymap Name: <code>editor::GoToDiagnostic</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to hunk</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the next diff hunk.<br/>\nKeymap Name: <code>editor::GoToHunk</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to implementation</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the implementation of the symbol at cursor.<br/>\nKeymap Name: <code>editor::GoToImplementation</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to implementation split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to implementation in a split pane.<br/>\nKeymap Name: <code>editor::GoToImplementationSplit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to next change</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the next change in the file.<br/>\nKeymap Name: <code>editor::GoToNextChange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to parent module</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the parent module of the current file.<br/>\nKeymap Name: <code>editor::GoToParentModule</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to previous change</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the previous change in the file.<br/>\nKeymap Name: <code>editor::GoToPreviousChange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to previous diagnostic</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the previous diagnostic in the file.<br/>\nKeymap Name: <code>editor::GoToPreviousDiagnostic</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to previous hunk</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the previous diff hunk.<br/>\nKeymap Name: <code>editor::GoToPreviousHunk</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to type definition</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the type definition of the symbol at cursor.<br/>\nKeymap Name: <code>editor::GoToTypeDefinition</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: go to type definition split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to type definition in a split pane.<br/>\nKeymap Name: <code>editor::GoToTypeDefinitionSplit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: half page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by half a page.<br/>\nKeymap Name: <code>editor::HalfPageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: half page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by half a page.<br/>\nKeymap Name: <code>editor::HalfPageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: handle input</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nHandles text input in the editor.<br/>\nKeymap Name: <code>editor::HandleInput</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: hover</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows hover information for the symbol at cursor.<br/>\nKeymap Name: <code>editor::Hover</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases indentation of selected lines.<br/>\nKeymap Name: <code>editor::Indent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: insert uuid v4</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a UUID v4 at cursor position.<br/>\nKeymap Name: <code>editor::InsertUuidV4</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: insert uuid v7</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a UUID v7 at cursor position.<br/>\nKeymap Name: <code>editor::InsertUuidV7</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: join lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJoins the current line with the next line.<br/>\nKeymap Name: <code>editor::JoinLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: kill ring cut</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCuts to kill ring (Emacs-style).<br/>\nKeymap Name: <code>editor::KillRingCut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: kill ring yank</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks from kill ring (Emacs-style).<br/>\nKeymap Name: <code>editor::KillRingYank</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: line down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor down one line.<br/>\nKeymap Name: <code>editor::LineDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: line up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor up one line.<br/>\nKeymap Name: <code>editor::LineUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor down.<br/>\nKeymap Name: <code>editor::MoveDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move down by lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor down by a specified number of lines.<br/>\nKeymap Name: <code>editor::MoveDownByLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor left.<br/>\nKeymap Name: <code>editor::MoveLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move line down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the current line down.<br/>\nKeymap Name: <code>editor::MoveLineDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move line up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the current line up.<br/>\nKeymap Name: <code>editor::MoveLineUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor down by one page.<br/>\nKeymap Name: <code>editor::MovePageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor up by one page.<br/>\nKeymap Name: <code>editor::MovePageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor right.<br/>\nKeymap Name: <code>editor::MoveRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to beginning</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the beginning of the document.<br/>\nKeymap Name: <code>editor::MoveToBeginning</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to beginning of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor to the beginning of the current line.<br/>\nKeymap Name: <code>editor::MoveToBeginningOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to enclosing bracket</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the enclosing bracket.<br/>\nKeymap Name: <code>editor::MoveToEnclosingBracket</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the document.<br/>\nKeymap Name: <code>editor::MoveToEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to end of excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the current excerpt.<br/>\nKeymap Name: <code>editor::MoveToEndOfExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor to the end of the current line.<br/>\nKeymap Name: <code>editor::MoveToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to end of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the paragraph.<br/>\nKeymap Name: <code>editor::MoveToEndOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to end of previous excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the previous excerpt.<br/>\nKeymap Name: <code>editor::MoveToEndOfPreviousExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to next subword end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the next subword.<br/>\nKeymap Name: <code>editor::MoveToNextSubwordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to next word end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the end of the next word.<br/>\nKeymap Name: <code>editor::MoveToNextWordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to previous subword start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the start of the previous subword.<br/>\nKeymap Name: <code>editor::MoveToPreviousSubwordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to previous word start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the start of the previous word.<br/>\nKeymap Name: <code>editor::MoveToPreviousWordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to start of excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the start of the current excerpt.<br/>\nKeymap Name: <code>editor::MoveToStartOfExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to start of next excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the start of the next excerpt.<br/>\nKeymap Name: <code>editor::MoveToStartOfNextExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move to start of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the start of the paragraph.<br/>\nKeymap Name: <code>editor::MoveToStartOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor up.<br/>\nKeymap Name: <code>editor::MoveUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: move up by lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the cursor up by a specified number of lines.<br/>\nKeymap Name: <code>editor::MoveUpByLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: newline</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a new line and moves cursor to it.<br/>\nKeymap Name: <code>editor::Newline</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: newline above</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a new line above the current line.<br/>\nKeymap Name: <code>editor::NewlineAbove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: newline below</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a new line below the current line.<br/>\nKeymap Name: <code>editor::NewlineBelow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: next edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next edit prediction.<br/>\nKeymap Name: <code>editor::NextEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: next screen</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls to the next screen.<br/>\nKeymap Name: <code>editor::NextScreen</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open context menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the context menu at cursor position.<br/>\nKeymap Name: <code>editor::OpenContextMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open docs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens documentation for the symbol at cursor.<br/>\nKeymap Name: <code>editor::OpenDocs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open excerpts</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens excerpts from the current file.<br/>\nKeymap Name: <code>editor::OpenExcerpts</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open excerpts split</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens excerpts in a split pane.<br/>\nKeymap Name: <code>editor::OpenExcerptsSplit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open git blame commit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the git commit for the blame at cursor.<br/>\nKeymap Name: <code>editor::OpenGitBlameCommit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open permalink to line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a permalink to the current line.<br/>\nKeymap Name: <code>editor::OpenPermalinkToLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open proposed changes editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the proposed changes editor.<br/>\nKeymap Name: <code>editor::OpenProposedChangesEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open selected filename</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the file whose name is selected in the editor.<br/>\nKeymap Name: <code>editor::OpenSelectedFilename</code><br/>\nDeprecated Aliases:<code>editor::OpenFile</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open selections in multibuffer</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens all selections in a multibuffer.<br/>\nKeymap Name: <code>editor::OpenSelectionsInMultibuffer</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: open url</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the URL at cursor position.<br/>\nKeymap Name: <code>editor::OpenUrl</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: organize imports</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOrganizes import statements.<br/>\nKeymap Name: <code>editor::OrganizeImports</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: outdent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases indentation of selected lines.<br/>\nKeymap Name: <code>editor::Outdent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one page.<br/>\nKeymap Name: <code>editor::PageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one page.<br/>\nKeymap Name: <code>editor::PageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: paste</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPastes from clipboard.<br/>\nKeymap Name: <code>editor::Paste</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: previous edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous edit prediction.<br/>\nKeymap Name: <code>editor::PreviousEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: redo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRedoes the last undone edit.<br/>\nKeymap Name: <code>editor::Redo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: redo selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRedoes the last selection change.<br/>\nKeymap Name: <code>editor::RedoSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: reload file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReloads the file from disk.<br/>\nKeymap Name: <code>editor::ReloadFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: rename</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRenames the symbol at cursor.<br/>\nKeymap Name: <code>editor::Rename</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: restart language server</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestarts the language server for the current file.<br/>\nKeymap Name: <code>editor::RestartLanguageServer</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: reveal in file manager</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReveals the current file in the system file manager.<br/>\nKeymap Name: <code>editor::RevealInFileManager</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: reverse lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReverses the order of selected lines.<br/>\nKeymap Name: <code>editor::ReverseLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: rewrap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRewraps text to fit within the preferred line length.<br/>\nKeymap Name: <code>editor::Rewrap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: run flycheck</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns flycheck diagnostics.<br/>\nKeymap Name: <code>editor::RunFlycheck</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: scroll cursor bottom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls the cursor to the bottom of the viewport.<br/>\nKeymap Name: <code>editor::ScrollCursorBottom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: scroll cursor center</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls the cursor to the center of the viewport.<br/>\nKeymap Name: <code>editor::ScrollCursorCenter</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: scroll cursor center top bottom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles cursor position between center, top, and bottom.<br/>\nKeymap Name: <code>editor::ScrollCursorCenterTopBottom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: scroll cursor top</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls the cursor to the top of the viewport.<br/>\nKeymap Name: <code>editor::ScrollCursorTop</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects all text in the editor.<br/>\nKeymap Name: <code>editor::SelectAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select all matches</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects all matches of the current selection.<br/>\nKeymap Name: <code>editor::SelectAllMatches</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection down.<br/>\nKeymap Name: <code>editor::SelectDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select down by lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection down by a specified number of lines.<br/>\nKeymap Name: <code>editor::SelectDownByLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select enclosing symbol</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the enclosing symbol.<br/>\nKeymap Name: <code>editor::SelectEnclosingSymbol</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select larger syntax node</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next larger syntax node.<br/>\nKeymap Name: <code>editor::SelectLargerSyntaxNode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection left.<br/>\nKeymap Name: <code>editor::SelectLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the current line.<br/>\nKeymap Name: <code>editor::SelectLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next occurrence of the current selection.<br/>\nKeymap Name: <code>editor::SelectNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection down by one page.<br/>\nKeymap Name: <code>editor::SelectPageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection up by one page.<br/>\nKeymap Name: <code>editor::SelectPageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous occurrence of the current selection.<br/>\nKeymap Name: <code>editor::SelectPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection right.<br/>\nKeymap Name: <code>editor::SelectRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select smaller syntax node</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next smaller syntax node.<br/>\nKeymap Name: <code>editor::SelectSmallerSyntaxNode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to beginning</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the beginning of the document.<br/>\nKeymap Name: <code>editor::SelectToBeginning</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to beginning of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects from the cursor to the beginning of the current line.<br/>\nKeymap Name: <code>editor::SelectToBeginningOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the document.<br/>\nKeymap Name: <code>editor::SelectToEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to end of excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the current excerpt.<br/>\nKeymap Name: <code>editor::SelectToEndOfExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects from the cursor to the end of the current line.<br/>\nKeymap Name: <code>editor::SelectToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to end of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the paragraph.<br/>\nKeymap Name: <code>editor::SelectToEndOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to end of previous excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the previous excerpt.<br/>\nKeymap Name: <code>editor::SelectToEndOfPreviousExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to next subword end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the next subword.<br/>\nKeymap Name: <code>editor::SelectToNextSubwordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to next word end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the end of the next word.<br/>\nKeymap Name: <code>editor::SelectToNextWordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to previous subword start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the start of the previous subword.<br/>\nKeymap Name: <code>editor::SelectToPreviousSubwordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to previous word start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the start of the previous word.<br/>\nKeymap Name: <code>editor::SelectToPreviousWordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to start of excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the start of the current excerpt.<br/>\nKeymap Name: <code>editor::SelectToStartOfExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to start of next excerpt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the start of the next excerpt.<br/>\nKeymap Name: <code>editor::SelectToStartOfNextExcerpt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select to start of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects to the start of the paragraph.<br/>\nKeymap Name: <code>editor::SelectToStartOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection up.<br/>\nKeymap Name: <code>editor::SelectUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: select up by lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExtends selection up by a specified number of lines.<br/>\nKeymap Name: <code>editor::SelectUpByLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: set mark</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSets a mark at the current position.<br/>\nKeymap Name: <code>editor::SetMark</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: show character palette</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the system character palette.<br/>\nKeymap Name: <code>editor::ShowCharacterPalette</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: show completions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows code completion suggestions at the cursor position.<br/>\nKeymap Name: <code>editor::ShowCompletions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: show edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows edit prediction at cursor.<br/>\nKeymap Name: <code>editor::ShowEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: show signature help</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows signature help for the current function.<br/>\nKeymap Name: <code>editor::ShowSignatureHelp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: show word completions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows word completions.<br/>\nKeymap Name: <code>editor::ShowWordCompletions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: shuffle lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRandomly shuffles selected lines.<br/>\nKeymap Name: <code>editor::ShuffleLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: signature help next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next signature in the signature help popup.<br/>\nKeymap Name: <code>editor::SignatureHelpNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: signature help previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous signature in the signature help popup.<br/>\nKeymap Name: <code>editor::SignatureHelpPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: sort lines by length</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSorts selected lines by length.<br/>\nKeymap Name: <code>editor::SortLinesByLength</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: sort lines case insensitive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSorts selected lines case-insensitively.<br/>\nKeymap Name: <code>editor::SortLinesCaseInsensitive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: sort lines case sensitive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSorts selected lines case-sensitively.<br/>\nKeymap Name: <code>editor::SortLinesCaseSensitive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: spawn nearest task</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSpawns the nearest available task from the current cursor position.<br/>\nKeymap Name: <code>editor::SpawnNearestTask</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: split selection into lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits selection into individual lines.<br/>\nKeymap Name: <code>editor::SplitSelectionIntoLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: stop language server</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStops the language server for the current file.<br/>\nKeymap Name: <code>editor::StopLanguageServer</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: swap selection ends</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the start and end of the current selection.<br/>\nKeymap Name: <code>editor::SwapSelectionEnds</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: switch source header</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches between source and header files.<br/>\nKeymap Name: <code>editor::SwitchSourceHeader</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a tab character or indents.<br/>\nKeymap Name: <code>editor::Tab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle auto signature help</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles automatic signature help.<br/>\nKeymap Name: <code>editor::ToggleAutoSignatureHelp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle breakpoint</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles a breakpoint at the current line.<br/>\nKeymap Name: <code>editor::ToggleBreakpoint</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the case of selected text.<br/>\nKeymap Name: <code>editor::ToggleCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle code actions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the display of available code actions at the cursor position.<br/>\nKeymap Name: <code>editor::ToggleCodeActions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle comments</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles comment markers for the selected lines.<br/>\nKeymap Name: <code>editor::ToggleComments</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle diagnostics</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the diagnostics panel.<br/>\nKeymap Name: <code>editor::ToggleDiagnostics</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles edit prediction feature.<br/>\nKeymap Name: <code>editor::ToggleEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus back to the last active buffer.<br/>\nKeymap Name: <code>editor::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle fold</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles folding at the current position.<br/>\nKeymap Name: <code>editor::ToggleFold</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle fold all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles all folds in a buffer or all excerpts in multibuffer.<br/>\nKeymap Name: <code>editor::ToggleFoldAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle fold recursive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles recursive folding at the current position.<br/>\nKeymap Name: <code>editor::ToggleFoldRecursive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle git blame inline</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles inline git blame display.<br/>\nKeymap Name: <code>editor::ToggleGitBlameInline</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle indent guides</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles indent guides display.<br/>\nKeymap Name: <code>editor::ToggleIndentGuides</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle inlay hints</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles inlay hints display.<br/>\nKeymap Name: <code>editor::ToggleInlayHints</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle inline diagnostics</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles inline diagnostics display.<br/>\nKeymap Name: <code>editor::ToggleInlineDiagnostics</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle inline values</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles inline values display.<br/>\nKeymap Name: <code>editor::ToggleInlineValues</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle line numbers</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles line numbers display.<br/>\nKeymap Name: <code>editor::ToggleLineNumbers</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle minimap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the minimap display.<br/>\nKeymap Name: <code>editor::ToggleMinimap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle relative line numbers</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles relative line numbers display.<br/>\nKeymap Name: <code>editor::ToggleRelativeLineNumbers</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle selected diff hunks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles diff display for selected hunks.<br/>\nKeymap Name: <code>editor::ToggleSelectedDiffHunks</code><br/>\nDeprecated Aliases:<code>editor::ToggleHunkDiff</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle selection menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the selection menu.<br/>\nKeymap Name: <code>editor::ToggleSelectionMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle soft wrap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles soft wrap mode.<br/>\nKeymap Name: <code>editor::ToggleSoftWrap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: toggle tab bar</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the tab bar display.<br/>\nKeymap Name: <code>editor::ToggleTabBar</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: transpose</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nTransposes characters around cursor.<br/>\nKeymap Name: <code>editor::Transpose</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: undo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes the last edit.<br/>\nKeymap Name: <code>editor::Undo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: undo selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes the last selection change.<br/>\nKeymap Name: <code>editor::UndoSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unfold all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnfolds all folded regions.<br/>\nKeymap Name: <code>editor::UnfoldAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unfold lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnfolds lines at cursor.<br/>\nKeymap Name: <code>editor::UnfoldLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unfold recursive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnfolds recursively at cursor.<br/>\nKeymap Name: <code>editor::UnfoldRecursive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unique lines case insensitive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves duplicate lines (case-insensitive).<br/>\nKeymap Name: <code>editor::UniqueLinesCaseInsensitive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unique lines case sensitive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves duplicate lines (case-sensitive).<br/>\nKeymap Name: <code>editor::UniqueLinesCaseSensitive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: unwrap syntax node</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>editor::UnwrapSyntaxNode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>editor: wrap selections in tag</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nWraps selections in tag specified by language.<br/>\nKeymap Name: <code>editor::WrapSelectionsInTag</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>feedback: file bug report</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the bug report form.<br/>\nKeymap Name: <code>feedback::FileBugReport</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>feedback: give feedback</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the feedback form.<br/>\nKeymap Name: <code>feedback::GiveFeedback</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>file finder: select previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous item in the file finder.<br/>\nKeymap Name: <code>file_finder::SelectPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>file finder: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the file finder interface.<br/>\nKeymap Name: <code>file_finder::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>file finder: toggle filter menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the file filter menu.<br/>\nKeymap Name: <code>file_finder::ToggleFilterMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>file finder: toggle split menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the split direction menu.<br/>\nKeymap Name: <code>file_finder::ToggleSplitMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: add</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds files to the git staging area.<br/>\nKeymap Name: <code>git::Add</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: amend</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAmends the last commit with staged changes.<br/>\nKeymap Name: <code>git::Amend</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: blame</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows git blame information for the current file.<br/>\nKeymap Name: <code>git::Blame</code><br/>\nDeprecated Aliases:<code>editor::ToggleGitBlame</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: branch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the git branch selector.<br/>\nKeymap Name: <code>git::Branch</code><br/>\nDeprecated Aliases:<code>branches::OpenRecent</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: cancel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCancels the current git operation.<br/>\nKeymap Name: <code>git::Cancel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: checkout branch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nChecks out a different git branch.<br/>\nKeymap Name: <code>git::CheckoutBranch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: clone</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClones a repository.<br/>\nKeymap Name: <code>git::Clone</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: commit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new commit with staged changes.<br/>\nKeymap Name: <code>git::Commit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: diff</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the diff between the working directory and the index.<br/>\nKeymap Name: <code>git::Diff</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: expand commit editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the commit message editor.<br/>\nKeymap Name: <code>git::ExpandCommitEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: fetch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFetches changes from the remote repository.<br/>\nKeymap Name: <code>git::Fetch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: fetch from</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFetches changes from a specific remote.<br/>\nKeymap Name: <code>git::FetchFrom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: force push</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nForce pushes commits to the remote repository.<br/>\nKeymap Name: <code>git::ForcePush</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: generate commit message</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGenerates a commit message using AI.<br/>\nKeymap Name: <code>git::GenerateCommitMessage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: init</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInitializes a new git repository.<br/>\nKeymap Name: <code>git::Init</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: open modified files</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens all modified files in the editor.<br/>\nKeymap Name: <code>git::OpenModifiedFiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: pull</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPulls changes from the remote repository.<br/>\nKeymap Name: <code>git::Pull</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: push</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPushes commits to the remote repository.<br/>\nKeymap Name: <code>git::Push</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: push to</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPushes commits to a specific remote branch.<br/>\nKeymap Name: <code>git::PushTo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: reset onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the git onboarding state to show the tutorial again.<br/>\nKeymap Name: <code>git::ResetOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: restore</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestores the selected hunks to their original state.<br/>\nKeymap Name: <code>git::Restore</code><br/>\nDeprecated Aliases:<code>editor::RevertSelectedHunks</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: restore file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestores a file to its last committed state, discarding local changes.<br/>\nKeymap Name: <code>git::RestoreFile</code><br/>\nDeprecated Aliases:<code>editor::RevertFile</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: restore tracked files</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestores all tracked files to their last committed state.<br/>\nKeymap Name: <code>git::RestoreTrackedFiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: select repo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a different repository.<br/>\nKeymap Name: <code>git::SelectRepo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: signoff</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEnable the --signoff option.<br/>\nKeymap Name: <code>git::Signoff</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stage all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStages all changes in the repository.<br/>\nKeymap Name: <code>git::StageAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stage and next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStages the current hunk and moves to the next one.<br/>\nKeymap Name: <code>git::StageAndNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stage file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStages the current file.<br/>\nKeymap Name: <code>git::StageFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stage range</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStage status entries between an anchor entry and the cursor.<br/>\nKeymap Name: <code>git::StageRange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stash all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStashes all changes in the repository, including untracked files.<br/>\nKeymap Name: <code>git::StashAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: stash pop</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPops the most recent stash.<br/>\nKeymap Name: <code>git::StashPop</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: switch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to a different git branch.<br/>\nKeymap Name: <code>git::Switch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: toggle staged</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the staged state of the hunk or status entry at cursor.<br/>\nKeymap Name: <code>git::ToggleStaged</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: trash untracked files</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves all untracked files to trash.<br/>\nKeymap Name: <code>git::TrashUntrackedFiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: uncommit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes the last commit, keeping changes in the working directory.<br/>\nKeymap Name: <code>git::Uncommit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: unstage all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnstages all changes in the repository.<br/>\nKeymap Name: <code>git::UnstageAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: unstage and next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnstages the current hunk and moves to the next one.<br/>\nKeymap Name: <code>git::UnstageAndNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git: unstage file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnstages the current file.<br/>\nKeymap Name: <code>git::UnstageFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git onboarding: open git integration onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the git integration onboarding modal.<br/>\nKeymap Name: <code>git_onboarding::OpenGitIntegrationOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: close</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses the git panel.<br/>\nKeymap Name: <code>git_panel::Close</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: focus changes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the changes list.<br/>\nKeymap Name: <code>git_panel::FocusChanges</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: focus editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the commit message editor.<br/>\nKeymap Name: <code>git_panel::FocusEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: open menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the git panel menu.<br/>\nKeymap Name: <code>git_panel::OpenMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: toggle fill co authors</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles automatic co-author suggestions.<br/>\nKeymap Name: <code>git_panel::ToggleFillCoAuthors</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>git panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the git panel.<br/>\nKeymap Name: <code>git_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>go to line: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the go to line dialog.<br/>\nKeymap Name: <code>go_to_line::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>icon theme selector: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the icon theme selector interface.<br/>\nKeymap Name: <code>icon_theme_selector::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>jj: bookmark list</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the Jujutsu bookmark list.<br/>\nKeymap Name: <code>jj::BookmarkList</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>journal: new journal entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new journal entry for today.<br/>\nKeymap Name: <code>journal::NewJournalEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: copy action</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the action name to clipboard.<br/>\nKeymap Name: <code>keymap_editor::CopyAction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: copy context</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the context predicate to clipboard.<br/>\nKeymap Name: <code>keymap_editor::CopyContext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: create binding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new key binding for the selected action.<br/>\nKeymap Name: <code>keymap_editor::CreateBinding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: delete binding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the selected key binding.<br/>\nKeymap Name: <code>keymap_editor::DeleteBinding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: edit binding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEdits the selected key binding.<br/>\nKeymap Name: <code>keymap_editor::EditBinding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: show matching keybinds</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows matching keystrokes for the currently selected binding<br/>\nKeymap Name: <code>keymap_editor::ShowMatchingKeybinds</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: toggle conflict filter</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles Conflict Filtering<br/>\nKeymap Name: <code>keymap_editor::ToggleConflictFilter</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: toggle exact keystroke matching</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles exact matching for keystroke search<br/>\nKeymap Name: <code>keymap_editor::ToggleExactKeystrokeMatching</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keymap editor: toggle keystroke search</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggle Keystroke search<br/>\nKeymap Name: <code>keymap_editor::ToggleKeystrokeSearch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keystroke input: clear keystrokes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears the recorded keystrokes<br/>\nKeymap Name: <code>keystroke_input::ClearKeystrokes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keystroke input: start recording</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts recording keystrokes<br/>\nKeymap Name: <code>keystroke_input::StartRecording</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>keystroke input: stop recording</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStops recording keystrokes<br/>\nKeymap Name: <code>keystroke_input::StopRecording</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>language selector: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the language selector modal.<br/>\nKeymap Name: <code>language_selector::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>line ending: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the line ending selector modal.<br/>\nKeymap Name: <code>line_ending::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>lsp tool: toggle menu</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the language server tool menu.<br/>\nKeymap Name: <code>lsp_tool::ToggleMenu</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: copy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the selected text to the clipboard.<br/>\nKeymap Name: <code>markdown::Copy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: copy as markdown</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the selected text as markdown to the clipboard.<br/>\nKeymap Name: <code>markdown::CopyAsMarkdown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: move page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one page in the markdown preview.<br/>\nKeymap Name: <code>markdown::MovePageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: move page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one page in the markdown preview.<br/>\nKeymap Name: <code>markdown::MovePageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: open following preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a following markdown preview that syncs with the editor.<br/>\nKeymap Name: <code>markdown::OpenFollowingPreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: open preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a markdown preview for the current file.<br/>\nKeymap Name: <code>markdown::OpenPreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>markdown: open preview to the side</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a markdown preview in a split pane.<br/>\nKeymap Name: <code>markdown::OpenPreviewToTheSide</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: cancel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCancels the current menu operation.<br/>\nKeymap Name: <code>menu::Cancel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: confirm</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms the selected menu item.<br/>\nKeymap Name: <code>menu::Confirm</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: end slot</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>menu::EndSlot</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: restart</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestarts the menu from the beginning.<br/>\nKeymap Name: <code>menu::Restart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: secondary confirm</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPerforms secondary confirmation action.<br/>\nKeymap Name: <code>menu::SecondaryConfirm</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: select first</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the first item in the menu.<br/>\nKeymap Name: <code>menu::SelectFirst</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: select last</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the last item in the menu.<br/>\nKeymap Name: <code>menu::SelectLast</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: select next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next item in the menu.<br/>\nKeymap Name: <code>menu::SelectNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>menu: select previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous item in the menu.<br/>\nKeymap Name: <code>menu::SelectPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: add code block</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a new code cell.<br/>\nKeymap Name: <code>notebook::AddCodeBlock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: add markdown block</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a new markdown cell.<br/>\nKeymap Name: <code>notebook::AddMarkdownBlock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: clear outputs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears all cell outputs.<br/>\nKeymap Name: <code>notebook::ClearOutputs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: move cell down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the current cell down.<br/>\nKeymap Name: <code>notebook::MoveCellDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: move cell up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the current cell up.<br/>\nKeymap Name: <code>notebook::MoveCellUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: open notebook</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a Jupyter notebook file.<br/>\nKeymap Name: <code>notebook::OpenNotebook</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notebook: run all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns all cells in the notebook.<br/>\nKeymap Name: <code>notebook::RunAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>notification panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the notification panel.<br/>\nKeymap Name: <code>notification_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: activate a i setup page</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the AI Setup page.<br/>\nKeymap Name: <code>onboarding::ActivateAISetupPage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: activate basics page</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the Basics page.<br/>\nKeymap Name: <code>onboarding::ActivateBasicsPage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: activate editing page</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the Editing page.<br/>\nKeymap Name: <code>onboarding::ActivateEditingPage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: finish</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinish the onboarding process.<br/>\nKeymap Name: <code>onboarding::Finish</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: open account</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpen the user account in zed.dev while in the onboarding flow.<br/>\nKeymap Name: <code>onboarding::OpenAccount</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: reset hints</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the welcome screen hints to their initial state.<br/>\nKeymap Name: <code>onboarding::ResetHints</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>onboarding: sign in</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSign in while in the onboarding flow.<br/>\nKeymap Name: <code>onboarding::SignIn</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>outline::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: collapse all entries</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses all entries in the outline tree.<br/>\nKeymap Name: <code>outline_panel::CollapseAllEntries</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: collapse selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses the currently selected entry.<br/>\nKeymap Name: <code>outline_panel::CollapseSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: expand all entries</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands all entries in the outline tree.<br/>\nKeymap Name: <code>outline_panel::ExpandAllEntries</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: expand selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the currently selected entry.<br/>\nKeymap Name: <code>outline_panel::ExpandSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: fold directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds the selected directory.<br/>\nKeymap Name: <code>outline_panel::FoldDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: open selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the selected entry in the editor.<br/>\nKeymap Name: <code>outline_panel::OpenSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: reveal in file manager</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReveals the selected item in the system file manager.<br/>\nKeymap Name: <code>outline_panel::RevealInFileManager</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: select parent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the parent of the current entry.<br/>\nKeymap Name: <code>outline_panel::SelectParent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: toggle active editor pin</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the pin status of the active editor.<br/>\nKeymap Name: <code>outline_panel::ToggleActiveEditorPin</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the outline panel.<br/>\nKeymap Name: <code>outline_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>outline panel: unfold directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnfolds the selected directory.<br/>\nKeymap Name: <code>outline_panel::UnfoldDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: activate item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates a specific item in the pane by its index.<br/>\nKeymap Name: <code>pane::ActivateItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: activate last item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the last item in the pane.<br/>\nKeymap Name: <code>pane::ActivateLastItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: activate next item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the next item in the pane.<br/>\nKeymap Name: <code>pane::ActivateNextItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: activate previous item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the previous item in the pane.<br/>\nKeymap Name: <code>pane::ActivatePreviousItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: alternate file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to the alternate file.<br/>\nKeymap Name: <code>pane::AlternateFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close active item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses the currently active item in the pane.<br/>\nKeymap Name: <code>pane::CloseActiveItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close all items</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all items in the pane.<br/>\nKeymap Name: <code>pane::CloseAllItems</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close clean items</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all items that have no unsaved changes.<br/>\nKeymap Name: <code>pane::CloseCleanItems</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close items to the left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all items to the left of the current item.<br/>\nKeymap Name: <code>pane::CloseItemsToTheLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close items to the right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all items to the right of the current item.<br/>\nKeymap Name: <code>pane::CloseItemsToTheRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: close other items</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all inactive items in the pane.<br/>\nKeymap Name: <code>pane::CloseOtherItems</code><br/>\nDeprecated Aliases:<code>pane::CloseInactiveItems</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: deploy search</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the search interface with the specified configuration.<br/>\nKeymap Name: <code>pane::DeploySearch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: go back</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates back in history.<br/>\nKeymap Name: <code>pane::GoBack</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: go forward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates forward in history.<br/>\nKeymap Name: <code>pane::GoForward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: join all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJoins all panes into one.<br/>\nKeymap Name: <code>pane::JoinAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: join into next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJoins this pane into the next pane.<br/>\nKeymap Name: <code>pane::JoinIntoNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: reopen closed item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReopens the most recently closed item.<br/>\nKeymap Name: <code>pane::ReopenClosedItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: reveal in project panel</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReveals the current item in the project panel.<br/>\nKeymap Name: <code>pane::RevealInProjectPanel</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane downward.<br/>\nKeymap Name: <code>pane::SplitDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split horizontal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane horizontally.<br/>\nKeymap Name: <code>pane::SplitHorizontal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane to the left.<br/>\nKeymap Name: <code>pane::SplitLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane to the right.<br/>\nKeymap Name: <code>pane::SplitRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane upward.<br/>\nKeymap Name: <code>pane::SplitUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: split vertical</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSplits the pane vertically.<br/>\nKeymap Name: <code>pane::SplitVertical</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: swap item left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current item with the one to the left.<br/>\nKeymap Name: <code>pane::SwapItemLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: swap item right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current item with the one to the right.<br/>\nKeymap Name: <code>pane::SwapItemRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: toggle pin tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles pin status for the current tab.<br/>\nKeymap Name: <code>pane::TogglePinTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: toggle preview tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles preview mode for the current tab.<br/>\nKeymap Name: <code>pane::TogglePreviewTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>pane: unpin all tabs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnpins all tabs in the pane.<br/>\nKeymap Name: <code>pane::UnpinAllTabs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>panel: next panel tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next tab in the panel.<br/>\nKeymap Name: <code>panel::NextPanelTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>panel: previous panel tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous tab in the panel.<br/>\nKeymap Name: <code>panel::PreviousPanelTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>picker: confirm completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirms the selected completion in the picker.<br/>\nKeymap Name: <code>picker::ConfirmCompletion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>picker: confirm input</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConfirmInput is an alternative editor action which - instead of selecting active picker entry - treats pickers editor input literally,\nperforming some kind of action on it.<br/>\nKeymap Name: <code>picker::ConfirmInput</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: collapse all entries</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses all entries in the project tree.<br/>\nKeymap Name: <code>project_panel::CollapseAllEntries</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: collapse selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses the selected entry in the project tree.<br/>\nKeymap Name: <code>project_panel::CollapseSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: compare marked files</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a diff view to compare two marked files.<br/>\nKeymap Name: <code>project_panel::CompareMarkedFiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: copy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the selected file or directory.<br/>\nKeymap Name: <code>project_panel::Copy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: cut</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCuts the selected file or directory.<br/>\nKeymap Name: <code>project_panel::Cut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: delete</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPermanently deletes the selected file or directory.<br/>\nKeymap Name: <code>project_panel::Delete</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: duplicate</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDuplicates the selected file or directory.<br/>\nKeymap Name: <code>project_panel::Duplicate</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: expand selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the selected entry in the project tree.<br/>\nKeymap Name: <code>project_panel::ExpandSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: fold directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFolds the selected directory.<br/>\nKeymap Name: <code>project_panel::FoldDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: new directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new directory.<br/>\nKeymap Name: <code>project_panel::NewDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: new file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new file.<br/>\nKeymap Name: <code>project_panel::NewFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: new search in directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a new search in the selected directory.<br/>\nKeymap Name: <code>project_panel::NewSearchInDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: open</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the selected file in the editor.<br/>\nKeymap Name: <code>project_panel::Open</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: open permanent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the selected file in a permanent tab.<br/>\nKeymap Name: <code>project_panel::OpenPermanent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: paste</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPastes the previously cut or copied item.<br/>\nKeymap Name: <code>project_panel::Paste</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: remove from project</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the selected folder from the project.<br/>\nKeymap Name: <code>project_panel::RemoveFromProject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: rename</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRenames the selected file or directory.<br/>\nKeymap Name: <code>project_panel::Rename</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: reveal in file manager</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReveals the selected item in the system file manager.<br/>\nKeymap Name: <code>project_panel::RevealInFileManager</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select next diagnostic</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next entry with diagnostics.<br/>\nKeymap Name: <code>project_panel::SelectNextDiagnostic</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select next directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next directory.<br/>\nKeymap Name: <code>project_panel::SelectNextDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select next git entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next entry with git changes.<br/>\nKeymap Name: <code>project_panel::SelectNextGitEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select parent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the parent directory.<br/>\nKeymap Name: <code>project_panel::SelectParent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select prev diagnostic</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous entry with diagnostics.<br/>\nKeymap Name: <code>project_panel::SelectPrevDiagnostic</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select prev directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous directory.<br/>\nKeymap Name: <code>project_panel::SelectPrevDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: select prev git entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous entry with git changes.<br/>\nKeymap Name: <code>project_panel::SelectPrevGitEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the project panel.<br/>\nKeymap Name: <code>project_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: toggle hide git ignore</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles visibility of git-ignored files.<br/>\nKeymap Name: <code>project_panel::ToggleHideGitIgnore</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: trash</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the selected file or directory to the system trash.<br/>\nKeymap Name: <code>project_panel::Trash</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project panel: unfold directory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUnfolds the selected directory.<br/>\nKeymap Name: <code>project_panel::UnfoldDirectory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project search: next field</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next input field.<br/>\nKeymap Name: <code>project_search::NextField</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project search: search in new</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSearches in a new project search tab.<br/>\nKeymap Name: <code>project_search::SearchInNew</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project search: toggle filters</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the search filters panel.<br/>\nKeymap Name: <code>project_search::ToggleFilters</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project search: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus between the search bar and the search results.<br/>\nKeymap Name: <code>project_search::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>project symbols: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the project symbols search.<br/>\nKeymap Name: <code>project_symbols::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>projects: open recent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the recent projects interface.<br/>\nKeymap Name: <code>projects::OpenRecent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>projects: open remote</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a project from a selected template.<br/>\nKeymap Name: <code>projects::OpenRemote</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: clear outputs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears all outputs in the REPL.<br/>\nKeymap Name: <code>repl::ClearOutputs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: interrupt</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInterrupts the currently running kernel.<br/>\nKeymap Name: <code>repl::Interrupt</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: refresh kernelspecs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRefreshes the list of available kernelspecs.<br/>\nKeymap Name: <code>repl::RefreshKernelspecs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: restart</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestarts the current kernel.<br/>\nKeymap Name: <code>repl::Restart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: run</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns the current cell and advances to the next one.<br/>\nKeymap Name: <code>repl::Run</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: run in place</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns the current cell without advancing.<br/>\nKeymap Name: <code>repl::RunInPlace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: sessions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the REPL sessions panel.<br/>\nKeymap Name: <code>repl::Sessions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>repl: shutdown</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShuts down the current kernel.<br/>\nKeymap Name: <code>repl::Shutdown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>rules library: delete rule</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the selected rule.<br/>\nKeymap Name: <code>rules_library::DeleteRule</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>rules library: duplicate rule</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDuplicates the selected rule.<br/>\nKeymap Name: <code>rules_library::DuplicateRule</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>rules library: new rule</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new rule in the rules library.<br/>\nKeymap Name: <code>rules_library::NewRule</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>rules library: toggle default rule</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles whether the selected rule is a default rule.<br/>\nKeymap Name: <code>rules_library::ToggleDefaultRule</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: cycle mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCycles through search modes.<br/>\nKeymap Name: <code>search::CycleMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: focus search</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the search input field.<br/>\nKeymap Name: <code>search::FocusSearch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: next history query</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next query in search history.<br/>\nKeymap Name: <code>search::NextHistoryQuery</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: previous history query</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous query in search history.<br/>\nKeymap Name: <code>search::PreviousHistoryQuery</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: replace all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReplaces all matches.<br/>\nKeymap Name: <code>search::ReplaceAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: replace next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReplaces the next match.<br/>\nKeymap Name: <code>search::ReplaceNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: select all matches</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects all search matches.<br/>\nKeymap Name: <code>search::SelectAllMatches</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: select next match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next search match.<br/>\nKeymap Name: <code>search::SelectNextMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: select previous match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous search match.<br/>\nKeymap Name: <code>search::SelectPreviousMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle case sensitive</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles case-sensitive search.<br/>\nKeymap Name: <code>search::ToggleCaseSensitive</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle include ignored</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles searching in ignored files.<br/>\nKeymap Name: <code>search::ToggleIncludeIgnored</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle regex</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles regular expression mode.<br/>\nKeymap Name: <code>search::ToggleRegex</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the replace interface.<br/>\nKeymap Name: <code>search::ToggleReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles searching within selection only.<br/>\nKeymap Name: <code>search::ToggleSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>search: toggle whole word</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles whole word matching.<br/>\nKeymap Name: <code>search::ToggleWholeWord</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>settings profile selector: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>settings_profile_selector::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>snippets: configure snippets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the snippets configuration file.<br/>\nKeymap Name: <code>snippets::ConfigureSnippets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>snippets: open folder</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the snippets folder in the file manager.<br/>\nKeymap Name: <code>snippets::OpenFolder</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>supermaven: sign out</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSigns out of Supermaven.<br/>\nKeymap Name: <code>supermaven::SignOut</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>svg: open following preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a following SVG preview that syncs with the editor.<br/>\nKeymap Name: <code>svg::OpenFollowingPreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>svg: open preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens an SVG preview for the current file.<br/>\nKeymap Name: <code>svg::OpenPreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>svg: open preview to the side</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens an SVG preview in a split pane.<br/>\nKeymap Name: <code>svg::OpenPreviewToTheSide</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>syntax tree view: use active editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUpdate the syntax tree view to show the last focused file.<br/>\nKeymap Name: <code>syntax_tree_view::UseActiveEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>tab switcher: close selected item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses the selected item in the tab switcher.<br/>\nKeymap Name: <code>tab_switcher::CloseSelectedItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>tab switcher: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the tab switcher interface.<br/>\nKeymap Name: <code>tab_switcher::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>tab switcher: toggle all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles between showing all tabs or just the current pane's tabs.<br/>\nKeymap Name: <code>tab_switcher::ToggleAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>task: rerun</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReruns the last task.<br/>\nKeymap Name: <code>task::Rerun</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>task: spawn</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSpawns a task with name or opens tasks modal.<br/>\nKeymap Name: <code>task::Spawn</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: clear</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears the terminal screen.<br/>\nKeymap Name: <code>terminal::Clear</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: copy</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies selected text to the clipboard.<br/>\nKeymap Name: <code>terminal::Copy</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: paste</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPastes from the clipboard.<br/>\nKeymap Name: <code>terminal::Paste</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: rerun task</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReruns the last executed task in the terminal.<br/>\nKeymap Name: <code>terminal::RerunTask</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll half page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by half a page.<br/>\nKeymap Name: <code>terminal::ScrollHalfPageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll half page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by half a page.<br/>\nKeymap Name: <code>terminal::ScrollHalfPageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll line down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one line.<br/>\nKeymap Name: <code>terminal::ScrollLineDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll line up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one line.<br/>\nKeymap Name: <code>terminal::ScrollLineUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one page.<br/>\nKeymap Name: <code>terminal::ScrollPageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one page.<br/>\nKeymap Name: <code>terminal::ScrollPageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll to bottom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls to the bottom of the terminal buffer.<br/>\nKeymap Name: <code>terminal::ScrollToBottom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: scroll to top</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls to the top of the terminal buffer.<br/>\nKeymap Name: <code>terminal::ScrollToTop</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: search test</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSearches for text in the terminal.<br/>\nKeymap Name: <code>terminal::SearchTest</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: select all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects all text in the terminal.<br/>\nKeymap Name: <code>terminal::SelectAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: send keystroke</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSends a keystroke sequence to the terminal.<br/>\nKeymap Name: <code>terminal::SendKeystroke</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: send text</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSends the specified text directly to the terminal.<br/>\nKeymap Name: <code>terminal::SendText</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: show character palette</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the character palette for special characters.<br/>\nKeymap Name: <code>terminal::ShowCharacterPalette</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal: toggle vi mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles vi mode in the terminal.<br/>\nKeymap Name: <code>terminal::ToggleViMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal panel: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the terminal panel.<br/>\nKeymap Name: <code>terminal_panel::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>terminal panel: toggle focus</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles focus on the terminal panel.<br/>\nKeymap Name: <code>terminal_panel::ToggleFocus</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>theme selector: reload</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReloads all themes from disk.<br/>\nKeymap Name: <code>theme_selector::Reload</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>theme selector: toggle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the theme selector interface.<br/>\nKeymap Name: <code>theme_selector::Toggle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>toast: run action</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRuns the action associated with a toast notification.<br/>\nKeymap Name: <code>toast::RunAction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>toolchain: add toolchain</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a new toolchain for the current project.<br/>\nKeymap Name: <code>toolchain::AddToolchain</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>toolchain: select</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a toolchain for the current project.<br/>\nKeymap Name: <code>toolchain::Select</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: add watch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds the selected variable to the watch list.<br/>\nKeymap Name: <code>variable_list::AddWatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: collapse selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapses the selected variable entry to hide its children.<br/>\nKeymap Name: <code>variable_list::CollapseSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: copy variable name</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the variable name to the clipboard.<br/>\nKeymap Name: <code>variable_list::CopyVariableName</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: copy variable value</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies the variable value to the clipboard.<br/>\nKeymap Name: <code>variable_list::CopyVariableValue</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: edit variable</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEdits the value of the selected variable.<br/>\nKeymap Name: <code>variable_list::EditVariable</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: expand selected entry</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExpands the selected variable entry to show its children.<br/>\nKeymap Name: <code>variable_list::ExpandSelectedEntry</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: go to memory</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJump to variable's memory location.<br/>\nKeymap Name: <code>variable_list::GoToMemory</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>variable list: remove watch</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRemoves the selected variable from the watch list.<br/>\nKeymap Name: <code>variable_list::RemoveWatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: angle brackets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within angle brackets.<br/>\nKeymap Name: <code>vim::AngleBrackets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: any brackets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within any type of brackets.<br/>\nKeymap Name: <code>vim::AnyBrackets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: any quotes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within any type of quotes.<br/>\nKeymap Name: <code>vim::AnyQuotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: argument</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a function argument.<br/>\nKeymap Name: <code>vim::Argument</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: argument required</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIndicates that an argument is required for the command.<br/>\nKeymap Name: <code>vim::ArgumentRequired</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: auto indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAutomatically adjusts indentation based on syntax.<br/>\nKeymap Name: <code>vim::AutoIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: back quotes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within backticks.<br/>\nKeymap Name: <code>vim::BackQuotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: change case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the case of selected text.<br/>\nKeymap Name: <code>vim::ChangeCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: change list newer</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to a newer position in the change list.<br/>\nKeymap Name: <code>vim::ChangeListNewer</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: change list older</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to an older position in the change list.<br/>\nKeymap Name: <code>vim::ChangeListOlder</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: change to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nChanges from cursor to end of line.<br/>\nKeymap Name: <code>vim::ChangeToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: class</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a class definition.<br/>\nKeymap Name: <code>vim::Class</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: clear exchange</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears the exchange register.<br/>\nKeymap Name: <code>vim::ClearExchange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: clear operators</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears any pending operators.<br/>\nKeymap Name: <code>vim::ClearOperators</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: column left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls left by one column.<br/>\nKeymap Name: <code>vim::ColumnLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: column right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls right by one column.<br/>\nKeymap Name: <code>vim::ColumnRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: comment</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a comment block.<br/>\nKeymap Name: <code>vim::Comment</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: convert to lower case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to lowercase.<br/>\nKeymap Name: <code>vim::ConvertToLowerCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: convert to rot13</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT13 cipher to selected text.<br/>\nKeymap Name: <code>vim::ConvertToRot13</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: convert to rot47</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT47 cipher to selected text.<br/>\nKeymap Name: <code>vim::ConvertToRot47</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: convert to upper case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts selected text to uppercase.<br/>\nKeymap Name: <code>vim::ConvertToUpperCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: count command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExecutes a command with a count prefix.<br/>\nKeymap Name: <code>vim::CountCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: curly brackets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within curly brackets.<br/>\nKeymap Name: <code>vim::CurlyBrackets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: current line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the current line.<br/>\nKeymap Name: <code>vim::CurrentLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: decrement</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecrements the number under the cursor or toggles boolean values.<br/>\nKeymap Name: <code>vim::Decrement</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: delete left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes character to the left.<br/>\nKeymap Name: <code>vim::DeleteLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: delete right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes character to the right.<br/>\nKeymap Name: <code>vim::DeleteRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: delete to end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes from cursor to end of line.<br/>\nKeymap Name: <code>vim::DeleteToEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: double quotes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within double quotes.<br/>\nKeymap Name: <code>vim::DoubleQuotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor down by the specified number of lines.<br/>\nKeymap Name: <code>vim::Down</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: end of document</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the document.<br/>\nKeymap Name: <code>vim::EndOfDocument</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the current line.<br/>\nKeymap Name: <code>vim::EndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: end of line downward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of a line downward.<br/>\nKeymap Name: <code>vim::EndOfLineDownward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: end of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the paragraph.<br/>\nKeymap Name: <code>vim::EndOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: end repeat</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nEnds the repeat recording.<br/>\nKeymap Name: <code>vim::EndRepeat</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: enter</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a newline.<br/>\nKeymap Name: <code>vim::Enter</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: entire file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the entire file.<br/>\nKeymap Name: <code>vim::EntireFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: exchange</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExchanges text regions.<br/>\nKeymap Name: <code>vim::Exchange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: find command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExecutes a find command to search for patterns in the buffer.<br/>\nKeymap Name: <code>vim::FindCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: first non whitespace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the first non-whitespace character on the current line.<br/>\nKeymap Name: <code>vim::FirstNonWhitespace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: go to column</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to a specific column number.<br/>\nKeymap Name: <code>vim::GoToColumn</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: go to percentage</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to a percentage position in the file.<br/>\nKeymap Name: <code>vim::GoToPercentage</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: half page left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls left by half a page's width.<br/>\nKeymap Name: <code>vim::HalfPageLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: half page right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls right by half a page's width.<br/>\nKeymap Name: <code>vim::HalfPageRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix append</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAppends at the end of the selection.<br/>\nKeymap Name: <code>vim::HelixAppend</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix collapse selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCollapse the current selection<br/>\nKeymap Name: <code>vim::HelixCollapseSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix delete</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes using Helix-style behavior.<br/>\nKeymap Name: <code>vim::HelixDelete</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix goto last modification</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nGoes to the location of the last modification.<br/>\nKeymap Name: <code>vim::HelixGotoLastModification</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix insert</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the beginning of the selection.<br/>\nKeymap Name: <code>vim::HelixInsert</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix normal after</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to normal mode after the cursor (Helix-style).<br/>\nKeymap Name: <code>vim::HelixNormalAfter</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix select line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelect entire line or multiple lines, extending downwards.<br/>\nKeymap Name: <code>vim::HelixSelectLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: helix yank</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks the current selection or character if no selection.<br/>\nKeymap Name: <code>vim::HelixYank</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: increment</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncrements the number under the cursor or toggles boolean values.<br/>\nKeymap Name: <code>vim::Increment</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases indentation of selected lines.<br/>\nKeymap Name: <code>vim::Indent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: indent obj</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text at the same indentation level.<br/>\nKeymap Name: <code>vim::IndentObj</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: inner object</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects inner text object.<br/>\nKeymap Name: <code>vim::InnerObject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert after</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts text after the cursor.<br/>\nKeymap Name: <code>vim::InsertAfter</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert at previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the previous insert position.<br/>\nKeymap Name: <code>vim::InsertAtPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert before</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts text before the cursor.<br/>\nKeymap Name: <code>vim::InsertBefore</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert empty line above</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts an empty line above without entering insert mode.<br/>\nKeymap Name: <code>vim::InsertEmptyLineAbove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert empty line below</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts an empty line below without entering insert mode.<br/>\nKeymap Name: <code>vim::InsertEmptyLineBelow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the end of the line.<br/>\nKeymap Name: <code>vim::InsertEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert first non whitespace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the first non-whitespace character.<br/>\nKeymap Name: <code>vim::InsertFirstNonWhitespace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert from above</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts the next character from the line above into the current line.<br/>\nKeymap Name: <code>vim::InsertFromAbove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert from below</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts the next character from the line below into the current line.<br/>\nKeymap Name: <code>vim::InsertFromBelow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert line above</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a new line above the current line.<br/>\nKeymap Name: <code>vim::InsertLineAbove</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: insert line below</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a new line below the current line.<br/>\nKeymap Name: <code>vim::InsertLineBelow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: join lines</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJoins the current line with the next line.<br/>\nKeymap Name: <code>vim::JoinLines</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: join lines no whitespace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nJoins lines without adding whitespace.<br/>\nKeymap Name: <code>vim::JoinLinesNoWhitespace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor left one character.<br/>\nKeymap Name: <code>vim::Left</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: line down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one line.<br/>\nKeymap Name: <code>vim::LineDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: line up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one line.<br/>\nKeymap Name: <code>vim::LineUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: literal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::Literal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: matching</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the matching bracket or delimiter.<br/>\nKeymap Name: <code>vim::Matching</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: maximize pane</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMaximizes the current pane.<br/>\nKeymap Name: <code>vim::MaximizePane</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: method</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a method or function.<br/>\nKeymap Name: <code>vim::Method</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: middle of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the middle of the current line.<br/>\nKeymap Name: <code>vim::MiddleOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: mini brackets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within the nearest brackets.<br/>\nKeymap Name: <code>vim::MiniBrackets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: mini quotes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within the nearest quotes (single or double).<br/>\nKeymap Name: <code>vim::MiniQuotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: move to next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next search match.<br/>\nKeymap Name: <code>vim::MoveToNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: move to next match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next search match.<br/>\nKeymap Name: <code>vim::MoveToNextMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: move to previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous search match.<br/>\nKeymap Name: <code>vim::MoveToPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: move to previous match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous search match.<br/>\nKeymap Name: <code>vim::MoveToPreviousMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next comment</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next comment.<br/>\nKeymap Name: <code>vim::NextComment</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next greater indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next line with greater indentation.<br/>\nKeymap Name: <code>vim::NextGreaterIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next lesser indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next line with lesser indentation.<br/>\nKeymap Name: <code>vim::NextLesserIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next line start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next line.<br/>\nKeymap Name: <code>vim::NextLineStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next method end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the next method.<br/>\nKeymap Name: <code>vim::NextMethodEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next method start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next method.<br/>\nKeymap Name: <code>vim::NextMethodStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next same indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the next line with the same indentation.<br/>\nKeymap Name: <code>vim::NextSameIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next section end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the next section.<br/>\nKeymap Name: <code>vim::NextSectionEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next section start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next section.<br/>\nKeymap Name: <code>vim::NextSectionStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next subword end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the next subword.<br/>\nKeymap Name: <code>vim::NextSubwordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next subword start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next subword.<br/>\nKeymap Name: <code>vim::NextSubwordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next word end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the next word.<br/>\nKeymap Name: <code>vim::NextWordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: next word start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next word.<br/>\nKeymap Name: <code>vim::NextWordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: normal before</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to normal mode with cursor positioned before the current character.<br/>\nKeymap Name: <code>vim::NormalBefore</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: number</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNumber is used to manage vim's count. Pushing a digit\nmultiplies the current value by 10 and adds the digit.<br/>\nKeymap Name: <code>vim::Number</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: open default keymap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the default keymap file.<br/>\nKeymap Name: <code>vim::OpenDefaultKeymap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: other end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the other end of the selection.<br/>\nKeymap Name: <code>vim::OtherEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: other end row aware</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor to the other end of the selection (row-aware).<br/>\nKeymap Name: <code>vim::OtherEndRowAware</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: outdent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases indentation of selected lines.<br/>\nKeymap Name: <code>vim::Outdent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: page down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by one page.<br/>\nKeymap Name: <code>vim::PageDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: page up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by one page.<br/>\nKeymap Name: <code>vim::PageUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a paragraph text object.<br/>\nKeymap Name: <code>vim::Paragraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: parentheses</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within parentheses.<br/>\nKeymap Name: <code>vim::Parentheses</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: paste</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPastes text from the specified register at the cursor position.<br/>\nKeymap Name: <code>vim::Paste</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous comment</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous comment.<br/>\nKeymap Name: <code>vim::PreviousComment</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous greater indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous line with greater indentation.<br/>\nKeymap Name: <code>vim::PreviousGreaterIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous lesser indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous line with lesser indentation.<br/>\nKeymap Name: <code>vim::PreviousLesserIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous line start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous line.<br/>\nKeymap Name: <code>vim::PreviousLineStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous method end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the previous method.<br/>\nKeymap Name: <code>vim::PreviousMethodEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous method start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous method.<br/>\nKeymap Name: <code>vim::PreviousMethodStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous same indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the previous line with the same indentation.<br/>\nKeymap Name: <code>vim::PreviousSameIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous section end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the previous section.<br/>\nKeymap Name: <code>vim::PreviousSectionEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous section start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous section.<br/>\nKeymap Name: <code>vim::PreviousSectionStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous subword end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the previous subword.<br/>\nKeymap Name: <code>vim::PreviousSubwordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous subword start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous subword.<br/>\nKeymap Name: <code>vim::PreviousSubwordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous word end</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the end of the previous word.<br/>\nKeymap Name: <code>vim::PreviousWordEnd</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: previous word start</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous word.<br/>\nKeymap Name: <code>vim::PreviousWordStart</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push add surrounds</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushAddSurrounds</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push auto indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts an auto-indent operation.<br/>\nKeymap Name: <code>vim::PushAutoIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push change</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a change operation.<br/>\nKeymap Name: <code>vim::PushChange</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push change surrounds</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushChangeSurrounds</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push delete</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a delete operation.<br/>\nKeymap Name: <code>vim::PushDelete</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push delete surrounds</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes surrounding characters.<br/>\nKeymap Name: <code>vim::PushDeleteSurrounds</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push digraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushDigraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push find backward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushFindBackward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push find forward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushFindForward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push forced motion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a forced motion.<br/>\nKeymap Name: <code>vim::PushForcedMotion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push indent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts an indent operation.<br/>\nKeymap Name: <code>vim::PushIndent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push jump</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushJump</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push literal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushLiteral</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push lowercase</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts to lowercase.<br/>\nKeymap Name: <code>vim::PushLowercase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push mark</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSets a mark at the current position.<br/>\nKeymap Name: <code>vim::PushMark</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push object</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushObject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push opposite case</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles case.<br/>\nKeymap Name: <code>vim::PushOppositeCase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push outdent</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts an outdent operation.<br/>\nKeymap Name: <code>vim::PushOutdent</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push record register</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts recording to a register.<br/>\nKeymap Name: <code>vim::PushRecordRegister</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push register</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a register.<br/>\nKeymap Name: <code>vim::PushRegister</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a replace operation.<br/>\nKeymap Name: <code>vim::PushReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push replace with register</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReplaces with register contents.<br/>\nKeymap Name: <code>vim::PushReplaceWithRegister</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push replay register</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReplays a register.<br/>\nKeymap Name: <code>vim::PushReplayRegister</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push rewrap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a rewrap operation.<br/>\nKeymap Name: <code>vim::PushRewrap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push rot13</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT13 encoding.<br/>\nKeymap Name: <code>vim::PushRot13</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push rot47</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nApplies ROT47 encoding.<br/>\nKeymap Name: <code>vim::PushRot47</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push shell command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a shell command operation.<br/>\nKeymap Name: <code>vim::PushShellCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push sneak</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushSneak</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push sneak backward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::PushSneakBackward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push toggle comments</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles comments.<br/>\nKeymap Name: <code>vim::PushToggleComments</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push uppercase</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nConverts to uppercase.<br/>\nKeymap Name: <code>vim::PushUppercase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: push yank</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStarts a yank operation.<br/>\nKeymap Name: <code>vim::PushYank</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: quotes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within single quotes.<br/>\nKeymap Name: <code>vim::Quotes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: redo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRedoes the last undone change.<br/>\nKeymap Name: <code>vim::Redo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: repeat</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRepeats the last change.<br/>\nKeymap Name: <code>vim::Repeat</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: repeat find</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRepeats the last character find.<br/>\nKeymap Name: <code>vim::RepeatFind</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: repeat find reversed</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRepeats the last character find in reverse.<br/>\nKeymap Name: <code>vim::RepeatFindReversed</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: replay last recording</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReplays the last recorded macro.<br/>\nKeymap Name: <code>vim::ReplayLastRecording</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: reset pane sizes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets all pane sizes to default.<br/>\nKeymap Name: <code>vim::ResetPaneSizes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: resize pane down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResizes the pane downward.<br/>\nKeymap Name: <code>vim::ResizePaneDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: resize pane left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResizes the pane to the left.<br/>\nKeymap Name: <code>vim::ResizePaneLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: resize pane right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResizes the pane to the right.<br/>\nKeymap Name: <code>vim::ResizePaneRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: resize pane up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResizes the pane upward.<br/>\nKeymap Name: <code>vim::ResizePaneUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: restore visual selection</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestores the previous visual selection.<br/>\nKeymap Name: <code>vim::RestoreVisualSelection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: rewrap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRewraps the selected text to fit within the line width.<br/>\nKeymap Name: <code>vim::Rewrap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor right one character.<br/>\nKeymap Name: <code>vim::Right</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: scroll down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls down by half a page.<br/>\nKeymap Name: <code>vim::ScrollDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: scroll up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nScrolls up by half a page.<br/>\nKeymap Name: <code>vim::ScrollUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: search</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInitiates a search operation with the specified parameters.<br/>\nKeymap Name: <code>vim::Search</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: search submit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSubmits the current search query.<br/>\nKeymap Name: <code>vim::SearchSubmit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select larger syntax node</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next larger syntax node.<br/>\nKeymap Name: <code>vim::SelectLargerSyntaxNode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select next</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next occurrence of the current selection.<br/>\nKeymap Name: <code>vim::SelectNext</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select next match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next match of the current selection.<br/>\nKeymap Name: <code>vim::SelectNextMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select previous</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous occurrence of the current selection.<br/>\nKeymap Name: <code>vim::SelectPrevious</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select previous match</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the previous match of the current selection.<br/>\nKeymap Name: <code>vim::SelectPreviousMatch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select register</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>vim::SelectRegister</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: select smaller syntax node</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects the next smaller syntax node.<br/>\nKeymap Name: <code>vim::SelectSmallerSyntaxNode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: sentence</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a sentence text object.<br/>\nKeymap Name: <code>vim::Sentence</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: sentence backward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the previous sentence.<br/>\nKeymap Name: <code>vim::SentenceBackward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: sentence forward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the next sentence.<br/>\nKeymap Name: <code>vim::SentenceForward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: shell command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExecutes a shell command.<br/>\nKeymap Name: <code>vim::ShellCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: show location</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows the current location in the file.<br/>\nKeymap Name: <code>vim::ShowLocation</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: square brackets</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within square brackets.<br/>\nKeymap Name: <code>vim::SquareBrackets</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: start of document</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the document.<br/>\nKeymap Name: <code>vim::StartOfDocument</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: start of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the current line.<br/>\nKeymap Name: <code>vim::StartOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: start of line downward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of a line downward.<br/>\nKeymap Name: <code>vim::StartOfLineDownward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: start of paragraph</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the start of the paragraph.<br/>\nKeymap Name: <code>vim::StartOfParagraph</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: substitute</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSubstitutes characters in the current selection.<br/>\nKeymap Name: <code>vim::Substitute</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: substitute line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSubstitutes the entire line.<br/>\nKeymap Name: <code>vim::SubstituteLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: subword</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a subword text object.<br/>\nKeymap Name: <code>vim::Subword</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to helix normal mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to Helix-style normal mode.<br/>\nKeymap Name: <code>vim::SwitchToHelixNormalMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to insert mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to insert mode.<br/>\nKeymap Name: <code>vim::SwitchToInsertMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to normal mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to normal mode.<br/>\nKeymap Name: <code>vim::SwitchToNormalMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to replace mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to replace mode.<br/>\nKeymap Name: <code>vim::SwitchToReplaceMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to visual block mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to visual block mode.<br/>\nKeymap Name: <code>vim::SwitchToVisualBlockMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to visual line mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to visual line mode.<br/>\nKeymap Name: <code>vim::SwitchToVisualLineMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: switch to visual mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to visual mode.<br/>\nKeymap Name: <code>vim::SwitchToVisualMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts a tab character.<br/>\nKeymap Name: <code>vim::Tab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: tag</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects an HTML/XML tag.<br/>\nKeymap Name: <code>vim::Tag</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: temporary normal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nTemporarily switches to normal mode for one command.<br/>\nKeymap Name: <code>vim::TemporaryNormal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle comments</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles comments for selected lines.<br/>\nKeymap Name: <code>vim::ToggleComments</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle marks view</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the marks view.<br/>\nKeymap Name: <code>vim::ToggleMarksView</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle record</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles macro recording.<br/>\nKeymap Name: <code>vim::ToggleRecord</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle registers view</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the registers view.<br/>\nKeymap Name: <code>vim::ToggleRegistersView</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles replace mode.<br/>\nKeymap Name: <code>vim::ToggleReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle visual</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles visual mode.<br/>\nKeymap Name: <code>vim::ToggleVisual</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle visual block</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles visual block mode.<br/>\nKeymap Name: <code>vim::ToggleVisualBlock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: toggle visual line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles visual line mode.<br/>\nKeymap Name: <code>vim::ToggleVisualLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: undo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes the last change.<br/>\nKeymap Name: <code>vim::Undo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: undo last line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes all changes to the most recently changed line.<br/>\nKeymap Name: <code>vim::UndoLastLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: undo replace</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nUndoes the last replacement.<br/>\nKeymap Name: <code>vim::UndoReplace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: unmatched backward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinds the previous unmatched bracket or delimiter.<br/>\nKeymap Name: <code>vim::UnmatchedBackward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: unmatched forward</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFinds the next unmatched bracket or delimiter.<br/>\nKeymap Name: <code>vim::UnmatchedForward</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor up by the specified number of lines.<br/>\nKeymap Name: <code>vim::Up</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: vertical bars</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects text within vertical bars (pipes).<br/>\nKeymap Name: <code>vim::VerticalBars</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual command</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nExecutes a command in visual mode.<br/>\nKeymap Name: <code>vim::VisualCommand</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual delete</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes the visual selection.<br/>\nKeymap Name: <code>vim::VisualDelete</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual delete line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDeletes entire lines in visual selection.<br/>\nKeymap Name: <code>vim::VisualDeleteLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual insert end of line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the end of each line in visual selection.<br/>\nKeymap Name: <code>vim::VisualInsertEndOfLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual insert first non white space</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInserts at the first non-whitespace character of each line.<br/>\nKeymap Name: <code>vim::VisualInsertFirstNonWhiteSpace</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual yank</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks (copies) the visual selection.<br/>\nKeymap Name: <code>vim::VisualYank</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: visual yank line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks entire lines in visual selection.<br/>\nKeymap Name: <code>vim::VisualYankLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: window bottom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the bottom of the window.<br/>\nKeymap Name: <code>vim::WindowBottom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: window middle</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the middle of the window.<br/>\nKeymap Name: <code>vim::WindowMiddle</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: window top</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves to the top of the window.<br/>\nKeymap Name: <code>vim::WindowTop</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: word</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSelects a word text object.<br/>\nKeymap Name: <code>vim::Word</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: wrapping left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor left one character, wrapping to previous line.<br/>\nKeymap Name: <code>vim::WrappingLeft</code><br/>\nDeprecated Aliases:<code>vim::Backspace</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: wrapping right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves cursor right one character, wrapping to next line.<br/>\nKeymap Name: <code>vim::WrappingRight</code><br/>\nDeprecated Aliases:<code>vim::Space</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: yank</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks (copies) the selected text.<br/>\nKeymap Name: <code>vim::Yank</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>vim: yank line</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nYanks the entire line.<br/>\nKeymap Name: <code>vim::YankLine</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>window: merge all windows</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>window::MergeAllWindows</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>window: move tab to new window</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>window::MoveTabToNewWindow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>window: show next window tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>window::ShowNextWindowTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>window: show previous window tab</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>window::ShowPreviousWindowTab</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate next pane</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the next pane in the workspace.<br/>\nKeymap Name: <code>workspace::ActivateNextPane</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate next window</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to the next window.<br/>\nKeymap Name: <code>workspace::ActivateNextWindow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate pane</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates a specific pane by its index.<br/>\nKeymap Name: <code>workspace::ActivatePane</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate pane down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the pane below.<br/>\nKeymap Name: <code>workspace::ActivatePaneDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate pane left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the pane to the left.<br/>\nKeymap Name: <code>workspace::ActivatePaneLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate pane right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the pane to the right.<br/>\nKeymap Name: <code>workspace::ActivatePaneRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate pane up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the pane above.<br/>\nKeymap Name: <code>workspace::ActivatePaneUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate previous pane</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nActivates the previous pane in the workspace.<br/>\nKeymap Name: <code>workspace::ActivatePreviousPane</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: activate previous window</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwitches to the previous window.<br/>\nKeymap Name: <code>workspace::ActivatePreviousWindow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: add folder to project</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAdds a folder to the current project.<br/>\nKeymap Name: <code>workspace::AddFolderToProject</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: clear all notifications</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nClears all notifications.<br/>\nKeymap Name: <code>workspace::ClearAllNotifications</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: close active dock</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses the active dock.<br/>\nKeymap Name: <code>workspace::CloseActiveDock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: close all docks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all docks.<br/>\nKeymap Name: <code>workspace::CloseAllDocks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: close all items and panes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all items and panes in the workspace.<br/>\nKeymap Name: <code>workspace::CloseAllItemsAndPanes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: close inactive tabs and panes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses all inactive tabs and panes in the workspace.<br/>\nKeymap Name: <code>workspace::CloseInactiveTabsAndPanes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: close window</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCloses the current window.<br/>\nKeymap Name: <code>workspace::CloseWindow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: copy path</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>workspace::CopyPath</code><br/>\nDeprecated Aliases:<code>editor::CopyPath</code>, <code>outline_panel::CopyPath</code>, <code>project_panel::CopyPath</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: copy relative path</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nKeymap Name: <code>workspace::CopyRelativePath</code><br/>\nDeprecated Aliases:<code>editor::CopyRelativePath</code>, <code>outline_panel::CopyRelativePath</code>, <code>project_panel::CopyRelativePath</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: decrease active dock size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases size of a currently focused dock by a given amount of pixels.<br/>\nKeymap Name: <code>workspace::DecreaseActiveDockSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: decrease open docks size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases size of all currently visible docks uniformly, by a given amount of pixels.<br/>\nKeymap Name: <code>workspace::DecreaseOpenDocksSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: feedback</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the feedback dialog.<br/>\nKeymap Name: <code>workspace::Feedback</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: follow next collaborator</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFollows the next collaborator in the session.<br/>\nKeymap Name: <code>workspace::FollowNextCollaborator</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: increase active dock size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases size of a currently focused dock by a given amount of pixels.<br/>\nKeymap Name: <code>workspace::IncreaseActiveDockSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: increase open docks size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases size of all currently visible docks uniformly, by a given amount of pixels.<br/>\nKeymap Name: <code>workspace::IncreaseOpenDocksSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: move focused panel to next position</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves the focused panel to the next position.<br/>\nKeymap Name: <code>workspace::MoveFocusedPanelToNextPosition</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: move item to pane</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves an item to a specific pane by index.<br/>\nKeymap Name: <code>workspace::MoveItemToPane</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: move item to pane in direction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMoves an item to a pane in the specified direction.<br/>\nKeymap Name: <code>workspace::MoveItemToPaneInDirection</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new center terminal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a new terminal in the center.<br/>\nKeymap Name: <code>workspace::NewCenterTerminal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new file</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new file.<br/>\nKeymap Name: <code>workspace::NewFile</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new file split horizontal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new file in a horizontal split.<br/>\nKeymap Name: <code>workspace::NewFileSplitHorizontal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new file split vertical</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCreates a new file in a vertical split.<br/>\nKeymap Name: <code>workspace::NewFileSplitVertical</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new search</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a new search.<br/>\nKeymap Name: <code>workspace::NewSearch</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new terminal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a new terminal.<br/>\nKeymap Name: <code>workspace::NewTerminal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: new window</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a new window.<br/>\nKeymap Name: <code>workspace::NewWindow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a file or directory.<br/>\nKeymap Name: <code>workspace::Open</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open component preview</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the component preview.<br/>\nKeymap Name: <code>workspace::OpenComponentPreview</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open files</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens multiple files.<br/>\nKeymap Name: <code>workspace::OpenFiles</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open in terminal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the current location in terminal.<br/>\nKeymap Name: <code>workspace::OpenInTerminal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open terminal</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a new terminal with the specified working directory.<br/>\nKeymap Name: <code>workspace::OpenTerminal</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: open with system</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the selected file with the system's default application.<br/>\nKeymap Name: <code>workspace::OpenWithSystem</code><br/>\nDeprecated Aliases:<code>project_panel::OpenWithSystem</code>, \n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: reload</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReloads the application<br/>\nKeymap Name: <code>workspace::Reload</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: reload active item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReloads the active item.<br/>\nKeymap Name: <code>workspace::ReloadActiveItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: reset active dock size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the active dock to its default size.<br/>\nKeymap Name: <code>workspace::ResetActiveDockSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: reset open docks size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets all open docks to their default sizes.<br/>\nKeymap Name: <code>workspace::ResetOpenDocksSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: restore banner</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRestores the banner.<br/>\nKeymap Name: <code>workspace::RestoreBanner</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: save</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSaves the current file with the specified options.<br/>\nKeymap Name: <code>workspace::Save</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: save all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSaves all open files in the workspace.<br/>\nKeymap Name: <code>workspace::SaveAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: save as</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSaves the current file with a new name.<br/>\nKeymap Name: <code>workspace::SaveAs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: save without format</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSaves without formatting.<br/>\nKeymap Name: <code>workspace::SaveWithoutFormat</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: send keystrokes</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSends a sequence of keystrokes to the active element.<br/>\nKeymap Name: <code>workspace::SendKeystrokes</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: shutdown debug adapters</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShuts down all debug adapters.<br/>\nKeymap Name: <code>workspace::ShutdownDebugAdapters</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: suppress notification</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSuppresses the current notification.<br/>\nKeymap Name: <code>workspace::SuppressNotification</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: swap pane down</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current pane with the one below.<br/>\nKeymap Name: <code>workspace::SwapPaneDown</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: swap pane left</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current pane with the one to the left.<br/>\nKeymap Name: <code>workspace::SwapPaneLeft</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: swap pane right</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current pane with the one to the right.<br/>\nKeymap Name: <code>workspace::SwapPaneRight</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: swap pane up</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nSwaps the current pane with the one above.<br/>\nKeymap Name: <code>workspace::SwapPaneUp</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle bottom dock</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the bottom dock.<br/>\nKeymap Name: <code>workspace::ToggleBottomDock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle centered layout</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles centered layout mode.<br/>\nKeymap Name: <code>workspace::ToggleCenteredLayout</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle edit prediction</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles edit prediction feature globally for all files.<br/>\nKeymap Name: <code>workspace::ToggleEditPrediction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle expand item</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles expansion of the selected item.<br/>\nKeymap Name: <code>workspace::ToggleExpandItem</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle left dock</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the left dock.<br/>\nKeymap Name: <code>workspace::ToggleLeftDock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle right dock</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the right dock.<br/>\nKeymap Name: <code>workspace::ToggleRightDock</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle vim mode</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles Vim mode on or off.<br/>\nKeymap Name: <code>workspace::ToggleVimMode</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: toggle zoom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles zoom on the active pane.<br/>\nKeymap Name: <code>workspace::ToggleZoom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>workspace: unfollow</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nStops following a collaborator.<br/>\nKeymap Name: <code>workspace::Unfollow</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: about</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows information about Zed.<br/>\nKeymap Name: <code>zed::About</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: copy system specs into clipboard</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nCopies system specifications to the clipboard for bug reports.<br/>\nKeymap Name: <code>zed::CopySystemSpecsIntoClipboard</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: debug elements</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the element inspector for debugging UI.<br/>\nKeymap Name: <code>zed::DebugElements</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: decrease buffer font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases the font size in the editor buffer.<br/>\nKeymap Name: <code>zed::DecreaseBufferFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: decrease ui font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nDecreases the font size of the user interface.<br/>\nKeymap Name: <code>zed::DecreaseUiFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: email zed</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens email client to send feedback to Zed support.<br/>\nKeymap Name: <code>zed::EmailZed</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: extensions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the extensions management interface.<br/>\nKeymap Name: <code>zed::Extensions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: hide</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nHides the application window.<br/>\nKeymap Name: <code>zed::Hide</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: hide others</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nHides all other application windows.<br/>\nKeymap Name: <code>zed::HideOthers</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: import cursor settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nImports settings from Cursor editor.<br/>\nKeymap Name: <code>zed::ImportCursorSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: import vs code settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nImports settings from Visual Studio Code.<br/>\nKeymap Name: <code>zed::ImportVsCodeSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: increase buffer font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases the font size in the editor buffer.<br/>\nKeymap Name: <code>zed::IncreaseBufferFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: increase ui font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nIncreases the font size of the user interface.<br/>\nKeymap Name: <code>zed::IncreaseUiFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: install dev extension</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nInstalls an extension from a local directory for development.<br/>\nKeymap Name: <code>zed::InstallDevExtension</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: minimize</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nMinimizes the current window.<br/>\nKeymap Name: <code>zed::Minimize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: no action</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nAction with special handling which unbinds the keybinding this is associated with,\nif it is the highest precedence match.<br/>\nKeymap Name: <code>zed::NoAction</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open account settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens account settings.<br/>\nKeymap Name: <code>zed::OpenAccountSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open browser</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a URL in the system's default web browser.<br/>\nKeymap Name: <code>zed::OpenBrowser</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open debug tasks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens debug tasks configuration.<br/>\nKeymap Name: <code>zed::OpenDebugTasks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open default keymap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the default keymap file.<br/>\nKeymap Name: <code>zed::OpenDefaultKeymap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open default settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the default settings file.<br/>\nKeymap Name: <code>zed::OpenDefaultSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open docs</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the documentation website.<br/>\nKeymap Name: <code>zed::OpenDocs</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open keymap</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the user keymap file.<br/>\nKeymap Name: <code>zed::OpenKeymap</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open keymap editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the keymap editor.<br/>\nKeymap Name: <code>zed::OpenKeymapEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open licenses</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nViews open source licenses.<br/>\nKeymap Name: <code>zed::OpenLicenses</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open log</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the Zed log file.<br/>\nKeymap Name: <code>zed::OpenLog</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the onboarding view.<br/>\nKeymap Name: <code>zed::OpenOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open project settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens project-specific settings.<br/>\nKeymap Name: <code>zed::OpenProjectSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open project tasks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the project tasks configuration.<br/>\nKeymap Name: <code>zed::OpenProjectTasks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open server settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens server settings.<br/>\nKeymap Name: <code>zed::OpenServerSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open settings</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the settings editor.<br/>\nKeymap Name: <code>zed::OpenSettings</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open settings editor</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the settings editor.<br/>\nKeymap Name: <code>zed::OpenSettingsEditor</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open tasks</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the tasks panel.<br/>\nKeymap Name: <code>zed::OpenTasks</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open telemetry log</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the telemetry log.<br/>\nKeymap Name: <code>zed::OpenTelemetryLog</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open zed repo</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the Zed repository on GitHub.<br/>\nKeymap Name: <code>zed::OpenZedRepo</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: open zed url</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens a zed:// URL within the application.<br/>\nKeymap Name: <code>zed::OpenZedUrl</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: quit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nQuits the application.<br/>\nKeymap Name: <code>zed::Quit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: reload extensions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nReloads all installed extensions.<br/>\nKeymap Name: <code>zed::ReloadExtensions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: request feature</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the feature request form.<br/>\nKeymap Name: <code>zed::RequestFeature</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: reset buffer font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the buffer font size to the default value.<br/>\nKeymap Name: <code>zed::ResetBufferFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: reset database</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the application database.<br/>\nKeymap Name: <code>zed::ResetDatabase</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: reset ui font size</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nResets the UI font size to the default value.<br/>\nKeymap Name: <code>zed::ResetUiFontSize</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: show all</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShows all hidden windows.<br/>\nKeymap Name: <code>zed::ShowAll</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: show welcome</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nShow the Zed welcome screen<br/>\nKeymap Name: <code>zed::ShowWelcome</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: test crash</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nTriggers a hard crash for debugging.<br/>\nKeymap Name: <code>zed::TestCrash</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: test panic</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nTriggers a test panic for debugging.<br/>\nKeymap Name: <code>zed::TestPanic</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: toggle base keymap selector</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles the base keymap selector modal.<br/>\nKeymap Name: <code>zed::ToggleBaseKeymapSelector</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: toggle full screen</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nToggles fullscreen mode.<br/>\nKeymap Name: <code>zed::ToggleFullScreen</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed: zoom</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nZooms the window.<br/>\nKeymap Name: <code>zed::Zoom</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zed predict onboarding: open zed predict onboarding</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nOpens the Zed Predict onboarding modal.<br/>\nKeymap Name: <code>zed_predict_onboarding::OpenZedPredictOnboarding</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: focus completions</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nFocuses on the completions list.<br/>\nKeymap Name: <code>zeta::FocusCompletions</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: next edit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the next edit in the completion history.<br/>\nKeymap Name: <code>zeta::NextEdit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: preview completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nPreviews the selected completion.<br/>\nKeymap Name: <code>zeta::PreviewCompletion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: previous edit</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nNavigates to the previous edit in the completion history.<br/>\nKeymap Name: <code>zeta::PreviousEdit</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: thumbs down active completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRates the active completion with a thumbs down.<br/>\nKeymap Name: <code>zeta::ThumbsDownActiveCompletion</code><br/>\n</dd>\n<dt style=\"margin-top: 1.5em; margin-bottom: 0.5em; font-weight: bold;\"><code>zeta: thumbs up active completion</code></dt>\n<dd style=\"margin-left: 2em; margin-bottom: 1em;\">\nRates the active completion with a thumbs up.<br/>\nKeymap Name: <code>zeta::ThumbsUpActiveCompletion</code><br/>\n</dd>\n</dl>\n\n</main>",
    "content_text": "All Actions\n\nactivity indicator: show error message\n\nDisplays error messages from language servers in the status bar.\nKeymap Name: activity_indicator::ShowErrorMessage\n\nagent: accept suggested context\n\nAccepts the suggested context item.\nKeymap Name: agent::AcceptSuggestedContext\n\nagent: add context server\n\nAdds a context server to the configuration.\nKeymap Name: agent::AddContextServer\n\nagent: chat\n\nStarts a chat conversation with the agent.\nKeymap Name: agent::Chat\n\nagent: chat with follow\n\nStarts a chat conversation with follow-up enabled.\nKeymap Name: agent::ChatWithFollow\n\nagent: continue thread\n\nContinues the current thread.\nKeymap Name: agent::ContinueThread\n\nagent: continue with burn mode\n\nContinues the thread with burn mode enabled.\nKeymap Name: agent::ContinueWithBurnMode\n\nagent: cycle next inline assist\n\nCycles to the next inline assist suggestion.\nKeymap Name: agent::CycleNextInlineAssist\n\nagent: cycle previous inline assist\n\nCycles to the previous inline assist suggestion.\nKeymap Name: agent::CyclePreviousInlineAssist\n\nagent: delete recently open thread\n\nDeletes the recently opened thread from history.\nKeymap Name: agent::DeleteRecentlyOpenThread\n\nagent: expand message editor\n\nExpands the message editor to full size.\nKeymap Name: agent::ExpandMessageEditor\n\nagent: focus down\n\nMoves focus down in the interface.\nKeymap Name: agent::FocusDown\n\nagent: focus left\n\nMoves focus left in the interface.\nKeymap Name: agent::FocusLeft\n\nagent: focus right\n\nMoves focus right in the interface.\nKeymap Name: agent::FocusRight\n\nagent: focus up\n\nMoves focus up in the interface.\nKeymap Name: agent::FocusUp\n\nagent: follow\n\nFollows the agent's suggestions.\nKeymap Name: agent::Follow\n\nagent: keep\n\nKeeps the current suggestion or change.\nKeymap Name: agent::Keep\n\nagent: keep all\n\nKeeps all suggestions or changes.\nKeymap Name: agent::KeepAll\n\nagent: manage profiles\n\nOpens the profile management interface for configuring agent tools and settings.\nKeymap Name: agent::ManageProfiles\n\nagent: new external agent thread\n\nCreates a new external agent conversation thread.\nKeymap Name: agent::NewExternalAgentThread\n\nagent: new native agent thread from summary\n\nKeymap Name: agent::NewNativeAgentThreadFromSummary\n\nagent: new text thread\n\nCreates a new text-based conversation thread.\nKeymap Name: agent::NewTextThread\n\nagent: new thread\n\nCreates a new conversation thread, optionally based on an existing thread.\nKeymap Name: agent::NewThread\n\nagent: open acp onboarding modal\n\nOpens the ACP onboarding modal.\nKeymap Name: agent::OpenAcpOnboardingModal\n\nagent: open active thread as markdown\n\nOpens the active thread as a markdown file.\nKeymap Name: agent::OpenActiveThreadAsMarkdown\n\nagent: open agent diff\n\nOpens the agent diff view to review changes.\nKeymap Name: agent::OpenAgentDiff\n\nagent: open claude code onboarding modal\n\nOpens the Claude Code onboarding modal.\nKeymap Name: agent::OpenClaudeCodeOnboardingModal\n\nagent: open history\n\nOpens the conversation history view.\nKeymap Name: agent::OpenHistory\n\nagent: open onboarding modal\n\nOpens the agent onboarding modal.\nKeymap Name: agent::OpenOnboardingModal\n\nagent: open rules library\n\nOpens the rules library for managing agent rules and prompts.\nKeymap Name: agent::OpenRulesLibrary\nDeprecated Aliases:assistant::OpenRulesLibrary, assistant::DeployPromptLibrary, \n\nagent: open settings\n\nOpens the agent settings panel.\nKeymap Name: agent::OpenSettings\nDeprecated Aliases:agent::OpenConfiguration, \n\nagent: quote selection\n\nQuotes the current selection in the agent panel's message editor.\nKeymap Name: agent::QuoteSelection\nDeprecated Aliases:assistant::QuoteSelection, \n\nagent: reauthenticate agent\n\nTriggers re-authentication on Gemini\nKeymap Name: agent::ReauthenticateAgent\n\nagent: reject\n\nRejects the current suggestion or change.\nKeymap Name: agent::Reject\n\nagent: reject all\n\nRejects all suggestions or changes.\nKeymap Name: agent::RejectAll\n\nagent: remove all context\n\nRemoves all added context from the current conversation.\nKeymap Name: agent::RemoveAllContext\n\nagent: remove focused context\n\nRemoves the currently focused context item.\nKeymap Name: agent::RemoveFocusedContext\n\nagent: remove selected thread\n\nRemoves the currently selected thread.\nKeymap Name: agent::RemoveSelectedThread\n\nagent: reset onboarding\n\nResets the agent onboarding state.\nKeymap Name: agent::ResetOnboarding\n\nagent: reset trial end upsell\n\nResets the trial end upsell notification.\nKeymap Name: agent::ResetTrialEndUpsell\n\nagent: reset trial upsell\n\nResets the trial upsell notification.\nKeymap Name: agent::ResetTrialUpsell\n\nagent: toggle burn mode\n\nToggles burn mode for faster responses.\nKeymap Name: agent::ToggleBurnMode\n\nagent: toggle context picker\n\nToggles the context picker interface for adding files, symbols, or other context.\nKeymap Name: agent::ToggleContextPicker\n\nagent: toggle focus\n\nKeymap Name: agent::ToggleFocus\nDeprecated Aliases:assistant::ToggleFocus, \n\nagent: toggle model selector\n\nToggles the language model selector dropdown.\nKeymap Name: agent::ToggleModelSelector\nDeprecated Aliases:assistant::ToggleModelSelector, assistant2::ToggleModelSelector, \n\nagent: toggle navigation menu\n\nToggles the navigation menu for switching between threads and views.\nKeymap Name: agent::ToggleNavigationMenu\n\nagent: toggle new thread menu\n\nToggles the menu to create new agent threads.\nKeymap Name: agent::ToggleNewThreadMenu\n\nagent: toggle options menu\n\nToggles the options menu for agent settings and preferences.\nKeymap Name: agent::ToggleOptionsMenu\n\nagent: toggle profile selector\n\nToggles the profile selector for switching between agent profiles.\nKeymap Name: agent::ToggleProfileSelector\n\napp menu: activate menu left\n\nNavigates to the menu item on the left.\nKeymap Name: app_menu::ActivateMenuLeft\n\napp menu: activate menu right\n\nNavigates to the menu item on the right.\nKeymap Name: app_menu::ActivateMenuRight\n\napp menu: open application menu\n\nKeymap Name: app_menu::OpenApplicationMenu\n\nassistant: assist\n\nSends the current message to the assistant.\nKeymap Name: assistant::Assist\n\nassistant: confirm command\n\nConfirms and executes the entered slash command.\nKeymap Name: assistant::ConfirmCommand\n\nassistant: copy code\n\nCopies code from the assistant's response to the clipboard.\nKeymap Name: assistant::CopyCode\n\nassistant: cycle message role\n\nCycles between user and assistant message roles.\nKeymap Name: assistant::CycleMessageRole\n\nassistant: inline assist\n\nDeploys the assistant interface with the specified configuration.\nKeymap Name: assistant::InlineAssist\n\nassistant: insert into editor\n\nInserts the selected text into the active editor.\nKeymap Name: assistant::InsertIntoEditor\n\nassistant: show configuration\n\nShows the assistant configuration panel.\nKeymap Name: assistant::ShowConfiguration\n\nassistant: split\n\nSplits the conversation at the current cursor position.\nKeymap Name: assistant::Split\n\nauto update: check\n\nChecks for available updates.\nKeymap Name: auto_update::Check\n\nauto update: dismiss error message\n\nDismisses the update error message.\nKeymap Name: auto_update::DismissErrorMessage\n\nauto update: view release notes\n\nOpens the release notes for the current version in a browser.\nKeymap Name: auto_update::ViewReleaseNotes\n\nauto update: view release notes locally\n\nOpens the release notes for the current version in a new tab.\nKeymap Name: auto_update::ViewReleaseNotesLocally\n\nbuffer search: deploy\n\nOpens the buffer search interface with the specified configuration.\nKeymap Name: buffer_search::Deploy\n\nbuffer search: deploy replace\n\nDeploys the search and replace interface.\nKeymap Name: buffer_search::DeployReplace\n\nbuffer search: dismiss\n\nDismisses the search bar.\nKeymap Name: buffer_search::Dismiss\n\nbuffer search: focus editor\n\nFocuses back on the editor.\nKeymap Name: buffer_search::FocusEditor\n\nchannel modal: remove member\n\nRemoves the selected member from the channel.\nKeymap Name: channel_modal::RemoveMember\n\nchannel modal: select next control\n\nSelects the next control in the channel modal.\nKeymap Name: channel_modal::SelectNextControl\n\nchannel modal: toggle member admin\n\nToggles admin status for the selected member.\nKeymap Name: channel_modal::ToggleMemberAdmin\n\nchannel modal: toggle mode\n\nToggles between invite members and manage members mode.\nKeymap Name: channel_modal::ToggleMode\n\nchat panel: toggle focus\n\nToggles focus on the chat panel.\nKeymap Name: chat_panel::ToggleFocus\n\ncli: install\n\nInstalls the Zed CLI tool to the system PATH.\nKeymap Name: cli::Install\n\ncli: register zed scheme\n\nRegisters the zed:// URL scheme handler.\nKeymap Name: cli::RegisterZedScheme\n\nclient: reconnect\n\nReconnects to the collaboration server.\nKeymap Name: client::Reconnect\n\nclient: sign in\n\nSigns in to Zed account.\nKeymap Name: client::SignIn\n\nclient: sign out\n\nSigns out of Zed account.\nKeymap Name: client::SignOut\n\ncollab: copy link\n\nCopies a link to the current position in the channel buffer.\nKeymap Name: collab::CopyLink\n\ncollab: deafen\n\nDeafens yourself (mute both microphone and speakers).\nKeymap Name: collab::Deafen\n\ncollab: leave call\n\nLeaves the current call.\nKeymap Name: collab::LeaveCall\n\ncollab: mute\n\nMutes your microphone.\nKeymap Name: collab::Mute\n\ncollab: open channel notes\n\nOpens the channel notes for the current call.\nIf you want to open a specific channel, use zed::OpenZedUrl with a channel notes URL -\ncan be copied via \"Copy link to section\" in the context menu of the channel notes\nbuffer. These URLs look like https://zed.dev/channel/channel-name-CHANNEL_ID/notes.\nKeymap Name: collab::OpenChannelNotes\n\ncollab: screen share\n\nShares your screen with collaborators.\nKeymap Name: collab::ScreenShare\n\ncollab: share project\n\nShares the current project with collaborators.\nKeymap Name: collab::ShareProject\n\ncollab: switch branch\n\nSwitches to a different git branch.\nKeymap Name: collab::SwitchBranch\n\ncollab: toggle deafen\n\nToggles deafen mode (mute both microphone and speakers).\nKeymap Name: collab::ToggleDeafen\n\ncollab: toggle mute\n\nToggles microphone mute.\nKeymap Name: collab::ToggleMute\n\ncollab: toggle project menu\n\nToggles the project menu dropdown.\nKeymap Name: collab::ToggleProjectMenu\n\ncollab: toggle screen sharing\n\nToggles screen sharing on or off.\nKeymap Name: collab::ToggleScreenSharing\n\ncollab: toggle user menu\n\nToggles the user menu dropdown.\nKeymap Name: collab::ToggleUserMenu\n\ncollab panel: collapse selected channel\n\nCollapses the selected channel in the tree view.\nKeymap Name: collab_panel::CollapseSelectedChannel\n\ncollab panel: expand selected channel\n\nExpands the selected channel in the tree view.\nKeymap Name: collab_panel::ExpandSelectedChannel\n\ncollab panel: insert space\n\nInserts a space character in the filter input.\nKeymap Name: collab_panel::InsertSpace\n\ncollab panel: move channel down\n\nMoves the selected channel down in the list.\nKeymap Name: collab_panel::MoveChannelDown\n\ncollab panel: move channel up\n\nMoves the selected channel up in the list.\nKeymap Name: collab_panel::MoveChannelUp\n\ncollab panel: move selected\n\nMoves the selected item to the current location.\nKeymap Name: collab_panel::MoveSelected\n\ncollab panel: remove\n\nRemoves the selected channel or contact.\nKeymap Name: collab_panel::Remove\n\ncollab panel: secondary\n\nOpens the context menu for the selected item.\nKeymap Name: collab_panel::Secondary\n\ncollab panel: start move channel\n\nStarts moving a channel to a new location.\nKeymap Name: collab_panel::StartMoveChannel\n\ncollab panel: toggle focus\n\nToggles focus on the collaboration panel.\nKeymap Name: collab_panel::ToggleFocus\n\ncommand palette: toggle\n\nToggles the command palette.\nKeymap Name: command_palette::Toggle\n\nconsole: watch expression\n\nAdds an expression to the watch list.\nKeymap Name: console::WatchExpression\n\ncontext server: restart\n\nRestarts the context server.\nKeymap Name: context_server::Restart\n\ncopilot: next suggestion\n\nCycles to the next Copilot suggestion.\nKeymap Name: copilot::NextSuggestion\n\ncopilot: previous suggestion\n\nCycles to the previous Copilot suggestion.\nKeymap Name: copilot::PreviousSuggestion\n\ncopilot: reinstall\n\nReinstalls the Copilot language server.\nKeymap Name: copilot::Reinstall\n\ncopilot: sign in\n\nSigns in to GitHub Copilot.\nKeymap Name: copilot::SignIn\n\ncopilot: sign out\n\nSigns out of GitHub Copilot.\nKeymap Name: copilot::SignOut\n\ncopilot: suggest\n\nRequests a code completion suggestion from Copilot.\nKeymap Name: copilot::Suggest\n\ndebug panel: toggle focus\n\nToggles focus on the debug panel.\nKeymap Name: debug_panel::ToggleFocus\n\ndebugger: clear all breakpoints\n\nClears all breakpoints in the project.\nKeymap Name: debugger::ClearAllBreakpoints\n\ndebugger: continue\n\nContinues execution until the next breakpoint.\nKeymap Name: debugger::Continue\n\ndebugger: detach\n\nDetaches the debugger from the running process.\nKeymap Name: debugger::Detach\n\ndebugger: evaluate selected text\n\nEvaluates the selected text in the debugger context.\nKeymap Name: debugger::EvaluateSelectedText\n\ndebugger: focus breakpoint list\n\nFocuses on the breakpoint list panel.\nKeymap Name: debugger::FocusBreakpointList\n\ndebugger: focus console\n\nFocuses on the debugger console panel.\nKeymap Name: debugger::FocusConsole\n\ndebugger: focus frames\n\nFocuses on the call stack frames panel.\nKeymap Name: debugger::FocusFrames\n\ndebugger: focus loaded sources\n\nFocuses on the loaded sources panel.\nKeymap Name: debugger::FocusLoadedSources\n\ndebugger: focus modules\n\nFocuses on the loaded modules panel.\nKeymap Name: debugger::FocusModules\n\ndebugger: focus terminal\n\nFocuses on the terminal panel.\nKeymap Name: debugger::FocusTerminal\n\ndebugger: focus variables\n\nFocuses on the variables panel.\nKeymap Name: debugger::FocusVariables\n\ndebugger: go to selected address\n\nKeymap Name: debugger::GoToSelectedAddress\n\ndebugger: next breakpoint property\n\nNavigates to the next breakpoint property in the list.\nKeymap Name: debugger::NextBreakpointProperty\n\ndebugger: open onboarding modal\n\nOpens the debugger onboarding modal.\nKeymap Name: debugger::OpenOnboardingModal\n\ndebugger: open project debug tasks\n\nOpens the project debug tasks configuration.\nKeymap Name: debugger::OpenProjectDebugTasks\n\ndebugger: pause\n\nPauses the currently running program.\nKeymap Name: debugger::Pause\n\ndebugger: previous breakpoint property\n\nNavigates to the previous breakpoint property in the list.\nKeymap Name: debugger::PreviousBreakpointProperty\n\ndebugger: rerun\n\nReruns the last debugging session.\nKeymap Name: debugger::Rerun\nDeprecated Aliases:debugger::RerunLastSession, \n\ndebugger: rerun session\n\nReruns the current debugging session with the same configuration.\nKeymap Name: debugger::RerunSession\n\ndebugger: reset onboarding\n\nResets the debugger onboarding state.\nKeymap Name: debugger::ResetOnboarding\n\ndebugger: restart\n\nRestarts the current debugging session.\nKeymap Name: debugger::Restart\n\ndebugger: run to cursor\n\nRuns program execution to the current cursor position.\nKeymap Name: debugger::RunToCursor\n\ndebugger: show stack trace\n\nShows the stack trace for the current thread.\nKeymap Name: debugger::ShowStackTrace\n\ndebugger: start\n\nStarts a new debugging session.\nKeymap Name: debugger::Start\n\ndebugger: step back\n\nSteps back to the previous statement.\nKeymap Name: debugger::StepBack\n\ndebugger: step into\n\nSteps into the next function call.\nKeymap Name: debugger::StepInto\n\ndebugger: step out\n\nSteps out of the current function.\nKeymap Name: debugger::StepOut\n\ndebugger: step over\n\nSteps over the current line.\nKeymap Name: debugger::StepOver\n\ndebugger: stop\n\nStops the debugging session.\nKeymap Name: debugger::Stop\n\ndebugger: toggle data breakpoint\n\nExtends selection down by a specified number of lines.\nSet a data breakpoint on the selected variable or memory region.\nKeymap Name: debugger::ToggleDataBreakpoint\n\ndebugger: toggle enable breakpoint\n\nToggles the enabled state of a breakpoint.\nKeymap Name: debugger::ToggleEnableBreakpoint\n\ndebugger: toggle expand item\n\nToggles expansion of the selected item in the debugger UI.\nKeymap Name: debugger::ToggleExpandItem\n\ndebugger: toggle ignore breakpoints\n\nToggles whether to ignore all breakpoints.\nKeymap Name: debugger::ToggleIgnoreBreakpoints\n\ndebugger: toggle session picker\n\nToggles the session picker dropdown.\nKeymap Name: debugger::ToggleSessionPicker\n\ndebugger: toggle thread picker\n\nToggles the thread picker dropdown.\nKeymap Name: debugger::ToggleThreadPicker\n\ndebugger: toggle user frames\n\nToggle the user frame filter in the stack frame list\nWhen toggled on, only frames from the user's code are shown\nWhen toggled off, all frames are shown\nKeymap Name: debugger::ToggleUserFrames\n\ndebugger: unset breakpoint\n\nRemoves a breakpoint.\nKeymap Name: debugger::UnsetBreakpoint\n\ndev: capture audio\n\nRecord 10s of audio from your current microphone\nKeymap Name: dev::CaptureAudio\n\ndev: copy debug adapter arguments\n\nCopies debug adapter launch arguments to clipboard.\nKeymap Name: dev::CopyDebugAdapterArguments\n\ndev: open acp logs\n\nKeymap Name: dev::OpenAcpLogs\n\ndev: open debug adapter logs\n\nOpens the debug adapter protocol logs viewer.\nKeymap Name: dev::OpenDebugAdapterLogs\n\ndev: open key context view\n\nOpens the key context view for debugging keybindings.\nKeymap Name: dev::OpenKeyContextView\n\ndev: open language server logs\n\nOpens the language server protocol logs viewer.\nKeymap Name: dev::OpenLanguageServerLogs\n\ndev: open syntax tree view\n\nOpens the syntax tree view for the current file.\nKeymap Name: dev::OpenSyntaxTreeView\n\ndev: open theme preview\n\nOpens the theme preview window.\nKeymap Name: dev::OpenThemePreview\n\ndev: toggle inspector\n\nToggles the developer inspector for debugging UI elements.\nKeymap Name: dev::ToggleInspector\n\ndiagnostics: deploy\n\nOpens the project diagnostics view.\nKeymap Name: diagnostics::Deploy\n\ndiagnostics: toggle diagnostics refresh\n\nToggles automatic refresh of diagnostics.\nKeymap Name: diagnostics::ToggleDiagnosticsRefresh\n\ndiagnostics: toggle warnings\n\nToggles the display of warning-level diagnostics.\nKeymap Name: diagnostics::ToggleWarnings\n\nedit prediction: clear history\n\nClears the edit prediction history.\nKeymap Name: edit_prediction::ClearHistory\n\nedit prediction: rate completions\n\nOpens the rate completions modal.\nKeymap Name: edit_prediction::RateCompletions\n\nedit prediction: reset onboarding\n\nResets the edit prediction onboarding state.\nKeymap Name: edit_prediction::ResetOnboarding\n\nedit prediction: toggle menu\n\nToggles the edit prediction menu.\nKeymap Name: edit_prediction::ToggleMenu\n\neditor: accept edit prediction\n\nAccepts the full edit prediction.\nKeymap Name: editor::AcceptEditPrediction\n\neditor: accept partial edit prediction\n\nAccepts a partial edit prediction.\nKeymap Name: editor::AcceptPartialEditPrediction\nDeprecated Aliases:editor::AcceptPartialCopilotSuggestion, \n\neditor: add selection above\n\nAdds a cursor above the current selection.\nKeymap Name: editor::AddSelectionAbove\n\neditor: add selection below\n\nAdds a cursor below the current selection.\nKeymap Name: editor::AddSelectionBelow\n\neditor: apply all diff hunks\n\nApplies all diff hunks in the editor.\nKeymap Name: editor::ApplyAllDiffHunks\n\neditor: apply diff hunk\n\nApplies the diff hunk at the current position.\nKeymap Name: editor::ApplyDiffHunk\n\neditor: auto indent\n\nAutomatically adjusts indentation based on context.\nKeymap Name: editor::AutoIndent\n\neditor: backspace\n\nDeletes the character before the cursor.\nKeymap Name: editor::Backspace\n\neditor: backtab\n\nRemoves a tab character or outdents.\nKeymap Name: editor::Backtab\n\neditor: blame hover\n\nShows git blame information for the current line.\nKeymap Name: editor::BlameHover\n\neditor: cancel\n\nCancels the current operation.\nKeymap Name: editor::Cancel\n\neditor: cancel flycheck\n\nCancels the running flycheck operation.\nKeymap Name: editor::CancelFlycheck\n\neditor: cancel language server work\n\nCancels pending language server work.\nKeymap Name: editor::CancelLanguageServerWork\n\neditor: clear flycheck\n\nClears flycheck results.\nKeymap Name: editor::ClearFlycheck\n\neditor: compose completion\n\nComposes multiple completion suggestions into a single completion.\nKeymap Name: editor::ComposeCompletion\n\neditor: confirm code action\n\nConfirms and applies the currently selected code action.\nKeymap Name: editor::ConfirmCodeAction\n\neditor: confirm completion\n\nConfirms and accepts the currently selected completion suggestion.\nKeymap Name: editor::ConfirmCompletion\n\neditor: confirm completion insert\n\nConfirms completion by inserting at cursor.\nKeymap Name: editor::ConfirmCompletionInsert\n\neditor: confirm completion replace\n\nConfirms completion by replacing existing text.\nKeymap Name: editor::ConfirmCompletionReplace\n\neditor: confirm rename\n\nConfirms the rename operation.\nKeymap Name: editor::ConfirmRename\n\neditor: context menu first\n\nNavigates to the first item in the context menu.\nKeymap Name: editor::ContextMenuFirst\n\neditor: context menu last\n\nNavigates to the last item in the context menu.\nKeymap Name: editor::ContextMenuLast\n\neditor: context menu next\n\nNavigates to the next item in the context menu.\nKeymap Name: editor::ContextMenuNext\n\neditor: context menu previous\n\nNavigates to the previous item in the context menu.\nKeymap Name: editor::ContextMenuPrevious\n\neditor: convert indentation to spaces\n\nConverts indentation from tabs to spaces.\nKeymap Name: editor::ConvertIndentationToSpaces\n\neditor: convert indentation to tabs\n\nConverts indentation from spaces to tabs.\nKeymap Name: editor::ConvertIndentationToTabs\n\neditor: convert to kebab case\n\nConverts selected text to kebab-case.\nKeymap Name: editor::ConvertToKebabCase\n\neditor: convert to lower camel case\n\nConverts selected text to lowerCamelCase.\nKeymap Name: editor::ConvertToLowerCamelCase\n\neditor: convert to lower case\n\nConverts selected text to lowercase.\nKeymap Name: editor::ConvertToLowerCase\n\neditor: convert to opposite case\n\nToggles the case of selected text.\nKeymap Name: editor::ConvertToOppositeCase\n\neditor: convert to rot13\n\nApplies ROT13 cipher to selected text.\nKeymap Name: editor::ConvertToRot13\n\neditor: convert to rot47\n\nApplies ROT47 cipher to selected text.\nKeymap Name: editor::ConvertToRot47\n\neditor: convert to sentence case\n\nConverts selected text to sentence case.\nKeymap Name: editor::ConvertToSentenceCase\n\neditor: convert to snake case\n\nConverts selected text to snake_case.\nKeymap Name: editor::ConvertToSnakeCase\n\neditor: convert to title case\n\nConverts selected text to Title Case.\nKeymap Name: editor::ConvertToTitleCase\n\neditor: convert to upper camel case\n\nConverts selected text to UpperCamelCase.\nKeymap Name: editor::ConvertToUpperCamelCase\n\neditor: convert to upper case\n\nConverts selected text to UPPERCASE.\nKeymap Name: editor::ConvertToUpperCase\n\neditor: copy\n\nCopies selected text to the clipboard.\nKeymap Name: editor::Copy\n\neditor: copy and trim\n\nCopies selected text to the clipboard with leading/trailing whitespace trimmed.\nKeymap Name: editor::CopyAndTrim\n\neditor: copy file location\n\nCopies the current file location to the clipboard.\nKeymap Name: editor::CopyFileLocation\n\neditor: copy file name\n\nCopies the current file name to the clipboard.\nKeymap Name: editor::CopyFileName\n\neditor: copy file name without extension\n\nCopies the file name without extension to the clipboard.\nKeymap Name: editor::CopyFileNameWithoutExtension\n\neditor: copy highlight json\n\nCopies the highlighted text as JSON.\nKeymap Name: editor::CopyHighlightJson\n\neditor: copy permalink to line\n\nCopies a permalink to the current line.\nKeymap Name: editor::CopyPermalinkToLine\n\neditor: cut\n\nCuts selected text to the clipboard.\nKeymap Name: editor::Cut\n\neditor: cut to end of line\n\nCuts from cursor to end of line.\nKeymap Name: editor::CutToEndOfLine\n\neditor: delete\n\nDeletes the character after the cursor.\nKeymap Name: editor::Delete\n\neditor: delete line\n\nDeletes the current line.\nKeymap Name: editor::DeleteLine\n\neditor: delete to beginning of line\n\nDeletes from the cursor to the beginning of the current line.\nKeymap Name: editor::DeleteToBeginningOfLine\n\neditor: delete to end of line\n\nDeletes from cursor to end of line.\nKeymap Name: editor::DeleteToEndOfLine\n\neditor: delete to next subword end\n\nDeletes to the end of the next subword.\nKeymap Name: editor::DeleteToNextSubwordEnd\n\neditor: delete to next word end\n\nDeletes from the cursor to the end of the next word.\nStops before the end of the next word, if whitespace sequences of length >= 2 are encountered.\nKeymap Name: editor::DeleteToNextWordEnd\n\neditor: delete to previous subword start\n\nDeletes to the start of the previous subword.\nKeymap Name: editor::DeleteToPreviousSubwordStart\n\neditor: delete to previous word start\n\nDeletes from the cursor to the start of the previous word.\nStops before the start of the previous word, if whitespace sequences of length >= 2 are encountered.\nKeymap Name: editor::DeleteToPreviousWordStart\n\neditor: diff clipboard with selection\n\nDiffs the text stored in the clipboard against the current selection.\nKeymap Name: editor::DiffClipboardWithSelection\n\neditor: disable breakpoint\n\nDisables the breakpoint at the current line.\nKeymap Name: editor::DisableBreakpoint\n\neditor: display cursor names\n\nDisplays names of all active cursors.\nKeymap Name: editor::DisplayCursorNames\n\neditor: duplicate line down\n\nDuplicates the current line below.\nKeymap Name: editor::DuplicateLineDown\n\neditor: duplicate line up\n\nDuplicates the current line above.\nKeymap Name: editor::DuplicateLineUp\n\neditor: duplicate selection\n\nDuplicates the current selection.\nKeymap Name: editor::DuplicateSelection\n\neditor: edit log breakpoint\n\nEdits the log message for a breakpoint.\nKeymap Name: editor::EditLogBreakpoint\n\neditor: enable breakpoint\n\nEnables the breakpoint at the current line.\nKeymap Name: editor::EnableBreakpoint\n\neditor: expand all diff hunks\n\nExpands all diff hunks in the editor.\nKeymap Name: editor::ExpandAllDiffHunks\nDeprecated Aliases:editor::ExpandAllHunkDiffs, \n\neditor: expand excerpts\n\nExpands all excerpts in the editor.\nKeymap Name: editor::ExpandExcerpts\n\neditor: expand excerpts down\n\nExpands excerpts below the current position.\nKeymap Name: editor::ExpandExcerptsDown\n\neditor: expand excerpts up\n\nExpands excerpts above the current position.\nKeymap Name: editor::ExpandExcerptsUp\n\neditor: expand macro recursively\n\nExpands macros recursively at cursor position.\nKeymap Name: editor::ExpandMacroRecursively\n\neditor: find all references\n\nFinds all references to the symbol at cursor.\nKeymap Name: editor::FindAllReferences\n\neditor: find next match\n\nFinds the next match in the search.\nKeymap Name: editor::FindNextMatch\n\neditor: find previous match\n\nFinds the previous match in the search.\nKeymap Name: editor::FindPreviousMatch\n\neditor: fold\n\nFolds the current code block.\nKeymap Name: editor::Fold\n\neditor: fold all\n\nFolds all foldable regions in the editor.\nKeymap Name: editor::FoldAll\n\neditor: fold at level\n\nFolds all code blocks at the specified indentation level.\nKeymap Name: editor::FoldAtLevel\n\neditor: fold function bodies\n\nFolds all function bodies in the editor.\nKeymap Name: editor::FoldFunctionBodies\n\neditor: fold recursive\n\nFolds the current code block and all its children.\nKeymap Name: editor::FoldRecursive\n\neditor: fold selected ranges\n\nFolds the selected ranges.\nKeymap Name: editor::FoldSelectedRanges\n\neditor: format\n\nFormats the entire document.\nKeymap Name: editor::Format\n\neditor: format selections\n\nFormats only the selected text.\nKeymap Name: editor::FormatSelections\n\neditor: go to declaration\n\nGoes to the declaration of the symbol at cursor.\nKeymap Name: editor::GoToDeclaration\n\neditor: go to declaration split\n\nGoes to declaration in a split pane.\nKeymap Name: editor::GoToDeclarationSplit\n\neditor: go to definition\n\nGoes to the definition of the symbol at cursor.\nKeymap Name: editor::GoToDefinition\n\neditor: go to definition split\n\nGoes to definition in a split pane.\nKeymap Name: editor::GoToDefinitionSplit\n\neditor: go to diagnostic\n\nGoes to the next diagnostic in the file.\nKeymap Name: editor::GoToDiagnostic\n\neditor: go to hunk\n\nGoes to the next diff hunk.\nKeymap Name: editor::GoToHunk\n\neditor: go to implementation\n\nGoes to the implementation of the symbol at cursor.\nKeymap Name: editor::GoToImplementation\n\neditor: go to implementation split\n\nGoes to implementation in a split pane.\nKeymap Name: editor::GoToImplementationSplit\n\neditor: go to next change\n\nGoes to the next change in the file.\nKeymap Name: editor::GoToNextChange\n\neditor: go to parent module\n\nGoes to the parent module of the current file.\nKeymap Name: editor::GoToParentModule\n\neditor: go to previous change\n\nGoes to the previous change in the file.\nKeymap Name: editor::GoToPreviousChange\n\neditor: go to previous diagnostic\n\nGoes to the previous diagnostic in the file.\nKeymap Name: editor::GoToPreviousDiagnostic\n\neditor: go to previous hunk\n\nGoes to the previous diff hunk.\nKeymap Name: editor::GoToPreviousHunk\n\neditor: go to type definition\n\nGoes to the type definition of the symbol at cursor.\nKeymap Name: editor::GoToTypeDefinition\n\neditor: go to type definition split\n\nGoes to type definition in a split pane.\nKeymap Name: editor::GoToTypeDefinitionSplit\n\neditor: half page down\n\nScrolls down by half a page.\nKeymap Name: editor::HalfPageDown\n\neditor: half page up\n\nScrolls up by half a page.\nKeymap Name: editor::HalfPageUp\n\neditor: handle input\n\nHandles text input in the editor.\nKeymap Name: editor::HandleInput\n\neditor: hover\n\nShows hover information for the symbol at cursor.\nKeymap Name: editor::Hover\n\neditor: indent\n\nIncreases indentation of selected lines.\nKeymap Name: editor::Indent\n\neditor: insert uuid v4\n\nInserts a UUID v4 at cursor position.\nKeymap Name: editor::InsertUuidV4\n\neditor: insert uuid v7\n\nInserts a UUID v7 at cursor position.\nKeymap Name: editor::InsertUuidV7\n\neditor: join lines\n\nJoins the current line with the next line.\nKeymap Name: editor::JoinLines\n\neditor: kill ring cut\n\nCuts to kill ring (Emacs-style).\nKeymap Name: editor::KillRingCut\n\neditor: kill ring yank\n\nYanks from kill ring (Emacs-style).\nKeymap Name: editor::KillRingYank\n\neditor: line down\n\nMoves cursor down one line.\nKeymap Name: editor::LineDown\n\neditor: line up\n\nMoves cursor up one line.\nKeymap Name: editor::LineUp\n\neditor: move down\n\nMoves cursor down.\nKeymap Name: editor::MoveDown\n\neditor: move down by lines\n\nMoves the cursor down by a specified number of lines.\nKeymap Name: editor::MoveDownByLines\n\neditor: move left\n\nMoves cursor left.\nKeymap Name: editor::MoveLeft\n\neditor: move line down\n\nMoves the current line down.\nKeymap Name: editor::MoveLineDown\n\neditor: move line up\n\nMoves the current line up.\nKeymap Name: editor::MoveLineUp\n\neditor: move page down\n\nMoves the cursor down by one page.\nKeymap Name: editor::MovePageDown\n\neditor: move page up\n\nMoves the cursor up by one page.\nKeymap Name: editor::MovePageUp\n\neditor: move right\n\nMoves cursor right.\nKeymap Name: editor::MoveRight\n\neditor: move to beginning\n\nMoves cursor to the beginning of the document.\nKeymap Name: editor::MoveToBeginning\n\neditor: move to beginning of line\n\nMoves the cursor to the beginning of the current line.\nKeymap Name: editor::MoveToBeginningOfLine\n\neditor: move to enclosing bracket\n\nMoves cursor to the enclosing bracket.\nKeymap Name: editor::MoveToEnclosingBracket\n\neditor: move to end\n\nMoves cursor to the end of the document.\nKeymap Name: editor::MoveToEnd\n\neditor: move to end of excerpt\n\nMoves cursor to the end of the current excerpt.\nKeymap Name: editor::MoveToEndOfExcerpt\n\neditor: move to end of line\n\nMoves the cursor to the end of the current line.\nKeymap Name: editor::MoveToEndOfLine\n\neditor: move to end of paragraph\n\nMoves cursor to the end of the paragraph.\nKeymap Name: editor::MoveToEndOfParagraph\n\neditor: move to end of previous excerpt\n\nMoves cursor to the end of the previous excerpt.\nKeymap Name: editor::MoveToEndOfPreviousExcerpt\n\neditor: move to next subword end\n\nMoves cursor to the end of the next subword.\nKeymap Name: editor::MoveToNextSubwordEnd\n\neditor: move to next word end\n\nMoves cursor to the end of the next word.\nKeymap Name: editor::MoveToNextWordEnd\n\neditor: move to previous subword start\n\nMoves cursor to the start of the previous subword.\nKeymap Name: editor::MoveToPreviousSubwordStart\n\neditor: move to previous word start\n\nMoves cursor to the start of the previous word.\nKeymap Name: editor::MoveToPreviousWordStart\n\neditor: move to start of excerpt\n\nMoves cursor to the start of the current excerpt.\nKeymap Name: editor::MoveToStartOfExcerpt\n\neditor: move to start of next excerpt\n\nMoves cursor to the start of the next excerpt.\nKeymap Name: editor::MoveToStartOfNextExcerpt\n\neditor: move to start of paragraph\n\nMoves cursor to the start of the paragraph.\nKeymap Name: editor::MoveToStartOfParagraph\n\neditor: move up\n\nMoves cursor up.\nKeymap Name: editor::MoveUp\n\neditor: move up by lines\n\nMoves the cursor up by a specified number of lines.\nKeymap Name: editor::MoveUpByLines\n\neditor: newline\n\nInserts a new line and moves cursor to it.\nKeymap Name: editor::Newline\n\neditor: newline above\n\nInserts a new line above the current line.\nKeymap Name: editor::NewlineAbove\n\neditor: newline below\n\nInserts a new line below the current line.\nKeymap Name: editor::NewlineBelow\n\neditor: next edit prediction\n\nNavigates to the next edit prediction.\nKeymap Name: editor::NextEditPrediction\n\neditor: next screen\n\nScrolls to the next screen.\nKeymap Name: editor::NextScreen\n\neditor: open context menu\n\nOpens the context menu at cursor position.\nKeymap Name: editor::OpenContextMenu\n\neditor: open docs\n\nOpens documentation for the symbol at cursor.\nKeymap Name: editor::OpenDocs\n\neditor: open excerpts\n\nOpens excerpts from the current file.\nKeymap Name: editor::OpenExcerpts\n\neditor: open excerpts split\n\nOpens excerpts in a split pane.\nKeymap Name: editor::OpenExcerptsSplit\n\neditor: open git blame commit\n\nOpens the git commit for the blame at cursor.\nKeymap Name: editor::OpenGitBlameCommit\n\neditor: open permalink to line\n\nOpens a permalink to the current line.\nKeymap Name: editor::OpenPermalinkToLine\n\neditor: open proposed changes editor\n\nOpens the proposed changes editor.\nKeymap Name: editor::OpenProposedChangesEditor\n\neditor: open selected filename\n\nOpens the file whose name is selected in the editor.\nKeymap Name: editor::OpenSelectedFilename\nDeprecated Aliases:editor::OpenFile, \n\neditor: open selections in multibuffer\n\nOpens all selections in a multibuffer.\nKeymap Name: editor::OpenSelectionsInMultibuffer\n\neditor: open url\n\nOpens the URL at cursor position.\nKeymap Name: editor::OpenUrl\n\neditor: organize imports\n\nOrganizes import statements.\nKeymap Name: editor::OrganizeImports\n\neditor: outdent\n\nDecreases indentation of selected lines.\nKeymap Name: editor::Outdent\n\neditor: page down\n\nScrolls down by one page.\nKeymap Name: editor::PageDown\n\neditor: page up\n\nScrolls up by one page.\nKeymap Name: editor::PageUp\n\neditor: paste\n\nPastes from clipboard.\nKeymap Name: editor::Paste\n\neditor: previous edit prediction\n\nNavigates to the previous edit prediction.\nKeymap Name: editor::PreviousEditPrediction\n\neditor: redo\n\nRedoes the last undone edit.\nKeymap Name: editor::Redo\n\neditor: redo selection\n\nRedoes the last selection change.\nKeymap Name: editor::RedoSelection\n\neditor: reload file\n\nReloads the file from disk.\nKeymap Name: editor::ReloadFile\n\neditor: rename\n\nRenames the symbol at cursor.\nKeymap Name: editor::Rename\n\neditor: restart language server\n\nRestarts the language server for the current file.\nKeymap Name: editor::RestartLanguageServer\n\neditor: reveal in file manager\n\nReveals the current file in the system file manager.\nKeymap Name: editor::RevealInFileManager\n\neditor: reverse lines\n\nReverses the order of selected lines.\nKeymap Name: editor::ReverseLines\n\neditor: rewrap\n\nRewraps text to fit within the preferred line length.\nKeymap Name: editor::Rewrap\n\neditor: run flycheck\n\nRuns flycheck diagnostics.\nKeymap Name: editor::RunFlycheck\n\neditor: scroll cursor bottom\n\nScrolls the cursor to the bottom of the viewport.\nKeymap Name: editor::ScrollCursorBottom\n\neditor: scroll cursor center\n\nScrolls the cursor to the center of the viewport.\nKeymap Name: editor::ScrollCursorCenter\n\neditor: scroll cursor center top bottom\n\nCycles cursor position between center, top, and bottom.\nKeymap Name: editor::ScrollCursorCenterTopBottom\n\neditor: scroll cursor top\n\nScrolls the cursor to the top of the viewport.\nKeymap Name: editor::ScrollCursorTop\n\neditor: select all\n\nSelects all text in the editor.\nKeymap Name: editor::SelectAll\n\neditor: select all matches\n\nSelects all matches of the current selection.\nKeymap Name: editor::SelectAllMatches\n\neditor: select down\n\nExtends selection down.\nKeymap Name: editor::SelectDown\n\neditor: select down by lines\n\nExtends selection down by a specified number of lines.\nKeymap Name: editor::SelectDownByLines\n\neditor: select enclosing symbol\n\nSelects the enclosing symbol.\nKeymap Name: editor::SelectEnclosingSymbol\n\neditor: select larger syntax node\n\nSelects the next larger syntax node.\nKeymap Name: editor::SelectLargerSyntaxNode\n\neditor: select left\n\nExtends selection left.\nKeymap Name: editor::SelectLeft\n\neditor: select line\n\nSelects the current line.\nKeymap Name: editor::SelectLine\n\neditor: select next\n\nSelects the next occurrence of the current selection.\nKeymap Name: editor::SelectNext\n\neditor: select page down\n\nExtends selection down by one page.\nKeymap Name: editor::SelectPageDown\n\neditor: select page up\n\nExtends selection up by one page.\nKeymap Name: editor::SelectPageUp\n\neditor: select previous\n\nSelects the previous occurrence of the current selection.\nKeymap Name: editor::SelectPrevious\n\neditor: select right\n\nExtends selection right.\nKeymap Name: editor::SelectRight\n\neditor: select smaller syntax node\n\nSelects the next smaller syntax node.\nKeymap Name: editor::SelectSmallerSyntaxNode\n\neditor: select to beginning\n\nSelects to the beginning of the document.\nKeymap Name: editor::SelectToBeginning\n\neditor: select to beginning of line\n\nSelects from the cursor to the beginning of the current line.\nKeymap Name: editor::SelectToBeginningOfLine\n\neditor: select to end\n\nSelects to the end of the document.\nKeymap Name: editor::SelectToEnd\n\neditor: select to end of excerpt\n\nSelects to the end of the current excerpt.\nKeymap Name: editor::SelectToEndOfExcerpt\n\neditor: select to end of line\n\nSelects from the cursor to the end of the current line.\nKeymap Name: editor::SelectToEndOfLine\n\neditor: select to end of paragraph\n\nSelects to the end of the paragraph.\nKeymap Name: editor::SelectToEndOfParagraph\n\neditor: select to end of previous excerpt\n\nSelects to the end of the previous excerpt.\nKeymap Name: editor::SelectToEndOfPreviousExcerpt\n\neditor: select to next subword end\n\nSelects to the end of the next subword.\nKeymap Name: editor::SelectToNextSubwordEnd\n\neditor: select to next word end\n\nSelects to the end of the next word.\nKeymap Name: editor::SelectToNextWordEnd\n\neditor: select to previous subword start\n\nSelects to the start of the previous subword.\nKeymap Name: editor::SelectToPreviousSubwordStart\n\neditor: select to previous word start\n\nSelects to the start of the previous word.\nKeymap Name: editor::SelectToPreviousWordStart\n\neditor: select to start of excerpt\n\nSelects to the start of the current excerpt.\nKeymap Name: editor::SelectToStartOfExcerpt\n\neditor: select to start of next excerpt\n\nSelects to the start of the next excerpt.\nKeymap Name: editor::SelectToStartOfNextExcerpt\n\neditor: select to start of paragraph\n\nSelects to the start of the paragraph.\nKeymap Name: editor::SelectToStartOfParagraph\n\neditor: select up\n\nExtends selection up.\nKeymap Name: editor::SelectUp\n\neditor: select up by lines\n\nExtends selection up by a specified number of lines.\nKeymap Name: editor::SelectUpByLines\n\neditor: set mark\n\nSets a mark at the current position.\nKeymap Name: editor::SetMark\n\neditor: show character palette\n\nShows the system character palette.\nKeymap Name: editor::ShowCharacterPalette\n\neditor: show completions\n\nShows code completion suggestions at the cursor position.\nKeymap Name: editor::ShowCompletions\n\neditor: show edit prediction\n\nShows edit prediction at cursor.\nKeymap Name: editor::ShowEditPrediction\n\neditor: show signature help\n\nShows signature help for the current function.\nKeymap Name: editor::ShowSignatureHelp\n\neditor: show word completions\n\nShows word completions.\nKeymap Name: editor::ShowWordCompletions\n\neditor: shuffle lines\n\nRandomly shuffles selected lines.\nKeymap Name: editor::ShuffleLines\n\neditor: signature help next\n\nNavigates to the next signature in the signature help popup.\nKeymap Name: editor::SignatureHelpNext\n\neditor: signature help previous\n\nNavigates to the previous signature in the signature help popup.\nKeymap Name: editor::SignatureHelpPrevious\n\neditor: sort lines by length\n\nSorts selected lines by length.\nKeymap Name: editor::SortLinesByLength\n\neditor: sort lines case insensitive\n\nSorts selected lines case-insensitively.\nKeymap Name: editor::SortLinesCaseInsensitive\n\neditor: sort lines case sensitive\n\nSorts selected lines case-sensitively.\nKeymap Name: editor::SortLinesCaseSensitive\n\neditor: spawn nearest task\n\nSpawns the nearest available task from the current cursor position.\nKeymap Name: editor::SpawnNearestTask\n\neditor: split selection into lines\n\nSplits selection into individual lines.\nKeymap Name: editor::SplitSelectionIntoLines\n\neditor: stop language server\n\nStops the language server for the current file.\nKeymap Name: editor::StopLanguageServer\n\neditor: swap selection ends\n\nSwaps the start and end of the current selection.\nKeymap Name: editor::SwapSelectionEnds\n\neditor: switch source header\n\nSwitches between source and header files.\nKeymap Name: editor::SwitchSourceHeader\n\neditor: tab\n\nInserts a tab character or indents.\nKeymap Name: editor::Tab\n\neditor: toggle auto signature help\n\nToggles automatic signature help.\nKeymap Name: editor::ToggleAutoSignatureHelp\n\neditor: toggle breakpoint\n\nToggles a breakpoint at the current line.\nKeymap Name: editor::ToggleBreakpoint\n\neditor: toggle case\n\nToggles the case of selected text.\nKeymap Name: editor::ToggleCase\n\neditor: toggle code actions\n\nToggles the display of available code actions at the cursor position.\nKeymap Name: editor::ToggleCodeActions\n\neditor: toggle comments\n\nToggles comment markers for the selected lines.\nKeymap Name: editor::ToggleComments\n\neditor: toggle diagnostics\n\nToggles the diagnostics panel.\nKeymap Name: editor::ToggleDiagnostics\n\neditor: toggle edit prediction\n\nToggles edit prediction feature.\nKeymap Name: editor::ToggleEditPrediction\n\neditor: toggle focus\n\nToggles focus back to the last active buffer.\nKeymap Name: editor::ToggleFocus\n\neditor: toggle fold\n\nToggles folding at the current position.\nKeymap Name: editor::ToggleFold\n\neditor: toggle fold all\n\nToggles all folds in a buffer or all excerpts in multibuffer.\nKeymap Name: editor::ToggleFoldAll\n\neditor: toggle fold recursive\n\nToggles recursive folding at the current position.\nKeymap Name: editor::ToggleFoldRecursive\n\neditor: toggle git blame inline\n\nToggles inline git blame display.\nKeymap Name: editor::ToggleGitBlameInline\n\neditor: toggle indent guides\n\nToggles indent guides display.\nKeymap Name: editor::ToggleIndentGuides\n\neditor: toggle inlay hints\n\nToggles inlay hints display.\nKeymap Name: editor::ToggleInlayHints\n\neditor: toggle inline diagnostics\n\nToggles inline diagnostics display.\nKeymap Name: editor::ToggleInlineDiagnostics\n\neditor: toggle inline values\n\nToggles inline values display.\nKeymap Name: editor::ToggleInlineValues\n\neditor: toggle line numbers\n\nToggles line numbers display.\nKeymap Name: editor::ToggleLineNumbers\n\neditor: toggle minimap\n\nToggles the minimap display.\nKeymap Name: editor::ToggleMinimap\n\neditor: toggle relative line numbers\n\nToggles relative line numbers display.\nKeymap Name: editor::ToggleRelativeLineNumbers\n\neditor: toggle selected diff hunks\n\nToggles diff display for selected hunks.\nKeymap Name: editor::ToggleSelectedDiffHunks\nDeprecated Aliases:editor::ToggleHunkDiff, \n\neditor: toggle selection menu\n\nToggles the selection menu.\nKeymap Name: editor::ToggleSelectionMenu\n\neditor: toggle soft wrap\n\nToggles soft wrap mode.\nKeymap Name: editor::ToggleSoftWrap\n\neditor: toggle tab bar\n\nToggles the tab bar display.\nKeymap Name: editor::ToggleTabBar\n\neditor: transpose\n\nTransposes characters around cursor.\nKeymap Name: editor::Transpose\n\neditor: undo\n\nUndoes the last edit.\nKeymap Name: editor::Undo\n\neditor: undo selection\n\nUndoes the last selection change.\nKeymap Name: editor::UndoSelection\n\neditor: unfold all\n\nUnfolds all folded regions.\nKeymap Name: editor::UnfoldAll\n\neditor: unfold lines\n\nUnfolds lines at cursor.\nKeymap Name: editor::UnfoldLines\n\neditor: unfold recursive\n\nUnfolds recursively at cursor.\nKeymap Name: editor::UnfoldRecursive\n\neditor: unique lines case insensitive\n\nRemoves duplicate lines (case-insensitive).\nKeymap Name: editor::UniqueLinesCaseInsensitive\n\neditor: unique lines case sensitive\n\nRemoves duplicate lines (case-sensitive).\nKeymap Name: editor::UniqueLinesCaseSensitive\n\neditor: unwrap syntax node\n\nKeymap Name: editor::UnwrapSyntaxNode\n\neditor: wrap selections in tag\n\nWraps selections in tag specified by language.\nKeymap Name: editor::WrapSelectionsInTag\n\nfeedback: file bug report\n\nOpens the bug report form.\nKeymap Name: feedback::FileBugReport\n\nfeedback: give feedback\n\nOpens the feedback form.\nKeymap Name: feedback::GiveFeedback\n\nfile finder: select previous\n\nSelects the previous item in the file finder.\nKeymap Name: file_finder::SelectPrevious\n\nfile finder: toggle\n\nToggles the file finder interface.\nKeymap Name: file_finder::Toggle\n\nfile finder: toggle filter menu\n\nToggles the file filter menu.\nKeymap Name: file_finder::ToggleFilterMenu\n\nfile finder: toggle split menu\n\nToggles the split direction menu.\nKeymap Name: file_finder::ToggleSplitMenu\n\ngit: add\n\nAdds files to the git staging area.\nKeymap Name: git::Add\n\ngit: amend\n\nAmends the last commit with staged changes.\nKeymap Name: git::Amend\n\ngit: blame\n\nShows git blame information for the current file.\nKeymap Name: git::Blame\nDeprecated Aliases:editor::ToggleGitBlame, \n\ngit: branch\n\nOpens the git branch selector.\nKeymap Name: git::Branch\nDeprecated Aliases:branches::OpenRecent, \n\ngit: cancel\n\nCancels the current git operation.\nKeymap Name: git::Cancel\n\ngit: checkout branch\n\nChecks out a different git branch.\nKeymap Name: git::CheckoutBranch\n\ngit: clone\n\nClones a repository.\nKeymap Name: git::Clone\n\ngit: commit\n\nCreates a new commit with staged changes.\nKeymap Name: git::Commit\n\ngit: diff\n\nShows the diff between the working directory and the index.\nKeymap Name: git::Diff\n\ngit: expand commit editor\n\nExpands the commit message editor.\nKeymap Name: git::ExpandCommitEditor\n\ngit: fetch\n\nFetches changes from the remote repository.\nKeymap Name: git::Fetch\n\ngit: fetch from\n\nFetches changes from a specific remote.\nKeymap Name: git::FetchFrom\n\ngit: force push\n\nForce pushes commits to the remote repository.\nKeymap Name: git::ForcePush\n\ngit: generate commit message\n\nGenerates a commit message using AI.\nKeymap Name: git::GenerateCommitMessage\n\ngit: init\n\nInitializes a new git repository.\nKeymap Name: git::Init\n\ngit: open modified files\n\nOpens all modified files in the editor.\nKeymap Name: git::OpenModifiedFiles\n\ngit: pull\n\nPulls changes from the remote repository.\nKeymap Name: git::Pull\n\ngit: push\n\nPushes commits to the remote repository.\nKeymap Name: git::Push\n\ngit: push to\n\nPushes commits to a specific remote branch.\nKeymap Name: git::PushTo\n\ngit: reset onboarding\n\nResets the git onboarding state to show the tutorial again.\nKeymap Name: git::ResetOnboarding\n\ngit: restore\n\nRestores the selected hunks to their original state.\nKeymap Name: git::Restore\nDeprecated Aliases:editor::RevertSelectedHunks, \n\ngit: restore file\n\nRestores a file to its last committed state, discarding local changes.\nKeymap Name: git::RestoreFile\nDeprecated Aliases:editor::RevertFile, \n\ngit: restore tracked files\n\nRestores all tracked files to their last committed state.\nKeymap Name: git::RestoreTrackedFiles\n\ngit: select repo\n\nSelects a different repository.\nKeymap Name: git::SelectRepo\n\ngit: signoff\n\nEnable the --signoff option.\nKeymap Name: git::Signoff\n\ngit: stage all\n\nStages all changes in the repository.\nKeymap Name: git::StageAll\n\ngit: stage and next\n\nStages the current hunk and moves to the next one.\nKeymap Name: git::StageAndNext\n\ngit: stage file\n\nStages the current file.\nKeymap Name: git::StageFile\n\ngit: stage range\n\nStage status entries between an anchor entry and the cursor.\nKeymap Name: git::StageRange\n\ngit: stash all\n\nStashes all changes in the repository, including untracked files.\nKeymap Name: git::StashAll\n\ngit: stash pop\n\nPops the most recent stash.\nKeymap Name: git::StashPop\n\ngit: switch\n\nSwitches to a different git branch.\nKeymap Name: git::Switch\n\ngit: toggle staged\n\nToggles the staged state of the hunk or status entry at cursor.\nKeymap Name: git::ToggleStaged\n\ngit: trash untracked files\n\nMoves all untracked files to trash.\nKeymap Name: git::TrashUntrackedFiles\n\ngit: uncommit\n\nUndoes the last commit, keeping changes in the working directory.\nKeymap Name: git::Uncommit\n\ngit: unstage all\n\nUnstages all changes in the repository.\nKeymap Name: git::UnstageAll\n\ngit: unstage and next\n\nUnstages the current hunk and moves to the next one.\nKeymap Name: git::UnstageAndNext\n\ngit: unstage file\n\nUnstages the current file.\nKeymap Name: git::UnstageFile\n\ngit onboarding: open git integration onboarding\n\nOpens the git integration onboarding modal.\nKeymap Name: git_onboarding::OpenGitIntegrationOnboarding\n\ngit panel: close\n\nCloses the git panel.\nKeymap Name: git_panel::Close\n\ngit panel: focus changes\n\nFocuses on the changes list.\nKeymap Name: git_panel::FocusChanges\n\ngit panel: focus editor\n\nFocuses on the commit message editor.\nKeymap Name: git_panel::FocusEditor\n\ngit panel: open menu\n\nOpens the git panel menu.\nKeymap Name: git_panel::OpenMenu\n\ngit panel: toggle fill co authors\n\nToggles automatic co-author suggestions.\nKeymap Name: git_panel::ToggleFillCoAuthors\n\ngit panel: toggle focus\n\nToggles focus on the git panel.\nKeymap Name: git_panel::ToggleFocus\n\ngo to line: toggle\n\nToggles the go to line dialog.\nKeymap Name: go_to_line::Toggle\n\nicon theme selector: toggle\n\nToggles the icon theme selector interface.\nKeymap Name: icon_theme_selector::Toggle\n\njj: bookmark list\n\nOpens the Jujutsu bookmark list.\nKeymap Name: jj::BookmarkList\n\njournal: new journal entry\n\nCreates a new journal entry for today.\nKeymap Name: journal::NewJournalEntry\n\nkeymap editor: copy action\n\nCopies the action name to clipboard.\nKeymap Name: keymap_editor::CopyAction\n\nkeymap editor: copy context\n\nCopies the context predicate to clipboard.\nKeymap Name: keymap_editor::CopyContext\n\nkeymap editor: create binding\n\nCreates a new key binding for the selected action.\nKeymap Name: keymap_editor::CreateBinding\n\nkeymap editor: delete binding\n\nDeletes the selected key binding.\nKeymap Name: keymap_editor::DeleteBinding\n\nkeymap editor: edit binding\n\nEdits the selected key binding.\nKeymap Name: keymap_editor::EditBinding\n\nkeymap editor: show matching keybinds\n\nShows matching keystrokes for the currently selected binding\nKeymap Name: keymap_editor::ShowMatchingKeybinds\n\nkeymap editor: toggle conflict filter\n\nToggles Conflict Filtering\nKeymap Name: keymap_editor::ToggleConflictFilter\n\nkeymap editor: toggle exact keystroke matching\n\nToggles exact matching for keystroke search\nKeymap Name: keymap_editor::ToggleExactKeystrokeMatching\n\nkeymap editor: toggle keystroke search\n\nToggle Keystroke search\nKeymap Name: keymap_editor::ToggleKeystrokeSearch\n\nkeystroke input: clear keystrokes\n\nClears the recorded keystrokes\nKeymap Name: keystroke_input::ClearKeystrokes\n\nkeystroke input: start recording\n\nStarts recording keystrokes\nKeymap Name: keystroke_input::StartRecording\n\nkeystroke input: stop recording\n\nStops recording keystrokes\nKeymap Name: keystroke_input::StopRecording\n\nlanguage selector: toggle\n\nToggles the language selector modal.\nKeymap Name: language_selector::Toggle\n\nline ending: toggle\n\nToggles the line ending selector modal.\nKeymap Name: line_ending::Toggle\n\nlsp tool: toggle menu\n\nToggles the language server tool menu.\nKeymap Name: lsp_tool::ToggleMenu\n\nmarkdown: copy\n\nCopies the selected text to the clipboard.\nKeymap Name: markdown::Copy\n\nmarkdown: copy as markdown\n\nCopies the selected text as markdown to the clipboard.\nKeymap Name: markdown::CopyAsMarkdown\n\nmarkdown: move page down\n\nScrolls down by one page in the markdown preview.\nKeymap Name: markdown::MovePageDown\n\nmarkdown: move page up\n\nScrolls up by one page in the markdown preview.\nKeymap Name: markdown::MovePageUp\n\nmarkdown: open following preview\n\nOpens a following markdown preview that syncs with the editor.\nKeymap Name: markdown::OpenFollowingPreview\n\nmarkdown: open preview\n\nOpens a markdown preview for the current file.\nKeymap Name: markdown::OpenPreview\n\nmarkdown: open preview to the side\n\nOpens a markdown preview in a split pane.\nKeymap Name: markdown::OpenPreviewToTheSide\n\nmenu: cancel\n\nCancels the current menu operation.\nKeymap Name: menu::Cancel\n\nmenu: confirm\n\nConfirms the selected menu item.\nKeymap Name: menu::Confirm\n\nmenu: end slot\n\nKeymap Name: menu::EndSlot\n\nmenu: restart\n\nRestarts the menu from the beginning.\nKeymap Name: menu::Restart\n\nmenu: secondary confirm\n\nPerforms secondary confirmation action.\nKeymap Name: menu::SecondaryConfirm\n\nmenu: select first\n\nSelects the first item in the menu.\nKeymap Name: menu::SelectFirst\n\nmenu: select last\n\nSelects the last item in the menu.\nKeymap Name: menu::SelectLast\n\nmenu: select next\n\nSelects the next item in the menu.\nKeymap Name: menu::SelectNext\n\nmenu: select previous\n\nSelects the previous item in the menu.\nKeymap Name: menu::SelectPrevious\n\nnotebook: add code block\n\nAdds a new code cell.\nKeymap Name: notebook::AddCodeBlock\n\nnotebook: add markdown block\n\nAdds a new markdown cell.\nKeymap Name: notebook::AddMarkdownBlock\n\nnotebook: clear outputs\n\nClears all cell outputs.\nKeymap Name: notebook::ClearOutputs\n\nnotebook: move cell down\n\nMoves the current cell down.\nKeymap Name: notebook::MoveCellDown\n\nnotebook: move cell up\n\nMoves the current cell up.\nKeymap Name: notebook::MoveCellUp\n\nnotebook: open notebook\n\nOpens a Jupyter notebook file.\nKeymap Name: notebook::OpenNotebook\n\nnotebook: run all\n\nRuns all cells in the notebook.\nKeymap Name: notebook::RunAll\n\nnotification panel: toggle focus\n\nToggles focus on the notification panel.\nKeymap Name: notification_panel::ToggleFocus\n\nonboarding: activate a i setup page\n\nActivates the AI Setup page.\nKeymap Name: onboarding::ActivateAISetupPage\n\nonboarding: activate basics page\n\nActivates the Basics page.\nKeymap Name: onboarding::ActivateBasicsPage\n\nonboarding: activate editing page\n\nActivates the Editing page.\nKeymap Name: onboarding::ActivateEditingPage\n\nonboarding: finish\n\nFinish the onboarding process.\nKeymap Name: onboarding::Finish\n\nonboarding: open account\n\nOpen the user account in zed.dev while in the onboarding flow.\nKeymap Name: onboarding::OpenAccount\n\nonboarding: reset hints\n\nResets the welcome screen hints to their initial state.\nKeymap Name: onboarding::ResetHints\n\nonboarding: sign in\n\nSign in while in the onboarding flow.\nKeymap Name: onboarding::SignIn\n\noutline: toggle\n\nKeymap Name: outline::Toggle\n\noutline panel: collapse all entries\n\nCollapses all entries in the outline tree.\nKeymap Name: outline_panel::CollapseAllEntries\n\noutline panel: collapse selected entry\n\nCollapses the currently selected entry.\nKeymap Name: outline_panel::CollapseSelectedEntry\n\noutline panel: expand all entries\n\nExpands all entries in the outline tree.\nKeymap Name: outline_panel::ExpandAllEntries\n\noutline panel: expand selected entry\n\nExpands the currently selected entry.\nKeymap Name: outline_panel::ExpandSelectedEntry\n\noutline panel: fold directory\n\nFolds the selected directory.\nKeymap Name: outline_panel::FoldDirectory\n\noutline panel: open selected entry\n\nOpens the selected entry in the editor.\nKeymap Name: outline_panel::OpenSelectedEntry\n\noutline panel: reveal in file manager\n\nReveals the selected item in the system file manager.\nKeymap Name: outline_panel::RevealInFileManager\n\noutline panel: select parent\n\nSelects the parent of the current entry.\nKeymap Name: outline_panel::SelectParent\n\noutline panel: toggle active editor pin\n\nToggles the pin status of the active editor.\nKeymap Name: outline_panel::ToggleActiveEditorPin\n\noutline panel: toggle focus\n\nToggles focus on the outline panel.\nKeymap Name: outline_panel::ToggleFocus\n\noutline panel: unfold directory\n\nUnfolds the selected directory.\nKeymap Name: outline_panel::UnfoldDirectory\n\npane: activate item\n\nActivates a specific item in the pane by its index.\nKeymap Name: pane::ActivateItem\n\npane: activate last item\n\nActivates the last item in the pane.\nKeymap Name: pane::ActivateLastItem\n\npane: activate next item\n\nActivates the next item in the pane.\nKeymap Name: pane::ActivateNextItem\n\npane: activate previous item\n\nActivates the previous item in the pane.\nKeymap Name: pane::ActivatePreviousItem\n\npane: alternate file\n\nSwitches to the alternate file.\nKeymap Name: pane::AlternateFile\n\npane: close active item\n\nCloses the currently active item in the pane.\nKeymap Name: pane::CloseActiveItem\n\npane: close all items\n\nCloses all items in the pane.\nKeymap Name: pane::CloseAllItems\n\npane: close clean items\n\nCloses all items that have no unsaved changes.\nKeymap Name: pane::CloseCleanItems\n\npane: close items to the left\n\nCloses all items to the left of the current item.\nKeymap Name: pane::CloseItemsToTheLeft\n\npane: close items to the right\n\nCloses all items to the right of the current item.\nKeymap Name: pane::CloseItemsToTheRight\n\npane: close other items\n\nCloses all inactive items in the pane.\nKeymap Name: pane::CloseOtherItems\nDeprecated Aliases:pane::CloseInactiveItems, \n\npane: deploy search\n\nOpens the search interface with the specified configuration.\nKeymap Name: pane::DeploySearch\n\npane: go back\n\nNavigates back in history.\nKeymap Name: pane::GoBack\n\npane: go forward\n\nNavigates forward in history.\nKeymap Name: pane::GoForward\n\npane: join all\n\nJoins all panes into one.\nKeymap Name: pane::JoinAll\n\npane: join into next\n\nJoins this pane into the next pane.\nKeymap Name: pane::JoinIntoNext\n\npane: reopen closed item\n\nReopens the most recently closed item.\nKeymap Name: pane::ReopenClosedItem\n\npane: reveal in project panel\n\nReveals the current item in the project panel.\nKeymap Name: pane::RevealInProjectPanel\n\npane: split down\n\nSplits the pane downward.\nKeymap Name: pane::SplitDown\n\npane: split horizontal\n\nSplits the pane horizontally.\nKeymap Name: pane::SplitHorizontal\n\npane: split left\n\nSplits the pane to the left.\nKeymap Name: pane::SplitLeft\n\npane: split right\n\nSplits the pane to the right.\nKeymap Name: pane::SplitRight\n\npane: split up\n\nSplits the pane upward.\nKeymap Name: pane::SplitUp\n\npane: split vertical\n\nSplits the pane vertically.\nKeymap Name: pane::SplitVertical\n\npane: swap item left\n\nSwaps the current item with the one to the left.\nKeymap Name: pane::SwapItemLeft\n\npane: swap item right\n\nSwaps the current item with the one to the right.\nKeymap Name: pane::SwapItemRight\n\npane: toggle pin tab\n\nToggles pin status for the current tab.\nKeymap Name: pane::TogglePinTab\n\npane: toggle preview tab\n\nToggles preview mode for the current tab.\nKeymap Name: pane::TogglePreviewTab\n\npane: unpin all tabs\n\nUnpins all tabs in the pane.\nKeymap Name: pane::UnpinAllTabs\n\npanel: next panel tab\n\nNavigates to the next tab in the panel.\nKeymap Name: panel::NextPanelTab\n\npanel: previous panel tab\n\nNavigates to the previous tab in the panel.\nKeymap Name: panel::PreviousPanelTab\n\npicker: confirm completion\n\nConfirms the selected completion in the picker.\nKeymap Name: picker::ConfirmCompletion\n\npicker: confirm input\n\nConfirmInput is an alternative editor action which - instead of selecting active picker entry - treats pickers editor input literally,\nperforming some kind of action on it.\nKeymap Name: picker::ConfirmInput\n\nproject panel: collapse all entries\n\nCollapses all entries in the project tree.\nKeymap Name: project_panel::CollapseAllEntries\n\nproject panel: collapse selected entry\n\nCollapses the selected entry in the project tree.\nKeymap Name: project_panel::CollapseSelectedEntry\n\nproject panel: compare marked files\n\nOpens a diff view to compare two marked files.\nKeymap Name: project_panel::CompareMarkedFiles\n\nproject panel: copy\n\nCopies the selected file or directory.\nKeymap Name: project_panel::Copy\n\nproject panel: cut\n\nCuts the selected file or directory.\nKeymap Name: project_panel::Cut\n\nproject panel: delete\n\nPermanently deletes the selected file or directory.\nKeymap Name: project_panel::Delete\n\nproject panel: duplicate\n\nDuplicates the selected file or directory.\nKeymap Name: project_panel::Duplicate\n\nproject panel: expand selected entry\n\nExpands the selected entry in the project tree.\nKeymap Name: project_panel::ExpandSelectedEntry\n\nproject panel: fold directory\n\nFolds the selected directory.\nKeymap Name: project_panel::FoldDirectory\n\nproject panel: new directory\n\nCreates a new directory.\nKeymap Name: project_panel::NewDirectory\n\nproject panel: new file\n\nCreates a new file.\nKeymap Name: project_panel::NewFile\n\nproject panel: new search in directory\n\nStarts a new search in the selected directory.\nKeymap Name: project_panel::NewSearchInDirectory\n\nproject panel: open\n\nOpens the selected file in the editor.\nKeymap Name: project_panel::Open\n\nproject panel: open permanent\n\nOpens the selected file in a permanent tab.\nKeymap Name: project_panel::OpenPermanent\n\nproject panel: paste\n\nPastes the previously cut or copied item.\nKeymap Name: project_panel::Paste\n\nproject panel: remove from project\n\nRemoves the selected folder from the project.\nKeymap Name: project_panel::RemoveFromProject\n\nproject panel: rename\n\nRenames the selected file or directory.\nKeymap Name: project_panel::Rename\n\nproject panel: reveal in file manager\n\nReveals the selected item in the system file manager.\nKeymap Name: project_panel::RevealInFileManager\n\nproject panel: select next diagnostic\n\nSelects the next entry with diagnostics.\nKeymap Name: project_panel::SelectNextDiagnostic\n\nproject panel: select next directory\n\nSelects the next directory.\nKeymap Name: project_panel::SelectNextDirectory\n\nproject panel: select next git entry\n\nSelects the next entry with git changes.\nKeymap Name: project_panel::SelectNextGitEntry\n\nproject panel: select parent\n\nSelects the parent directory.\nKeymap Name: project_panel::SelectParent\n\nproject panel: select prev diagnostic\n\nSelects the previous entry with diagnostics.\nKeymap Name: project_panel::SelectPrevDiagnostic\n\nproject panel: select prev directory\n\nSelects the previous directory.\nKeymap Name: project_panel::SelectPrevDirectory\n\nproject panel: select prev git entry\n\nSelects the previous entry with git changes.\nKeymap Name: project_panel::SelectPrevGitEntry\n\nproject panel: toggle focus\n\nToggles focus on the project panel.\nKeymap Name: project_panel::ToggleFocus\n\nproject panel: toggle hide git ignore\n\nToggles visibility of git-ignored files.\nKeymap Name: project_panel::ToggleHideGitIgnore\n\nproject panel: trash\n\nMoves the selected file or directory to the system trash.\nKeymap Name: project_panel::Trash\n\nproject panel: unfold directory\n\nUnfolds the selected directory.\nKeymap Name: project_panel::UnfoldDirectory\n\nproject search: next field\n\nMoves to the next input field.\nKeymap Name: project_search::NextField\n\nproject search: search in new\n\nSearches in a new project search tab.\nKeymap Name: project_search::SearchInNew\n\nproject search: toggle filters\n\nToggles the search filters panel.\nKeymap Name: project_search::ToggleFilters\n\nproject search: toggle focus\n\nToggles focus between the search bar and the search results.\nKeymap Name: project_search::ToggleFocus\n\nproject symbols: toggle\n\nToggles the project symbols search.\nKeymap Name: project_symbols::Toggle\n\nprojects: open recent\n\nOpens the recent projects interface.\nKeymap Name: projects::OpenRecent\n\nprojects: open remote\n\nCreates a project from a selected template.\nKeymap Name: projects::OpenRemote\n\nrepl: clear outputs\n\nClears all outputs in the REPL.\nKeymap Name: repl::ClearOutputs\n\nrepl: interrupt\n\nInterrupts the currently running kernel.\nKeymap Name: repl::Interrupt\n\nrepl: refresh kernelspecs\n\nRefreshes the list of available kernelspecs.\nKeymap Name: repl::RefreshKernelspecs\n\nrepl: restart\n\nRestarts the current kernel.\nKeymap Name: repl::Restart\n\nrepl: run\n\nRuns the current cell and advances to the next one.\nKeymap Name: repl::Run\n\nrepl: run in place\n\nRuns the current cell without advancing.\nKeymap Name: repl::RunInPlace\n\nrepl: sessions\n\nOpens the REPL sessions panel.\nKeymap Name: repl::Sessions\n\nrepl: shutdown\n\nShuts down the current kernel.\nKeymap Name: repl::Shutdown\n\nrules library: delete rule\n\nDeletes the selected rule.\nKeymap Name: rules_library::DeleteRule\n\nrules library: duplicate rule\n\nDuplicates the selected rule.\nKeymap Name: rules_library::DuplicateRule\n\nrules library: new rule\n\nCreates a new rule in the rules library.\nKeymap Name: rules_library::NewRule\n\nrules library: toggle default rule\n\nToggles whether the selected rule is a default rule.\nKeymap Name: rules_library::ToggleDefaultRule\n\nsearch: cycle mode\n\nCycles through search modes.\nKeymap Name: search::CycleMode\n\nsearch: focus search\n\nFocuses on the search input field.\nKeymap Name: search::FocusSearch\n\nsearch: next history query\n\nNavigates to the next query in search history.\nKeymap Name: search::NextHistoryQuery\n\nsearch: previous history query\n\nNavigates to the previous query in search history.\nKeymap Name: search::PreviousHistoryQuery\n\nsearch: replace all\n\nReplaces all matches.\nKeymap Name: search::ReplaceAll\n\nsearch: replace next\n\nReplaces the next match.\nKeymap Name: search::ReplaceNext\n\nsearch: select all matches\n\nSelects all search matches.\nKeymap Name: search::SelectAllMatches\n\nsearch: select next match\n\nSelects the next search match.\nKeymap Name: search::SelectNextMatch\n\nsearch: select previous match\n\nSelects the previous search match.\nKeymap Name: search::SelectPreviousMatch\n\nsearch: toggle case sensitive\n\nToggles case-sensitive search.\nKeymap Name: search::ToggleCaseSensitive\n\nsearch: toggle include ignored\n\nToggles searching in ignored files.\nKeymap Name: search::ToggleIncludeIgnored\n\nsearch: toggle regex\n\nToggles regular expression mode.\nKeymap Name: search::ToggleRegex\n\nsearch: toggle replace\n\nToggles the replace interface.\nKeymap Name: search::ToggleReplace\n\nsearch: toggle selection\n\nToggles searching within selection only.\nKeymap Name: search::ToggleSelection\n\nsearch: toggle whole word\n\nToggles whole word matching.\nKeymap Name: search::ToggleWholeWord\n\nsettings profile selector: toggle\n\nKeymap Name: settings_profile_selector::Toggle\n\nsnippets: configure snippets\n\nOpens the snippets configuration file.\nKeymap Name: snippets::ConfigureSnippets\n\nsnippets: open folder\n\nOpens the snippets folder in the file manager.\nKeymap Name: snippets::OpenFolder\n\nsupermaven: sign out\n\nSigns out of Supermaven.\nKeymap Name: supermaven::SignOut\n\nsvg: open following preview\n\nOpens a following SVG preview that syncs with the editor.\nKeymap Name: svg::OpenFollowingPreview\n\nsvg: open preview\n\nOpens an SVG preview for the current file.\nKeymap Name: svg::OpenPreview\n\nsvg: open preview to the side\n\nOpens an SVG preview in a split pane.\nKeymap Name: svg::OpenPreviewToTheSide\n\nsyntax tree view: use active editor\n\nUpdate the syntax tree view to show the last focused file.\nKeymap Name: syntax_tree_view::UseActiveEditor\n\ntab switcher: close selected item\n\nCloses the selected item in the tab switcher.\nKeymap Name: tab_switcher::CloseSelectedItem\n\ntab switcher: toggle\n\nToggles the tab switcher interface.\nKeymap Name: tab_switcher::Toggle\n\ntab switcher: toggle all\n\nToggles between showing all tabs or just the current pane's tabs.\nKeymap Name: tab_switcher::ToggleAll\n\ntask: rerun\n\nReruns the last task.\nKeymap Name: task::Rerun\n\ntask: spawn\n\nSpawns a task with name or opens tasks modal.\nKeymap Name: task::Spawn\n\nterminal: clear\n\nClears the terminal screen.\nKeymap Name: terminal::Clear\n\nterminal: copy\n\nCopies selected text to the clipboard.\nKeymap Name: terminal::Copy\n\nterminal: paste\n\nPastes from the clipboard.\nKeymap Name: terminal::Paste\n\nterminal: rerun task\n\nReruns the last executed task in the terminal.\nKeymap Name: terminal::RerunTask\n\nterminal: scroll half page down\n\nScrolls down by half a page.\nKeymap Name: terminal::ScrollHalfPageDown\n\nterminal: scroll half page up\n\nScrolls up by half a page.\nKeymap Name: terminal::ScrollHalfPageUp\n\nterminal: scroll line down\n\nScrolls down by one line.\nKeymap Name: terminal::ScrollLineDown\n\nterminal: scroll line up\n\nScrolls up by one line.\nKeymap Name: terminal::ScrollLineUp\n\nterminal: scroll page down\n\nScrolls down by one page.\nKeymap Name: terminal::ScrollPageDown\n\nterminal: scroll page up\n\nScrolls up by one page.\nKeymap Name: terminal::ScrollPageUp\n\nterminal: scroll to bottom\n\nScrolls to the bottom of the terminal buffer.\nKeymap Name: terminal::ScrollToBottom\n\nterminal: scroll to top\n\nScrolls to the top of the terminal buffer.\nKeymap Name: terminal::ScrollToTop\n\nterminal: search test\n\nSearches for text in the terminal.\nKeymap Name: terminal::SearchTest\n\nterminal: select all\n\nSelects all text in the terminal.\nKeymap Name: terminal::SelectAll\n\nterminal: send keystroke\n\nSends a keystroke sequence to the terminal.\nKeymap Name: terminal::SendKeystroke\n\nterminal: send text\n\nSends the specified text directly to the terminal.\nKeymap Name: terminal::SendText\n\nterminal: show character palette\n\nShows the character palette for special characters.\nKeymap Name: terminal::ShowCharacterPalette\n\nterminal: toggle vi mode\n\nToggles vi mode in the terminal.\nKeymap Name: terminal::ToggleViMode\n\nterminal panel: toggle\n\nToggles the terminal panel.\nKeymap Name: terminal_panel::Toggle\n\nterminal panel: toggle focus\n\nToggles focus on the terminal panel.\nKeymap Name: terminal_panel::ToggleFocus\n\ntheme selector: reload\n\nReloads all themes from disk.\nKeymap Name: theme_selector::Reload\n\ntheme selector: toggle\n\nToggles the theme selector interface.\nKeymap Name: theme_selector::Toggle\n\ntoast: run action\n\nRuns the action associated with a toast notification.\nKeymap Name: toast::RunAction\n\ntoolchain: add toolchain\n\nAdds a new toolchain for the current project.\nKeymap Name: toolchain::AddToolchain\n\ntoolchain: select\n\nSelects a toolchain for the current project.\nKeymap Name: toolchain::Select\n\nvariable list: add watch\n\nAdds the selected variable to the watch list.\nKeymap Name: variable_list::AddWatch\n\nvariable list: collapse selected entry\n\nCollapses the selected variable entry to hide its children.\nKeymap Name: variable_list::CollapseSelectedEntry\n\nvariable list: copy variable name\n\nCopies the variable name to the clipboard.\nKeymap Name: variable_list::CopyVariableName\n\nvariable list: copy variable value\n\nCopies the variable value to the clipboard.\nKeymap Name: variable_list::CopyVariableValue\n\nvariable list: edit variable\n\nEdits the value of the selected variable.\nKeymap Name: variable_list::EditVariable\n\nvariable list: expand selected entry\n\nExpands the selected variable entry to show its children.\nKeymap Name: variable_list::ExpandSelectedEntry\n\nvariable list: go to memory\n\nJump to variable's memory location.\nKeymap Name: variable_list::GoToMemory\n\nvariable list: remove watch\n\nRemoves the selected variable from the watch list.\nKeymap Name: variable_list::RemoveWatch\n\nvim: angle brackets\n\nSelects text within angle brackets.\nKeymap Name: vim::AngleBrackets\n\nvim: any brackets\n\nSelects text within any type of brackets.\nKeymap Name: vim::AnyBrackets\n\nvim: any quotes\n\nSelects text within any type of quotes.\nKeymap Name: vim::AnyQuotes\n\nvim: argument\n\nSelects a function argument.\nKeymap Name: vim::Argument\n\nvim: argument required\n\nIndicates that an argument is required for the command.\nKeymap Name: vim::ArgumentRequired\n\nvim: auto indent\n\nAutomatically adjusts indentation based on syntax.\nKeymap Name: vim::AutoIndent\n\nvim: back quotes\n\nSelects text within backticks.\nKeymap Name: vim::BackQuotes\n\nvim: change case\n\nToggles the case of selected text.\nKeymap Name: vim::ChangeCase\n\nvim: change list newer\n\nNavigates to a newer position in the change list.\nKeymap Name: vim::ChangeListNewer\n\nvim: change list older\n\nNavigates to an older position in the change list.\nKeymap Name: vim::ChangeListOlder\n\nvim: change to end of line\n\nChanges from cursor to end of line.\nKeymap Name: vim::ChangeToEndOfLine\n\nvim: class\n\nSelects a class definition.\nKeymap Name: vim::Class\n\nvim: clear exchange\n\nClears the exchange register.\nKeymap Name: vim::ClearExchange\n\nvim: clear operators\n\nClears any pending operators.\nKeymap Name: vim::ClearOperators\n\nvim: column left\n\nScrolls left by one column.\nKeymap Name: vim::ColumnLeft\n\nvim: column right\n\nScrolls right by one column.\nKeymap Name: vim::ColumnRight\n\nvim: comment\n\nSelects a comment block.\nKeymap Name: vim::Comment\n\nvim: convert to lower case\n\nConverts selected text to lowercase.\nKeymap Name: vim::ConvertToLowerCase\n\nvim: convert to rot13\n\nApplies ROT13 cipher to selected text.\nKeymap Name: vim::ConvertToRot13\n\nvim: convert to rot47\n\nApplies ROT47 cipher to selected text.\nKeymap Name: vim::ConvertToRot47\n\nvim: convert to upper case\n\nConverts selected text to uppercase.\nKeymap Name: vim::ConvertToUpperCase\n\nvim: count command\n\nExecutes a command with a count prefix.\nKeymap Name: vim::CountCommand\n\nvim: curly brackets\n\nSelects text within curly brackets.\nKeymap Name: vim::CurlyBrackets\n\nvim: current line\n\nSelects the current line.\nKeymap Name: vim::CurrentLine\n\nvim: decrement\n\nDecrements the number under the cursor or toggles boolean values.\nKeymap Name: vim::Decrement\n\nvim: delete left\n\nDeletes character to the left.\nKeymap Name: vim::DeleteLeft\n\nvim: delete right\n\nDeletes character to the right.\nKeymap Name: vim::DeleteRight\n\nvim: delete to end of line\n\nDeletes from cursor to end of line.\nKeymap Name: vim::DeleteToEndOfLine\n\nvim: double quotes\n\nSelects text within double quotes.\nKeymap Name: vim::DoubleQuotes\n\nvim: down\n\nMoves cursor down by the specified number of lines.\nKeymap Name: vim::Down\n\nvim: end of document\n\nMoves to the end of the document.\nKeymap Name: vim::EndOfDocument\n\nvim: end of line\n\nMoves to the end of the current line.\nKeymap Name: vim::EndOfLine\n\nvim: end of line downward\n\nMoves to the end of a line downward.\nKeymap Name: vim::EndOfLineDownward\n\nvim: end of paragraph\n\nMoves to the end of the paragraph.\nKeymap Name: vim::EndOfParagraph\n\nvim: end repeat\n\nEnds the repeat recording.\nKeymap Name: vim::EndRepeat\n\nvim: enter\n\nInserts a newline.\nKeymap Name: vim::Enter\n\nvim: entire file\n\nSelects the entire file.\nKeymap Name: vim::EntireFile\n\nvim: exchange\n\nExchanges text regions.\nKeymap Name: vim::Exchange\n\nvim: find command\n\nExecutes a find command to search for patterns in the buffer.\nKeymap Name: vim::FindCommand\n\nvim: first non whitespace\n\nMoves to the first non-whitespace character on the current line.\nKeymap Name: vim::FirstNonWhitespace\n\nvim: go to column\n\nGoes to a specific column number.\nKeymap Name: vim::GoToColumn\n\nvim: go to percentage\n\nGoes to a percentage position in the file.\nKeymap Name: vim::GoToPercentage\n\nvim: half page left\n\nScrolls left by half a page's width.\nKeymap Name: vim::HalfPageLeft\n\nvim: half page right\n\nScrolls right by half a page's width.\nKeymap Name: vim::HalfPageRight\n\nvim: helix append\n\nAppends at the end of the selection.\nKeymap Name: vim::HelixAppend\n\nvim: helix collapse selection\n\nCollapse the current selection\nKeymap Name: vim::HelixCollapseSelection\n\nvim: helix delete\n\nDeletes using Helix-style behavior.\nKeymap Name: vim::HelixDelete\n\nvim: helix goto last modification\n\nGoes to the location of the last modification.\nKeymap Name: vim::HelixGotoLastModification\n\nvim: helix insert\n\nInserts at the beginning of the selection.\nKeymap Name: vim::HelixInsert\n\nvim: helix normal after\n\nSwitches to normal mode after the cursor (Helix-style).\nKeymap Name: vim::HelixNormalAfter\n\nvim: helix select line\n\nSelect entire line or multiple lines, extending downwards.\nKeymap Name: vim::HelixSelectLine\n\nvim: helix yank\n\nYanks the current selection or character if no selection.\nKeymap Name: vim::HelixYank\n\nvim: increment\n\nIncrements the number under the cursor or toggles boolean values.\nKeymap Name: vim::Increment\n\nvim: indent\n\nIncreases indentation of selected lines.\nKeymap Name: vim::Indent\n\nvim: indent obj\n\nSelects text at the same indentation level.\nKeymap Name: vim::IndentObj\n\nvim: inner object\n\nSelects inner text object.\nKeymap Name: vim::InnerObject\n\nvim: insert after\n\nInserts text after the cursor.\nKeymap Name: vim::InsertAfter\n\nvim: insert at previous\n\nInserts at the previous insert position.\nKeymap Name: vim::InsertAtPrevious\n\nvim: insert before\n\nInserts text before the cursor.\nKeymap Name: vim::InsertBefore\n\nvim: insert empty line above\n\nInserts an empty line above without entering insert mode.\nKeymap Name: vim::InsertEmptyLineAbove\n\nvim: insert empty line below\n\nInserts an empty line below without entering insert mode.\nKeymap Name: vim::InsertEmptyLineBelow\n\nvim: insert end of line\n\nInserts at the end of the line.\nKeymap Name: vim::InsertEndOfLine\n\nvim: insert first non whitespace\n\nInserts at the first non-whitespace character.\nKeymap Name: vim::InsertFirstNonWhitespace\n\nvim: insert from above\n\nInserts the next character from the line above into the current line.\nKeymap Name: vim::InsertFromAbove\n\nvim: insert from below\n\nInserts the next character from the line below into the current line.\nKeymap Name: vim::InsertFromBelow\n\nvim: insert line above\n\nInserts a new line above the current line.\nKeymap Name: vim::InsertLineAbove\n\nvim: insert line below\n\nInserts a new line below the current line.\nKeymap Name: vim::InsertLineBelow\n\nvim: join lines\n\nJoins the current line with the next line.\nKeymap Name: vim::JoinLines\n\nvim: join lines no whitespace\n\nJoins lines without adding whitespace.\nKeymap Name: vim::JoinLinesNoWhitespace\n\nvim: left\n\nMoves cursor left one character.\nKeymap Name: vim::Left\n\nvim: line down\n\nScrolls down by one line.\nKeymap Name: vim::LineDown\n\nvim: line up\n\nScrolls up by one line.\nKeymap Name: vim::LineUp\n\nvim: literal\n\nKeymap Name: vim::Literal\n\nvim: matching\n\nMoves to the matching bracket or delimiter.\nKeymap Name: vim::Matching\n\nvim: maximize pane\n\nMaximizes the current pane.\nKeymap Name: vim::MaximizePane\n\nvim: method\n\nSelects a method or function.\nKeymap Name: vim::Method\n\nvim: middle of line\n\nMoves to the middle of the current line.\nKeymap Name: vim::MiddleOfLine\n\nvim: mini brackets\n\nSelects text within the nearest brackets.\nKeymap Name: vim::MiniBrackets\n\nvim: mini quotes\n\nSelects text within the nearest quotes (single or double).\nKeymap Name: vim::MiniQuotes\n\nvim: move to next\n\nMoves to the next search match.\nKeymap Name: vim::MoveToNext\n\nvim: move to next match\n\nMoves to the next search match.\nKeymap Name: vim::MoveToNextMatch\n\nvim: move to previous\n\nMoves to the previous search match.\nKeymap Name: vim::MoveToPrevious\n\nvim: move to previous match\n\nMoves to the previous search match.\nKeymap Name: vim::MoveToPreviousMatch\n\nvim: next comment\n\nMoves to the next comment.\nKeymap Name: vim::NextComment\n\nvim: next greater indent\n\nMoves to the next line with greater indentation.\nKeymap Name: vim::NextGreaterIndent\n\nvim: next lesser indent\n\nMoves to the next line with lesser indentation.\nKeymap Name: vim::NextLesserIndent\n\nvim: next line start\n\nMoves to the start of the next line.\nKeymap Name: vim::NextLineStart\n\nvim: next method end\n\nMoves to the end of the next method.\nKeymap Name: vim::NextMethodEnd\n\nvim: next method start\n\nMoves to the start of the next method.\nKeymap Name: vim::NextMethodStart\n\nvim: next same indent\n\nMoves to the next line with the same indentation.\nKeymap Name: vim::NextSameIndent\n\nvim: next section end\n\nMoves to the end of the next section.\nKeymap Name: vim::NextSectionEnd\n\nvim: next section start\n\nMoves to the start of the next section.\nKeymap Name: vim::NextSectionStart\n\nvim: next subword end\n\nMoves to the end of the next subword.\nKeymap Name: vim::NextSubwordEnd\n\nvim: next subword start\n\nMoves to the start of the next subword.\nKeymap Name: vim::NextSubwordStart\n\nvim: next word end\n\nMoves to the end of the next word.\nKeymap Name: vim::NextWordEnd\n\nvim: next word start\n\nMoves to the start of the next word.\nKeymap Name: vim::NextWordStart\n\nvim: normal before\n\nSwitches to normal mode with cursor positioned before the current character.\nKeymap Name: vim::NormalBefore\n\nvim: number\n\nNumber is used to manage vim's count. Pushing a digit\nmultiplies the current value by 10 and adds the digit.\nKeymap Name: vim::Number\n\nvim: open default keymap\n\nOpens the default keymap file.\nKeymap Name: vim::OpenDefaultKeymap\n\nvim: other end\n\nMoves cursor to the other end of the selection.\nKeymap Name: vim::OtherEnd\n\nvim: other end row aware\n\nMoves cursor to the other end of the selection (row-aware).\nKeymap Name: vim::OtherEndRowAware\n\nvim: outdent\n\nDecreases indentation of selected lines.\nKeymap Name: vim::Outdent\n\nvim: page down\n\nScrolls down by one page.\nKeymap Name: vim::PageDown\n\nvim: page up\n\nScrolls up by one page.\nKeymap Name: vim::PageUp\n\nvim: paragraph\n\nSelects a paragraph text object.\nKeymap Name: vim::Paragraph\n\nvim: parentheses\n\nSelects text within parentheses.\nKeymap Name: vim::Parentheses\n\nvim: paste\n\nPastes text from the specified register at the cursor position.\nKeymap Name: vim::Paste\n\nvim: previous comment\n\nMoves to the previous comment.\nKeymap Name: vim::PreviousComment\n\nvim: previous greater indent\n\nMoves to the previous line with greater indentation.\nKeymap Name: vim::PreviousGreaterIndent\n\nvim: previous lesser indent\n\nMoves to the previous line with lesser indentation.\nKeymap Name: vim::PreviousLesserIndent\n\nvim: previous line start\n\nMoves to the start of the previous line.\nKeymap Name: vim::PreviousLineStart\n\nvim: previous method end\n\nMoves to the end of the previous method.\nKeymap Name: vim::PreviousMethodEnd\n\nvim: previous method start\n\nMoves to the start of the previous method.\nKeymap Name: vim::PreviousMethodStart\n\nvim: previous same indent\n\nMoves to the previous line with the same indentation.\nKeymap Name: vim::PreviousSameIndent\n\nvim: previous section end\n\nMoves to the end of the previous section.\nKeymap Name: vim::PreviousSectionEnd\n\nvim: previous section start\n\nMoves to the start of the previous section.\nKeymap Name: vim::PreviousSectionStart\n\nvim: previous subword end\n\nMoves to the end of the previous subword.\nKeymap Name: vim::PreviousSubwordEnd\n\nvim: previous subword start\n\nMoves to the start of the previous subword.\nKeymap Name: vim::PreviousSubwordStart\n\nvim: previous word end\n\nMoves to the end of the previous word.\nKeymap Name: vim::PreviousWordEnd\n\nvim: previous word start\n\nMoves to the start of the previous word.\nKeymap Name: vim::PreviousWordStart\n\nvim: push add surrounds\n\nKeymap Name: vim::PushAddSurrounds\n\nvim: push auto indent\n\nStarts an auto-indent operation.\nKeymap Name: vim::PushAutoIndent\n\nvim: push change\n\nStarts a change operation.\nKeymap Name: vim::PushChange\n\nvim: push change surrounds\n\nKeymap Name: vim::PushChangeSurrounds\n\nvim: push delete\n\nStarts a delete operation.\nKeymap Name: vim::PushDelete\n\nvim: push delete surrounds\n\nDeletes surrounding characters.\nKeymap Name: vim::PushDeleteSurrounds\n\nvim: push digraph\n\nKeymap Name: vim::PushDigraph\n\nvim: push find backward\n\nKeymap Name: vim::PushFindBackward\n\nvim: push find forward\n\nKeymap Name: vim::PushFindForward\n\nvim: push forced motion\n\nStarts a forced motion.\nKeymap Name: vim::PushForcedMotion\n\nvim: push indent\n\nStarts an indent operation.\nKeymap Name: vim::PushIndent\n\nvim: push jump\n\nKeymap Name: vim::PushJump\n\nvim: push literal\n\nKeymap Name: vim::PushLiteral\n\nvim: push lowercase\n\nConverts to lowercase.\nKeymap Name: vim::PushLowercase\n\nvim: push mark\n\nSets a mark at the current position.\nKeymap Name: vim::PushMark\n\nvim: push object\n\nKeymap Name: vim::PushObject\n\nvim: push opposite case\n\nToggles case.\nKeymap Name: vim::PushOppositeCase\n\nvim: push outdent\n\nStarts an outdent operation.\nKeymap Name: vim::PushOutdent\n\nvim: push record register\n\nStarts recording to a register.\nKeymap Name: vim::PushRecordRegister\n\nvim: push register\n\nSelects a register.\nKeymap Name: vim::PushRegister\n\nvim: push replace\n\nStarts a replace operation.\nKeymap Name: vim::PushReplace\n\nvim: push replace with register\n\nReplaces with register contents.\nKeymap Name: vim::PushReplaceWithRegister\n\nvim: push replay register\n\nReplays a register.\nKeymap Name: vim::PushReplayRegister\n\nvim: push rewrap\n\nStarts a rewrap operation.\nKeymap Name: vim::PushRewrap\n\nvim: push rot13\n\nApplies ROT13 encoding.\nKeymap Name: vim::PushRot13\n\nvim: push rot47\n\nApplies ROT47 encoding.\nKeymap Name: vim::PushRot47\n\nvim: push shell command\n\nStarts a shell command operation.\nKeymap Name: vim::PushShellCommand\n\nvim: push sneak\n\nKeymap Name: vim::PushSneak\n\nvim: push sneak backward\n\nKeymap Name: vim::PushSneakBackward\n\nvim: push toggle comments\n\nToggles comments.\nKeymap Name: vim::PushToggleComments\n\nvim: push uppercase\n\nConverts to uppercase.\nKeymap Name: vim::PushUppercase\n\nvim: push yank\n\nStarts a yank operation.\nKeymap Name: vim::PushYank\n\nvim: quotes\n\nSelects text within single quotes.\nKeymap Name: vim::Quotes\n\nvim: redo\n\nRedoes the last undone change.\nKeymap Name: vim::Redo\n\nvim: repeat\n\nRepeats the last change.\nKeymap Name: vim::Repeat\n\nvim: repeat find\n\nRepeats the last character find.\nKeymap Name: vim::RepeatFind\n\nvim: repeat find reversed\n\nRepeats the last character find in reverse.\nKeymap Name: vim::RepeatFindReversed\n\nvim: replay last recording\n\nReplays the last recorded macro.\nKeymap Name: vim::ReplayLastRecording\n\nvim: reset pane sizes\n\nResets all pane sizes to default.\nKeymap Name: vim::ResetPaneSizes\n\nvim: resize pane down\n\nResizes the pane downward.\nKeymap Name: vim::ResizePaneDown\n\nvim: resize pane left\n\nResizes the pane to the left.\nKeymap Name: vim::ResizePaneLeft\n\nvim: resize pane right\n\nResizes the pane to the right.\nKeymap Name: vim::ResizePaneRight\n\nvim: resize pane up\n\nResizes the pane upward.\nKeymap Name: vim::ResizePaneUp\n\nvim: restore visual selection\n\nRestores the previous visual selection.\nKeymap Name: vim::RestoreVisualSelection\n\nvim: rewrap\n\nRewraps the selected text to fit within the line width.\nKeymap Name: vim::Rewrap\n\nvim: right\n\nMoves cursor right one character.\nKeymap Name: vim::Right\n\nvim: scroll down\n\nScrolls down by half a page.\nKeymap Name: vim::ScrollDown\n\nvim: scroll up\n\nScrolls up by half a page.\nKeymap Name: vim::ScrollUp\n\nvim: search\n\nInitiates a search operation with the specified parameters.\nKeymap Name: vim::Search\n\nvim: search submit\n\nSubmits the current search query.\nKeymap Name: vim::SearchSubmit\n\nvim: select larger syntax node\n\nSelects the next larger syntax node.\nKeymap Name: vim::SelectLargerSyntaxNode\n\nvim: select next\n\nSelects the next occurrence of the current selection.\nKeymap Name: vim::SelectNext\n\nvim: select next match\n\nSelects the next match of the current selection.\nKeymap Name: vim::SelectNextMatch\n\nvim: select previous\n\nSelects the previous occurrence of the current selection.\nKeymap Name: vim::SelectPrevious\n\nvim: select previous match\n\nSelects the previous match of the current selection.\nKeymap Name: vim::SelectPreviousMatch\n\nvim: select register\n\nKeymap Name: vim::SelectRegister\n\nvim: select smaller syntax node\n\nSelects the next smaller syntax node.\nKeymap Name: vim::SelectSmallerSyntaxNode\n\nvim: sentence\n\nSelects a sentence text object.\nKeymap Name: vim::Sentence\n\nvim: sentence backward\n\nMoves to the start of the previous sentence.\nKeymap Name: vim::SentenceBackward\n\nvim: sentence forward\n\nMoves to the start of the next sentence.\nKeymap Name: vim::SentenceForward\n\nvim: shell command\n\nExecutes a shell command.\nKeymap Name: vim::ShellCommand\n\nvim: show location\n\nShows the current location in the file.\nKeymap Name: vim::ShowLocation\n\nvim: square brackets\n\nSelects text within square brackets.\nKeymap Name: vim::SquareBrackets\n\nvim: start of document\n\nMoves to the start of the document.\nKeymap Name: vim::StartOfDocument\n\nvim: start of line\n\nMoves to the start of the current line.\nKeymap Name: vim::StartOfLine\n\nvim: start of line downward\n\nMoves to the start of a line downward.\nKeymap Name: vim::StartOfLineDownward\n\nvim: start of paragraph\n\nMoves to the start of the paragraph.\nKeymap Name: vim::StartOfParagraph\n\nvim: substitute\n\nSubstitutes characters in the current selection.\nKeymap Name: vim::Substitute\n\nvim: substitute line\n\nSubstitutes the entire line.\nKeymap Name: vim::SubstituteLine\n\nvim: subword\n\nSelects a subword text object.\nKeymap Name: vim::Subword\n\nvim: switch to helix normal mode\n\nSwitches to Helix-style normal mode.\nKeymap Name: vim::SwitchToHelixNormalMode\n\nvim: switch to insert mode\n\nSwitches to insert mode.\nKeymap Name: vim::SwitchToInsertMode\n\nvim: switch to normal mode\n\nSwitches to normal mode.\nKeymap Name: vim::SwitchToNormalMode\n\nvim: switch to replace mode\n\nSwitches to replace mode.\nKeymap Name: vim::SwitchToReplaceMode\n\nvim: switch to visual block mode\n\nSwitches to visual block mode.\nKeymap Name: vim::SwitchToVisualBlockMode\n\nvim: switch to visual line mode\n\nSwitches to visual line mode.\nKeymap Name: vim::SwitchToVisualLineMode\n\nvim: switch to visual mode\n\nSwitches to visual mode.\nKeymap Name: vim::SwitchToVisualMode\n\nvim: tab\n\nInserts a tab character.\nKeymap Name: vim::Tab\n\nvim: tag\n\nSelects an HTML/XML tag.\nKeymap Name: vim::Tag\n\nvim: temporary normal\n\nTemporarily switches to normal mode for one command.\nKeymap Name: vim::TemporaryNormal\n\nvim: toggle comments\n\nToggles comments for selected lines.\nKeymap Name: vim::ToggleComments\n\nvim: toggle marks view\n\nToggles the marks view.\nKeymap Name: vim::ToggleMarksView\n\nvim: toggle record\n\nToggles macro recording.\nKeymap Name: vim::ToggleRecord\n\nvim: toggle registers view\n\nToggles the registers view.\nKeymap Name: vim::ToggleRegistersView\n\nvim: toggle replace\n\nToggles replace mode.\nKeymap Name: vim::ToggleReplace\n\nvim: toggle visual\n\nToggles visual mode.\nKeymap Name: vim::ToggleVisual\n\nvim: toggle visual block\n\nToggles visual block mode.\nKeymap Name: vim::ToggleVisualBlock\n\nvim: toggle visual line\n\nToggles visual line mode.\nKeymap Name: vim::ToggleVisualLine\n\nvim: undo\n\nUndoes the last change.\nKeymap Name: vim::Undo\n\nvim: undo last line\n\nUndoes all changes to the most recently changed line.\nKeymap Name: vim::UndoLastLine\n\nvim: undo replace\n\nUndoes the last replacement.\nKeymap Name: vim::UndoReplace\n\nvim: unmatched backward\n\nFinds the previous unmatched bracket or delimiter.\nKeymap Name: vim::UnmatchedBackward\n\nvim: unmatched forward\n\nFinds the next unmatched bracket or delimiter.\nKeymap Name: vim::UnmatchedForward\n\nvim: up\n\nMoves cursor up by the specified number of lines.\nKeymap Name: vim::Up\n\nvim: vertical bars\n\nSelects text within vertical bars (pipes).\nKeymap Name: vim::VerticalBars\n\nvim: visual command\n\nExecutes a command in visual mode.\nKeymap Name: vim::VisualCommand\n\nvim: visual delete\n\nDeletes the visual selection.\nKeymap Name: vim::VisualDelete\n\nvim: visual delete line\n\nDeletes entire lines in visual selection.\nKeymap Name: vim::VisualDeleteLine\n\nvim: visual insert end of line\n\nInserts at the end of each line in visual selection.\nKeymap Name: vim::VisualInsertEndOfLine\n\nvim: visual insert first non white space\n\nInserts at the first non-whitespace character of each line.\nKeymap Name: vim::VisualInsertFirstNonWhiteSpace\n\nvim: visual yank\n\nYanks (copies) the visual selection.\nKeymap Name: vim::VisualYank\n\nvim: visual yank line\n\nYanks entire lines in visual selection.\nKeymap Name: vim::VisualYankLine\n\nvim: window bottom\n\nMoves to the bottom of the window.\nKeymap Name: vim::WindowBottom\n\nvim: window middle\n\nMoves to the middle of the window.\nKeymap Name: vim::WindowMiddle\n\nvim: window top\n\nMoves to the top of the window.\nKeymap Name: vim::WindowTop\n\nvim: word\n\nSelects a word text object.\nKeymap Name: vim::Word\n\nvim: wrapping left\n\nMoves cursor left one character, wrapping to previous line.\nKeymap Name: vim::WrappingLeft\nDeprecated Aliases:vim::Backspace, \n\nvim: wrapping right\n\nMoves cursor right one character, wrapping to next line.\nKeymap Name: vim::WrappingRight\nDeprecated Aliases:vim::Space, \n\nvim: yank\n\nYanks (copies) the selected text.\nKeymap Name: vim::Yank\n\nvim: yank line\n\nYanks the entire line.\nKeymap Name: vim::YankLine\n\nwindow: merge all windows\n\nKeymap Name: window::MergeAllWindows\n\nwindow: move tab to new window\n\nKeymap Name: window::MoveTabToNewWindow\n\nwindow: show next window tab\n\nKeymap Name: window::ShowNextWindowTab\n\nwindow: show previous window tab\n\nKeymap Name: window::ShowPreviousWindowTab\n\nworkspace: activate next pane\n\nActivates the next pane in the workspace.\nKeymap Name: workspace::ActivateNextPane\n\nworkspace: activate next window\n\nSwitches to the next window.\nKeymap Name: workspace::ActivateNextWindow\n\nworkspace: activate pane\n\nActivates a specific pane by its index.\nKeymap Name: workspace::ActivatePane\n\nworkspace: activate pane down\n\nActivates the pane below.\nKeymap Name: workspace::ActivatePaneDown\n\nworkspace: activate pane left\n\nActivates the pane to the left.\nKeymap Name: workspace::ActivatePaneLeft\n\nworkspace: activate pane right\n\nActivates the pane to the right.\nKeymap Name: workspace::ActivatePaneRight\n\nworkspace: activate pane up\n\nActivates the pane above.\nKeymap Name: workspace::ActivatePaneUp\n\nworkspace: activate previous pane\n\nActivates the previous pane in the workspace.\nKeymap Name: workspace::ActivatePreviousPane\n\nworkspace: activate previous window\n\nSwitches to the previous window.\nKeymap Name: workspace::ActivatePreviousWindow\n\nworkspace: add folder to project\n\nAdds a folder to the current project.\nKeymap Name: workspace::AddFolderToProject\n\nworkspace: clear all notifications\n\nClears all notifications.\nKeymap Name: workspace::ClearAllNotifications\n\nworkspace: close active dock\n\nCloses the active dock.\nKeymap Name: workspace::CloseActiveDock\n\nworkspace: close all docks\n\nCloses all docks.\nKeymap Name: workspace::CloseAllDocks\n\nworkspace: close all items and panes\n\nCloses all items and panes in the workspace.\nKeymap Name: workspace::CloseAllItemsAndPanes\n\nworkspace: close inactive tabs and panes\n\nCloses all inactive tabs and panes in the workspace.\nKeymap Name: workspace::CloseInactiveTabsAndPanes\n\nworkspace: close window\n\nCloses the current window.\nKeymap Name: workspace::CloseWindow\n\nworkspace: copy path\n\nKeymap Name: workspace::CopyPath\nDeprecated Aliases:editor::CopyPath, outline_panel::CopyPath, project_panel::CopyPath, \n\nworkspace: copy relative path\n\nKeymap Name: workspace::CopyRelativePath\nDeprecated Aliases:editor::CopyRelativePath, outline_panel::CopyRelativePath, project_panel::CopyRelativePath, \n\nworkspace: decrease active dock size\n\nDecreases size of a currently focused dock by a given amount of pixels.\nKeymap Name: workspace::DecreaseActiveDockSize\n\nworkspace: decrease open docks size\n\nDecreases size of all currently visible docks uniformly, by a given amount of pixels.\nKeymap Name: workspace::DecreaseOpenDocksSize\n\nworkspace: feedback\n\nOpens the feedback dialog.\nKeymap Name: workspace::Feedback\n\nworkspace: follow next collaborator\n\nFollows the next collaborator in the session.\nKeymap Name: workspace::FollowNextCollaborator\n\nworkspace: increase active dock size\n\nIncreases size of a currently focused dock by a given amount of pixels.\nKeymap Name: workspace::IncreaseActiveDockSize\n\nworkspace: increase open docks size\n\nIncreases size of all currently visible docks uniformly, by a given amount of pixels.\nKeymap Name: workspace::IncreaseOpenDocksSize\n\nworkspace: move focused panel to next position\n\nMoves the focused panel to the next position.\nKeymap Name: workspace::MoveFocusedPanelToNextPosition\n\nworkspace: move item to pane\n\nMoves an item to a specific pane by index.\nKeymap Name: workspace::MoveItemToPane\n\nworkspace: move item to pane in direction\n\nMoves an item to a pane in the specified direction.\nKeymap Name: workspace::MoveItemToPaneInDirection\n\nworkspace: new center terminal\n\nOpens a new terminal in the center.\nKeymap Name: workspace::NewCenterTerminal\n\nworkspace: new file\n\nCreates a new file.\nKeymap Name: workspace::NewFile\n\nworkspace: new file split horizontal\n\nCreates a new file in a horizontal split.\nKeymap Name: workspace::NewFileSplitHorizontal\n\nworkspace: new file split vertical\n\nCreates a new file in a vertical split.\nKeymap Name: workspace::NewFileSplitVertical\n\nworkspace: new search\n\nOpens a new search.\nKeymap Name: workspace::NewSearch\n\nworkspace: new terminal\n\nOpens a new terminal.\nKeymap Name: workspace::NewTerminal\n\nworkspace: new window\n\nOpens a new window.\nKeymap Name: workspace::NewWindow\n\nworkspace: open\n\nOpens a file or directory.\nKeymap Name: workspace::Open\n\nworkspace: open component preview\n\nOpens the component preview.\nKeymap Name: workspace::OpenComponentPreview\n\nworkspace: open files\n\nOpens multiple files.\nKeymap Name: workspace::OpenFiles\n\nworkspace: open in terminal\n\nOpens the current location in terminal.\nKeymap Name: workspace::OpenInTerminal\n\nworkspace: open terminal\n\nOpens a new terminal with the specified working directory.\nKeymap Name: workspace::OpenTerminal\n\nworkspace: open with system\n\nOpens the selected file with the system's default application.\nKeymap Name: workspace::OpenWithSystem\nDeprecated Aliases:project_panel::OpenWithSystem, \n\nworkspace: reload\n\nReloads the application\nKeymap Name: workspace::Reload\n\nworkspace: reload active item\n\nReloads the active item.\nKeymap Name: workspace::ReloadActiveItem\n\nworkspace: reset active dock size\n\nResets the active dock to its default size.\nKeymap Name: workspace::ResetActiveDockSize\n\nworkspace: reset open docks size\n\nResets all open docks to their default sizes.\nKeymap Name: workspace::ResetOpenDocksSize\n\nworkspace: restore banner\n\nRestores the banner.\nKeymap Name: workspace::RestoreBanner\n\nworkspace: save\n\nSaves the current file with the specified options.\nKeymap Name: workspace::Save\n\nworkspace: save all\n\nSaves all open files in the workspace.\nKeymap Name: workspace::SaveAll\n\nworkspace: save as\n\nSaves the current file with a new name.\nKeymap Name: workspace::SaveAs\n\nworkspace: save without format\n\nSaves without formatting.\nKeymap Name: workspace::SaveWithoutFormat\n\nworkspace: send keystrokes\n\nSends a sequence of keystrokes to the active element.\nKeymap Name: workspace::SendKeystrokes\n\nworkspace: shutdown debug adapters\n\nShuts down all debug adapters.\nKeymap Name: workspace::ShutdownDebugAdapters\n\nworkspace: suppress notification\n\nSuppresses the current notification.\nKeymap Name: workspace::SuppressNotification\n\nworkspace: swap pane down\n\nSwaps the current pane with the one below.\nKeymap Name: workspace::SwapPaneDown\n\nworkspace: swap pane left\n\nSwaps the current pane with the one to the left.\nKeymap Name: workspace::SwapPaneLeft\n\nworkspace: swap pane right\n\nSwaps the current pane with the one to the right.\nKeymap Name: workspace::SwapPaneRight\n\nworkspace: swap pane up\n\nSwaps the current pane with the one above.\nKeymap Name: workspace::SwapPaneUp\n\nworkspace: toggle bottom dock\n\nToggles the bottom dock.\nKeymap Name: workspace::ToggleBottomDock\n\nworkspace: toggle centered layout\n\nToggles centered layout mode.\nKeymap Name: workspace::ToggleCenteredLayout\n\nworkspace: toggle edit prediction\n\nToggles edit prediction feature globally for all files.\nKeymap Name: workspace::ToggleEditPrediction\n\nworkspace: toggle expand item\n\nToggles expansion of the selected item.\nKeymap Name: workspace::ToggleExpandItem\n\nworkspace: toggle left dock\n\nToggles the left dock.\nKeymap Name: workspace::ToggleLeftDock\n\nworkspace: toggle right dock\n\nToggles the right dock.\nKeymap Name: workspace::ToggleRightDock\n\nworkspace: toggle vim mode\n\nToggles Vim mode on or off.\nKeymap Name: workspace::ToggleVimMode\n\nworkspace: toggle zoom\n\nToggles zoom on the active pane.\nKeymap Name: workspace::ToggleZoom\n\nworkspace: unfollow\n\nStops following a collaborator.\nKeymap Name: workspace::Unfollow\n\nzed: about\n\nShows information about Zed.\nKeymap Name: zed::About\n\nzed: copy system specs into clipboard\n\nCopies system specifications to the clipboard for bug reports.\nKeymap Name: zed::CopySystemSpecsIntoClipboard\n\nzed: debug elements\n\nOpens the element inspector for debugging UI.\nKeymap Name: zed::DebugElements\n\nzed: decrease buffer font size\n\nDecreases the font size in the editor buffer.\nKeymap Name: zed::DecreaseBufferFontSize\n\nzed: decrease ui font size\n\nDecreases the font size of the user interface.\nKeymap Name: zed::DecreaseUiFontSize\n\nzed: email zed\n\nOpens email client to send feedback to Zed support.\nKeymap Name: zed::EmailZed\n\nzed: extensions\n\nOpens the extensions management interface.\nKeymap Name: zed::Extensions\n\nzed: hide\n\nHides the application window.\nKeymap Name: zed::Hide\n\nzed: hide others\n\nHides all other application windows.\nKeymap Name: zed::HideOthers\n\nzed: import cursor settings\n\nImports settings from Cursor editor.\nKeymap Name: zed::ImportCursorSettings\n\nzed: import vs code settings\n\nImports settings from Visual Studio Code.\nKeymap Name: zed::ImportVsCodeSettings\n\nzed: increase buffer font size\n\nIncreases the font size in the editor buffer.\nKeymap Name: zed::IncreaseBufferFontSize\n\nzed: increase ui font size\n\nIncreases the font size of the user interface.\nKeymap Name: zed::IncreaseUiFontSize\n\nzed: install dev extension\n\nInstalls an extension from a local directory for development.\nKeymap Name: zed::InstallDevExtension\n\nzed: minimize\n\nMinimizes the current window.\nKeymap Name: zed::Minimize\n\nzed: no action\n\nAction with special handling which unbinds the keybinding this is associated with,\nif it is the highest precedence match.\nKeymap Name: zed::NoAction\n\nzed: open account settings\n\nOpens account settings.\nKeymap Name: zed::OpenAccountSettings\n\nzed: open browser\n\nOpens a URL in the system's default web browser.\nKeymap Name: zed::OpenBrowser\n\nzed: open debug tasks\n\nOpens debug tasks configuration.\nKeymap Name: zed::OpenDebugTasks\n\nzed: open default keymap\n\nOpens the default keymap file.\nKeymap Name: zed::OpenDefaultKeymap\n\nzed: open default settings\n\nOpens the default settings file.\nKeymap Name: zed::OpenDefaultSettings\n\nzed: open docs\n\nOpens the documentation website.\nKeymap Name: zed::OpenDocs\n\nzed: open keymap\n\nOpens the user keymap file.\nKeymap Name: zed::OpenKeymap\n\nzed: open keymap editor\n\nOpens the keymap editor.\nKeymap Name: zed::OpenKeymapEditor\n\nzed: open licenses\n\nViews open source licenses.\nKeymap Name: zed::OpenLicenses\n\nzed: open log\n\nOpens the Zed log file.\nKeymap Name: zed::OpenLog\n\nzed: open onboarding\n\nOpens the onboarding view.\nKeymap Name: zed::OpenOnboarding\n\nzed: open project settings\n\nOpens project-specific settings.\nKeymap Name: zed::OpenProjectSettings\n\nzed: open project tasks\n\nOpens the project tasks configuration.\nKeymap Name: zed::OpenProjectTasks\n\nzed: open server settings\n\nOpens server settings.\nKeymap Name: zed::OpenServerSettings\n\nzed: open settings\n\nOpens the settings editor.\nKeymap Name: zed::OpenSettings\n\nzed: open settings editor\n\nOpens the settings editor.\nKeymap Name: zed::OpenSettingsEditor\n\nzed: open tasks\n\nOpens the tasks panel.\nKeymap Name: zed::OpenTasks\n\nzed: open telemetry log\n\nOpens the telemetry log.\nKeymap Name: zed::OpenTelemetryLog\n\nzed: open zed repo\n\nOpens the Zed repository on GitHub.\nKeymap Name: zed::OpenZedRepo\n\nzed: open zed url\n\nOpens a zed:// URL within the application.\nKeymap Name: zed::OpenZedUrl\n\nzed: quit\n\nQuits the application.\nKeymap Name: zed::Quit\n\nzed: reload extensions\n\nReloads all installed extensions.\nKeymap Name: zed::ReloadExtensions\n\nzed: request feature\n\nOpens the feature request form.\nKeymap Name: zed::RequestFeature\n\nzed: reset buffer font size\n\nResets the buffer font size to the default value.\nKeymap Name: zed::ResetBufferFontSize\n\nzed: reset database\n\nResets the application database.\nKeymap Name: zed::ResetDatabase\n\nzed: reset ui font size\n\nResets the UI font size to the default value.\nKeymap Name: zed::ResetUiFontSize\n\nzed: show all\n\nShows all hidden windows.\nKeymap Name: zed::ShowAll\n\nzed: show welcome\n\nShow the Zed welcome screen\nKeymap Name: zed::ShowWelcome\n\nzed: test crash\n\nTriggers a hard crash for debugging.\nKeymap Name: zed::TestCrash\n\nzed: test panic\n\nTriggers a test panic for debugging.\nKeymap Name: zed::TestPanic\n\nzed: toggle base keymap selector\n\nToggles the base keymap selector modal.\nKeymap Name: zed::ToggleBaseKeymapSelector\n\nzed: toggle full screen\n\nToggles fullscreen mode.\nKeymap Name: zed::ToggleFullScreen\n\nzed: zoom\n\nZooms the window.\nKeymap Name: zed::Zoom\n\nzed predict onboarding: open zed predict onboarding\n\nOpens the Zed Predict onboarding modal.\nKeymap Name: zed_predict_onboarding::OpenZedPredictOnboarding\n\nzeta: focus completions\n\nFocuses on the completions list.\nKeymap Name: zeta::FocusCompletions\n\nzeta: next edit\n\nNavigates to the next edit in the completion history.\nKeymap Name: zeta::NextEdit\n\nzeta: preview completion\n\nPreviews the selected completion.\nKeymap Name: zeta::PreviewCompletion\n\nzeta: previous edit\n\nNavigates to the previous edit in the completion history.\nKeymap Name: zeta::PreviousEdit\n\nzeta: thumbs down active completion\n\nRates the active completion with a thumbs down.\nKeymap Name: zeta::ThumbsDownActiveCompletion\n\nzeta: thumbs up active completion\n\nRates the active completion with a thumbs up.\nKeymap Name: zeta::ThumbsUpActiveCompletion",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:18"
  },
  "snippets.html": {
    "url": "https://zed.dev/docs/snippets.html",
    "title": "Snippets | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"snippets\"><a class=\"header\" href=\"#snippets\">Snippets</a></h1>\n<p>Use the <code class=\"hljs\">snippets: configure snippets</code> action to create a new snippets file or edit a existing snippets file for a specified <a href=\"#scopes\">scope</a>.</p>\n<p>The snippets are located in <code>~/.config/zed/snippets</code> directory to which you can navigate to with the <code class=\"hljs\">snippets: open folder</code> action.</p>\n<h2 id=\"example-configuration\"><a class=\"header\" href=\"#example-configuration\">Example configuration</a></h2>\n<pre><code class=\"language-json\">{\n  // Each snippet must have a name and body, but the prefix and description are optional.\n  // The prefix is used to trigger the snippet, but when omitted then the name is used.\n  // Use placeholders like $1, $2 or ${1:defaultValue} to define tab stops.\n  // The $0 determines the final cursor position.\n  // Placeholders with the same value are linked.\n  \"Log to console\": {\n    \"prefix\": \"log\",\n    \"body\": [\"console.info(\\\"Hello, ${1:World}!\\\")\", \"$0\"],\n    \"description\": \"Logs to console\"\n  }\n}\n</code></pre>\n<h2 id=\"scopes\"><a class=\"header\" href=\"#scopes\">Scopes</a></h2>\n<p>The scope is determined by the language name in lowercase e.g. <code>python.json</code> for Python, <code>shell script.json</code> for Shell Script, but there are some exceptions to this rule:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Scope</th><th>Filename</th></tr></thead><tbody>\n<tr><td>Global</td><td>snippets.json</td></tr>\n<tr><td>JSX</td><td>javascript.json</td></tr>\n<tr><td>Plain Text</td><td>plaintext.json</td></tr>\n</tbody></table>\n</div>\n<p>To create JSX snippets you have to use <code>javascript.json</code> snippets file, instead of <code>jsx.json</code>, but this does not apply to TSX and Typescript which follow the above rule.</p>\n<h2 id=\"known-limitations\"><a class=\"header\" href=\"#known-limitations\">Known Limitations</a></h2>\n<ul>\n<li>Only the first prefix is used when an list of prefixes is passed in.</li>\n<li>Currently only the <code>json</code> snippet file format is supported, even though the <code>simple-completion-language-server</code> supports both <code>json</code> and <code>toml</code> file formats.</li>\n</ul>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<p>The <code>feature_paths</code> option in <code>simple-completion-language-server</code> is disabled by default.</p>\n<p>If you want to enable it you can add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"snippet-completion-server\": {\n      \"settings\": {\n        \"feature_paths\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>For more configuration information, see the <a href=\"https://github.com/zed-industries/simple-completion-language-server/tree/main\"><code>simple-completion-language-server</code> instructions</a>.</p>\n\n</main>",
    "content_text": "Snippets\nUse the snippets: configure snippets action to create a new snippets file or edit a existing snippets file for a specified scope.\nThe snippets are located in ~/.config/zed/snippets directory to which you can navigate to with the snippets: open folder action.\nExample configuration\n{\n  // Each snippet must have a name and body, but the prefix and description are optional.\n  // The prefix is used to trigger the snippet, but when omitted then the name is used.\n  // Use placeholders like $1, $2 or ${1:defaultValue} to define tab stops.\n  // The $0 determines the final cursor position.\n  // Placeholders with the same value are linked.\n  \"Log to console\": {\n    \"prefix\": \"log\",\n    \"body\": [\"console.info(\\\"Hello, ${1:World}!\\\")\", \"$0\"],\n    \"description\": \"Logs to console\"\n  }\n}\n\nScopes\nThe scope is determined by the language name in lowercase e.g. python.json for Python, shell script.json for Shell Script, but there are some exceptions to this rule:\nScopeFilename\nGlobalsnippets.json\nJSXjavascript.json\nPlain Textplaintext.json\n\n\nTo create JSX snippets you have to use javascript.json snippets file, instead of jsx.json, but this does not apply to TSX and Typescript which follow the above rule.\nKnown Limitations\n\nOnly the first prefix is used when an list of prefixes is passed in.\nCurrently only the json snippet file format is supported, even though the simple-completion-language-server supports both json and toml file formats.\n\nSee also\nThe feature_paths option in simple-completion-language-server is disabled by default.\nIf you want to enable it you can add the following to your settings.json:\n{\n  \"lsp\": {\n    \"snippet-completion-server\": {\n      \"settings\": {\n        \"feature_paths\": true\n      }\n    }\n  }\n}\n\nFor more configuration information, see the simple-completion-language-server instructions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:20"
  },
  "themes.html": {
    "url": "https://zed.dev/docs/themes.html",
    "title": "Themes | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"themes\"><a class=\"header\" href=\"#themes\">Themes</a></h1>\n<p>Zed comes with a number of built-in themes, with more themes available as extensions.</p>\n<h2 id=\"selecting-a-theme\"><a class=\"header\" href=\"#selecting-a-theme\">Selecting a Theme</a></h2>\n<p>See what themes are installed and preview them via the Theme Selector, which you can open from the command palette with \"theme selector: Toggle\" (bound to <code>cmd-k cmd-t</code> on macOS and <code>ctrl-k ctrl-t</code> on Linux).</p>\n<p>Navigating through the theme list by moving up and down will change the theme in real time and hitting enter will save it to your settings file.</p>\n<h2 id=\"installing-more-themes\"><a class=\"header\" href=\"#installing-more-themes\">Installing more Themes</a></h2>\n<p>More themes are available from the Extensions page, which you can access via the command palette with \"zed: Extensions\" or the <a href=\"https://zed.dev/extensions\">Zed website</a>.</p>\n<p>Many popular themes have been ported to Zed, and if you're struggling to choose one, visit <a href=\"https://zed-themes.com\">zed-themes.com</a>, a third-party gallery with visible previews for many of them.</p>\n<h2 id=\"configuring-a-theme\"><a class=\"header\" href=\"#configuring-a-theme\">Configuring a Theme</a></h2>\n<p>Your selected theme is stored in your settings file. You can open your settings file from the command palette with \"zed: Open Settings\" (bound to <code>cmd-,</code> on macOS and <code>ctrl-,</code> on Linux).</p>\n<p>By default, Zed maintains two themes: one for light mode and one for dark mode. You can set the mode to <code>\"dark\"</code> or <code>\"light\"</code> to ignore the current system mode.</p>\n<pre><code class=\"language-json\">{\n  \"theme\": {\n    \"mode\": \"system\",\n    \"light\": \"One Light\",\n    \"dark\": \"One Dark\"\n  }\n}\n</code></pre>\n<h2 id=\"theme-overrides\"><a class=\"header\" href=\"#theme-overrides\">Theme Overrides</a></h2>\n<p>To override specific attributes of a theme, use the <code>experimental.theme_overrides</code> setting.</p>\n<p>For example, add the following to your <code>settings.json</code> if you wish to override the background color of the editor and display comments and doc comments as italics:</p>\n<pre><code class=\"language-json\">{\n  \"experimental.theme_overrides\": {\n    \"editor.background\": \"#333\",\n    \"syntax\": {\n      \"comment\": {\n        \"font_style\": \"italic\"\n      },\n      \"comment.doc\": {\n        \"font_style\": \"italic\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>To see a comprehensive list of list of captures (like <code>comment</code> and <code>comment.doc</code>) see: <a href=\"./extensions/languages.html#syntax-highlighting\">Language Extensions: Syntax highlighting</a>.</p>\n<p>To see a list of available theme attributes look at the JSON file for your theme. For example, <a href=\"https://github.com/zed-industries/zed/blob/main/assets/themes/one/one.json\">assets/themes/one/one.json</a> for the default One Dark and One Light themes.</p>\n<h2 id=\"local-themes\"><a class=\"header\" href=\"#local-themes\">Local Themes</a></h2>\n<p>Store new themes locally by placing them in the <code>~/.config/zed/themes</code> directory.</p>\n<p>For example, to create a new theme called <code>my-cool-theme</code>, create a file called <code>my-cool-theme.json</code> in that directory. It will be available in the theme selector the next time Zed loads.</p>\n<p>Find more themes at <a href=\"https://zed-themes.com\">zed-themes.com</a>.</p>\n<h2 id=\"theme-development\"><a class=\"header\" href=\"#theme-development\">Theme Development</a></h2>\n<p>See: <a href=\"./extensions/themes.html\">Developing Zed Themes</a></p>\n\n</main>",
    "content_text": "Themes\nZed comes with a number of built-in themes, with more themes available as extensions.\nSelecting a Theme\nSee what themes are installed and preview them via the Theme Selector, which you can open from the command palette with \"theme selector: Toggle\" (bound to cmd-k cmd-t on macOS and ctrl-k ctrl-t on Linux).\nNavigating through the theme list by moving up and down will change the theme in real time and hitting enter will save it to your settings file.\nInstalling more Themes\nMore themes are available from the Extensions page, which you can access via the command palette with \"zed: Extensions\" or the Zed website.\nMany popular themes have been ported to Zed, and if you're struggling to choose one, visit zed-themes.com, a third-party gallery with visible previews for many of them.\nConfiguring a Theme\nYour selected theme is stored in your settings file. You can open your settings file from the command palette with \"zed: Open Settings\" (bound to cmd-, on macOS and ctrl-, on Linux).\nBy default, Zed maintains two themes: one for light mode and one for dark mode. You can set the mode to \"dark\" or \"light\" to ignore the current system mode.\n{\n  \"theme\": {\n    \"mode\": \"system\",\n    \"light\": \"One Light\",\n    \"dark\": \"One Dark\"\n  }\n}\n\nTheme Overrides\nTo override specific attributes of a theme, use the experimental.theme_overrides setting.\nFor example, add the following to your settings.json if you wish to override the background color of the editor and display comments and doc comments as italics:\n{\n  \"experimental.theme_overrides\": {\n    \"editor.background\": \"#333\",\n    \"syntax\": {\n      \"comment\": {\n        \"font_style\": \"italic\"\n      },\n      \"comment.doc\": {\n        \"font_style\": \"italic\"\n      }\n    }\n  }\n}\n\nTo see a comprehensive list of list of captures (like comment and comment.doc) see: Language Extensions: Syntax highlighting.\nTo see a list of available theme attributes look at the JSON file for your theme. For example, assets/themes/one/one.json for the default One Dark and One Light themes.\nLocal Themes\nStore new themes locally by placing them in the ~/.config/zed/themes directory.\nFor example, to create a new theme called my-cool-theme, create a file called my-cool-theme.json in that directory. It will be available in the theme selector the next time Zed loads.\nFind more themes at zed-themes.com.\nTheme Development\nSee: Developing Zed Themes",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:22"
  },
  "icon-themes.html": {
    "url": "https://zed.dev/docs/icon-themes.html",
    "title": "Icon Themes | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"icon-themes\"><a class=\"header\" href=\"#icon-themes\">Icon Themes</a></h1>\n<p>Zed comes with a built-in icon theme, with more icon themes available as extensions.</p>\n<h2 id=\"selecting-an-icon-theme\"><a class=\"header\" href=\"#selecting-an-icon-theme\">Selecting an Icon Theme</a></h2>\n<p>See what icon themes are installed and preview them via the Icon Theme Selector, which you can open from the command palette with \"icon theme selector: toggle\".</p>\n<p>Navigating through the icon theme list by moving up and down will change the icon theme in real time and hitting enter will save it to your settings file.</p>\n<h2 id=\"installing-more-icon-themes\"><a class=\"header\" href=\"#installing-more-icon-themes\">Installing more Icon Themes</a></h2>\n<p>More icon themes are available from the Extensions page, which you can access via the command palette with \"zed: Extensions\" or the <a href=\"https://zed.dev/extensions\">Zed website</a>.</p>\n<h2 id=\"configuring-icon-themes\"><a class=\"header\" href=\"#configuring-icon-themes\">Configuring Icon Themes</a></h2>\n<p>Your selected icon theme is stored in your settings file. You can open your settings file from the command palette with \"zed: open settings\" (bound to <code>cmd-,</code> on macOS and <code>ctrl-,</code> on Linux).</p>\n<p>Just like with themes, Zed allows for configuring different icon themes for light and dark mode. You can set the mode to <code>\"light\"</code> or <code>\"dark\"</code> to ignore the current system mode.</p>\n<pre><code class=\"language-json\">{\n  \"icon_theme\": {\n    \"mode\": \"system\",\n    \"light\": \"Light Icon Theme\",\n    \"dark\": \"Dark Icon Theme\"\n  }\n}\n</code></pre>\n<h2 id=\"icon-theme-development\"><a class=\"header\" href=\"#icon-theme-development\">Icon Theme Development</a></h2>\n<p>See: <a href=\"./extensions/icon-themes.html\">Developing Zed Icon Themes</a></p>\n\n</main>",
    "content_text": "Icon Themes\nZed comes with a built-in icon theme, with more icon themes available as extensions.\nSelecting an Icon Theme\nSee what icon themes are installed and preview them via the Icon Theme Selector, which you can open from the command palette with \"icon theme selector: toggle\".\nNavigating through the icon theme list by moving up and down will change the icon theme in real time and hitting enter will save it to your settings file.\nInstalling more Icon Themes\nMore icon themes are available from the Extensions page, which you can access via the command palette with \"zed: Extensions\" or the Zed website.\nConfiguring Icon Themes\nYour selected icon theme is stored in your settings file. You can open your settings file from the command palette with \"zed: open settings\" (bound to cmd-, on macOS and ctrl-, on Linux).\nJust like with themes, Zed allows for configuring different icon themes for light and dark mode. You can set the mode to \"light\" or \"dark\" to ignore the current system mode.\n{\n  \"icon_theme\": {\n    \"mode\": \"system\",\n    \"light\": \"Light Icon Theme\",\n    \"dark\": \"Dark Icon Theme\"\n  }\n}\n\nIcon Theme Development\nSee: Developing Zed Icon Themes",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:24"
  },
  "visual-customization.html": {
    "url": "https://zed.dev/docs/visual-customization.html",
    "title": "Visual Customization | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"visual-customization\"><a class=\"header\" href=\"#visual-customization\">Visual Customization</a></h1>\n<p>Various aspects of Zed's visual layout can be configured via Zed settings.json which you can access via <code class=\"hljs\">zed: open settings</code> (<kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>).</p>\n<p>See <a href=\"./configuring-zed.html\">Configuring Zed</a> for additional information and other non-visual settings.</p>\n<h2 id=\"themes\"><a class=\"header\" href=\"#themes\">Themes</a></h2>\n<p>Use may install zed extensions providing <a href=\"./themes.html\">Themes</a> and <a href=\"./icon-themes.html\">Icon Themes</a> via <code class=\"hljs\">zed: extensions</code> from the command palette or menu.</p>\n<p>You can preview/choose amongst your installed themes and icon themes with <code class=\"hljs\">theme selector: toggle</code> (<kbd class=\"keybinding\">cmd-k cmd-t|ctrl-k ctrl-t</kbd>) and (<code class=\"hljs\">icon theme selector: toggle</code>) which will modify the following settings:</p>\n<pre><code class=\"language-json\">{\n  \"theme\": \"One Dark\",\n  \"icon_theme\": \"Zed (Default)\"\n}\n</code></pre>\n<p>If you would like to use distinct themes for light mode/dark mode that can be set with:</p>\n<pre><code class=\"language-json\">{\n  \"theme\": {\n    \"dark\": \"One Dark\"\n    \"light\": \"One Light\",\n    // Mode to use (dark, light) or \"system\" to follow the OS's light/dark mode (default)\n    \"mode\": \"system\",\n  },\n  \"icon_theme\": {\n    \"dark\": \"Zed (Default)\"\n    \"light\": \"Zed (Default)\",\n    // Mode to use (dark, light) or \"system\" to follow the OS's light/dark mode (default)\n    \"mode\": \"system\",\n  }\n}\n</code></pre>\n<h2 id=\"fonts\"><a class=\"header\" href=\"#fonts\">Fonts</a></h2>\n<pre><code class=\"language-json\">  // UI Font. Use \".SystemUIFont\" to use the default system font (SF Pro on macOS),\n  // or \".ZedSans\" for the bundled default (currently IBM Plex)\n  \"ui_font_family\": \".SystemUIFont\",\n  \"ui_font_weight\": 400, // Font weight in standard CSS units from 100 to 900.\n  \"ui_font_size\": 16,\n\n  // Buffer Font - Used by editor buffers\n  // use \".ZedMono\" for the bundled default monospace (currently Lilex)\n  \"buffer_font_family\": \"Berkeley Mono\", // Font name for editor buffers\n  \"buffer_font_size\": 15,                 // Font size for editor buffers\n  \"buffer_font_weight\": 400,              // Font weight in CSS units [100-900]\n  // Line height \"comfortable\" (1.618), \"standard\" (1.3) or custom: `{ \"custom\": 2 }`\n  \"buffer_line_height\": \"comfortable\",\n\n  // Terminal Font Settings\n  \"terminal\": {\n    \"font_family\": \"\",\n    \"font_size\": 15,\n    // Terminal line height: comfortable (1.618), standard(1.3) or `{ \"custom\": 2 }`\n    \"line_height\": \"comfortable\",\n  },\n\n  // Agent Panel Font Settings\n  \"agent_font_size\": 15\n</code></pre>\n<h3 id=\"font-ligatures\"><a class=\"header\" href=\"#font-ligatures\">Font ligatures</a></h3>\n<p>By default Zed enable font ligatures which will visually combines certain adjacent characters.</p>\n<p>For example <code>=&gt;</code> will be displayed as <code>→</code> and <code>!=</code> will be <code>≠</code>. This is purely cosmetic and the individual characters remain unchanged.</p>\n<p>To disable this behavior use:</p>\n<pre><code class=\"language-json\">{\n  \"buffer_font_features\": {\n    \"calt\": false // Disable ligatures\n  }\n}\n</code></pre>\n<h3 id=\"status-bar\"><a class=\"header\" href=\"#status-bar\">Status Bar</a></h3>\n<pre><code class=\"language-json\">{\n  // Whether to show full labels in line indicator or short ones\n  //   - `short`: \"2 s, 15 l, 32 c\"\n  //   - `long`: \"2 selections, 15 lines, 32 characters\"\n  \"line_indicator_format\": \"long\"\n\n  // Individual status bar icons can be hidden:\n  // \"project_panel\": {\"button\": false },\n  // \"outline_panel\": {\"button\": false },\n  // \"collaboration_panel\": {\"button\": false },\n  // \"chat_panel\": {\"button\": \"never\" },\n  // \"git_panel\": {\"button\": false },\n  // \"notification_panel\": {\"button\": false },\n  // \"agent\": {\"button\": false },\n  // \"debugger\": {\"button\": false },\n  // \"diagnostics\": {\"button\": false },\n  // \"search\": {\"button\": false },\n}\n</code></pre>\n<h3 id=\"titlebar\"><a class=\"header\" href=\"#titlebar\">Titlebar</a></h3>\n<pre><code class=\"language-json\">  // Control which items are shown/hidden in the title bar\n  \"title_bar\": {\n    \"show_branch_icon\": false,      // Show/hide branch icon beside branch switcher\n    \"show_branch_name\": true,       // Show/hide branch name\n    \"show_project_items\": true,     // Show/hide project host and name\n    \"show_onboarding_banner\": true, // Show/hide onboarding banners\n    \"show_user_picture\": true,      // Show/hide user avatar\n    \"show_sign_in\": true,           // Show/hide sign-in button\n    \"show_menus\": false             // Show/hide menus\n  },\n</code></pre>\n<h2 id=\"workspace\"><a class=\"header\" href=\"#workspace\">Workspace</a></h2>\n<pre><code class=\"language-json\">{\n  // Force usage of Zed build in path prompts (file and directory pickers)\n  // instead of OS native pickers (false).\n  \"use_system_path_prompts\": true,\n  // Force usage of Zed built in confirmation prompts (\"Do you want to save?\")\n  // instead of OS native prompts (false). On linux this is ignored (always false).\n  \"use_system_prompts\": true,\n\n  // Whether to use the system provided dialogs for Open and Save As (true) or\n  // Zed's built-in keyboard-first pickers (false)\n  \"use_system_path_prompts\": true,\n\n  // Active pane styling settings.\n  \"active_pane_modifiers\": {\n    // Inset border size of the active pane, in pixels.\n    \"border_size\": 0.0,\n    // Opacity of the inactive panes. 0 means transparent, 1 means opaque.\n    \"inactive_opacity\": 1.0\n  },\n\n  // Layout mode of the bottom dock: contained, full, left_aligned, right_aligned\n  \"bottom_dock_layout\": \"contained\",\n\n  // Whether to resize all the panels in a dock when resizing the dock.\n  // Can be a combination of \"left\", \"right\" and \"bottom\".\n  \"resize_all_panels_in_dock\": [\"left\"]\n}\n</code></pre>\n<!--\nTBD: Centered layout related settings\n```json\n    \"centered_layout\": {\n    // The relative width of the left padding of the central pane from the\n    // workspace when the centered layout is used.\n    \"left_padding\": 0.2,\n    // The relative width of the right padding of the central pane from the\n    // workspace when the centered layout is used.\n    \"right_padding\": 0.2\n    },\n```\n-->\n<h2 id=\"editor\"><a class=\"header\" href=\"#editor\">Editor</a></h2>\n<pre><code class=\"language-json\">  // Whether the cursor blinks in the editor.\n  \"cursor_blink\": true,\n\n  // Cursor shape for the default editor: bar, block, underline, hollow\n  \"cursor_shape\": null,\n\n  // Highlight the current line in the editor: none, gutter, line, all\n  \"current_line_highlight\": \"all\",\n\n  // When does the mouse cursor hide: never, on_typing, on_typing_and_movement\n  \"hide_mouse\": \"on_typing_and_movement\",\n\n  // Whether to highlight all occurrences of the selected text in an editor.\n  \"selection_highlight\": true,\n\n  // Visually show tabs and spaces  (none, all, selection, boundary, trailing)\n  \"show_whitespaces\": \"selection\",\n\n  \"unnecessary_code_fade\": 0.3, // How much to fade out unused code.\n\n  // Hide the values of in variables from visual display in private files\n  \"redact_private_values\": false,\n\n  // Soft-wrap and rulers\n  \"soft_wrap\": \"none\",          // none, editor_width, preferred_line_length, bounded\n  \"preferred_line_length\": 80,  // Column to soft-wrap\n  \"show_wrap_guides\": true,     // Show/hide wrap guides (vertical rulers)\n  \"wrap_guides\": [],            // Where to position wrap_guides (character counts)\n\n  // Gutter Settings\n  \"gutter\": {\n    \"line_numbers\": true,         // Show/hide line numbers in the gutter.\n    \"runnables\": true,            // Show/hide runnables buttons in the gutter.\n    \"breakpoints\": true,          // Show/hide show breakpoints in the gutter.\n    \"folds\": true,                // Show/hide show fold buttons in the gutter.\n    \"min_line_number_digits\": 4   // Reserve space for N digit line numbers\n  },\n  \"relative_line_numbers\": false, // Show relative line numbers in gutter\n\n  // Indent guides\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"line_width\": 1,                  // Width of guides in pixels [1-10]\n    \"active_line_width\": 1,           // Width of active guide in pixels [1-10]\n    \"coloring\": \"fixed\",              // disabled, fixed, indent_aware\n    \"background_coloring\": \"disabled\" // disabled, indent_aware\n  }\n</code></pre>\n<h3 id=\"editor-blame\"><a class=\"header\" href=\"#editor-blame\">Git Blame</a></h3>\n<pre><code class=\"language-json\">  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": true,             // Show/hide inline blame\n      \"delay\": 0,                  // Show after delay (ms)\n      \"min_column\": 0,             // Minimum column to inline display blame\n      \"padding\": 7,                // Padding between code and inline blame (em)\n      \"show_commit_summary\": false // Show/hide commit summary\n    },\n    \"hunk_style\": \"staged_hollow\"  // staged_hollow, unstaged_hollow\n  }\n</code></pre>\n<h3 id=\"editor-toolbar\"><a class=\"header\" href=\"#editor-toolbar\">Editor Toolbar</a></h3>\n<pre><code class=\"language-json\">  // Editor toolbar related settings\n  \"toolbar\": {\n    \"breadcrumbs\": true, // Whether to show breadcrumbs.\n    \"quick_actions\": true, // Whether to show quick action buttons.\n    \"selections_menu\": true, // Whether to show the Selections menu\n    \"agent_review\": true, // Whether to show agent review buttons\n    \"code_actions\": false // Whether to show code action buttons\n  }\n</code></pre>\n<h3 id=\"editor-scrollbar\"><a class=\"header\" href=\"#editor-scrollbar\">Editor Scrollbar and Minimap</a></h3>\n<pre><code class=\"language-json\">  // Scrollbar related settings\n  \"scrollbar\": {\n    // When to show the scrollbar in the editor (auto, system, always, never)\n    \"show\": \"auto\",\n    \"cursors\": true,          // Show cursor positions in the scrollbar.\n    \"git_diff\": true,         // Show git diff indicators in the scrollbar.\n    \"search_results\": true,   // Show buffer search results in the scrollbar.\n    \"selected_text\": true,    // Show selected text occurrences in the scrollbar.\n    \"selected_symbol\": true,  // Show selected symbol occurrences in the scrollbar.\n    \"diagnostics\": \"all\",     // Show diagnostics (none, error, warning, information, all)\n    \"axes\": {\n      \"horizontal\": true,     // Show/hide the horizontal scrollbar\n      \"vertical\": true        // Show/hide the vertical scrollbar\n    }\n  },\n\n  // Minimap related settings\n  \"minimap\": {\n    \"show\": \"never\",                // When to show (auto, always, never)\n    \"display_in\": \"active_editor\",  // Where to show (active_editor, all_editor)\n    \"thumb\": \"always\",              // When to show thumb (always, hover)\n    \"thumb_border\": \"left_open\",    // Thumb border (left_open, right_open, full, none)\n    \"max_width_columns\": 80,        // Maximum width of minimap\n    \"current_line_highlight\": null  // Highlight current line (null, line, gutter)\n  },\n\n  // Control Editor scroll beyond the last line: off, one_page, vertical_scroll_margin\n  \"scroll_beyond_last_line\": \"one_page\",\n  // Lines to keep above/below the cursor when scrolling with the keyboard\n  \"vertical_scroll_margin\": 3,\n  // The number of characters to keep on either side when scrolling with the mouse\n  \"horizontal_scroll_margin\": 5,\n  // Scroll sensitivity multiplier\n  \"scroll_sensitivity\": 1.0,\n  // Scroll sensitivity multiplier for fast scrolling (hold alt while scrolling)\n  \"fast_scroll_sensitivity\": 4.0,\n</code></pre>\n<h3 id=\"editor-tabs\"><a class=\"header\" href=\"#editor-tabs\">Editor Tabs</a></h3>\n<pre><code class=\"language-json\">  // Maximum number of tabs per pane. Unset for unlimited.\n  \"max_tabs\": null,\n\n  // Customize the tab bar appearance\n  \"tab_bar\": {\n    \"show\": true,                     // Show/hide the tab bar\n    \"show_nav_history_buttons\": true, // Show/hide history buttons on tab bar\n    \"show_tab_bar_buttons\": true      // Show hide buttons (new, split, zoom)\n  },\n  \"tabs\": {\n    \"git_status\": false,              // Color to show git status\n    \"close_position\": \"right\",        // Close button position (left, right, hidden)\n    \"show_close_button\": \"hover\",     // Close button shown (hover, always, hidden)\n    \"file_icons\": false,              // Icon showing file type\n    // Show diagnostics in file icon (off, errors, all). Requires file_icons=true\n    \"show_diagnostics\": \"off\"\n  }\n</code></pre>\n<h3 id=\"status-bar-1\"><a class=\"header\" href=\"#status-bar-1\">Status Bar</a></h3>\n<pre><code class=\"language-json\">  \"status_bar\": {\n    // Show/hide a button that displays the active buffer's language.\n    // Clicking the button brings up the language selector.\n    // Defaults to true.\n    \"active_language_button\": true,\n    // Show/hide a button that displays the cursor's position.\n    // Clicking the button brings up an input for jumping to a line and column.\n    // Defaults to true.\n    \"cursor_position_button\": true,\n  },\n  \"global_lsp_settings\": {\n    // Show/hide the LSP button in the status bar.\n    // Activity from the LSP is still shown.\n    // Button is not shown if \"enable_language_server\" if false.\n    \"button\": true\n  },\n</code></pre>\n<h3 id=\"multibuffer\"><a class=\"header\" href=\"#multibuffer\">Multibuffer</a></h3>\n<pre><code class=\"language-json\">{\n  // The default number of lines to expand excerpts in the multibuffer by.\n  \"expand_excerpt_lines\": 5,\n  // The default number of lines of context provided for excerpts in the multibuffer by.\n  \"excerpt_context_lines\": 2\n}\n</code></pre>\n<h3 id=\"editor-lsp\"><a class=\"header\" href=\"#editor-lsp\">Editor Completions, Snippets, Actions, Diagnostics</a></h3>\n<pre><code class=\"language-json\">  \"snippet_sort_order\": \"inline\",        // Snippets completions: top, inline, bottom, none\n  \"show_completions_on_input\": true,     // Show completions while typing\n  \"show_completion_documentation\": true, // Show documentation in completions\n  \"auto_signature_help\": false,          // Show method signatures inside parentheses\n\n  // Whether to show the signature help after completion or a bracket pair inserted.\n  // If `auto_signature_help` is enabled, this setting will be treated as enabled also.\n  \"show_signature_help_after_edits\": false,\n\n  // Whether to show code action button at start of buffer line.\n  \"inline_code_actions\": true,\n\n  // Which level to use to filter out diagnostics displayed in the editor:\n  \"diagnostics_max_severity\": null,      // off, error, warning, info, hint, null (all)\n\n  // How to render LSP `textDocument/documentColor` colors in the editor.\n  \"lsp_document_colors\": \"inlay\",        // none, inlay, border, background\n</code></pre>\n<h3 id=\"editor-ai\"><a class=\"header\" href=\"#editor-ai\">Edit Predictions</a></h3>\n<pre><code class=\"language-json\">  \"edit_predictions\": {\n    \"mode\": \"eager\",                // Automatically show (eager) or hold-alt (subtle)\n    \"enabled_in_text_threads\": true // Show/hide predictions in agent text threads\n  },\n  \"show_edit_predictions\": true     // Show/hide predictions in editor\n</code></pre>\n<h3 id=\"editor-inlay-hints\"><a class=\"header\" href=\"#editor-inlay-hints\">Editor Inlay Hints</a></h3>\n<pre><code class=\"language-json\">{\n  \"inlay_hints\": {\n    \"enabled\": false,\n    // Toggle certain types of hints on and off, all switched on by default.\n    \"show_type_hints\": true,\n    \"show_parameter_hints\": true,\n    \"show_other_hints\": true,\n\n    // Whether to show a background for inlay hints (theme `hint.background`)\n    \"show_background\": false, //\n\n    // Time to wait after editing before requesting hints (0 to disable debounce)\n    \"edit_debounce_ms\": 700,\n    // Time to wait after scrolling before requesting hints (0 to disable debounce)\n    \"scroll_debounce_ms\": 50,\n\n    // A set of modifiers which, when pressed, will toggle the visibility of inlay hints.\n    \"toggle_on_modifiers_press\": {\n      \"control\": false,\n      \"shift\": false,\n      \"alt\": false,\n      \"platform\": false,\n      \"function\": false\n    }\n  }\n}\n</code></pre>\n<h2 id=\"file-finder\"><a class=\"header\" href=\"#file-finder\">File Finder</a></h2>\n<pre><code class=\"language-json\">  // File Finder Settings\n  \"file_finder\": {\n    \"file_icons\": true,         // Show/hide file icons\n    \"modal_max_width\": \"small\", // Horizontal size: small, medium, large, xlarge, full\n    \"git_status\": true,         // Show the git status for each entry\n    \"include_ignored\": null     // gitignored files in results: true, false, null\n  },\n</code></pre>\n<h2 id=\"project-panel\"><a class=\"header\" href=\"#project-panel\">Project Panel</a></h2>\n<p>Project panel can be shown/hidden with <code class=\"hljs\">project panel: toggle focus</code> (<kbd class=\"keybinding\">cmd-shift-e|ctrl-shift-e</kbd>) or with <code class=\"hljs\">pane: reveal in project panel</code> (<kbd class=\"keybinding\">cmd-shift-e|ctrl-shift-e</kbd>).</p>\n<pre><code class=\"language-json\">  // Project Panel Settings\n  \"project_panel\": {\n    \"button\": true,                 // Show/hide button in the status bar\n    \"default_width\": 240,           // Default panel width\n    \"dock\": \"left\",                 // Position of the dock (left, right)\n    \"entry_spacing\": \"comfortable\", // Vertical spacing (comfortable, standard)\n    \"file_icons\": true,             // Show/hide file icons\n    \"folder_icons\": true,           // Show/hide folder icons\n    \"git_status\": true,             // Indicate new/updated files\n    \"indent_size\": 20,              // Pixels for each successive indent\n    \"auto_reveal_entries\": true,    // Show file in panel when activating its buffer\n    \"auto_fold_dirs\": true,         // Fold dirs with single subdir\n    \"sticky_scroll\": true,          // Stick parent directories at top of the project panel.\n    \"drag_and_drop\": true,          // Whether drag and drop is enabled\n    \"scrollbar\": {                  // Project panel scrollbar settings\n      \"show\": null                  // Show/hide: (auto, system, always, never)\n    },\n    \"show_diagnostics\": \"all\",      //\n    // Settings related to indent guides in the project panel.\n    \"indent_guides\": {\n      // When to show indent guides in the project panel. (always, never)\n      \"show\": \"always\"\n    },\n    // Whether to hide the root entry when only one folder is open in the window.\n    \"hide_root\": false\n  }.\n</code></pre>\n<h2 id=\"agent-panel\"><a class=\"header\" href=\"#agent-panel\">Agent Panel</a></h2>\n<pre><code class=\"language-json\">  \"agent\": {\n    \"version\": \"2\",\n    \"enabled\": true,        // Enable/disable the agent\n    \"button\": true,         // Show/hide the icon in the status bar\n    \"dock\": \"right\",        // Where to dock: left, right, bottom\n    \"default_width\": 640,   // Default width (left/right docked)\n    \"default_height\": 320,  // Default height (bottom dockeed)\n  },\n  \"agent_font_size\": 16\n</code></pre>\n<p>See <a href=\"./ai/overview.html\">Zed AI Documentation</a> for additional non-visual AI settings.</p>\n<h2 id=\"terminal-panel\"><a class=\"header\" href=\"#terminal-panel\">Terminal Panel</a></h2>\n<pre><code class=\"language-json\">  // Terminal Panel Settings\n  \"terminal\": {\n    \"dock\": \"bottom\",                   // Where to dock: left, right, bottom\n    \"button\": true,                     // Show/hide status bar icon\n    \"default_width\": 640,               // Default width (left/right docked)\n    \"default_height\": 320,              // Default height (bottom dockeed)\n\n    // Set the cursor blinking behavior in the terminal (on, off, terminal_controlled)\n    \"blinking\": \"terminal_controlled\",\n    // Default cursor shape for the terminal cursor (block, bar, underline, hollow)\n    \"cursor_shape\": \"block\",\n\n    // Environment variables to add to terminal's process environment\n    \"env\": {\n      // \"KEY\": \"value\"\n    },\n\n    // Terminal scrollbar\n    \"scrollbar\": {\n      \"show\": null                       // Show/hide: (auto, system, always, never)\n    },\n    // Terminal Font Settings\n    \"font_family\": \"Fira Code\",\n    \"font_size\": 15,\n    \"font_weight\": 400,\n    // Terminal line height: comfortable (1.618), standard(1.3) or `{ \"custom\": 2 }`\n    \"line_height\": \"comfortable\",\n\n    \"max_scroll_history_lines\": 10000,   // Scrollback history (0=disable, max=100000)\n  }\n</code></pre>\n<p>See <a href=\"./configuring-zed.html#terminal\">Terminal settings</a> for additional non-visual customization options.</p>\n<h3 id=\"other-panels\"><a class=\"header\" href=\"#other-panels\">Other Panels</a></h3>\n<pre><code class=\"language-json\">  // Git Panel\n  \"git_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"default_width\": 360,         // Default width of the git panel.\n    \"status_style\": \"icon\",       // label_color, icon\n    \"sort_by_path\": false,        // Sort by path (false) or status (true)\n    \"scrollbar\": {\n      \"show\": null                // Show/hide: (auto, system, always, never)\n    }\n  },\n\n  // Debugger Panel\n  \"debugger\": {\n    \"dock\": \"bottom\",             // Where to dock: left, right, bottom\n    \"button\": true                // Show/hide status bar icon\n  },\n\n  // Outline Panel\n  \"outline_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"default_width\": 300,         // Default width of the git panel\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"file_icons\": true,           // Show/hide file_icons\n    \"folder_icons\": true,         // Show file_icons (true), chevrons (false) for dirs\n    \"git_status\": true,           // Show git status\n    \"indent_size\": 20,            // Indentation for nested items (pixels)\n    \"indent_guides\": {\n      \"show\": \"always\"            // Show indent guides (always, never)\n    },\n    \"auto_reveal_entries\": true,  // Show file in panel when activating its buffer\n    \"auto_fold_dirs\": true,       // Fold dirs with single subdir\n    \"scrollbar\": {                // Project panel scrollbar settings\n      \"show\": null                // Show/hide: (auto, system, always, never)\n    }\n  }\n</code></pre>\n<h2 id=\"collaboration-panels\"><a class=\"header\" href=\"#collaboration-panels\">Collaboration Panels</a></h2>\n<pre><code class=\"language-json\">{\n  // Collaboration Panel\n  \"collaboration_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"default_width\": 240          // Default width of the collaboration panel.\n  },\n  \"show_call_status_icon\": true,  // Shown call status in the OS status bar.\n\n  // Chat Panel\n  \"chat_panel\": {\n    \"button\": \"when_in_call\",     // status bar icon (true, false, when_in_call)\n    \"dock\": \"right\",              // Where to dock: left, right\n    \"default_width\": 240          // Default width of the chat panel\n  },\n\n  // Notification Panel\n  \"notification_panel\": {\n    // Whether to show the notification panel button in the status bar.\n    \"button\": true,\n    // Where to dock the notification panel. Can be 'left' or 'right'.\n    \"dock\": \"right\",\n    // Default width of the notification panel.\n    \"default_width\": 380\n  }\n</code></pre>\n\n</main>",
    "content_text": "Visual Customization\nVarious aspects of Zed's visual layout can be configured via Zed settings.json which you can access via zed: open settings (cmd-,|ctrl-,).\nSee Configuring Zed for additional information and other non-visual settings.\nThemes\nUse may install zed extensions providing Themes and Icon Themes via zed: extensions from the command palette or menu.\nYou can preview/choose amongst your installed themes and icon themes with theme selector: toggle (cmd-k cmd-t|ctrl-k ctrl-t) and (icon theme selector: toggle) which will modify the following settings:\n{\n  \"theme\": \"One Dark\",\n  \"icon_theme\": \"Zed (Default)\"\n}\n\nIf you would like to use distinct themes for light mode/dark mode that can be set with:\n{\n  \"theme\": {\n    \"dark\": \"One Dark\"\n    \"light\": \"One Light\",\n    // Mode to use (dark, light) or \"system\" to follow the OS's light/dark mode (default)\n    \"mode\": \"system\",\n  },\n  \"icon_theme\": {\n    \"dark\": \"Zed (Default)\"\n    \"light\": \"Zed (Default)\",\n    // Mode to use (dark, light) or \"system\" to follow the OS's light/dark mode (default)\n    \"mode\": \"system\",\n  }\n}\n\nFonts\n  // UI Font. Use \".SystemUIFont\" to use the default system font (SF Pro on macOS),\n  // or \".ZedSans\" for the bundled default (currently IBM Plex)\n  \"ui_font_family\": \".SystemUIFont\",\n  \"ui_font_weight\": 400, // Font weight in standard CSS units from 100 to 900.\n  \"ui_font_size\": 16,\n\n  // Buffer Font - Used by editor buffers\n  // use \".ZedMono\" for the bundled default monospace (currently Lilex)\n  \"buffer_font_family\": \"Berkeley Mono\", // Font name for editor buffers\n  \"buffer_font_size\": 15,                 // Font size for editor buffers\n  \"buffer_font_weight\": 400,              // Font weight in CSS units [100-900]\n  // Line height \"comfortable\" (1.618), \"standard\" (1.3) or custom: `{ \"custom\": 2 }`\n  \"buffer_line_height\": \"comfortable\",\n\n  // Terminal Font Settings\n  \"terminal\": {\n    \"font_family\": \"\",\n    \"font_size\": 15,\n    // Terminal line height: comfortable (1.618), standard(1.3) or `{ \"custom\": 2 }`\n    \"line_height\": \"comfortable\",\n  },\n\n  // Agent Panel Font Settings\n  \"agent_font_size\": 15\n\nFont ligatures\nBy default Zed enable font ligatures which will visually combines certain adjacent characters.\nFor example => will be displayed as → and != will be ≠. This is purely cosmetic and the individual characters remain unchanged.\nTo disable this behavior use:\n{\n  \"buffer_font_features\": {\n    \"calt\": false // Disable ligatures\n  }\n}\n\nStatus Bar\n{\n  // Whether to show full labels in line indicator or short ones\n  //   - `short`: \"2 s, 15 l, 32 c\"\n  //   - `long`: \"2 selections, 15 lines, 32 characters\"\n  \"line_indicator_format\": \"long\"\n\n  // Individual status bar icons can be hidden:\n  // \"project_panel\": {\"button\": false },\n  // \"outline_panel\": {\"button\": false },\n  // \"collaboration_panel\": {\"button\": false },\n  // \"chat_panel\": {\"button\": \"never\" },\n  // \"git_panel\": {\"button\": false },\n  // \"notification_panel\": {\"button\": false },\n  // \"agent\": {\"button\": false },\n  // \"debugger\": {\"button\": false },\n  // \"diagnostics\": {\"button\": false },\n  // \"search\": {\"button\": false },\n}\n\nTitlebar\n  // Control which items are shown/hidden in the title bar\n  \"title_bar\": {\n    \"show_branch_icon\": false,      // Show/hide branch icon beside branch switcher\n    \"show_branch_name\": true,       // Show/hide branch name\n    \"show_project_items\": true,     // Show/hide project host and name\n    \"show_onboarding_banner\": true, // Show/hide onboarding banners\n    \"show_user_picture\": true,      // Show/hide user avatar\n    \"show_sign_in\": true,           // Show/hide sign-in button\n    \"show_menus\": false             // Show/hide menus\n  },\n\nWorkspace\n{\n  // Force usage of Zed build in path prompts (file and directory pickers)\n  // instead of OS native pickers (false).\n  \"use_system_path_prompts\": true,\n  // Force usage of Zed built in confirmation prompts (\"Do you want to save?\")\n  // instead of OS native prompts (false). On linux this is ignored (always false).\n  \"use_system_prompts\": true,\n\n  // Whether to use the system provided dialogs for Open and Save As (true) or\n  // Zed's built-in keyboard-first pickers (false)\n  \"use_system_path_prompts\": true,\n\n  // Active pane styling settings.\n  \"active_pane_modifiers\": {\n    // Inset border size of the active pane, in pixels.\n    \"border_size\": 0.0,\n    // Opacity of the inactive panes. 0 means transparent, 1 means opaque.\n    \"inactive_opacity\": 1.0\n  },\n\n  // Layout mode of the bottom dock: contained, full, left_aligned, right_aligned\n  \"bottom_dock_layout\": \"contained\",\n\n  // Whether to resize all the panels in a dock when resizing the dock.\n  // Can be a combination of \"left\", \"right\" and \"bottom\".\n  \"resize_all_panels_in_dock\": [\"left\"]\n}\n\n\nEditor\n  // Whether the cursor blinks in the editor.\n  \"cursor_blink\": true,\n\n  // Cursor shape for the default editor: bar, block, underline, hollow\n  \"cursor_shape\": null,\n\n  // Highlight the current line in the editor: none, gutter, line, all\n  \"current_line_highlight\": \"all\",\n\n  // When does the mouse cursor hide: never, on_typing, on_typing_and_movement\n  \"hide_mouse\": \"on_typing_and_movement\",\n\n  // Whether to highlight all occurrences of the selected text in an editor.\n  \"selection_highlight\": true,\n\n  // Visually show tabs and spaces  (none, all, selection, boundary, trailing)\n  \"show_whitespaces\": \"selection\",\n\n  \"unnecessary_code_fade\": 0.3, // How much to fade out unused code.\n\n  // Hide the values of in variables from visual display in private files\n  \"redact_private_values\": false,\n\n  // Soft-wrap and rulers\n  \"soft_wrap\": \"none\",          // none, editor_width, preferred_line_length, bounded\n  \"preferred_line_length\": 80,  // Column to soft-wrap\n  \"show_wrap_guides\": true,     // Show/hide wrap guides (vertical rulers)\n  \"wrap_guides\": [],            // Where to position wrap_guides (character counts)\n\n  // Gutter Settings\n  \"gutter\": {\n    \"line_numbers\": true,         // Show/hide line numbers in the gutter.\n    \"runnables\": true,            // Show/hide runnables buttons in the gutter.\n    \"breakpoints\": true,          // Show/hide show breakpoints in the gutter.\n    \"folds\": true,                // Show/hide show fold buttons in the gutter.\n    \"min_line_number_digits\": 4   // Reserve space for N digit line numbers\n  },\n  \"relative_line_numbers\": false, // Show relative line numbers in gutter\n\n  // Indent guides\n  \"indent_guides\": {\n    \"enabled\": true,\n    \"line_width\": 1,                  // Width of guides in pixels [1-10]\n    \"active_line_width\": 1,           // Width of active guide in pixels [1-10]\n    \"coloring\": \"fixed\",              // disabled, fixed, indent_aware\n    \"background_coloring\": \"disabled\" // disabled, indent_aware\n  }\n\nGit Blame\n  \"git\": {\n    \"inline_blame\": {\n      \"enabled\": true,             // Show/hide inline blame\n      \"delay\": 0,                  // Show after delay (ms)\n      \"min_column\": 0,             // Minimum column to inline display blame\n      \"padding\": 7,                // Padding between code and inline blame (em)\n      \"show_commit_summary\": false // Show/hide commit summary\n    },\n    \"hunk_style\": \"staged_hollow\"  // staged_hollow, unstaged_hollow\n  }\n\nEditor Toolbar\n  // Editor toolbar related settings\n  \"toolbar\": {\n    \"breadcrumbs\": true, // Whether to show breadcrumbs.\n    \"quick_actions\": true, // Whether to show quick action buttons.\n    \"selections_menu\": true, // Whether to show the Selections menu\n    \"agent_review\": true, // Whether to show agent review buttons\n    \"code_actions\": false // Whether to show code action buttons\n  }\n\nEditor Scrollbar and Minimap\n  // Scrollbar related settings\n  \"scrollbar\": {\n    // When to show the scrollbar in the editor (auto, system, always, never)\n    \"show\": \"auto\",\n    \"cursors\": true,          // Show cursor positions in the scrollbar.\n    \"git_diff\": true,         // Show git diff indicators in the scrollbar.\n    \"search_results\": true,   // Show buffer search results in the scrollbar.\n    \"selected_text\": true,    // Show selected text occurrences in the scrollbar.\n    \"selected_symbol\": true,  // Show selected symbol occurrences in the scrollbar.\n    \"diagnostics\": \"all\",     // Show diagnostics (none, error, warning, information, all)\n    \"axes\": {\n      \"horizontal\": true,     // Show/hide the horizontal scrollbar\n      \"vertical\": true        // Show/hide the vertical scrollbar\n    }\n  },\n\n  // Minimap related settings\n  \"minimap\": {\n    \"show\": \"never\",                // When to show (auto, always, never)\n    \"display_in\": \"active_editor\",  // Where to show (active_editor, all_editor)\n    \"thumb\": \"always\",              // When to show thumb (always, hover)\n    \"thumb_border\": \"left_open\",    // Thumb border (left_open, right_open, full, none)\n    \"max_width_columns\": 80,        // Maximum width of minimap\n    \"current_line_highlight\": null  // Highlight current line (null, line, gutter)\n  },\n\n  // Control Editor scroll beyond the last line: off, one_page, vertical_scroll_margin\n  \"scroll_beyond_last_line\": \"one_page\",\n  // Lines to keep above/below the cursor when scrolling with the keyboard\n  \"vertical_scroll_margin\": 3,\n  // The number of characters to keep on either side when scrolling with the mouse\n  \"horizontal_scroll_margin\": 5,\n  // Scroll sensitivity multiplier\n  \"scroll_sensitivity\": 1.0,\n  // Scroll sensitivity multiplier for fast scrolling (hold alt while scrolling)\n  \"fast_scroll_sensitivity\": 4.0,\n\nEditor Tabs\n  // Maximum number of tabs per pane. Unset for unlimited.\n  \"max_tabs\": null,\n\n  // Customize the tab bar appearance\n  \"tab_bar\": {\n    \"show\": true,                     // Show/hide the tab bar\n    \"show_nav_history_buttons\": true, // Show/hide history buttons on tab bar\n    \"show_tab_bar_buttons\": true      // Show hide buttons (new, split, zoom)\n  },\n  \"tabs\": {\n    \"git_status\": false,              // Color to show git status\n    \"close_position\": \"right\",        // Close button position (left, right, hidden)\n    \"show_close_button\": \"hover\",     // Close button shown (hover, always, hidden)\n    \"file_icons\": false,              // Icon showing file type\n    // Show diagnostics in file icon (off, errors, all). Requires file_icons=true\n    \"show_diagnostics\": \"off\"\n  }\n\nStatus Bar\n  \"status_bar\": {\n    // Show/hide a button that displays the active buffer's language.\n    // Clicking the button brings up the language selector.\n    // Defaults to true.\n    \"active_language_button\": true,\n    // Show/hide a button that displays the cursor's position.\n    // Clicking the button brings up an input for jumping to a line and column.\n    // Defaults to true.\n    \"cursor_position_button\": true,\n  },\n  \"global_lsp_settings\": {\n    // Show/hide the LSP button in the status bar.\n    // Activity from the LSP is still shown.\n    // Button is not shown if \"enable_language_server\" if false.\n    \"button\": true\n  },\n\nMultibuffer\n{\n  // The default number of lines to expand excerpts in the multibuffer by.\n  \"expand_excerpt_lines\": 5,\n  // The default number of lines of context provided for excerpts in the multibuffer by.\n  \"excerpt_context_lines\": 2\n}\n\nEditor Completions, Snippets, Actions, Diagnostics\n  \"snippet_sort_order\": \"inline\",        // Snippets completions: top, inline, bottom, none\n  \"show_completions_on_input\": true,     // Show completions while typing\n  \"show_completion_documentation\": true, // Show documentation in completions\n  \"auto_signature_help\": false,          // Show method signatures inside parentheses\n\n  // Whether to show the signature help after completion or a bracket pair inserted.\n  // If `auto_signature_help` is enabled, this setting will be treated as enabled also.\n  \"show_signature_help_after_edits\": false,\n\n  // Whether to show code action button at start of buffer line.\n  \"inline_code_actions\": true,\n\n  // Which level to use to filter out diagnostics displayed in the editor:\n  \"diagnostics_max_severity\": null,      // off, error, warning, info, hint, null (all)\n\n  // How to render LSP `textDocument/documentColor` colors in the editor.\n  \"lsp_document_colors\": \"inlay\",        // none, inlay, border, background\n\nEdit Predictions\n  \"edit_predictions\": {\n    \"mode\": \"eager\",                // Automatically show (eager) or hold-alt (subtle)\n    \"enabled_in_text_threads\": true // Show/hide predictions in agent text threads\n  },\n  \"show_edit_predictions\": true     // Show/hide predictions in editor\n\nEditor Inlay Hints\n{\n  \"inlay_hints\": {\n    \"enabled\": false,\n    // Toggle certain types of hints on and off, all switched on by default.\n    \"show_type_hints\": true,\n    \"show_parameter_hints\": true,\n    \"show_other_hints\": true,\n\n    // Whether to show a background for inlay hints (theme `hint.background`)\n    \"show_background\": false, //\n\n    // Time to wait after editing before requesting hints (0 to disable debounce)\n    \"edit_debounce_ms\": 700,\n    // Time to wait after scrolling before requesting hints (0 to disable debounce)\n    \"scroll_debounce_ms\": 50,\n\n    // A set of modifiers which, when pressed, will toggle the visibility of inlay hints.\n    \"toggle_on_modifiers_press\": {\n      \"control\": false,\n      \"shift\": false,\n      \"alt\": false,\n      \"platform\": false,\n      \"function\": false\n    }\n  }\n}\n\nFile Finder\n  // File Finder Settings\n  \"file_finder\": {\n    \"file_icons\": true,         // Show/hide file icons\n    \"modal_max_width\": \"small\", // Horizontal size: small, medium, large, xlarge, full\n    \"git_status\": true,         // Show the git status for each entry\n    \"include_ignored\": null     // gitignored files in results: true, false, null\n  },\n\nProject Panel\nProject panel can be shown/hidden with project panel: toggle focus (cmd-shift-e|ctrl-shift-e) or with pane: reveal in project panel (cmd-shift-e|ctrl-shift-e).\n  // Project Panel Settings\n  \"project_panel\": {\n    \"button\": true,                 // Show/hide button in the status bar\n    \"default_width\": 240,           // Default panel width\n    \"dock\": \"left\",                 // Position of the dock (left, right)\n    \"entry_spacing\": \"comfortable\", // Vertical spacing (comfortable, standard)\n    \"file_icons\": true,             // Show/hide file icons\n    \"folder_icons\": true,           // Show/hide folder icons\n    \"git_status\": true,             // Indicate new/updated files\n    \"indent_size\": 20,              // Pixels for each successive indent\n    \"auto_reveal_entries\": true,    // Show file in panel when activating its buffer\n    \"auto_fold_dirs\": true,         // Fold dirs with single subdir\n    \"sticky_scroll\": true,          // Stick parent directories at top of the project panel.\n    \"drag_and_drop\": true,          // Whether drag and drop is enabled\n    \"scrollbar\": {                  // Project panel scrollbar settings\n      \"show\": null                  // Show/hide: (auto, system, always, never)\n    },\n    \"show_diagnostics\": \"all\",      //\n    // Settings related to indent guides in the project panel.\n    \"indent_guides\": {\n      // When to show indent guides in the project panel. (always, never)\n      \"show\": \"always\"\n    },\n    // Whether to hide the root entry when only one folder is open in the window.\n    \"hide_root\": false\n  }.\n\nAgent Panel\n  \"agent\": {\n    \"version\": \"2\",\n    \"enabled\": true,        // Enable/disable the agent\n    \"button\": true,         // Show/hide the icon in the status bar\n    \"dock\": \"right\",        // Where to dock: left, right, bottom\n    \"default_width\": 640,   // Default width (left/right docked)\n    \"default_height\": 320,  // Default height (bottom dockeed)\n  },\n  \"agent_font_size\": 16\n\nSee Zed AI Documentation for additional non-visual AI settings.\nTerminal Panel\n  // Terminal Panel Settings\n  \"terminal\": {\n    \"dock\": \"bottom\",                   // Where to dock: left, right, bottom\n    \"button\": true,                     // Show/hide status bar icon\n    \"default_width\": 640,               // Default width (left/right docked)\n    \"default_height\": 320,              // Default height (bottom dockeed)\n\n    // Set the cursor blinking behavior in the terminal (on, off, terminal_controlled)\n    \"blinking\": \"terminal_controlled\",\n    // Default cursor shape for the terminal cursor (block, bar, underline, hollow)\n    \"cursor_shape\": \"block\",\n\n    // Environment variables to add to terminal's process environment\n    \"env\": {\n      // \"KEY\": \"value\"\n    },\n\n    // Terminal scrollbar\n    \"scrollbar\": {\n      \"show\": null                       // Show/hide: (auto, system, always, never)\n    },\n    // Terminal Font Settings\n    \"font_family\": \"Fira Code\",\n    \"font_size\": 15,\n    \"font_weight\": 400,\n    // Terminal line height: comfortable (1.618), standard(1.3) or `{ \"custom\": 2 }`\n    \"line_height\": \"comfortable\",\n\n    \"max_scroll_history_lines\": 10000,   // Scrollback history (0=disable, max=100000)\n  }\n\nSee Terminal settings for additional non-visual customization options.\nOther Panels\n  // Git Panel\n  \"git_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"default_width\": 360,         // Default width of the git panel.\n    \"status_style\": \"icon\",       // label_color, icon\n    \"sort_by_path\": false,        // Sort by path (false) or status (true)\n    \"scrollbar\": {\n      \"show\": null                // Show/hide: (auto, system, always, never)\n    }\n  },\n\n  // Debugger Panel\n  \"debugger\": {\n    \"dock\": \"bottom\",             // Where to dock: left, right, bottom\n    \"button\": true                // Show/hide status bar icon\n  },\n\n  // Outline Panel\n  \"outline_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"default_width\": 300,         // Default width of the git panel\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"file_icons\": true,           // Show/hide file_icons\n    \"folder_icons\": true,         // Show file_icons (true), chevrons (false) for dirs\n    \"git_status\": true,           // Show git status\n    \"indent_size\": 20,            // Indentation for nested items (pixels)\n    \"indent_guides\": {\n      \"show\": \"always\"            // Show indent guides (always, never)\n    },\n    \"auto_reveal_entries\": true,  // Show file in panel when activating its buffer\n    \"auto_fold_dirs\": true,       // Fold dirs with single subdir\n    \"scrollbar\": {                // Project panel scrollbar settings\n      \"show\": null                // Show/hide: (auto, system, always, never)\n    }\n  }\n\nCollaboration Panels\n{\n  // Collaboration Panel\n  \"collaboration_panel\": {\n    \"button\": true,               // Show/hide status bar icon\n    \"dock\": \"left\",               // Where to dock: left, right\n    \"default_width\": 240          // Default width of the collaboration panel.\n  },\n  \"show_call_status_icon\": true,  // Shown call status in the OS status bar.\n\n  // Chat Panel\n  \"chat_panel\": {\n    \"button\": \"when_in_call\",     // status bar icon (true, false, when_in_call)\n    \"dock\": \"right\",              // Where to dock: left, right\n    \"default_width\": 240          // Default width of the chat panel\n  },\n\n  // Notification Panel\n  \"notification_panel\": {\n    // Whether to show the notification panel button in the status bar.\n    \"button\": true,\n    // Where to dock the notification panel. Can be 'left' or 'right'.\n    \"dock\": \"right\",\n    // Default width of the notification panel.\n    \"default_width\": 380\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:26"
  },
  "vim.html": {
    "url": "https://zed.dev/docs/vim.html",
    "title": "Vim Mode | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"vim-mode\"><a class=\"header\" href=\"#vim-mode\">Vim Mode</a></h1>\n<p>Zed includes a Vim emulation layer known as \"vim mode\". On this page, you will learn how to turn Zed's vim mode on or off, what tools and commands Zed provides to help you navigate and edit your code, and generally how to make the most of vim mode in Zed.</p>\n<p>You'll learn how to:</p>\n<ul>\n<li>Understand the core differences between Zed's vim mode and traditional Vim</li>\n<li>Enable or disable vim mode</li>\n<li>Make the most of Zed-specific features within vim mode</li>\n<li>Customize vim mode key bindings</li>\n<li>Configure vim mode settings</li>\n</ul>\n<p>Whether you're new to vim mode or an experienced Vim user looking to optimize your Zed experience, this guide will help you harness the full power of modal editing in Zed.</p>\n<h2 id=\"zeds-vim-mode-design\"><a class=\"header\" href=\"#zeds-vim-mode-design\">Zed's vim mode design</a></h2>\n<p>Vim mode tries to offer a familiar experience to Vim users: it replicates the behavior of motions and commands precisely when it makes sense and uses Zed-specific functionality to provide an editing experience that \"just works\" without requiring configuration on your part.</p>\n<p>This includes support for semantic navigation, multiple cursors, or other features usually provided by plugins like surrounding text.</p>\n<p>So, Zed's vim mode does not replicate Vim one-to-one, but it meshes Vim's modal design with Zed's modern features to provide a more fluid experience. It's also configurable, so you can add your own key bindings or override the defaults.</p>\n<h3 id=\"core-differences\"><a class=\"header\" href=\"#core-differences\">Core differences</a></h3>\n<p>There are four types of features in vim mode that use Zed's core functionality, leading to some differences in behavior:</p>\n<ol>\n<li><strong>Motions</strong>: vim mode uses Zed's semantic parsing to tune the behavior of motions per language. For example, in Rust, jumping to matching bracket with <code>%</code> works with the pipe character <code>|</code>. In JavaScript, <code>w</code> considers <code>$</code> to be a word character.</li>\n<li><strong>Visual block selections</strong>: vim mode uses Zed's multiple cursor to emulate visual block selections, making block selections a lot more flexible. For example, anything you insert after a block selection updates on every line in real-time, and you can add or remove cursors anytime.</li>\n<li><strong>Macros</strong>: vim mode uses Zed's recording system for vim macros. So, you can capture and replay more complex actions, like autocompletion.</li>\n<li><strong>Search and replace</strong>: vim mode uses Zed's search system, so, the syntax for regular expressions is slightly different compared to Vim. <a href=\"#regex-differences\">Head to the Regex differences section</a> for details.</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> The foundations of Zed's vim mode should already cover many use cases, and we're always looking to improve it. If you find missing features that you rely on in your workflow, please <a href=\"https://github.com/zed-industries/zed/issues\">file an issue on GitHub</a>.</p>\n</blockquote>\n<h2 id=\"enabling-and-disabling-vim-mode\"><a class=\"header\" href=\"#enabling-and-disabling-vim-mode\">Enabling and disabling vim mode</a></h2>\n<p>When you first open Zed, you'll see a checkbox on the welcome screen that allows you to enable vim mode.</p>\n<p>If you missed this, you can toggle vim mode on or off anytime by opening the command palette and using the workspace command <code>toggle vim mode</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: This command toggles the following property in your user settings:</p>\n<pre><code class=\"language-json\">{\n  \"vim_mode\": true\n}\n</code></pre>\n</blockquote>\n<h2 id=\"zed-specific-features\"><a class=\"header\" href=\"#zed-specific-features\">Zed-specific features</a></h2>\n<p>Zed is built on a modern foundation that (among other things) uses tree-sitter and language servers to understand the content of the file you're editing and supports multiple cursors out of the box.</p>\n<p>Vim mode has several \"core Zed\" key bindings that will help you make the most of Zed's specific feature set.</p>\n<h3 id=\"language-server\"><a class=\"header\" href=\"#language-server\">Language server</a></h3>\n<p>The following commands use the language server to help you navigate and refactor your code.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Go to definition</td><td><code>g d</code></td></tr>\n<tr><td>Go to declaration</td><td><code>g D</code></td></tr>\n<tr><td>Go to type definition</td><td><code>g y</code></td></tr>\n<tr><td>Go to implementation</td><td><code>g I</code></td></tr>\n<tr><td>Rename (change definition)</td><td><code>c d</code></td></tr>\n<tr><td>Go to All references to the current word</td><td><code>g A</code></td></tr>\n<tr><td>Find symbol in current file</td><td><code>g s</code></td></tr>\n<tr><td>Find symbol in entire project</td><td><code>g S</code></td></tr>\n<tr><td>Go to next diagnostic</td><td><code>g ]</code> or <code>] d</code></td></tr>\n<tr><td>Go to previous diagnostic</td><td><code>g [</code> or <code>[ d</code></td></tr>\n<tr><td>Show inline error (hover)</td><td><code>g h</code></td></tr>\n<tr><td>Open the code actions menu</td><td><code>g .</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"git\"><a class=\"header\" href=\"#git\">Git</a></h3>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Go to next git change</td><td><code>] c</code></td></tr>\n<tr><td>Go to previous git change</td><td><code>[ c</code></td></tr>\n<tr><td>Expand diff hunk</td><td><code>d o</code></td></tr>\n<tr><td>Toggle staged</td><td><code>d O</code></td></tr>\n<tr><td>Stage and next (in diff view)</td><td><code>d u</code></td></tr>\n<tr><td>Unstage and next (in diff view)</td><td><code>d U</code></td></tr>\n<tr><td>Restore change</td><td><code>d p</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"treesitter\"><a class=\"header\" href=\"#treesitter\">Treesitter</a></h3>\n<p>Treesitter is a powerful tool that Zed uses to understand the structure of your code. Zed provides motions that change the current cursor position, and text objects that can be used as the target of actions.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Go to next/previous method</td><td><code>] m</code> / <code>[ m</code></td></tr>\n<tr><td>Go to next/previous method end</td><td><code>] M</code> / <code>[ M</code></td></tr>\n<tr><td>Go to next/previous section</td><td><code>] ]</code> / <code>[ [</code></td></tr>\n<tr><td>Go to next/previous section end</td><td><code>] [</code> / <code>[ ]</code></td></tr>\n<tr><td>Go to next/previous comment</td><td><code>] /</code>, <code>] *</code> / <code>[ /</code>, <code>[ *</code></td></tr>\n<tr><td>Select a larger syntax node</td><td><code>[ x</code></td></tr>\n<tr><td>Select a smaller syntax node</td><td><code>] x</code></td></tr>\n</tbody></table>\n</div><div class=\"table-wrapper\"><table><thead><tr><th>Text Objects</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Around a class, definition, etc.</td><td><code>a c</code></td></tr>\n<tr><td>Inside a class, definition, etc.</td><td><code>i c</code></td></tr>\n<tr><td>Around a function, method etc.</td><td><code>a f</code></td></tr>\n<tr><td>Inside a function, method, etc.</td><td><code>i f</code></td></tr>\n<tr><td>A comment</td><td><code>g c</code></td></tr>\n<tr><td>An argument, or list item, etc.</td><td><code>i a</code></td></tr>\n<tr><td>An argument, or list item, etc. (including trailing comma)</td><td><code>a a</code></td></tr>\n<tr><td>Around an HTML-like tag</td><td><code>a t</code></td></tr>\n<tr><td>Inside an HTML-like tag</td><td><code>i t</code></td></tr>\n<tr><td>The current indent level, and one line before and after</td><td><code>a I</code></td></tr>\n<tr><td>The current indent level, and one line before</td><td><code>a i</code></td></tr>\n<tr><td>The current indent level</td><td><code>i i</code></td></tr>\n</tbody></table>\n</div>\n<p>Note that the definitions for the targets of the <code>[m</code> family of motions are the same as the\nboundaries defined by <code>af</code>. The targets of the <code>[[</code> are the same as those defined by <code>ac</code>, though\nif there are no classes, then functions are also used. Similarly <code>gc</code> is used to find <code>[ /</code>. <code>g c</code></p>\n<p>The definition of functions, classes and comments is language dependent, and support can be added\nto extensions by adding a [<code>textobjects.scm</code>]. The definition of arguments and tags operates at\nthe tree-sitter level, but looks for certain patterns in the parse tree and is not currently configurable\nper language.</p>\n<h3 id=\"multi-cursor\"><a class=\"header\" href=\"#multi-cursor\">Multi cursor</a></h3>\n<p>These commands help you manage multiple cursors in Zed.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Add a cursor selecting the next copy of the current word</td><td><code>g l</code></td></tr>\n<tr><td>Add a cursor selecting the previous copy of the current word</td><td><code>g L</code></td></tr>\n<tr><td>Skip latest word selection, and add next</td><td><code>g &gt;</code></td></tr>\n<tr><td>Skip latest word selection, and add previous</td><td><code>g &lt;</code></td></tr>\n<tr><td>Add a visual selection for every copy of the current word</td><td><code>g a</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"pane-management\"><a class=\"header\" href=\"#pane-management\">Pane management</a></h3>\n<p>These commands open new panes or jump to specific panes.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Open a project-wide search</td><td><code>g /</code></td></tr>\n<tr><td>Open the current search excerpt</td><td><code>g &lt;space&gt;</code></td></tr>\n<tr><td>Open the current search excerpt in a split</td><td><code>&lt;ctrl-w&gt; &lt;space&gt;</code></td></tr>\n<tr><td>Go to definition in a split</td><td><code>&lt;ctrl-w&gt; g d</code></td></tr>\n<tr><td>Go to type definition in a split</td><td><code>&lt;ctrl-w&gt; g D</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"in-insert-mode\"><a class=\"header\" href=\"#in-insert-mode\">In insert mode</a></h3>\n<p>The following commands help you bring up Zed's completion menu, request a suggestion from GitHub Copilot, or open the inline AI assistant without leaving insert mode.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Open the completion menu</td><td><code>ctrl-x ctrl-o</code></td></tr>\n<tr><td>Request GitHub Copilot suggestion (requires GitHub Copilot to be configured)</td><td><code>ctrl-x ctrl-c</code></td></tr>\n<tr><td>Open the inline AI assistant (requires a configured assistant)</td><td><code>ctrl-x ctrl-a</code></td></tr>\n<tr><td>Open the code actions menu</td><td><code>ctrl-x ctrl-l</code></td></tr>\n<tr><td>Hides all suggestions</td><td><code>ctrl-x ctrl-z</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"supported-plugins\"><a class=\"header\" href=\"#supported-plugins\">Supported plugins</a></h3>\n<p>Zed's vim mode includes some features that are usually provided by very popular plugins in the Vim ecosystem:</p>\n<ul>\n<li>You can surround text objects with <code>ys</code> (yank surround), change surrounding with <code>cs</code>, and delete surrounding with <code>ds</code>.</li>\n<li>You can comment and uncomment selections with <code>gc</code> in visual mode and <code>gcc</code> in normal mode.</li>\n<li>The project panel supports many shortcuts modeled after the Vim plugin <code>netrw</code>: navigation with <code>hjkl</code>, open file with <code>o</code>, open file in a new tab with <code>t</code>, etc.</li>\n<li>You can add key bindings to your keymap to navigate \"camelCase\" names. <a href=\"#optional-key-bindings\">Head down to the Optional key bindings</a> section to learn how.</li>\n<li>You can use <code>gR</code> to do <a href=\"https://github.com/vim-scripts/ReplaceWithRegister\">ReplaceWithRegister</a>.</li>\n<li>You can use <code>cx</code> for <a href=\"https://github.com/tommcdo/vim-exchange\">vim-exchange</a> functionality. Note that it does not have a default binding in visual mode, but you can add one to your keymap (refer to the <a href=\"#optional-key-bindings\">optional key bindings</a> section).</li>\n<li>You can navigate to indent depths relative to your cursor with the <a href=\"https://github.com/jeetsukumaran/vim-indentwise\">indent wise</a> plugin <code>[-</code>, <code>]-</code>, <code>[+</code>, <code>]+</code>, <code>[=</code>, <code>]=</code>.</li>\n<li>You can select quoted text with AnyQuotes and bracketed text with AnyBrackets text objects. Zed also provides MiniQuotes and MiniBrackets which offer alternative selection behavior based on the <a href=\"https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-ai.md\">mini.ai</a> Neovim plugin. See the <a href=\"#quote-and-bracket-text-objects\">Quote and Bracket text objects</a> section below for details.</li>\n<li>You can configure AnyQuotes, AnyBrackets, MiniQuotes, and MiniBrackets text objects for selecting quoted and bracketed text using different selection strategies. See the <a href=\"#any-bracket-functionality\">Any Bracket Functionality</a> section below for details.</li>\n</ul>\n<h3 id=\"any-bracket-functionality\"><a class=\"header\" href=\"#any-bracket-functionality\">Any Bracket Functionality</a></h3>\n<p>Zed offers two different strategies for selecting text surrounded by any quote, or any bracket. These text objects are <strong>not enabled by default</strong> and must be configured in your keymap to be used.</p>\n<h4 id=\"included-characters\"><a class=\"header\" href=\"#included-characters\">Included Characters</a></h4>\n<p>Each text object type works with specific characters:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Text Object</th><th>Characters</th></tr></thead><tbody>\n<tr><td>AnyQuotes/MiniQuotes</td><td>Single quote (<code>'</code>), Double quote (<code>\"</code>), Backtick (<code>`</code>)</td></tr>\n<tr><td>AnyBrackets/MiniBrackets</td><td>Parentheses (<code>()</code>), Square brackets (<code>[]</code>), Curly braces (<code>{}</code>), Angle brackets (<code>&lt;&gt;</code>)</td></tr>\n</tbody></table>\n</div>\n<p>Both \"Any\" and \"Mini\" variants work with the same character sets, but differ in their selection strategy.</p>\n<h4 id=\"anyquotes-and-anybrackets-traditional-vim-behavior\"><a class=\"header\" href=\"#anyquotes-and-anybrackets-traditional-vim-behavior\">AnyQuotes and AnyBrackets (Traditional Vim behavior)</a></h4>\n<p>These text objects implement traditional Vim behavior:</p>\n<ul>\n<li><strong>Selection priority</strong>: Finds the innermost (closest) quotes or brackets first</li>\n<li><strong>Fallback mechanism</strong>: If none are found, falls back to the current line</li>\n<li><strong>Character-based matching</strong>: Focuses solely on open and close characters without considering syntax</li>\n<li><strong>Vanilla Vim similarity</strong>: AnyBrackets matches the behavior of commands like <code>ci&lt;</code>, <code>ci(</code>, etc., in vanilla Vim, including potential edge cases (like considering <code>&gt;</code> in <code>=&gt;</code> as a closing delimiter)</li>\n</ul>\n<h4 id=\"miniquotes-and-minibrackets-miniai-behavior\"><a class=\"header\" href=\"#miniquotes-and-minibrackets-miniai-behavior\">MiniQuotes and MiniBrackets (mini.ai behavior)</a></h4>\n<p>These text objects implement the behavior of the <a href=\"https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-ai.md\">mini.ai</a> Neovim plugin:</p>\n<ul>\n<li><strong>Selection priority</strong>: Searches the current line first before expanding outward</li>\n<li><strong>Tree-sitter integration</strong>: Uses Tree-sitter queries for more context-aware selections</li>\n<li><strong>Syntax-aware matching</strong>: Can distinguish between actual brackets and similar characters in other contexts (like <code>&gt;</code> in <code>=&gt;</code>)</li>\n</ul>\n<h4 id=\"choosing-between-approaches\"><a class=\"header\" href=\"#choosing-between-approaches\">Choosing Between Approaches</a></h4>\n<ul>\n<li>\n<p>Use <strong>AnyQuotes/AnyBrackets</strong> if you:</p>\n<ul>\n<li>Prefer traditional Vim behavior</li>\n<li>Want consistent character-based selection prioritizing innermost delimiters</li>\n<li>Need behavior that closely matches vanilla Vim's text objects</li>\n</ul>\n</li>\n<li>\n<p>Use <strong>MiniQuotes/MiniBrackets</strong> if you:</p>\n<ul>\n<li>Prefer the mini.ai plugin behavior</li>\n<li>Want more context-aware selections using Tree-sitter</li>\n<li>Prefer current-line priority when searching</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example-configuration\"><a class=\"header\" href=\"#example-configuration\">Example Configuration</a></h4>\n<p>To use these text objects, you need to add bindings to your keymap. Here's an example configuration that makes them available when using text object operators (<code>i</code> and <code>a</code>) or change-surrounds (<code>cs</code>):</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"vim_operator == a || vim_operator == i || vim_operator == cs\",\n  \"bindings\": {\n    // Traditional Vim behavior\n    \"q\": \"vim::AnyQuotes\",\n    \"b\": \"vim::AnyBrackets\",\n\n    // mini.ai plugin behavior\n    \"Q\": \"vim::MiniQuotes\",\n    \"B\": \"vim::MiniBrackets\"\n  }\n}\n</code></pre>\n<p>With this configuration, you can use commands like:</p>\n<ul>\n<li><code>cib</code> - Change inside brackets using AnyBrackets behavior</li>\n<li><code>cim</code> - Change inside brackets using MiniBrackets behavior</li>\n<li><code>ciq</code> - Change inside quotes using AnyQuotes behavior</li>\n<li><code>ciM</code> - Change inside quotes using MiniQuotes behavior</li>\n</ul>\n<h2 id=\"command-palette\"><a class=\"header\" href=\"#command-palette\">Command palette</a></h2>\n<p>Vim mode allows you to open Zed's command palette with <code>:</code>. You can then type to access any usual Zed command. Additionally, vim mode adds aliases for popular Vim commands to ensure your muscle memory transfers to Zed. For example, you can write <code>:w</code> or <code>:write</code> to save the file.</p>\n<p>Below, you'll find tables listing the commands you can use in the command palette. We put optional characters in square brackets to indicate that you can omit them.</p>\n<blockquote>\n<p><strong>Note</strong>: We don't emulate the full power of Vim's command line yet. In particular, commands currently do not support arguments. Please <a href=\"https://github.com/zed-industries/zed\">file issues on GitHub</a> as you find things that are missing from the command palette.</p>\n</blockquote>\n<h3 id=\"file-and-window-management\"><a class=\"header\" href=\"#file-and-window-management\">File and window management</a></h3>\n<p>This table shows commands for managing windows, tabs, and panes. As commands don't support arguments currently, you cannot specify a filename when saving or creating a new file.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:w[rite][!]</code></td><td>Save the current file</td></tr>\n<tr><td><code>:wq[!]</code></td><td>Save the file and close the buffer</td></tr>\n<tr><td><code>:q[uit][!]</code></td><td>Close the buffer</td></tr>\n<tr><td><code>:wa[ll][!]</code></td><td>Save all open files</td></tr>\n<tr><td><code>:wqa[ll][!]</code></td><td>Save all open files and close all buffers</td></tr>\n<tr><td><code>:qa[ll][!]</code></td><td>Close all buffers</td></tr>\n<tr><td><code>:[e]x[it][!]</code></td><td>Close the buffer</td></tr>\n<tr><td><code>:up[date]</code></td><td>Save the current file</td></tr>\n<tr><td><code>:cq</code></td><td>Quit completely (close all running instances of Zed)</td></tr>\n<tr><td><code>:vs[plit]</code></td><td>Split the pane vertically</td></tr>\n<tr><td><code>:sp[lit]</code></td><td>Split the pane horizontally</td></tr>\n<tr><td><code>:new</code></td><td>Create a new file in a horizontal split</td></tr>\n<tr><td><code>:vne[w]</code></td><td>Create a new file in a vertical split</td></tr>\n<tr><td><code>:tabedit</code></td><td>Create a new file in a new tab</td></tr>\n<tr><td><code>:tabnew</code></td><td>Create a new file in a new tab</td></tr>\n<tr><td><code>:tabn[ext]</code></td><td>Go to the next tab</td></tr>\n<tr><td><code>:tabp[rev]</code></td><td>Go to previous tab</td></tr>\n<tr><td><code>:tabc[lose]</code></td><td>Close the current tab</td></tr>\n<tr><td><code>:ls</code></td><td>Show all buffers</td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note:</strong> The <code>!</code> character is used to force the command to execute without saving changes or prompting before overwriting a file.</p>\n</blockquote>\n<h3 id=\"ex-commands\"><a class=\"header\" href=\"#ex-commands\">Ex commands</a></h3>\n<p>These ex commands open Zed's various panels and windows.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Default Shortcut</th></tr></thead><tbody>\n<tr><td>Open the project panel</td><td><code>:E[xplore]</code></td></tr>\n<tr><td>Open the collaboration panel</td><td><code>:C[ollab]</code></td></tr>\n<tr><td>Open the chat panel</td><td><code>:Ch[at]</code></td></tr>\n<tr><td>Open the AI panel</td><td><code>:A[I]</code></td></tr>\n<tr><td>Open the git panel</td><td><code>:G[it]</code></td></tr>\n<tr><td>Open the debug panel</td><td><code>:D[ebug]</code></td></tr>\n<tr><td>Open the notifications panel</td><td><code>:No[tif]</code></td></tr>\n<tr><td>Open the feedback window</td><td><code>:fe[edback]</code></td></tr>\n<tr><td>Open the diagnostics window</td><td><code>:cl[ist]</code></td></tr>\n<tr><td>Open the terminal</td><td><code>:te[rm]</code></td></tr>\n<tr><td>Open the extensions window</td><td><code>:Ext[ensions]</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"navigating-diagnostics\"><a class=\"header\" href=\"#navigating-diagnostics\">Navigating diagnostics</a></h3>\n<p>These commands navigate diagnostics.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:cn[ext]</code> or <code>:ln[ext]</code></td><td>Go to the next diagnostic</td></tr>\n<tr><td><code>:cp[rev]</code> or <code>:lp[rev]</code></td><td>Go to the previous diagnostics</td></tr>\n<tr><td><code>:cc</code> or <code>:ll</code></td><td>Open the errors page</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"git-1\"><a class=\"header\" href=\"#git-1\">Git</a></h3>\n<p>These commands interact with the version control system git.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:dif[fupdate]</code></td><td>View the diff under the cursor (<code>d o</code> in normal mode)</td></tr>\n<tr><td><code>:rev[ert]</code></td><td>Revert the diff under the cursor (<code>d p</code> in normal mode)</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"jump\"><a class=\"header\" href=\"#jump\">Jump</a></h3>\n<p>These commands jump to specific positions in the file.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:&lt;number&gt;</code></td><td>Jump to a line number</td></tr>\n<tr><td><code>:$</code></td><td>Jump to the end of the file</td></tr>\n<tr><td><code>:/foo</code> and <code>:?foo</code></td><td>Jump to next/prev line matching foo</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"replacement\"><a class=\"header\" href=\"#replacement\">Replacement</a></h3>\n<p>This command replaces text. It emulates the substitute command in vim. The substitute command uses regular expressions, and Zed uses a slightly different syntax than vim. You can learn more about Zed's syntax below, <a href=\"#regex-differences\">in the regex differences section</a>. Zed will replace only the first occurrence of the search pattern in the current line. To replace all matches append the <code>g</code> flag.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:[range]s/foo/bar/[g]</code></td><td>Replace instances of foo with bar</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"editing\"><a class=\"header\" href=\"#editing\">Editing</a></h3>\n<p>These commands help you edit text.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:j[oin]</code></td><td>Join the current line</td></tr>\n<tr><td><code>:d[elete][l][p]</code></td><td>Delete the current line</td></tr>\n<tr><td><code>:s[ort] [i]</code></td><td>Sort the current selection (with i, case-insensitively)</td></tr>\n<tr><td><code>:y[ank]</code></td><td>Yank (copy) the current selection or line</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"set\"><a class=\"header\" href=\"#set\">Set</a></h3>\n<p>These commands modify editor options locally for the current buffer.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody>\n<tr><td><code>:se[t] [no]wrap</code></td><td>Lines longer than the width of the window will wrap and displaying continues on the next line</td></tr>\n<tr><td><code>:se[t] [no]nu[mber]</code></td><td>Print the line number in front of each line</td></tr>\n<tr><td><code>:se[t] [no]r[elative]nu[mber]</code></td><td>Changes the displayed number to be relative to the cursor</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"command-mnemonics\"><a class=\"header\" href=\"#command-mnemonics\">Command mnemonics</a></h3>\n<p>As any Zed command is available, you may find that it's helpful to remember mnemonics that run the correct command. For example:</p>\n<ul>\n<li><code>:diffs</code> for \"toggle all hunk diffs\"</li>\n<li><code>:cpp</code> for \"copy path to file\"</li>\n<li><code>:crp</code> for \"copy relative path\"</li>\n<li><code>:reveal</code> for \"reveal in finder\"</li>\n<li><code>:zlog</code> for \"open zed log\"</li>\n<li><code>:clank</code> for \"cancel language server work\"</li>\n</ul>\n<h2 id=\"customizing-key-bindings\"><a class=\"header\" href=\"#customizing-key-bindings\">Customizing key bindings</a></h2>\n<p>In this section, we'll learn how to customize the key bindings of Zed's vim mode. You'll learn:</p>\n<ul>\n<li>How to select the correct context for your new key bindings.</li>\n<li>Useful contexts for vim mode key bindings.</li>\n<li>Common key bindings to customize for extra productivity.</li>\n</ul>\n<h3 id=\"selecting-the-correct-context\"><a class=\"header\" href=\"#selecting-the-correct-context\">Selecting the correct context</a></h3>\n<p>Zed's key bindings are evaluated only when the <code>\"context\"</code> property matches your location in the editor. For example, if you add key bindings to the <code>\"Editor\"</code> context, they will only work when you're editing a file. If you add key bindings to the <code>\"Workspace\"</code> context, they will work everywhere in Zed. Here's an example of a key binding that saves when you're editing a file:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n</code></pre>\n<p>Contexts are nested, so when you're editing a file, the context is the <code>\"Editor\"</code> context, which is inside the <code>\"Pane\"</code> context, which is inside the <code>\"Workspace\"</code> context. That's why any key bindings you add to the <code>\"Workspace\"</code> context will work when you're editing a file. Here's an example:</p>\n<pre><code class=\"language-json\">// This key binding will work when you're editing a file. It comes built into Zed by default as the workspace: save command.\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n</code></pre>\n<p>Contexts are expressions. They support boolean operators like <code>&amp;&amp;</code> (and) and <code>||</code> (or). For example, you can use the context <code>\"Editor &amp;&amp; vim_mode == normal\"</code> to create key bindings that only work when you're editing a file <em>and</em> you're in vim's normal mode.</p>\n<p>Vim mode adds several contexts to the <code>\"Editor\"</code> context:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody>\n<tr><td>VimControl</td><td>Indicates that vim keybindings should work. Currently an alias for <code>vim_mode == normal || vim_mode == visual || vim_mode == operator</code>, but the definition may change over time</td></tr>\n<tr><td>vim_mode == normal</td><td>Normal mode</td></tr>\n<tr><td>vim_mode == visual</td><td>Visual mode</td></tr>\n<tr><td>vim_mode == insert</td><td>Insert mode</td></tr>\n<tr><td>vim_mode == replace</td><td>Replace mode</td></tr>\n<tr><td>vim_mode == waiting</td><td>Waiting for an arbitrary key (e.g., after typing <code>f</code> or <code>t</code>)</td></tr>\n<tr><td>vim_mode == operator</td><td>Waiting for another binding to trigger (e.g., after typing <code>c</code> or <code>d</code>)</td></tr>\n<tr><td>vim_operator</td><td>Set to <code>none</code> unless <code>vim_mode == operator</code>, in which case it is set to the current operator's default keybinding (e.g., after typing <code>d</code>, <code>vim_operator == d</code>)</td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p><strong>Note</strong>: Contexts are matched only on one level at a time. So it is possible to use the expression <code>\"Editor &amp;&amp; vim_mode == normal\"</code>, but <code>\"Workspace &amp;&amp; vim_mode == normal\"</code> will never match because we set the vim context at the <code>\"Editor\"</code> level.</p>\n</blockquote>\n<h3 id=\"useful-contexts-for-vim-mode-key-bindings\"><a class=\"header\" href=\"#useful-contexts-for-vim-mode-key-bindings\">Useful contexts for vim mode key bindings</a></h3>\n<p>Here's a template with useful vim mode contexts to help you customize your vim mode key bindings. You can copy it and integrate it into your user keymap.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"context\": \"VimControl &amp;&amp; !menu\",\n    \"bindings\": {\n      // Put key bindings here if you want them to work in normal &amp; visual mode.\n    }\n  },\n  {\n    \"context\": \"vim_mode == normal &amp;&amp; !menu\",\n    \"bindings\": {\n      // \"shift-y\": [\"workspace::SendKeystrokes\", \"y $\"] // Use neovim's yank behavior: yank to end of line.\n    }\n  },\n  {\n    \"context\": \"vim_mode == insert\",\n    \"bindings\": {\n      // \"j k\": \"vim::NormalBefore\" // In insert mode, make jk escape to normal mode.\n    }\n  },\n  {\n    \"context\": \"EmptyPane || SharedScreen\",\n    \"bindings\": {\n      // Put key bindings here (in addition to the context above) if you want them to\n      // work when no editor exists.\n      // \"space f\": \"file_finder::Toggle\"\n    }\n  }\n]\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: If you would like to emulate Vim's <code>map</code> commands (<code>nmap</code>, etc.), you can use the action <code>workspace::SendKeystrokes</code> in the correct context.</p>\n</blockquote>\n<h3 id=\"optional-key-bindings\"><a class=\"header\" href=\"#optional-key-bindings\">Optional key bindings</a></h3>\n<p>By default, you can navigate between the different files open in the editor with shortcuts like <code>ctrl+w</code> followed by one of <code>hjkl</code> to move to the left, down, up, or right, respectively.</p>\n<p>But you cannot use the same shortcuts to move between all the editor docks (the terminal, project panel, assistant panel, ...). If you want to use the same shortcuts to navigate to the docks, you can add the following key bindings to your user keymap.</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Dock\",\n  \"bindings\": {\n    \"ctrl-w h\": \"workspace::ActivatePaneLeft\",\n    \"ctrl-w l\": \"workspace::ActivatePaneRight\",\n    \"ctrl-w k\": \"workspace::ActivatePaneUp\",\n    \"ctrl-w j\": \"workspace::ActivatePaneDown\"\n    // ... or other keybindings\n  }\n}\n</code></pre>\n<p>Subword motion, which allows you to navigate and select individual words in camelCase or snake_case, is not enabled by default. To enable it, add these bindings to your keymap.</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"VimControl &amp;&amp; !menu &amp;&amp; vim_mode != operator\",\n  \"bindings\": {\n    \"w\": \"vim::NextSubwordStart\",\n    \"b\": \"vim::PreviousSubwordStart\",\n    \"e\": \"vim::NextSubwordEnd\",\n    \"g e\": \"vim::PreviousSubwordEnd\"\n  }\n}\n</code></pre>\n<p>Vim mode comes with shortcuts to surround the selection in normal mode (<code>ys</code>), but it doesn't have a shortcut to add surrounds in visual mode. By default, <code>shift-s</code> substitutes the selection (erases the text and enters insert mode). To use <code>shift-s</code> to add surrounds in visual mode, you can add the following object to your keymap.</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-s\": [\"vim::PushAddSurrounds\", {}]\n  }\n}\n</code></pre>\n<p>In non-modal text editors, cursor navigation typically wraps when moving past line ends. Zed, however, handles this behavior exactly like Vim by default: the cursor stops at line boundaries. If you prefer your cursor to wrap between lines, override these keybindings:</p>\n<pre><code class=\"language-json\">// In VimScript, this would look like this:\n// set whichwrap+=&lt;,&gt;,[,],h,l\n{\n  \"context\": \"VimControl &amp;&amp; !menu\",\n  \"bindings\": {\n    \"left\": \"vim::WrappingLeft\",\n    \"right\": \"vim::WrappingRight\",\n    \"h\": \"vim::WrappingLeft\",\n    \"l\": \"vim::WrappingRight\"\n  }\n}\n</code></pre>\n<p>The <a href=\"https://github.com/justinmk/vim-sneak\">Sneak motion</a> feature allows for quick navigation to any two-character sequence in your text. You can enable it by adding the following keybindings to your keymap. By default, the <code>s</code> key is mapped to <code>vim::Substitute</code>. Adding these bindings will override that behavior, so ensure this change aligns with your workflow preferences.</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"vim_mode == normal || vim_mode == visual\",\n  \"bindings\": {\n    \"s\": \"vim::PushSneak\",\n    \"shift-s\": \"vim::PushSneakBackward\"\n  }\n}\n</code></pre>\n<p>The <a href=\"https://github.com/tommcdo/vim-exchange\">vim-exchange</a> feature does not have a default binding for visual mode, as the <code>shift-x</code> binding conflicts with the default <code>shift-x</code> binding for visual mode (<code>vim::VisualDeleteLine</code>). To assign the default vim-exchange binding, add the following keybinding to your keymap:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-x\": \"vim::Exchange\"\n  }\n}\n</code></pre>\n<h3 id=\"restoring-common-text-editing-keybindings\"><a class=\"header\" href=\"#restoring-common-text-editing-keybindings\">Restoring common text editing keybindings</a></h3>\n<p>If you're using vim mode on Linux or Windows, you may find it overrides keybindings you can't live without: <code>ctrl+v</code> to paste, <code>ctrl+f</code> to search, etc. You can restore them by copying this data into your keymap:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor &amp;&amp; !menu\",\n  \"bindings\": {\n    \"ctrl-c\": \"editor::Copy\",          // vim default: return to normal mode\n    \"ctrl-x\": \"editor::Cut\",           // vim default: decrement\n    \"ctrl-v\": \"editor::Paste\",         // vim default: visual block mode\n    \"ctrl-y\": \"editor::Undo\",          // vim default: line up\n    \"ctrl-f\": \"buffer_search::Deploy\", // vim default: page down\n    \"ctrl-o\": \"workspace::Open\",       // vim default: go back\n    \"ctrl-s\": \"workspace::Save\",       // vim default: show signature\n    \"ctrl-a\": \"editor::SelectAll\",     // vim default: increment\n  }\n},\n</code></pre>\n<h2 id=\"changing-vim-mode-settings\"><a class=\"header\" href=\"#changing-vim-mode-settings\">Changing vim mode settings</a></h2>\n<p>You can change the following settings to modify vim mode's behavior:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Property</th><th>Description</th><th>Default Value</th></tr></thead><tbody>\n<tr><td>default_mode</td><td>The default mode to start in. One of \"normal\", \"insert\", \"replace\", \"visual\", \"visual_line\", \"visual_block\", \"helix_normal\".</td><td>\"normal\"</td></tr>\n<tr><td>use_system_clipboard</td><td>Determines how system clipboard is used:<br/><ul><li>\"always\": use for all operations</li><li>\"never\": only use when explicitly specified</li><li>\"on_yank\": use for yank operations</li></ul></td><td>\"always\"</td></tr>\n<tr><td>use_multiline_find</td><td>deprecated</td><td></td></tr>\n<tr><td>use_smartcase_find</td><td>If <code>true</code>, <code>f</code> and <code>t</code> motions are case-insensitive when the target letter is lowercase.</td><td>false</td></tr>\n<tr><td>toggle_relative_line_numbers</td><td>If <code>true</code>, line numbers are relative in normal mode and absolute in insert mode, giving you the best of both options.</td><td>false</td></tr>\n<tr><td>custom_digraphs</td><td>An object that allows you to add custom digraphs. Read below for an example.</td><td>{}</td></tr>\n<tr><td>highlight_on_yank_duration</td><td>The duration of the highlight animation(in ms). Set to <code>0</code> to disable</td><td>200</td></tr>\n</tbody></table>\n</div>\n<p>Here's an example of adding a digraph for the zombie emoji. This allows you to type <code>ctrl-k f z</code> to insert a zombie emoji. You can add as many digraphs as you like.</p>\n<pre><code class=\"language-json\">{\n  \"vim\": {\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n</code></pre>\n<p>Here's an example of these settings changed:</p>\n<pre><code class=\"language-json\">{\n  \"vim\": {\n    \"default_mode\": \"insert\",\n    \"use_system_clipboard\": \"never\",\n    \"use_smartcase_find\": true,\n    \"toggle_relative_line_numbers\": true,\n    \"highlight_on_yank_duration\": 50,\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n</code></pre>\n<h2 id=\"useful-core-zed-settings-for-vim-mode\"><a class=\"header\" href=\"#useful-core-zed-settings-for-vim-mode\">Useful core Zed settings for vim mode</a></h2>\n<p>Here are a few general Zed settings that can help you fine-tune your Vim experience:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Property</th><th>Description</th><th>Default Value</th></tr></thead><tbody>\n<tr><td>cursor_blink</td><td>If <code>true</code>, the cursor blinks.</td><td><code>true</code></td></tr>\n<tr><td>relative_line_numbers</td><td>If <code>true</code>, line numbers in the left gutter are relative to the cursor.</td><td><code>false</code></td></tr>\n<tr><td>scrollbar</td><td>Object that controls the scrollbar display. Set to <code>{ \"show\": \"never\" }</code> to hide the scroll bar.</td><td><code>{ \"show\": \"auto\" }</code></td></tr>\n<tr><td>scroll_beyond_last_line</td><td>If set to <code>\"one_page\"</code>, allows scrolling up to one page beyond the last line. Set to <code>\"off\"</code> to prevent this behavior.</td><td><code>\"one_page\"</code></td></tr>\n<tr><td>vertical_scroll_margin</td><td>The number of lines to keep above or below the cursor when scrolling. Set to <code>0</code> to allow the cursor to go up to the edges of the screen vertically.</td><td><code>3</code></td></tr>\n<tr><td>gutter.line_numbers</td><td>Controls the display of line numbers in the gutter. Set the <code>\"line_numbers\"</code> property to <code>false</code> to hide line numbers.</td><td><code>true</code></td></tr>\n<tr><td>command_aliases</td><td>Object that defines aliases for commands in the command palette. You can use it to define shortcut names for commands you use often. Read below for examples.</td><td><code>{}</code></td></tr>\n</tbody></table>\n</div>\n<p>Here's an example of these settings changed:</p>\n<pre><code class=\"language-json\">{\n  // Disable cursor blink\n  \"cursor_blink\": false,\n  // Use relative line numbers\n  \"relative_line_numbers\": true,\n  // Hide the scroll bar\n  \"scrollbar\": { \"show\": \"never\" },\n  // Prevent the buffer from scrolling beyond the last line\n  \"scroll_beyond_last_line\": \"off\",\n  // Allow the cursor to reach the edges of the screen\n  \"vertical_scroll_margin\": 0,\n  \"gutter\": {\n    // Disable line numbers completely:\n    \"line_numbers\": false\n  },\n  \"command_aliases\": {\n    \"W\": \"w\",\n    \"Wq\": \"wq\",\n    \"Q\": \"q\"\n  }\n}\n</code></pre>\n<p>The <code>command_aliases</code> property is a single object that maps keys or key sequences to vim mode commands. The example above defines multiple aliases: <code>W</code> for <code>w</code>, <code>Wq</code> for <code>wq</code>, and <code>Q</code> for <code>q</code>.</p>\n<h2 id=\"regex-differences\"><a class=\"header\" href=\"#regex-differences\">Regex differences</a></h2>\n<p>Zed uses a different regular expression engine from Vim. This means that you will have to use a different syntax in some cases. Here are the most common differences:</p>\n<ul>\n<li><strong>Capture groups</strong>: Vim uses <code>\\(</code> and <code>\\)</code> to represent capture groups, in Zed these are <code>(</code> and <code>)</code>. On the flip side, in Vim, <code>(</code> and <code>)</code> represent literal parentheses, but in Zed these must be escaped to <code>\\(</code> and <code>\\)</code>.</li>\n<li><strong>Matches</strong>: When replacing, Vim uses the backslash character followed by a number to represent a matched capture group. For example, <code>\\1</code>. Zed uses the dollar sign instead. So, when in Vim you use <code>\\0</code> to represent the entire match, in Zed the syntax is <code>$0</code> instead. Same for numbered capture groups: <code>\\1</code> in Vim is <code>$1</code> in Zed.</li>\n<li><strong>Global option</strong>: By default, in Vim, regex searches only match the first occurrence on a line, and you append <code>/g</code> at the end of your query to find all matches. In Zed, regex searches are global by default.</li>\n<li><strong>Case sensitivity</strong>: Vim uses <code>/i</code> to indicate a case-insensitive search. In Zed you can either write <code>(?i)</code> at the start of the pattern or toggle case-sensitivity with the shortcut <kbd class=\"keybinding\">alt-cmd-c|alt-c</kbd>.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: To help with the transition, the command palette will fix parentheses and replace groups for you when you write a Vim-style substitute command, <code>:%s//</code>. So, Zed will convert <code>%s:/\\(a\\)(b)/\\1/</code> into a search for \"(a)(b)\" and a replacement of \"$1\".</p>\n</blockquote>\n<p>For the full syntax supported by Zed's regex engine <a href=\"https://docs.rs/regex/latest/regex/#syntax\">see the regex crate documentation</a>.</p>\n\n</main>",
    "content_text": "Vim Mode\nZed includes a Vim emulation layer known as \"vim mode\". On this page, you will learn how to turn Zed's vim mode on or off, what tools and commands Zed provides to help you navigate and edit your code, and generally how to make the most of vim mode in Zed.\nYou'll learn how to:\n\nUnderstand the core differences between Zed's vim mode and traditional Vim\nEnable or disable vim mode\nMake the most of Zed-specific features within vim mode\nCustomize vim mode key bindings\nConfigure vim mode settings\n\nWhether you're new to vim mode or an experienced Vim user looking to optimize your Zed experience, this guide will help you harness the full power of modal editing in Zed.\nZed's vim mode design\nVim mode tries to offer a familiar experience to Vim users: it replicates the behavior of motions and commands precisely when it makes sense and uses Zed-specific functionality to provide an editing experience that \"just works\" without requiring configuration on your part.\nThis includes support for semantic navigation, multiple cursors, or other features usually provided by plugins like surrounding text.\nSo, Zed's vim mode does not replicate Vim one-to-one, but it meshes Vim's modal design with Zed's modern features to provide a more fluid experience. It's also configurable, so you can add your own key bindings or override the defaults.\nCore differences\nThere are four types of features in vim mode that use Zed's core functionality, leading to some differences in behavior:\n\nMotions: vim mode uses Zed's semantic parsing to tune the behavior of motions per language. For example, in Rust, jumping to matching bracket with % works with the pipe character |. In JavaScript, w considers $ to be a word character.\nVisual block selections: vim mode uses Zed's multiple cursor to emulate visual block selections, making block selections a lot more flexible. For example, anything you insert after a block selection updates on every line in real-time, and you can add or remove cursors anytime.\nMacros: vim mode uses Zed's recording system for vim macros. So, you can capture and replay more complex actions, like autocompletion.\nSearch and replace: vim mode uses Zed's search system, so, the syntax for regular expressions is slightly different compared to Vim. Head to the Regex differences section for details.\n\n\nNote: The foundations of Zed's vim mode should already cover many use cases, and we're always looking to improve it. If you find missing features that you rely on in your workflow, please file an issue on GitHub.\n\nEnabling and disabling vim mode\nWhen you first open Zed, you'll see a checkbox on the welcome screen that allows you to enable vim mode.\nIf you missed this, you can toggle vim mode on or off anytime by opening the command palette and using the workspace command toggle vim mode.\n\nNote: This command toggles the following property in your user settings:\n{\n  \"vim_mode\": true\n}\n\n\nZed-specific features\nZed is built on a modern foundation that (among other things) uses tree-sitter and language servers to understand the content of the file you're editing and supports multiple cursors out of the box.\nVim mode has several \"core Zed\" key bindings that will help you make the most of Zed's specific feature set.\nLanguage server\nThe following commands use the language server to help you navigate and refactor your code.\nCommandDefault Shortcut\nGo to definitiong d\nGo to declarationg D\nGo to type definitiong y\nGo to implementationg I\nRename (change definition)c d\nGo to All references to the current wordg A\nFind symbol in current fileg s\nFind symbol in entire projectg S\nGo to next diagnosticg ] or ] d\nGo to previous diagnosticg [ or [ d\nShow inline error (hover)g h\nOpen the code actions menug .\n\n\nGit\nCommandDefault Shortcut\nGo to next git change] c\nGo to previous git change[ c\nExpand diff hunkd o\nToggle stagedd O\nStage and next (in diff view)d u\nUnstage and next (in diff view)d U\nRestore changed p\n\n\nTreesitter\nTreesitter is a powerful tool that Zed uses to understand the structure of your code. Zed provides motions that change the current cursor position, and text objects that can be used as the target of actions.\nCommandDefault Shortcut\nGo to next/previous method] m / [ m\nGo to next/previous method end] M / [ M\nGo to next/previous section] ] / [ [\nGo to next/previous section end] [ / [ ]\nGo to next/previous comment] /, ] * / [ /, [ *\nSelect a larger syntax node[ x\nSelect a smaller syntax node] x\n\nText ObjectsDefault Shortcut\nAround a class, definition, etc.a c\nInside a class, definition, etc.i c\nAround a function, method etc.a f\nInside a function, method, etc.i f\nA commentg c\nAn argument, or list item, etc.i a\nAn argument, or list item, etc. (including trailing comma)a a\nAround an HTML-like taga t\nInside an HTML-like tagi t\nThe current indent level, and one line before and aftera I\nThe current indent level, and one line beforea i\nThe current indent leveli i\n\n\nNote that the definitions for the targets of the [m family of motions are the same as the\nboundaries defined by af. The targets of the [[ are the same as those defined by ac, though\nif there are no classes, then functions are also used. Similarly gc is used to find [ /. g c\nThe definition of functions, classes and comments is language dependent, and support can be added\nto extensions by adding a [textobjects.scm]. The definition of arguments and tags operates at\nthe tree-sitter level, but looks for certain patterns in the parse tree and is not currently configurable\nper language.\nMulti cursor\nThese commands help you manage multiple cursors in Zed.\nCommandDefault Shortcut\nAdd a cursor selecting the next copy of the current wordg l\nAdd a cursor selecting the previous copy of the current wordg L\nSkip latest word selection, and add nextg >\nSkip latest word selection, and add previousg <\nAdd a visual selection for every copy of the current wordg a\n\n\nPane management\nThese commands open new panes or jump to specific panes.\nCommandDefault Shortcut\nOpen a project-wide searchg /\nOpen the current search excerptg <space>\nOpen the current search excerpt in a split<ctrl-w> <space>\nGo to definition in a split<ctrl-w> g d\nGo to type definition in a split<ctrl-w> g D\n\n\nIn insert mode\nThe following commands help you bring up Zed's completion menu, request a suggestion from GitHub Copilot, or open the inline AI assistant without leaving insert mode.\nCommandDefault Shortcut\nOpen the completion menuctrl-x ctrl-o\nRequest GitHub Copilot suggestion (requires GitHub Copilot to be configured)ctrl-x ctrl-c\nOpen the inline AI assistant (requires a configured assistant)ctrl-x ctrl-a\nOpen the code actions menuctrl-x ctrl-l\nHides all suggestionsctrl-x ctrl-z\n\n\nSupported plugins\nZed's vim mode includes some features that are usually provided by very popular plugins in the Vim ecosystem:\n\nYou can surround text objects with ys (yank surround), change surrounding with cs, and delete surrounding with ds.\nYou can comment and uncomment selections with gc in visual mode and gcc in normal mode.\nThe project panel supports many shortcuts modeled after the Vim plugin netrw: navigation with hjkl, open file with o, open file in a new tab with t, etc.\nYou can add key bindings to your keymap to navigate \"camelCase\" names. Head down to the Optional key bindings section to learn how.\nYou can use gR to do ReplaceWithRegister.\nYou can use cx for vim-exchange functionality. Note that it does not have a default binding in visual mode, but you can add one to your keymap (refer to the optional key bindings section).\nYou can navigate to indent depths relative to your cursor with the indent wise plugin [-, ]-, [+, ]+, [=, ]=.\nYou can select quoted text with AnyQuotes and bracketed text with AnyBrackets text objects. Zed also provides MiniQuotes and MiniBrackets which offer alternative selection behavior based on the mini.ai Neovim plugin. See the Quote and Bracket text objects section below for details.\nYou can configure AnyQuotes, AnyBrackets, MiniQuotes, and MiniBrackets text objects for selecting quoted and bracketed text using different selection strategies. See the Any Bracket Functionality section below for details.\n\nAny Bracket Functionality\nZed offers two different strategies for selecting text surrounded by any quote, or any bracket. These text objects are not enabled by default and must be configured in your keymap to be used.\nIncluded Characters\nEach text object type works with specific characters:\nText ObjectCharacters\nAnyQuotes/MiniQuotesSingle quote ('), Double quote (\"), Backtick (`)\nAnyBrackets/MiniBracketsParentheses (()), Square brackets ([]), Curly braces ({}), Angle brackets (<>)\n\n\nBoth \"Any\" and \"Mini\" variants work with the same character sets, but differ in their selection strategy.\nAnyQuotes and AnyBrackets (Traditional Vim behavior)\nThese text objects implement traditional Vim behavior:\n\nSelection priority: Finds the innermost (closest) quotes or brackets first\nFallback mechanism: If none are found, falls back to the current line\nCharacter-based matching: Focuses solely on open and close characters without considering syntax\nVanilla Vim similarity: AnyBrackets matches the behavior of commands like ci<, ci(, etc., in vanilla Vim, including potential edge cases (like considering > in => as a closing delimiter)\n\nMiniQuotes and MiniBrackets (mini.ai behavior)\nThese text objects implement the behavior of the mini.ai Neovim plugin:\n\nSelection priority: Searches the current line first before expanding outward\nTree-sitter integration: Uses Tree-sitter queries for more context-aware selections\nSyntax-aware matching: Can distinguish between actual brackets and similar characters in other contexts (like > in =>)\n\nChoosing Between Approaches\n\n\nUse AnyQuotes/AnyBrackets if you:\n\nPrefer traditional Vim behavior\nWant consistent character-based selection prioritizing innermost delimiters\nNeed behavior that closely matches vanilla Vim's text objects\n\n\n\nUse MiniQuotes/MiniBrackets if you:\n\nPrefer the mini.ai plugin behavior\nWant more context-aware selections using Tree-sitter\nPrefer current-line priority when searching\n\n\n\nExample Configuration\nTo use these text objects, you need to add bindings to your keymap. Here's an example configuration that makes them available when using text object operators (i and a) or change-surrounds (cs):\n{\n  \"context\": \"vim_operator == a || vim_operator == i || vim_operator == cs\",\n  \"bindings\": {\n    // Traditional Vim behavior\n    \"q\": \"vim::AnyQuotes\",\n    \"b\": \"vim::AnyBrackets\",\n\n    // mini.ai plugin behavior\n    \"Q\": \"vim::MiniQuotes\",\n    \"B\": \"vim::MiniBrackets\"\n  }\n}\n\nWith this configuration, you can use commands like:\n\ncib - Change inside brackets using AnyBrackets behavior\ncim - Change inside brackets using MiniBrackets behavior\nciq - Change inside quotes using AnyQuotes behavior\nciM - Change inside quotes using MiniQuotes behavior\n\nCommand palette\nVim mode allows you to open Zed's command palette with :. You can then type to access any usual Zed command. Additionally, vim mode adds aliases for popular Vim commands to ensure your muscle memory transfers to Zed. For example, you can write :w or :write to save the file.\nBelow, you'll find tables listing the commands you can use in the command palette. We put optional characters in square brackets to indicate that you can omit them.\n\nNote: We don't emulate the full power of Vim's command line yet. In particular, commands currently do not support arguments. Please file issues on GitHub as you find things that are missing from the command palette.\n\nFile and window management\nThis table shows commands for managing windows, tabs, and panes. As commands don't support arguments currently, you cannot specify a filename when saving or creating a new file.\nCommandDescription\n:w[rite][!]Save the current file\n:wq[!]Save the file and close the buffer\n:q[uit][!]Close the buffer\n:wa[ll][!]Save all open files\n:wqa[ll][!]Save all open files and close all buffers\n:qa[ll][!]Close all buffers\n:[e]x[it][!]Close the buffer\n:up[date]Save the current file\n:cqQuit completely (close all running instances of Zed)\n:vs[plit]Split the pane vertically\n:sp[lit]Split the pane horizontally\n:newCreate a new file in a horizontal split\n:vne[w]Create a new file in a vertical split\n:tabeditCreate a new file in a new tab\n:tabnewCreate a new file in a new tab\n:tabn[ext]Go to the next tab\n:tabp[rev]Go to previous tab\n:tabc[lose]Close the current tab\n:lsShow all buffers\n\n\n\nNote: The ! character is used to force the command to execute without saving changes or prompting before overwriting a file.\n\nEx commands\nThese ex commands open Zed's various panels and windows.\nCommandDefault Shortcut\nOpen the project panel:E[xplore]\nOpen the collaboration panel:C[ollab]\nOpen the chat panel:Ch[at]\nOpen the AI panel:A[I]\nOpen the git panel:G[it]\nOpen the debug panel:D[ebug]\nOpen the notifications panel:No[tif]\nOpen the feedback window:fe[edback]\nOpen the diagnostics window:cl[ist]\nOpen the terminal:te[rm]\nOpen the extensions window:Ext[ensions]\n\n\nNavigating diagnostics\nThese commands navigate diagnostics.\nCommandDescription\n:cn[ext] or :ln[ext]Go to the next diagnostic\n:cp[rev] or :lp[rev]Go to the previous diagnostics\n:cc or :llOpen the errors page\n\n\nGit\nThese commands interact with the version control system git.\nCommandDescription\n:dif[fupdate]View the diff under the cursor (d o in normal mode)\n:rev[ert]Revert the diff under the cursor (d p in normal mode)\n\n\nJump\nThese commands jump to specific positions in the file.\nCommandDescription\n:<number>Jump to a line number\n:$Jump to the end of the file\n:/foo and :?fooJump to next/prev line matching foo\n\n\nReplacement\nThis command replaces text. It emulates the substitute command in vim. The substitute command uses regular expressions, and Zed uses a slightly different syntax than vim. You can learn more about Zed's syntax below, in the regex differences section. Zed will replace only the first occurrence of the search pattern in the current line. To replace all matches append the g flag.\nCommandDescription\n:[range]s/foo/bar/[g]Replace instances of foo with bar\n\n\nEditing\nThese commands help you edit text.\nCommandDescription\n:j[oin]Join the current line\n:d[elete][l][p]Delete the current line\n:s[ort] [i]Sort the current selection (with i, case-insensitively)\n:y[ank]Yank (copy) the current selection or line\n\n\nSet\nThese commands modify editor options locally for the current buffer.\nCommandDescription\n:se[t] [no]wrapLines longer than the width of the window will wrap and displaying continues on the next line\n:se[t] [no]nu[mber]Print the line number in front of each line\n:se[t] [no]r[elative]nu[mber]Changes the displayed number to be relative to the cursor\n\n\nCommand mnemonics\nAs any Zed command is available, you may find that it's helpful to remember mnemonics that run the correct command. For example:\n\n:diffs for \"toggle all hunk diffs\"\n:cpp for \"copy path to file\"\n:crp for \"copy relative path\"\n:reveal for \"reveal in finder\"\n:zlog for \"open zed log\"\n:clank for \"cancel language server work\"\n\nCustomizing key bindings\nIn this section, we'll learn how to customize the key bindings of Zed's vim mode. You'll learn:\n\nHow to select the correct context for your new key bindings.\nUseful contexts for vim mode key bindings.\nCommon key bindings to customize for extra productivity.\n\nSelecting the correct context\nZed's key bindings are evaluated only when the \"context\" property matches your location in the editor. For example, if you add key bindings to the \"Editor\" context, they will only work when you're editing a file. If you add key bindings to the \"Workspace\" context, they will work everywhere in Zed. Here's an example of a key binding that saves when you're editing a file:\n{\n  \"context\": \"Editor\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n\nContexts are nested, so when you're editing a file, the context is the \"Editor\" context, which is inside the \"Pane\" context, which is inside the \"Workspace\" context. That's why any key bindings you add to the \"Workspace\" context will work when you're editing a file. Here's an example:\n// This key binding will work when you're editing a file. It comes built into Zed by default as the workspace: save command.\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"ctrl-s\": \"file::Save\"\n  }\n}\n\nContexts are expressions. They support boolean operators like && (and) and || (or). For example, you can use the context \"Editor && vim_mode == normal\" to create key bindings that only work when you're editing a file and you're in vim's normal mode.\nVim mode adds several contexts to the \"Editor\" context:\nOperatorDescription\nVimControlIndicates that vim keybindings should work. Currently an alias for vim_mode == normal || vim_mode == visual || vim_mode == operator, but the definition may change over time\nvim_mode == normalNormal mode\nvim_mode == visualVisual mode\nvim_mode == insertInsert mode\nvim_mode == replaceReplace mode\nvim_mode == waitingWaiting for an arbitrary key (e.g., after typing f or t)\nvim_mode == operatorWaiting for another binding to trigger (e.g., after typing c or d)\nvim_operatorSet to none unless vim_mode == operator, in which case it is set to the current operator's default keybinding (e.g., after typing d, vim_operator == d)\n\n\n\nNote: Contexts are matched only on one level at a time. So it is possible to use the expression \"Editor && vim_mode == normal\", but \"Workspace && vim_mode == normal\" will never match because we set the vim context at the \"Editor\" level.\n\nUseful contexts for vim mode key bindings\nHere's a template with useful vim mode contexts to help you customize your vim mode key bindings. You can copy it and integrate it into your user keymap.\n[\n  {\n    \"context\": \"VimControl && !menu\",\n    \"bindings\": {\n      // Put key bindings here if you want them to work in normal & visual mode.\n    }\n  },\n  {\n    \"context\": \"vim_mode == normal && !menu\",\n    \"bindings\": {\n      // \"shift-y\": [\"workspace::SendKeystrokes\", \"y $\"] // Use neovim's yank behavior: yank to end of line.\n    }\n  },\n  {\n    \"context\": \"vim_mode == insert\",\n    \"bindings\": {\n      // \"j k\": \"vim::NormalBefore\" // In insert mode, make jk escape to normal mode.\n    }\n  },\n  {\n    \"context\": \"EmptyPane || SharedScreen\",\n    \"bindings\": {\n      // Put key bindings here (in addition to the context above) if you want them to\n      // work when no editor exists.\n      // \"space f\": \"file_finder::Toggle\"\n    }\n  }\n]\n\n\nNote: If you would like to emulate Vim's map commands (nmap, etc.), you can use the action workspace::SendKeystrokes in the correct context.\n\nOptional key bindings\nBy default, you can navigate between the different files open in the editor with shortcuts like ctrl+w followed by one of hjkl to move to the left, down, up, or right, respectively.\nBut you cannot use the same shortcuts to move between all the editor docks (the terminal, project panel, assistant panel, ...). If you want to use the same shortcuts to navigate to the docks, you can add the following key bindings to your user keymap.\n{\n  \"context\": \"Dock\",\n  \"bindings\": {\n    \"ctrl-w h\": \"workspace::ActivatePaneLeft\",\n    \"ctrl-w l\": \"workspace::ActivatePaneRight\",\n    \"ctrl-w k\": \"workspace::ActivatePaneUp\",\n    \"ctrl-w j\": \"workspace::ActivatePaneDown\"\n    // ... or other keybindings\n  }\n}\n\nSubword motion, which allows you to navigate and select individual words in camelCase or snake_case, is not enabled by default. To enable it, add these bindings to your keymap.\n{\n  \"context\": \"VimControl && !menu && vim_mode != operator\",\n  \"bindings\": {\n    \"w\": \"vim::NextSubwordStart\",\n    \"b\": \"vim::PreviousSubwordStart\",\n    \"e\": \"vim::NextSubwordEnd\",\n    \"g e\": \"vim::PreviousSubwordEnd\"\n  }\n}\n\nVim mode comes with shortcuts to surround the selection in normal mode (ys), but it doesn't have a shortcut to add surrounds in visual mode. By default, shift-s substitutes the selection (erases the text and enters insert mode). To use shift-s to add surrounds in visual mode, you can add the following object to your keymap.\n{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-s\": [\"vim::PushAddSurrounds\", {}]\n  }\n}\n\nIn non-modal text editors, cursor navigation typically wraps when moving past line ends. Zed, however, handles this behavior exactly like Vim by default: the cursor stops at line boundaries. If you prefer your cursor to wrap between lines, override these keybindings:\n// In VimScript, this would look like this:\n// set whichwrap+=<,>,[,],h,l\n{\n  \"context\": \"VimControl && !menu\",\n  \"bindings\": {\n    \"left\": \"vim::WrappingLeft\",\n    \"right\": \"vim::WrappingRight\",\n    \"h\": \"vim::WrappingLeft\",\n    \"l\": \"vim::WrappingRight\"\n  }\n}\n\nThe Sneak motion feature allows for quick navigation to any two-character sequence in your text. You can enable it by adding the following keybindings to your keymap. By default, the s key is mapped to vim::Substitute. Adding these bindings will override that behavior, so ensure this change aligns with your workflow preferences.\n{\n  \"context\": \"vim_mode == normal || vim_mode == visual\",\n  \"bindings\": {\n    \"s\": \"vim::PushSneak\",\n    \"shift-s\": \"vim::PushSneakBackward\"\n  }\n}\n\nThe vim-exchange feature does not have a default binding for visual mode, as the shift-x binding conflicts with the default shift-x binding for visual mode (vim::VisualDeleteLine). To assign the default vim-exchange binding, add the following keybinding to your keymap:\n{\n  \"context\": \"vim_mode == visual\",\n  \"bindings\": {\n    \"shift-x\": \"vim::Exchange\"\n  }\n}\n\nRestoring common text editing keybindings\nIf you're using vim mode on Linux or Windows, you may find it overrides keybindings you can't live without: ctrl+v to paste, ctrl+f to search, etc. You can restore them by copying this data into your keymap:\n{\n  \"context\": \"Editor && !menu\",\n  \"bindings\": {\n    \"ctrl-c\": \"editor::Copy\",          // vim default: return to normal mode\n    \"ctrl-x\": \"editor::Cut\",           // vim default: decrement\n    \"ctrl-v\": \"editor::Paste\",         // vim default: visual block mode\n    \"ctrl-y\": \"editor::Undo\",          // vim default: line up\n    \"ctrl-f\": \"buffer_search::Deploy\", // vim default: page down\n    \"ctrl-o\": \"workspace::Open\",       // vim default: go back\n    \"ctrl-s\": \"workspace::Save\",       // vim default: show signature\n    \"ctrl-a\": \"editor::SelectAll\",     // vim default: increment\n  }\n},\n\nChanging vim mode settings\nYou can change the following settings to modify vim mode's behavior:\nPropertyDescriptionDefault Value\ndefault_modeThe default mode to start in. One of \"normal\", \"insert\", \"replace\", \"visual\", \"visual_line\", \"visual_block\", \"helix_normal\".\"normal\"\nuse_system_clipboardDetermines how system clipboard is used:\"always\": use for all operations\"never\": only use when explicitly specified\"on_yank\": use for yank operations\"always\"\nuse_multiline_finddeprecated\nuse_smartcase_findIf true, f and t motions are case-insensitive when the target letter is lowercase.false\ntoggle_relative_line_numbersIf true, line numbers are relative in normal mode and absolute in insert mode, giving you the best of both options.false\ncustom_digraphsAn object that allows you to add custom digraphs. Read below for an example.{}\nhighlight_on_yank_durationThe duration of the highlight animation(in ms). Set to 0 to disable200\n\n\nHere's an example of adding a digraph for the zombie emoji. This allows you to type ctrl-k f z to insert a zombie emoji. You can add as many digraphs as you like.\n{\n  \"vim\": {\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n\nHere's an example of these settings changed:\n{\n  \"vim\": {\n    \"default_mode\": \"insert\",\n    \"use_system_clipboard\": \"never\",\n    \"use_smartcase_find\": true,\n    \"toggle_relative_line_numbers\": true,\n    \"highlight_on_yank_duration\": 50,\n    \"custom_digraphs\": {\n      \"fz\": \"🧟‍♀️\"\n    }\n  }\n}\n\nUseful core Zed settings for vim mode\nHere are a few general Zed settings that can help you fine-tune your Vim experience:\nPropertyDescriptionDefault Value\ncursor_blinkIf true, the cursor blinks.true\nrelative_line_numbersIf true, line numbers in the left gutter are relative to the cursor.false\nscrollbarObject that controls the scrollbar display. Set to { \"show\": \"never\" } to hide the scroll bar.{ \"show\": \"auto\" }\nscroll_beyond_last_lineIf set to \"one_page\", allows scrolling up to one page beyond the last line. Set to \"off\" to prevent this behavior.\"one_page\"\nvertical_scroll_marginThe number of lines to keep above or below the cursor when scrolling. Set to 0 to allow the cursor to go up to the edges of the screen vertically.3\ngutter.line_numbersControls the display of line numbers in the gutter. Set the \"line_numbers\" property to false to hide line numbers.true\ncommand_aliasesObject that defines aliases for commands in the command palette. You can use it to define shortcut names for commands you use often. Read below for examples.{}\n\n\nHere's an example of these settings changed:\n{\n  // Disable cursor blink\n  \"cursor_blink\": false,\n  // Use relative line numbers\n  \"relative_line_numbers\": true,\n  // Hide the scroll bar\n  \"scrollbar\": { \"show\": \"never\" },\n  // Prevent the buffer from scrolling beyond the last line\n  \"scroll_beyond_last_line\": \"off\",\n  // Allow the cursor to reach the edges of the screen\n  \"vertical_scroll_margin\": 0,\n  \"gutter\": {\n    // Disable line numbers completely:\n    \"line_numbers\": false\n  },\n  \"command_aliases\": {\n    \"W\": \"w\",\n    \"Wq\": \"wq\",\n    \"Q\": \"q\"\n  }\n}\n\nThe command_aliases property is a single object that maps keys or key sequences to vim mode commands. The example above defines multiple aliases: W for w, Wq for wq, and Q for q.\nRegex differences\nZed uses a different regular expression engine from Vim. This means that you will have to use a different syntax in some cases. Here are the most common differences:\n\nCapture groups: Vim uses \\( and \\) to represent capture groups, in Zed these are ( and ). On the flip side, in Vim, ( and ) represent literal parentheses, but in Zed these must be escaped to \\( and \\).\nMatches: When replacing, Vim uses the backslash character followed by a number to represent a matched capture group. For example, \\1. Zed uses the dollar sign instead. So, when in Vim you use \\0 to represent the entire match, in Zed the syntax is $0 instead. Same for numbered capture groups: \\1 in Vim is $1 in Zed.\nGlobal option: By default, in Vim, regex searches only match the first occurrence on a line, and you append /g at the end of your query to find all matches. In Zed, regex searches are global by default.\nCase sensitivity: Vim uses /i to indicate a case-insensitive search. In Zed you can either write (?i) at the start of the pattern or toggle case-sensitivity with the shortcut alt-cmd-c|alt-c.\n\n\nNote: To help with the transition, the command palette will fix parentheses and replace groups for you when you write a Vim-style substitute command, :%s//. So, Zed will convert %s:/\\(a\\)(b)/\\1/ into a search for \"(a)(b)\" and a replacement of \"$1\".\n\nFor the full syntax supported by Zed's regex engine see the regex crate documentation.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:28"
  },
  "helix.html": {
    "url": "https://zed.dev/docs/helix.html",
    "title": "Helix Mode | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"helix-mode\"><a class=\"header\" href=\"#helix-mode\">Helix Mode</a></h1>\n<p><em>Work in progress! Not all Helix keybindings are implemented yet.</em></p>\n<p>Zed's Helix mode is an emulation layer that brings Helix-style keybindings and modal editing to Zed. It builds upon Zed's <a href=\"./vim.html\">Vim mode</a>, so much of the core functionality is shared. Enabling <code>helix_mode</code> will also enable <code>vim_mode</code>.</p>\n<p>For a guide on Vim-related features that are also available in Helix mode, please refer to our <a href=\"./vim.html\">Vim mode documentation</a>.</p>\n<p>To check the current status of Helix mode, or to request a missing Helix feature, checkout out the <a href=\"https://github.com/zed-industries/zed/discussions/33580\">\"Are we Helix yet?\" discussion</a>.</p>\n<p>For a detailed list of Helix's default keybindings, please visit the <a href=\"https://docs.helix-editor.com/keymap.html\">official Helix documentation</a>.</p>\n\n</main>",
    "content_text": "Helix Mode\nWork in progress! Not all Helix keybindings are implemented yet.\nZed's Helix mode is an emulation layer that brings Helix-style keybindings and modal editing to Zed. It builds upon Zed's Vim mode, so much of the core functionality is shared. Enabling helix_mode will also enable vim_mode.\nFor a guide on Vim-related features that are also available in Helix mode, please refer to our Vim mode documentation.\nTo check the current status of Helix mode, or to request a missing Helix feature, checkout out the \"Are we Helix yet?\" discussion.\nFor a detailed list of Helix's default keybindings, please visit the official Helix documentation.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:31"
  },
  "multibuffers.html": {
    "url": "https://zed.dev/docs/multibuffers.html",
    "title": "Multibuffers | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"multibuffers\"><a class=\"header\" href=\"#multibuffers\">Multibuffers</a></h1>\n<p>One of the superpowers Zed gives you is the ability to edit multiple files simultaneously. When combined with multiple cursors, this makes wide-ranging refactors significantly faster.</p>\n<h2 id=\"editing-in-a-multibuffer\"><a class=\"header\" href=\"#editing-in-a-multibuffer\">Editing in a multibuffer</a></h2>\n<div class=\"video\" style=\"position: relative; padding-top: 71.71314741035857%;\">\n<iframe allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\" allowfullscreen=\"true\" src=\"https://customer-snccc0j9v3kfzkif.cloudflarestream.com/bda0a6584c19f4b39e58a263c0ae4358/iframe?muted=true&amp;preload=true&amp;loop=true&amp;autoplay=true&amp;poster=https%3A%2F%2Fcustomer-snccc0j9v3kfzkif.cloudflarestream.com%2Fbda0a6584c19f4b39e58a263c0ae4358%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600&amp;controls=false\" style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"></iframe>\n</div>\n<p>Editing a multibuffer is the same as editing a normal file. Changes you make will be reflected in the open copies of that file in the rest of the editor, and you can save all files with <code>editor: Save</code> (bound to <code>cmd-s</code> on macOS, <code>ctrl-s</code> on Windows/Linux, or <code>:w</code> in Vim mode).</p>\n<p>When in a multibuffer, it is often useful to use multiple cursors to edit every file simultaneously. If you want to edit a few instances, you can select them with the mouse (<code>option-click</code> on macOS, <code>alt-click</code> on Window/Linux) or the keyboard. <code>cmd-d</code> on macOS, <code>ctrl-d</code> on Windows/Linux, or <code>gl</code> in Vim mode will select the next match of the word under the cursor.</p>\n<p>When you want to edit all matches you can select them by running the <code>editor: Select All Matches</code> command (<code>cmd-shift-l</code> on macOS, <code>ctrl-shift-l</code> on Windows/Linux, or <code>g a</code> in Vim mode).</p>\n<h2 id=\"navigating-to-the-source-file\"><a class=\"header\" href=\"#navigating-to-the-source-file\">Navigating to the Source File</a></h2>\n<p>While you can easily edit files in a multibuffer, navigating directly to the source file is often beneficial. You can accomplish this by clicking on any of the divider lines between excerpts or by placing your cursor in an excerpt and executing the <code>editor: open excerpts</code> command. It’s key to note that if multiple cursors are being used, the command will open the source file positioned under each cursor within the multibuffer.</p>\n<p>Additionally, if you prefer to use the mouse and would like to double-click on an excerpt to open it, you can enable this functionality with the setting: <code>\"double_click_in_multibuffer\": \"open\"</code>.</p>\n<h2 id=\"project-search\"><a class=\"header\" href=\"#project-search\">Project search</a></h2>\n<p>To start a search run the <code>pane: Toggle Search</code> command (<code>cmd-shift-f</code> on macOS, <code>ctrl-shift-f</code> on Windows/Linux, or <code>g/</code> in Vim mode). After the search has completed, the results will be shown in a new multibuffer. There will be one excerpt for each matching line across the whole project.</p>\n<h2 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\">Diagnostics</a></h2>\n<p>If you have a language server installed, the diagnostics pane can show you all errors across your project. You can open it by clicking on the icon in the status bar, or running the <code>diagnostics: Deploy</code> command<code> ('cmd-shift-m</code> on macOS, <code>ctrl-shift-m</code> on Windows/Linux, or <code>:clist</code> in Vim mode).</p>\n<h2 id=\"find-references\"><a class=\"header\" href=\"#find-references\">Find References</a></h2>\n<p>If you have a language server installed, you can find all references to the symbol under the cursor with the <code>editor: Find References</code> command (<code>cmd-click</code> on macOS, <code>ctrl-click</code> on Windows/Linux, or <code>g A</code> in Vim mode.</p>\n<p>Depending on your language server, commands like <code>editor: Go To Definition</code> and <code>editor: Go To Type Definition</code> will also open a multibuffer if there are multiple possible definitions.</p>\n\n</main>",
    "content_text": "Multibuffers\nOne of the superpowers Zed gives you is the ability to edit multiple files simultaneously. When combined with multiple cursors, this makes wide-ranging refactors significantly faster.\nEditing in a multibuffer\n\n\n\nEditing a multibuffer is the same as editing a normal file. Changes you make will be reflected in the open copies of that file in the rest of the editor, and you can save all files with editor: Save (bound to cmd-s on macOS, ctrl-s on Windows/Linux, or :w in Vim mode).\nWhen in a multibuffer, it is often useful to use multiple cursors to edit every file simultaneously. If you want to edit a few instances, you can select them with the mouse (option-click on macOS, alt-click on Window/Linux) or the keyboard. cmd-d on macOS, ctrl-d on Windows/Linux, or gl in Vim mode will select the next match of the word under the cursor.\nWhen you want to edit all matches you can select them by running the editor: Select All Matches command (cmd-shift-l on macOS, ctrl-shift-l on Windows/Linux, or g a in Vim mode).\nNavigating to the Source File\nWhile you can easily edit files in a multibuffer, navigating directly to the source file is often beneficial. You can accomplish this by clicking on any of the divider lines between excerpts or by placing your cursor in an excerpt and executing the editor: open excerpts command. It’s key to note that if multiple cursors are being used, the command will open the source file positioned under each cursor within the multibuffer.\nAdditionally, if you prefer to use the mouse and would like to double-click on an excerpt to open it, you can enable this functionality with the setting: \"double_click_in_multibuffer\": \"open\".\nProject search\nTo start a search run the pane: Toggle Search command (cmd-shift-f on macOS, ctrl-shift-f on Windows/Linux, or g/ in Vim mode). After the search has completed, the results will be shown in a new multibuffer. There will be one excerpt for each matching line across the whole project.\nDiagnostics\nIf you have a language server installed, the diagnostics pane can show you all errors across your project. You can open it by clicking on the icon in the status bar, or running the diagnostics: Deploy command ('cmd-shift-m on macOS, ctrl-shift-m on Windows/Linux, or :clist in Vim mode).\nFind References\nIf you have a language server installed, you can find all references to the symbol under the cursor with the editor: Find References command (cmd-click on macOS, ctrl-click on Windows/Linux, or g A in Vim mode.\nDepending on your language server, commands like editor: Go To Definition and editor: Go To Type Definition will also open a multibuffer if there are multiple possible definitions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:33"
  },
  "outline-panel.html": {
    "url": "https://zed.dev/docs/outline-panel.html",
    "title": "Outline Panel | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"outline-panel\"><a class=\"header\" href=\"#outline-panel\">Outline Panel</a></h1>\n<p>In addition to the modal outline (<code>cmd-shift-o</code>), Zed offers an outline panel. The outline panel can be deployed via <code>cmd-shift-b</code> (<code>outline panel: toggle focus</code> via the command palette), or by clicking the <code>Outline Panel</code> button in the status bar.</p>\n<p>When viewing a \"singleton\" buffer (i.e., a single file on a tab), the outline panel works similarly to that of the outline modal－it displays the outline of the current buffer's symbols, as reported by tree-sitter. Clicking on an entry allows you to jump to the associated section in the file. The outline view will also automatically scroll to the section associated with the current cursor position within the file.</p>\n<p><img alt=\"Using the outline panel in a singleton buffer\" src=\"https://zed.dev/img/outline-panel/singleton.png\"/></p>\n<h2 id=\"usage-with-multibuffers\"><a class=\"header\" href=\"#usage-with-multibuffers\">Usage with multibuffers</a></h2>\n<p>The outline panel truly excels when used with multi-buffers. Here are some examples of its versatility:</p>\n<h3 id=\"project-search-results\"><a class=\"header\" href=\"#project-search-results\">Project Search Results</a></h3>\n<p>Get an overview of search results across your project.</p>\n<p><img alt=\"Using the outline panel in a project search multi-buffer\" src=\"https://zed.dev/img/outline-panel/project-search.png\"/></p>\n<h3 id=\"project-diagnostics\"><a class=\"header\" href=\"#project-diagnostics\">Project Diagnostics</a></h3>\n<p>View a summary of all errors and warnings reported by the language server.</p>\n<p><img alt=\"Using the outline panel while viewing project diagnostics multi-buffer\" src=\"https://zed.dev/img/outline-panel/project-diagnostics.png\"/></p>\n<h3 id=\"find-all-references\"><a class=\"header\" href=\"#find-all-references\">Find All References</a></h3>\n<p>Quickly navigate through all references when using the <code>editor: find all references</code> action.</p>\n<p><img alt=\"Using the outline panel while viewing find all references multi-buffer\" src=\"https://zed.dev/img/outline-panel/find-all-references.png\"/></p>\n<p>The outline view provides a great way to quickly navigate to specific parts of your code and helps you maintain context when working with large result sets in multi-buffers.</p>\n\n</main>",
    "content_text": "Outline Panel\nIn addition to the modal outline (cmd-shift-o), Zed offers an outline panel. The outline panel can be deployed via cmd-shift-b (outline panel: toggle focus via the command palette), or by clicking the Outline Panel button in the status bar.\nWhen viewing a \"singleton\" buffer (i.e., a single file on a tab), the outline panel works similarly to that of the outline modal－it displays the outline of the current buffer's symbols, as reported by tree-sitter. Clicking on an entry allows you to jump to the associated section in the file. The outline view will also automatically scroll to the section associated with the current cursor position within the file.\n\nUsage with multibuffers\nThe outline panel truly excels when used with multi-buffers. Here are some examples of its versatility:\nProject Search Results\nGet an overview of search results across your project.\n\nProject Diagnostics\nView a summary of all errors and warnings reported by the language server.\n\nFind All References\nQuickly navigate through all references when using the editor: find all references action.\n\nThe outline view provides a great way to quickly navigate to specific parts of your code and helps you maintain context when working with large result sets in multi-buffers.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:35"
  },
  "completions.html": {
    "url": "https://zed.dev/docs/completions.html",
    "title": "Code Completions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"completions\"><a class=\"header\" href=\"#completions\">Completions</a></h1>\n<p>Zed supports two sources for completions:</p>\n<ol>\n<li>\"Code Completions\" provided by Language Servers (LSPs) automatically installed by Zed or via <a href=\"languages.html\">Zed Language Extensions</a>.</li>\n<li>\"Edit Predictions\" provided by Zed's own Zeta model or by external providers like <a href=\"#github-copilot\">GitHub Copilot</a> or <a href=\"#supermaven\">Supermaven</a>.</li>\n</ol>\n<h2 id=\"code-completions\"><a class=\"header\" href=\"#code-completions\">Language Server Code Completions</a></h2>\n<p>When there is an appropriate language server available, Zed will provide completions of variable names, functions, and other symbols in the current file. You can disable these by adding the following to your Zed <code>settings.json</code> file:</p>\n<pre><code class=\"language-json\">\"show_completions_on_input\": false\n</code></pre>\n<p>You can manually trigger completions with <code>ctrl-space</code> or by triggering the <code>editor::ShowCompletions</code> action from the command palette.</p>\n<p>For more information, see:</p>\n<ul>\n<li><a href=\"./configuring-languages.html\">Configuring Supported Languages</a></li>\n<li><a href=\"./languages.html\">List of Zed Supported Languages</a></li>\n</ul>\n<h2 id=\"edit-predictions\"><a class=\"header\" href=\"#edit-predictions\">Edit Predictions</a></h2>\n<p>Zed has built-in support for predicting multiple edits at a time <a href=\"https://huggingface.co/zed-industries/zeta\">via Zeta</a>, Zed's open-source and open-data model.\nEdit predictions appear as you type, and most of the time, you can accept them by pressing <code>tab</code>.</p>\n<p>See the <a href=\"./ai/edit-prediction.html\">edit predictions documentation</a> for more information on how to setup and configure Zed's edit predictions.</p>\n\n</main>",
    "content_text": "Completions\nZed supports two sources for completions:\n\n\"Code Completions\" provided by Language Servers (LSPs) automatically installed by Zed or via Zed Language Extensions.\n\"Edit Predictions\" provided by Zed's own Zeta model or by external providers like GitHub Copilot or Supermaven.\n\nLanguage Server Code Completions\nWhen there is an appropriate language server available, Zed will provide completions of variable names, functions, and other symbols in the current file. You can disable these by adding the following to your Zed settings.json file:\n\"show_completions_on_input\": false\n\nYou can manually trigger completions with ctrl-space or by triggering the editor::ShowCompletions action from the command palette.\nFor more information, see:\n\nConfiguring Supported Languages\nList of Zed Supported Languages\n\nEdit Predictions\nZed has built-in support for predicting multiple edits at a time via Zeta, Zed's open-source and open-data model.\nEdit predictions appear as you type, and most of the time, you can accept them by pressing tab.\nSee the edit predictions documentation for more information on how to setup and configure Zed's edit predictions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:38"
  },
  "channels.html": {
    "url": "https://zed.dev/docs/channels.html",
    "title": "Channels | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"channels\"><a class=\"header\" href=\"#channels\">Channels</a></h1>\n<p>At Zed we believe that great things are built by great people working together. We have designed Zed to help every individual work faster and to help teams of people work together more effectively.</p>\n<h2 id=\"overview\"><a class=\"header\" href=\"#overview\">Overview</a></h2>\n<p>Channels provide a way to streamline collaborating for software engineers in many ways, but particularly:</p>\n<ul>\n<li>Pairing – when working on something together, you both have your own screen, mouse, and keyboard.</li>\n<li>Mentoring – it’s easy to jump in to someone else’s context, and help them get unstuck, without the friction of pushing code up.</li>\n<li>Refactoring – you can have multiple people join in on large refactoring without fear of conflict.</li>\n<li>Ambient awareness – you can see what everyone else is working on with no need for status emails or meetings.</li>\n</ul>\n<h2 id=\"channels-1\"><a class=\"header\" href=\"#channels-1\">Channels</a></h2>\n<p>To open the collaboration panel hit <kbd class=\"keybinding\">cmd-shift-c|ctrl-shift-c</kbd> or <code>collab panel: toggle focus</code>.</p>\n<p>Each channel corresponds to an ongoing project or work-stream. You can see who’s in a channel as their avatars will show up in the sidebar. This makes it easy to see what everyone is doing and where to find them if needed.</p>\n<p>You can create as many channels as you need. As in the example above, you can mix channels for your day job, as well as side-projects in one instance of Zed.</p>\n<p>Joining a channel adds you to a shared room where you can work on projects together.</p>\n<h2 id=\"sharing-projects\"><a class=\"header\" href=\"#sharing-projects\">Sharing projects</a></h2>\n<p>After joining a channel, you can <code>Share</code> a project with the other people there. This will enable them to edit the code hosted on your machine as though they had it checked out locally.</p>\n<p>When you are editing someone else’s project, you still have the full power of the editor at your fingertips, you can jump to definitions, use the AI assistant, and see any diagnostic errors. This is extremely powerful for pairing, as one of you can be implementing the current method while the other is reading and researching the correct solution to the next problem. And, because you have your own config running, it feels like you’re using your own machine.</p>\n<p>See <a href=\"./collaboration.html\">our collaboration documentation</a> for more details about how this works.</p>\n<h2 id=\"notes\"><a class=\"header\" href=\"#notes\">Notes</a></h2>\n<p>Each channel has a notes file associated with it to keep track of current status, new ideas, or to collaborate on building out the design for the feature that you’re working on before diving into code.</p>\n<p>This is similar to a Google Doc, except powered by Zed's collaborative software and persisted to our servers.</p>\n<h2 id=\"chat\"><a class=\"header\" href=\"#chat\">Chat</a></h2>\n<p>The chat is also there for quickly sharing context without a microphone, getting questions answered, or however else you'd want to use a chat channel.</p>\n<h2 id=\"inviting-people\"><a class=\"header\" href=\"#inviting-people\">Inviting people</a></h2>\n<p>By default, channels you create can only be accessed by you. You can invite collaborators by right clicking and selecting <code>Manage members</code>.</p>\n<p>When you have channels nested under each other, permissions are inherited. For instance, in the example above, we only need to add people to the <code>#zed</code> channel, and they will automatically gain access to <code>#core-editor</code>, <code>#new-languages</code>, and <code>#stability</code>.</p>\n<p>Once you have added someone, they can either join your channel by clicking on it in their Zed sidebar, or you can share the link to the channel so that they can join directly.</p>\n<h2 id=\"livestreaming--guests\"><a class=\"header\" href=\"#livestreaming--guests\">Livestreaming &amp; Guests</a></h2>\n<p>A Channel can also be made Public. This allows anyone to join the channel by clicking on the link.</p>\n<p>Guest users in channels can hear and see everything that is happening, and have read only access to projects and channel notes. They can use the Chat as normal.</p>\n<p>If you'd like to invite a guest to participate in a channel for the duration of a call you can do so by right clicking on them in the Collaboration Panel. \"Allowing Write Access\" will allow them to edit any projects shared into the call, and to use their microphone and share their screen if they wish.</p>\n\n</main>",
    "content_text": "Channels\nAt Zed we believe that great things are built by great people working together. We have designed Zed to help every individual work faster and to help teams of people work together more effectively.\nOverview\nChannels provide a way to streamline collaborating for software engineers in many ways, but particularly:\n\nPairing – when working on something together, you both have your own screen, mouse, and keyboard.\nMentoring – it’s easy to jump in to someone else’s context, and help them get unstuck, without the friction of pushing code up.\nRefactoring – you can have multiple people join in on large refactoring without fear of conflict.\nAmbient awareness – you can see what everyone else is working on with no need for status emails or meetings.\n\nChannels\nTo open the collaboration panel hit cmd-shift-c|ctrl-shift-c or collab panel: toggle focus.\nEach channel corresponds to an ongoing project or work-stream. You can see who’s in a channel as their avatars will show up in the sidebar. This makes it easy to see what everyone is doing and where to find them if needed.\nYou can create as many channels as you need. As in the example above, you can mix channels for your day job, as well as side-projects in one instance of Zed.\nJoining a channel adds you to a shared room where you can work on projects together.\nSharing projects\nAfter joining a channel, you can Share a project with the other people there. This will enable them to edit the code hosted on your machine as though they had it checked out locally.\nWhen you are editing someone else’s project, you still have the full power of the editor at your fingertips, you can jump to definitions, use the AI assistant, and see any diagnostic errors. This is extremely powerful for pairing, as one of you can be implementing the current method while the other is reading and researching the correct solution to the next problem. And, because you have your own config running, it feels like you’re using your own machine.\nSee our collaboration documentation for more details about how this works.\nNotes\nEach channel has a notes file associated with it to keep track of current status, new ideas, or to collaborate on building out the design for the feature that you’re working on before diving into code.\nThis is similar to a Google Doc, except powered by Zed's collaborative software and persisted to our servers.\nChat\nThe chat is also there for quickly sharing context without a microphone, getting questions answered, or however else you'd want to use a chat channel.\nInviting people\nBy default, channels you create can only be accessed by you. You can invite collaborators by right clicking and selecting Manage members.\nWhen you have channels nested under each other, permissions are inherited. For instance, in the example above, we only need to add people to the #zed channel, and they will automatically gain access to #core-editor, #new-languages, and #stability.\nOnce you have added someone, they can either join your channel by clicking on it in their Zed sidebar, or you can share the link to the channel so that they can join directly.\nLivestreaming & Guests\nA Channel can also be made Public. This allows anyone to join the channel by clicking on the link.\nGuest users in channels can hear and see everything that is happening, and have read only access to projects and channel notes. They can use the Chat as normal.\nIf you'd like to invite a guest to participate in a channel for the duration of a call you can do so by right clicking on them in the Collaboration Panel. \"Allowing Write Access\" will allow them to edit any projects shared into the call, and to use their microphone and share their screen if they wish.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:40"
  },
  "collaboration.html": {
    "url": "https://zed.dev/docs/collaboration.html",
    "title": "Collaboration | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"collaboration\"><a class=\"header\" href=\"#collaboration\">Collaboration</a></h1>\n<p>Only collaborate with people that you trust. Since sharing a project gives them access to your local file system, you should not share projects with people you do not trust; they could potentially do some nasty things.</p>\n<p>In the future, we will do more to prevent this type of access beyond the shared project and add more control over what collaborators can do, but for now, only collaborate with people you trust.</p>\n<h2 id=\"adding-a-collaborator-to-a-call\"><a class=\"header\" href=\"#adding-a-collaborator-to-a-call\">Adding a collaborator to a call</a></h2>\n<p>Before you can collaborate, you'll need to add a collaborator to your contacts. To do this:</p>\n<ol>\n<li>Open the contacts menu by clicking on the <code>Show contacts menu</code> button in the upper right-hand corner of the window or by running <code>collab: toggle contacts menu</code> (<code>cmd-shift-c</code>).</li>\n<li>Click the add button to the right of the search box.</li>\n<li>Search for the contact you want to add using their GitHub handle. Note: the person you are trying to add as a contact must be an existing Zed user.</li>\n</ol>\n<h3 id=\"inviting-a-collaborator\"><a class=\"header\" href=\"#inviting-a-collaborator\">Inviting a collaborator</a></h3>\n<p>You can add an existing Zed user as a contact from the contacts menu, deployed from the <code>Show contacts menu</code> button in the upper right-hand corner of the window or by <code>collab: toggle contacts menu</code> (<code>cmd-shift-c</code>) and then clicking the <code>Search for new contact</code> button to the right of the search box.</p>\n<p><img alt=\"Inviting a collaborator to the current project\" src=\"https://zed.dev/img/collaboration/add-a-collaborator.png\"/></p>\n<p>When you invite a collaborator to a project not in a call they will receive a notification to join, and a new call is created.</p>\n<p><img alt=\"Receiving an invite to join a call\" src=\"https://zed.dev/img/collaboration/receiving-an-invite.jpg\"/></p>\n<h3 id=\"inviting-non-zed-users\"><a class=\"header\" href=\"#inviting-non-zed-users\">Inviting non-Zed users</a></h3>\n<p>If someone you want to collaborate with has not yet signed up for Zed, they will need to <a href=\"https://zed.dev/download\">download the app</a> and sign in for the first time before you can add them. Identity is tied to GitHub accounts, so new users will need to authenticate with GitHub in order to sign into Zed.</p>\n<h3 id=\"voice-chat\"><a class=\"header\" href=\"#voice-chat\">Voice chat</a></h3>\n<p>When joining a call, Zed will automatically share your microphone with other users in the call, if your OS allows it. This isn't tied to your project. You can disable this for your client via the <a href=\"./configuring-zed.html#calls\"><code>mute_on_join</code></a> setting.</p>\n<h2 id=\"collaborating-on-a-project\"><a class=\"header\" href=\"#collaborating-on-a-project\">Collaborating on a project</a></h2>\n<h3 id=\"share-a-project\"><a class=\"header\" href=\"#share-a-project\">Share a project</a></h3>\n<p>When you invite a collaborator to join your project, a new call begins. Your Zed windows will show the call participants in the title bar of the window.</p>\n<p><img alt=\"A new Zed call with two collaborators\" src=\"https://zed.dev/img/collaboration/new-call.png\"/></p>\n<p>Collaborators in the same project as you are in color, and have a cursor color. Collaborators in other projects are shown in gray. Collaborators that have access to the current project will have their own cursor color under their avatar.</p>\n<p>We aim to eliminate the distinction between local and remote projects as much as possible. Collaborators can open, edit, and save files, perform searches, interact with the language server, etc. Guests have a read-only view of the project, including access to language server info.</p>\n<h4 id=\"unshared-projects\"><a class=\"header\" href=\"#unshared-projects\">Unshared Projects</a></h4>\n<p>If a collaborator is currently in a project that is not shared, you will not be able to jump to their project or follow them until they either share the project or return to a project that is shared.</p>\n<p>If you are in a project that isn't shared, others will not be able to join it or see its contents.</p>\n<h3 id=\"follow-a-collaborator\"><a class=\"header\" href=\"#follow-a-collaborator\">Follow a collaborator</a></h3>\n<p>To follow a collaborator, click on their avatar in the top right of the window. You can also cycle through collaborators using <code>workspace: follow next collaborator</code> (<code>ctrl-alt-cmd-f</code>).</p>\n<p>When you join a project, you'll immediately start following the collaborator that invited you.</p>\n<p><img alt=\"Automatically following the person inviting us to a project\" src=\"https://zed.dev/img/collaboration/joining-a-call.png\"/></p>\n<p>When you are in a pane that is following a collaborator, you will:</p>\n<ul>\n<li>follow their cursor and scroll position</li>\n<li>follow them to other files in the same project</li>\n<li>instantly swap to viewing their screen in that pane, if they are sharing their screen and leave the project</li>\n</ul>\n<p>If you move your cursor or make an edit in that pane, you will stop following.</p>\n<p>To start following again, you can click on a collaborator's avatar or cycle through following different participants by pressing <code>workspace: follow next collaborator</code> (<code>ctrl-alt-cmd-f</code>).</p>\n<h4 id=\"how-following-works\"><a class=\"header\" href=\"#how-following-works\">How following works</a></h4>\n<p>Following is confined to a particular pane. When a pane is following a collaborator, it is outlined in their cursor color.</p>\n<p>This pane-specific behavior allows you to follow someone in one pane while navigating independently in another and can be an effective layout for some collaboration styles.</p>\n<h3 id=\"sharing-your-screen\"><a class=\"header\" href=\"#sharing-your-screen\">Sharing your screen</a></h3>\n<p>Share your screen with collaborators in the current call by clicking on the <code>Share screen</code> button in the top right of the window.</p>\n<p>Collaborators will see your screen if they are following you and you start viewing a window outside Zed or a project that is not shared.</p>\n<p>Collaborators can see your entire screen when you are screen sharing, so be careful not to share anything you don't want to share. Remember to stop screen sharing when you are finished.</p>\n<p>Call participants can open a dedicated tab for your screen share by opening the contacts menu in the top right and clicking on the <code>Screen</code> entry if you are sharing your screen.</p>\n<h3 id=\"adding-a-project\"><a class=\"header\" href=\"#adding-a-project\">Adding a project</a></h3>\n<p>You can add a project to a call by clicking on the <code>Share</code> button next to the project name in the title bar.</p>\n<h3 id=\"removing-a-project\"><a class=\"header\" href=\"#removing-a-project\">Removing a project</a></h3>\n<p>You can remove a project from a call by clicking on the <code>Unshare</code> button next to the project name in the title bar.</p>\n<p>Collaborators that are currently in that project will be disconnected from the project and will not be able to rejoin it unless you share it again.</p>\n<h3 id=\"following-a-collaborators-terminal\"><a class=\"header\" href=\"#following-a-collaborators-terminal\">Following a collaborator's terminal</a></h3>\n<p>You can follow what a collaborator is doing in their terminal by having them share their screen and following it.</p>\n<p>In the future, we plan to allow you to collaborate in the terminal directly in a shared project.</p>\n<h3 id=\"leave-call\"><a class=\"header\" href=\"#leave-call\">Leave call</a></h3>\n<p>You can leave a call by opening the contacts menu in the top right and clicking on the <code>Leave call</code> button.</p>\n\n</main>",
    "content_text": "Collaboration\nOnly collaborate with people that you trust. Since sharing a project gives them access to your local file system, you should not share projects with people you do not trust; they could potentially do some nasty things.\nIn the future, we will do more to prevent this type of access beyond the shared project and add more control over what collaborators can do, but for now, only collaborate with people you trust.\nAdding a collaborator to a call\nBefore you can collaborate, you'll need to add a collaborator to your contacts. To do this:\n\nOpen the contacts menu by clicking on the Show contacts menu button in the upper right-hand corner of the window or by running collab: toggle contacts menu (cmd-shift-c).\nClick the add button to the right of the search box.\nSearch for the contact you want to add using their GitHub handle. Note: the person you are trying to add as a contact must be an existing Zed user.\n\nInviting a collaborator\nYou can add an existing Zed user as a contact from the contacts menu, deployed from the Show contacts menu button in the upper right-hand corner of the window or by collab: toggle contacts menu (cmd-shift-c) and then clicking the Search for new contact button to the right of the search box.\n\nWhen you invite a collaborator to a project not in a call they will receive a notification to join, and a new call is created.\n\nInviting non-Zed users\nIf someone you want to collaborate with has not yet signed up for Zed, they will need to download the app and sign in for the first time before you can add them. Identity is tied to GitHub accounts, so new users will need to authenticate with GitHub in order to sign into Zed.\nVoice chat\nWhen joining a call, Zed will automatically share your microphone with other users in the call, if your OS allows it. This isn't tied to your project. You can disable this for your client via the mute_on_join setting.\nCollaborating on a project\nShare a project\nWhen you invite a collaborator to join your project, a new call begins. Your Zed windows will show the call participants in the title bar of the window.\n\nCollaborators in the same project as you are in color, and have a cursor color. Collaborators in other projects are shown in gray. Collaborators that have access to the current project will have their own cursor color under their avatar.\nWe aim to eliminate the distinction between local and remote projects as much as possible. Collaborators can open, edit, and save files, perform searches, interact with the language server, etc. Guests have a read-only view of the project, including access to language server info.\nUnshared Projects\nIf a collaborator is currently in a project that is not shared, you will not be able to jump to their project or follow them until they either share the project or return to a project that is shared.\nIf you are in a project that isn't shared, others will not be able to join it or see its contents.\nFollow a collaborator\nTo follow a collaborator, click on their avatar in the top right of the window. You can also cycle through collaborators using workspace: follow next collaborator (ctrl-alt-cmd-f).\nWhen you join a project, you'll immediately start following the collaborator that invited you.\n\nWhen you are in a pane that is following a collaborator, you will:\n\nfollow their cursor and scroll position\nfollow them to other files in the same project\ninstantly swap to viewing their screen in that pane, if they are sharing their screen and leave the project\n\nIf you move your cursor or make an edit in that pane, you will stop following.\nTo start following again, you can click on a collaborator's avatar or cycle through following different participants by pressing workspace: follow next collaborator (ctrl-alt-cmd-f).\nHow following works\nFollowing is confined to a particular pane. When a pane is following a collaborator, it is outlined in their cursor color.\nThis pane-specific behavior allows you to follow someone in one pane while navigating independently in another and can be an effective layout for some collaboration styles.\nSharing your screen\nShare your screen with collaborators in the current call by clicking on the Share screen button in the top right of the window.\nCollaborators will see your screen if they are following you and you start viewing a window outside Zed or a project that is not shared.\nCollaborators can see your entire screen when you are screen sharing, so be careful not to share anything you don't want to share. Remember to stop screen sharing when you are finished.\nCall participants can open a dedicated tab for your screen share by opening the contacts menu in the top right and clicking on the Screen entry if you are sharing your screen.\nAdding a project\nYou can add a project to a call by clicking on the Share button next to the project name in the title bar.\nRemoving a project\nYou can remove a project from a call by clicking on the Unshare button next to the project name in the title bar.\nCollaborators that are currently in that project will be disconnected from the project and will not be able to rejoin it unless you share it again.\nFollowing a collaborator's terminal\nYou can follow what a collaborator is doing in their terminal by having them share their screen and following it.\nIn the future, we plan to allow you to collaborate in the terminal directly in a shared project.\nLeave call\nYou can leave a call by opening the contacts menu in the top right and clicking on the Leave call button.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:43"
  },
  "git.html": {
    "url": "https://zed.dev/docs/git.html",
    "title": "Git | Zed Editor Git integration documentation",
    "content": "<main>\n\n<h1 id=\"git\"><a class=\"header\" href=\"#git\">Git</a></h1>\n<p>Zed currently offers a set of fundamental Git features, with support coming in the future for more advanced ones, like conflict resolution tools, line by line staging, and more.</p>\n<p>Here's an overview of all currently supported features:</p>\n<ul>\n<li>Committing</li>\n<li>Staging, pushing, pulling, and fetching</li>\n<li>Project Diff: A multibuffer view of all changes</li>\n<li>Diff indicators in buffers and editor scrollbars</li>\n<li>Inline diff toggle and reverts in the editor for unstaged changes</li>\n<li>Git status in the Project Panel</li>\n<li>Branch creating and switching</li>\n<li>Git blame viewing</li>\n</ul>\n<h2 id=\"git-panel\"><a class=\"header\" href=\"#git-panel\">Git Panel</a></h2>\n<p>The Git Panel gives you a birds-eye view of the state of your working tree and of Git's staging area.</p>\n<p>You can open the Git Panel using <code class=\"hljs\">git panel: toggle focus</code>, or by clicking the Git icon in the status bar.</p>\n<p>In the panel you can see the state of your project at a glance—which repository and branch are active, what files have changed and the current staging state of each file.</p>\n<p>Zed monitors your repository so that changes you make on the command line are instantly reflected.</p>\n<h2 id=\"project-diff\"><a class=\"header\" href=\"#project-diff\">Project Diff</a></h2>\n<p>You can see all of the changes captured by Git in Zed by opening the Project Diff (<kbd class=\"keybinding\">ctrl-g d|ctrl-g d</kbd>), accessible via the <code class=\"hljs\">git: diff</code> action in the Command Palette or the Git Panel.</p>\n<p>All of the changes displayed in the Project Diff behave exactly the same as any other multibuffer: they are all editable excerpts of files.</p>\n<p>You can stage or unstage each hunk as well as a whole file by hitting the buttons on the tab bar or their corresponding keybindings.</p>\n<!-- Add media -->\n<h2 id=\"fetch-push-and-pull\"><a class=\"header\" href=\"#fetch-push-and-pull\">Fetch, push, and pull</a></h2>\n<p>Fetch, push, or pull from your Git repository in Zed via the buttons available on the Git Panel or via the Command Palette by looking at the respective actions: <code class=\"hljs\">git: fetch</code>, <code class=\"hljs\">git: push</code>, and <code class=\"hljs\">git: pull</code>.</p>\n<h2 id=\"staging-workflow\"><a class=\"header\" href=\"#staging-workflow\">Staging Workflow</a></h2>\n<p>Zed has two primary staging workflows, using either the Project Diff or the panel directly.</p>\n<h3 id=\"using-the-project-diff\"><a class=\"header\" href=\"#using-the-project-diff\">Using the Project Diff</a></h3>\n<p>In the Project Diff view, you can focus on each hunk and stage them individually by clicking on the tab bar buttons or via the keybindings <code class=\"hljs\">git: stage and next</code> (<kbd class=\"keybinding\">cmd-y|alt-y</kbd>).</p>\n<p>Similarly, stage all hunks at the same time with the <code class=\"hljs\">git: stage all</code> (<kbd class=\"keybinding\">cmd-ctrl-y|ctrl-space</kbd>) keybinding and then immediately commit with <code class=\"hljs\">git: commit</code> (<kbd class=\"keybinding\">cmd-enter|ctrl-enter</kbd>).</p>\n<h3 id=\"using-the-git-panel\"><a class=\"header\" href=\"#using-the-git-panel\">Using the Git Panel</a></h3>\n<p>From the panel, you can simply type a commit message and hit the commit button, or <code class=\"hljs\">git: commit</code>. This will automatically stage all tracked files (indicated by a <code>[·]</code> in the entry's checkbox) and commit them.</p>\n<!-- Show a set of changes with default staged -->\n<p>Entries can be staged using each individual entry's checkbox. All changes can be staged using the button at the top of the panel, or <code class=\"hljs\">git: stage all</code>.</p>\n<!-- Add media -->\n<h2 id=\"committing\"><a class=\"header\" href=\"#committing\">Committing</a></h2>\n<p>Zed offers two commit textareas:</p>\n<ol>\n<li>The first one is available right at the bottom of the Git Panel. Hitting <kbd class=\"keybinding\">cmd-enter|ctrl-enter</kbd> immediately commits all of your staged changes.</li>\n<li>The second is available via the action <code class=\"hljs\">git: expand commit editor</code> or via hitting the <kbd class=\"keybinding\">shift-escape|</kbd> while focused in the Git Panel commit textarea.</li>\n</ol>\n<h3 id=\"undoing-a-commit\"><a class=\"header\" href=\"#undoing-a-commit\">Undoing a Commit</a></h3>\n<p>As soon as you commit in Zed, in the Git Panel, you'll see a bar right under the commit textarea, which will show the recently submitted commit.\nIn there, you can use the \"Uncommit\" button, which performs the <code>git reset HEADˆ--soft</code> command.</p>\n<h2 id=\"ai-support-in-git\"><a class=\"header\" href=\"#ai-support-in-git\">AI Support in Git</a></h2>\n<p>Zed currently supports LLM-powered commit message generation.\nYou can ask AI to generate a commit message by focusing on the message editor within the Git Panel and either clicking on the pencil icon in the bottom left, or reaching for the <code class=\"hljs\">git: generate commit message</code> (<kbd class=\"keybinding\">alt-tab|alt-l</kbd>) keybinding.</p>\n<blockquote>\n<p>Note that you need to have an LLM provider configured. Visit <a href=\"./ai/configuration.html\">the AI configuration page</a> to learn how to do so.</p>\n</blockquote>\n<p>You can specify your preferred model to use by providing a <code>commit_message_model</code> agent setting. See <a href=\"./ai/agent-settings.html#feature-specific-models\">Feature-specific models</a> for more information.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"version\": \"2\",\n    \"commit_message_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-haiku\"\n    }\n  }\n}\n</code></pre>\n<!-- Add media -->\n<p>More advanced AI integration with Git features may come in the future.</p>\n<h2 id=\"git-integrations\"><a class=\"header\" href=\"#git-integrations\">Git Integrations</a></h2>\n<p>Zed integrates with popular Git hosting services to ensure that Git commit hashes and references to Issues, Pull Requests, and Merge Requests become clickable links.</p>\n<p>Zed currently supports links to the hosted versions of\n<a href=\"https://github.com\">GitHub</a>,\n<a href=\"https://gitlab.com\">GitLab</a>,\n<a href=\"https://bitbucket.org\">Bitbucket</a>,\n<a href=\"https://sr.ht\">SourceHut</a> and\n<a href=\"https://codeberg.org\">Codeberg</a>.</p>\n<p>Zed also has a Copy Permalink feature to create a permanent link to a code snippet on your Git hosting service.\nThese links are useful for sharing a specific line or range of lines in a file at a specific commit.\nTrigger this action via the <a href=\"./getting-started.html#command-palette\">Command Palette</a> (search for <code>permalink</code>),\nby creating a <a href=\"key-bindings.html#custom-key-bindings\">custom key bindings</a> to the\n<code>editor::CopyPermalinkToLine</code> or <code>editor::OpenPermalinkToLine</code> actions\nor by simply right clicking and selecting <code>Copy Permalink</code> with line(s) selected in your editor.</p>\n<h2 id=\"diff-hunk-keyboard-shortcuts\"><a class=\"header\" href=\"#diff-hunk-keyboard-shortcuts\">Diff Hunk Keyboard Shortcuts</a></h2>\n<p>When viewing files with changes, Zed displays diff hunks that can be expanded or collapsed for detailed review:</p>\n<ul>\n<li><strong>Expand all diff hunks</strong>: <code class=\"hljs\">editor: expand all diff hunks</code> (<kbd class=\"keybinding\">cmd-\"|ctrl-\"</kbd>)</li>\n<li><strong>Collapse all diff hunks</strong>: Press <code>Escape</code> (bound to <code class=\"hljs\">editor: cancel</code>)</li>\n<li><strong>Toggle selected diff hunks</strong>: <code class=\"hljs\">editor: toggle selected diff hunks</code> (<kbd class=\"keybinding\">cmd-'|ctrl-'</kbd>)</li>\n<li><strong>Navigate between hunks</strong>: <code class=\"hljs\">editor: go to hunk</code> and <code class=\"hljs\">editor: go to previous hunk</code></li>\n</ul>\n<blockquote>\n<p><strong>Tip:</strong> The <code>Escape</code> key is the quickest way to collapse all expanded diff hunks and return to an overview of your changes.</p>\n</blockquote>\n<h2 id=\"action-reference\"><a class=\"header\" href=\"#action-reference\">Action Reference</a></h2>\n<div class=\"table-wrapper\"><table><thead><tr><th>Action</th><th>Keybinding</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">git: add</code></td><td><div>No default binding</div></td></tr>\n<tr><td><code class=\"hljs\">git: stage all</code></td><td><kbd class=\"keybinding\">cmd-ctrl-y</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: unstage all</code></td><td><kbd class=\"keybinding\">cmd-ctrl-shift-y</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: toggle staged</code></td><td><kbd class=\"keybinding\">space</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: stage and next</code></td><td><kbd class=\"keybinding\">cmd-y</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: unstage and next</code></td><td><kbd class=\"keybinding\">cmd-shift-y</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: commit</code></td><td><kbd class=\"keybinding\">cmd-enter</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: expand commit editor</code></td><td><kbd class=\"keybinding\">shift-escape</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: push</code></td><td><kbd class=\"keybinding\">ctrl-g up</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: force push</code></td><td><kbd class=\"keybinding\">ctrl-g shift-up</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: pull</code></td><td><kbd class=\"keybinding\">ctrl-g down</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: fetch</code></td><td><kbd class=\"keybinding\">ctrl-g ctrl-g</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: diff</code></td><td><kbd class=\"keybinding\">ctrl-g d</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: restore</code></td><td><kbd class=\"keybinding\">cmd-alt-z</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: restore file</code></td><td><kbd class=\"keybinding\">cmd-delete</kbd></td></tr>\n<tr><td><code class=\"hljs\">git: branch</code></td><td><div>No default binding</div></td></tr>\n<tr><td><code class=\"hljs\">git: switch</code></td><td><div>No default binding</div></td></tr>\n<tr><td><code class=\"hljs\">git: checkout branch</code></td><td><div>No default binding</div></td></tr>\n<tr><td><code class=\"hljs\">git: blame</code></td><td><kbd class=\"keybinding\">cmd-alt-g b</kbd></td></tr>\n<tr><td><code class=\"hljs\">editor: toggle git blame inline</code></td><td><div>No default binding</div></td></tr>\n<tr><td><code class=\"hljs\">editor: expand all diff hunks</code></td><td><kbd class=\"keybinding\">cmd-\"</kbd></td></tr>\n<tr><td><code class=\"hljs\">editor: toggle selected diff hunks</code></td><td><kbd class=\"keybinding\">cmd-'</kbd></td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p>Not all actions have default keybindings, but can be bound by <a href=\"./key-bindings.html#user-keymaps\">customizing your keymap</a>.</p>\n</blockquote>\n<h2 id=\"git-cli-configuration\"><a class=\"header\" href=\"#git-cli-configuration\">Git CLI Configuration</a></h2>\n<p>If you would like to also use Zed for your <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor\">git commit message editor</a> when committing from the command line you can use <code>zed --wait</code>:</p>\n<pre><code class=\"language-sh\">git config --global core.editor \"zed --wait\"\n</code></pre>\n<p>Or add the following to your shell environment (in <code>~/.zshrc</code>, <code>~/.bashrc</code>, etc):</p>\n<pre><code class=\"language-sh\">export GIT_EDITOR=\"zed --wait\"\n</code></pre>\n\n</main>",
    "content_text": "Git\nZed currently offers a set of fundamental Git features, with support coming in the future for more advanced ones, like conflict resolution tools, line by line staging, and more.\nHere's an overview of all currently supported features:\n\nCommitting\nStaging, pushing, pulling, and fetching\nProject Diff: A multibuffer view of all changes\nDiff indicators in buffers and editor scrollbars\nInline diff toggle and reverts in the editor for unstaged changes\nGit status in the Project Panel\nBranch creating and switching\nGit blame viewing\n\nGit Panel\nThe Git Panel gives you a birds-eye view of the state of your working tree and of Git's staging area.\nYou can open the Git Panel using git panel: toggle focus, or by clicking the Git icon in the status bar.\nIn the panel you can see the state of your project at a glance—which repository and branch are active, what files have changed and the current staging state of each file.\nZed monitors your repository so that changes you make on the command line are instantly reflected.\nProject Diff\nYou can see all of the changes captured by Git in Zed by opening the Project Diff (ctrl-g d|ctrl-g d), accessible via the git: diff action in the Command Palette or the Git Panel.\nAll of the changes displayed in the Project Diff behave exactly the same as any other multibuffer: they are all editable excerpts of files.\nYou can stage or unstage each hunk as well as a whole file by hitting the buttons on the tab bar or their corresponding keybindings.\n\nFetch, push, and pull\nFetch, push, or pull from your Git repository in Zed via the buttons available on the Git Panel or via the Command Palette by looking at the respective actions: git: fetch, git: push, and git: pull.\nStaging Workflow\nZed has two primary staging workflows, using either the Project Diff or the panel directly.\nUsing the Project Diff\nIn the Project Diff view, you can focus on each hunk and stage them individually by clicking on the tab bar buttons or via the keybindings git: stage and next (cmd-y|alt-y).\nSimilarly, stage all hunks at the same time with the git: stage all (cmd-ctrl-y|ctrl-space) keybinding and then immediately commit with git: commit (cmd-enter|ctrl-enter).\nUsing the Git Panel\nFrom the panel, you can simply type a commit message and hit the commit button, or git: commit. This will automatically stage all tracked files (indicated by a [·] in the entry's checkbox) and commit them.\n\nEntries can be staged using each individual entry's checkbox. All changes can be staged using the button at the top of the panel, or git: stage all.\n\nCommitting\nZed offers two commit textareas:\n\nThe first one is available right at the bottom of the Git Panel. Hitting cmd-enter|ctrl-enter immediately commits all of your staged changes.\nThe second is available via the action git: expand commit editor or via hitting the shift-escape| while focused in the Git Panel commit textarea.\n\nUndoing a Commit\nAs soon as you commit in Zed, in the Git Panel, you'll see a bar right under the commit textarea, which will show the recently submitted commit.\nIn there, you can use the \"Uncommit\" button, which performs the git reset HEADˆ--soft command.\nAI Support in Git\nZed currently supports LLM-powered commit message generation.\nYou can ask AI to generate a commit message by focusing on the message editor within the Git Panel and either clicking on the pencil icon in the bottom left, or reaching for the git: generate commit message (alt-tab|alt-l) keybinding.\n\nNote that you need to have an LLM provider configured. Visit the AI configuration page to learn how to do so.\n\nYou can specify your preferred model to use by providing a commit_message_model agent setting. See Feature-specific models for more information.\n{\n  \"agent\": {\n    \"version\": \"2\",\n    \"commit_message_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-haiku\"\n    }\n  }\n}\n\n\nMore advanced AI integration with Git features may come in the future.\nGit Integrations\nZed integrates with popular Git hosting services to ensure that Git commit hashes and references to Issues, Pull Requests, and Merge Requests become clickable links.\nZed currently supports links to the hosted versions of\nGitHub,\nGitLab,\nBitbucket,\nSourceHut and\nCodeberg.\nZed also has a Copy Permalink feature to create a permanent link to a code snippet on your Git hosting service.\nThese links are useful for sharing a specific line or range of lines in a file at a specific commit.\nTrigger this action via the Command Palette (search for permalink),\nby creating a custom key bindings to the\neditor::CopyPermalinkToLine or editor::OpenPermalinkToLine actions\nor by simply right clicking and selecting Copy Permalink with line(s) selected in your editor.\nDiff Hunk Keyboard Shortcuts\nWhen viewing files with changes, Zed displays diff hunks that can be expanded or collapsed for detailed review:\n\nExpand all diff hunks: editor: expand all diff hunks (cmd-\"|ctrl-\")\nCollapse all diff hunks: Press Escape (bound to editor: cancel)\nToggle selected diff hunks: editor: toggle selected diff hunks (cmd-'|ctrl-')\nNavigate between hunks: editor: go to hunk and editor: go to previous hunk\n\n\nTip: The Escape key is the quickest way to collapse all expanded diff hunks and return to an overview of your changes.\n\nAction Reference\nActionKeybinding\ngit: addNo default binding\ngit: stage allcmd-ctrl-y\ngit: unstage allcmd-ctrl-shift-y\ngit: toggle stagedspace\ngit: stage and nextcmd-y\ngit: unstage and nextcmd-shift-y\ngit: commitcmd-enter\ngit: expand commit editorshift-escape\ngit: pushctrl-g up\ngit: force pushctrl-g shift-up\ngit: pullctrl-g down\ngit: fetchctrl-g ctrl-g\ngit: diffctrl-g d\ngit: restorecmd-alt-z\ngit: restore filecmd-delete\ngit: branchNo default binding\ngit: switchNo default binding\ngit: checkout branchNo default binding\ngit: blamecmd-alt-g b\neditor: toggle git blame inlineNo default binding\neditor: expand all diff hunkscmd-\"\neditor: toggle selected diff hunkscmd-'\n\n\n\nNot all actions have default keybindings, but can be bound by customizing your keymap.\n\nGit CLI Configuration\nIf you would like to also use Zed for your git commit message editor when committing from the command line you can use zed --wait:\ngit config --global core.editor \"zed --wait\"\n\nOr add the following to your shell environment (in ~/.zshrc, ~/.bashrc, etc):\nexport GIT_EDITOR=\"zed --wait\"",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:45"
  },
  "debugger.html": {
    "url": "https://zed.dev/docs/debugger.html",
    "title": "Debugger | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"debugger\"><a class=\"header\" href=\"#debugger\">Debugger</a></h1>\n<p>Zed uses the <a href=\"https://microsoft.github.io/debug-adapter-protocol/\">Debug Adapter Protocol (DAP)</a> to provide debugging functionality across multiple programming languages.\nDAP is a standardized protocol that defines how debuggers, editors, and IDEs communicate with each other.\nIt allows Zed to support various debuggers without needing to implement language-specific debugging logic.\nZed implements the client side of the protocol, and various <em>debug adapters</em> implement the server side.</p>\n<p>This protocol enables features like setting breakpoints, stepping through code, inspecting variables,\nand more, in a consistent manner across different programming languages and runtime environments.</p>\n<h2 id=\"supported-languages\"><a class=\"header\" href=\"#supported-languages\">Supported Languages</a></h2>\n<p>To debug code written in a specific language, Zed needs to find a debug adapter for that language. Some debug adapters are provided by Zed without additional setup, and some are provided by <a href=\"./extensions/debugger-extensions.html\">language extensions</a>. The following languages currently have debug adapters available:</p>\n<!-- keep this sorted -->\n<ul>\n<li><a href=\"./languages/c.html#debugging\">C</a> (built-in)</li>\n<li><a href=\"./languages/cpp.html#debugging\">C++</a> (built-in)</li>\n<li><a href=\"./languages/go.html#debugging\">Go</a> (built-in)</li>\n<li><a href=\"./languages/javascript.html#debugging\">JavaScript</a> (built-in)</li>\n<li><a href=\"./languages/php.html#debugging\">PHP</a> (built-in)</li>\n<li><a href=\"./languages/python.html#debugging\">Python</a> (built-in)</li>\n<li><a href=\"./languages/ruby.html#debugging\">Ruby</a> (provided by extension)</li>\n<li><a href=\"./languages/rust.html#debugging\">Rust</a> (built-in)</li>\n<li><a href=\"./languages/swift.html#debugging\">Swift</a> (provided by extension)</li>\n<li><a href=\"./languages/typescript.html#debugging\">TypeScript</a> (built-in)</li>\n</ul>\n<blockquote>\n<p>If your language isn't listed, you can contribute by adding a debug adapter for it. Check out our <a href=\"./extensions/debugger-extensions.html\">debugger extensions</a> documentation for more information.</p>\n</blockquote>\n<p>Follow those links for language- and adapter-specific information and examples, or read on for more about Zed's general debugging features that apply to all adapters.</p>\n<h2 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h2>\n<p>For most languages, the fastest way to get started is to run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>). This opens the <em>new process modal</em>, which shows you a contextual list of preconfigured debug tasks for the current project. Debug tasks are created from tests, entry points (like a <code>main</code> function), and from other sources — consult the documentation for your language for full information about what's supported.</p>\n<p>You can open the same modal by clicking the \"plus\" button at the top right of the debug panel.</p>\n<p>For languages that don't provide preconfigured debug tasks (this includes C, C++, and some extension-supported languages), you can define debug configurations in the <code>.zed/debug.json</code> file in your project root. This file should be an array of configuration objects:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"CodeLLDB\",\n    \"label\": \"First configuration\"\n    // ...\n  },\n  {\n    \"adapter\": \"Debugpy\",\n    \"label\": \"Second configuration\"\n    // ...\n  }\n]\n</code></pre>\n<p>Check the documentation for your language for example configurations covering typical use-cases. Once you've added configurations to <code>.zed/debug.json</code>, they'll appear in the list in the new process modal.</p>\n<p>Zed will also load debug configurations from <code>.vscode/launch.json</code>, and show them in the new process modal if no configurations are found in <code>.zed/debug.json</code>.</p>\n<h3 id=\"launching--attaching\"><a class=\"header\" href=\"#launching--attaching\">Launching &amp; Attaching</a></h3>\n<p>Zed debugger offers two ways to debug your program; you can either <em>launch</em> a new instance of your program or <em>attach</em> to an existing process.\nWhich one you choose depends on what you are trying to achieve.</p>\n<p>When launching a new instance, Zed (and the underlying debug adapter) can often do a better job at picking up the debug information compared to attaching to an existing process, since it controls the lifetime of a whole program.\nRunning unit tests or a debug build of your application is a good use case for launching.</p>\n<p>Compared to launching, attaching to an existing process might seem inferior, but that's far from truth; there are cases where you cannot afford to restart your program, because for example, the bug is not reproducible outside of a production environment or some other circumstances.</p>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>While configuration fields are debug adapter-dependent, most adapters support the following fields:</p>\n<pre><code class=\"language-json\">[\n  {\n    // The label for the debug configuration and used to identify the debug session inside the debug panel &amp; new process modal\n    \"label\": \"Example Start debugger config\",\n    // The debug adapter that Zed should use to debug the program\n    \"adapter\": \"Example adapter name\",\n    // Request:\n    //  - launch: Zed will launch the program if specified, or show a debug terminal with the right configuration\n    //  - attach: Zed will attach to a running program to debug it, or when the process_id is not specified, will show a process picker (only supported for node currently)\n    \"request\": \"launch\",\n    // The program to debug. This field supports path resolution with ~ or . symbols.\n    \"program\": \"path_to_program\",\n    // cwd: defaults to the current working directory of your project ($ZED_WORKTREE_ROOT)\n    \"cwd\": \"$ZED_WORKTREE_ROOT\"\n  }\n]\n</code></pre>\n<p>All configuration fields support <a href=\"./tasks.html#variables\">task variables</a>.</p>\n<h3 id=\"build-tasks\"><a class=\"header\" href=\"#build-tasks\">Build tasks</a></h3>\n<p>Zed also allows embedding a Zed task in a <code>build</code> field that is run before the debugger starts. This is useful for setting up the environment or running any necessary setup steps before the debugger starts.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Build Binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"program\": \"path_to_program\",\n    \"request\": \"launch\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"build\", \"-j8\"]\n    }\n  }\n]\n</code></pre>\n<p>Build tasks can also refer to the existing tasks by unsubstituted label:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Build Binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"program\": \"path_to_program\",\n    \"request\": \"launch\",\n    \"build\": \"my build task\" // Or \"my build task for $ZED_FILE\"\n  }\n]\n</code></pre>\n<h3 id=\"automatic-scenario-creation\"><a class=\"header\" href=\"#automatic-scenario-creation\">Automatic scenario creation</a></h3>\n<p>Given a Zed task, Zed can automatically create a scenario for you. Automatic scenario creation also powers our scenario creation from gutter.\nAutomatic scenario creation is currently supported for Rust, Go, Python, JavaScript, and TypeScript.</p>\n<h2 id=\"breakpoints\"><a class=\"header\" href=\"#breakpoints\">Breakpoints</a></h2>\n<p>To set a breakpoint, simply click next to the line number in the editor gutter.\nBreakpoints can be tweaked depending on your needs; to access additional options of a given breakpoint, right-click on the breakpoint icon in the gutter and select the desired option.\nAt present, you can:</p>\n<ul>\n<li>Add a log to a breakpoint, which will output a log message whenever that breakpoint is hit.</li>\n<li>Make the breakpoint conditional, which will only stop at the breakpoint when the condition is met. The syntax for conditions is adapter-specific.</li>\n<li>Add a hit count to a breakpoint, which will only stop at the breakpoint after it's hit a certain number of times.</li>\n<li>Disable a breakpoint, which will prevent it from being hit while leaving it visible in the gutter.</li>\n</ul>\n<p>Some debug adapters (e.g. CodeLLDB and JavaScript) will also <em>verify</em> whether your breakpoints can be hit; breakpoints that cannot be hit are surfaced more prominently in the UI.</p>\n<p>All breakpoints enabled for a given project are also listed in \"Breakpoints\" item in your debugging session UI. From \"Breakpoints\" item in your UI you can also manage exception breakpoints.\nThe debug adapter will then stop whenever an exception of a given kind occurs. Which exception types are supported depends on the debug adapter.</p>\n<h2 id=\"settings\"><a class=\"header\" href=\"#settings\">Settings</a></h2>\n<p>The settings for the debugger are grouped under the <code>debugger</code> key in <code>settings.json</code>:</p>\n<ul>\n<li><code>dock</code>: Determines the position of the debug panel in the UI.</li>\n<li><code>stepping_granularity</code>: Determines the stepping granularity.</li>\n<li><code>save_breakpoints</code>: Whether the breakpoints should be reused across Zed sessions.</li>\n<li><code>button</code>: Whether to show the debug button in the status bar.</li>\n<li><code>timeout</code>: Time in milliseconds until timeout error when connecting to a TCP debug adapter.</li>\n<li><code>log_dap_communications</code>: Whether to log messages between active debug adapters and Zed.</li>\n<li><code>format_dap_log_messages</code>: Whether to format DAP messages when adding them to the debug adapter logger.</li>\n</ul>\n<h3 id=\"dock\"><a class=\"header\" href=\"#dock\">Dock</a></h3>\n<ul>\n<li>Description: The position of the debug panel in the UI.</li>\n<li>Default: <code>bottom</code></li>\n<li>Setting: debugger.dock</li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li><code>left</code> - The debug panel will be docked to the left side of the UI.</li>\n<li><code>right</code> - The debug panel will be docked to the right side of the UI.</li>\n<li><code>bottom</code> - The debug panel will be docked to the bottom of the UI.</li>\n</ol>\n<pre><code class=\"language-json\">\"debugger\": {\n  \"dock\": \"bottom\"\n},\n</code></pre>\n<h3 id=\"stepping-granularity\"><a class=\"header\" href=\"#stepping-granularity\">Stepping granularity</a></h3>\n<ul>\n<li>Description: The Step granularity that the debugger will use</li>\n<li>Default: <code>line</code></li>\n<li>Setting: <code>debugger.stepping_granularity</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<ol>\n<li>Statement - The step should allow the program to run until the current statement has finished executing.\nThe meaning of a statement is determined by the adapter and it may be considered equivalent to a line.\nFor example 'for(int i = 0; i &lt; 10; i++)' could be considered to have 3 statements 'int i = 0', 'i &lt; 10', and 'i++'.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"stepping_granularity\": \"statement\"\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Line - The step should allow the program to run until the current source line has executed.</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"stepping_granularity\": \"line\"\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>Instruction - The step should allow one instruction to execute (e.g. one x86 instruction).</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"stepping_granularity\": \"instruction\"\n  }\n}\n</code></pre>\n<h3 id=\"save-breakpoints\"><a class=\"header\" href=\"#save-breakpoints\">Save Breakpoints</a></h3>\n<ul>\n<li>Description: Whether the breakpoints should be saved across Zed sessions.</li>\n<li>Default: <code>true</code></li>\n<li>Setting: <code>debugger.save_breakpoints</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"save_breakpoints\": true\n  }\n}\n</code></pre>\n<h3 id=\"button\"><a class=\"header\" href=\"#button\">Button</a></h3>\n<ul>\n<li>Description: Whether the button should be displayed in the debugger toolbar.</li>\n<li>Default: <code>true</code></li>\n<li>Setting: <code>debugger.show_button</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"show_button\": true\n  }\n}\n</code></pre>\n<h3 id=\"timeout\"><a class=\"header\" href=\"#timeout\">Timeout</a></h3>\n<ul>\n<li>Description: Time in milliseconds until timeout error when connecting to a TCP debug adapter.</li>\n<li>Default: <code>2000</code></li>\n<li>Setting: <code>debugger.timeout</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>integer</code> values</p>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"timeout\": 3000\n  }\n}\n</code></pre>\n<h3 id=\"inline-values\"><a class=\"header\" href=\"#inline-values\">Inline Values</a></h3>\n<ul>\n<li>Description: Whether to enable editor inlay hints showing the values of variables in your code during debugging sessions.</li>\n<li>Default: <code>true</code></li>\n<li>Setting: <code>inlay_hints.show_value_hints</code></li>\n</ul>\n<p><strong>Options</strong></p>\n<pre><code class=\"language-json\">{\n  \"inlay_hints\": {\n    \"show_value_hints\": false\n  }\n}\n</code></pre>\n<p>Inline value hints can also be toggled from the Editor Controls menu in the editor toolbar.</p>\n<h3 id=\"log-dap-communications\"><a class=\"header\" href=\"#log-dap-communications\">Log Dap Communications</a></h3>\n<ul>\n<li>Description: Whether to log messages between active debug adapters and Zed. (Used for DAP development)</li>\n<li>Default: false</li>\n<li>Setting: debugger.log_dap_communications</li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"log_dap_communications\": true\n  }\n}\n</code></pre>\n<h3 id=\"format-dap-log-messages\"><a class=\"header\" href=\"#format-dap-log-messages\">Format Dap Log Messages</a></h3>\n<ul>\n<li>Description: Whether to format DAP messages when adding them to the debug adapter logger. (Used for DAP development)</li>\n<li>Default: false</li>\n<li>Setting: debugger.format_dap_log_messages</li>\n</ul>\n<p><strong>Options</strong></p>\n<p><code>boolean</code> values</p>\n<pre><code class=\"language-json\">{\n  \"debugger\": {\n    \"format_dap_log_messages\": true\n  }\n}\n</code></pre>\n<h3 id=\"customizing-debug-adapters\"><a class=\"header\" href=\"#customizing-debug-adapters\">Customizing Debug Adapters</a></h3>\n<ul>\n<li>Description: Custom program path and arguments to override how Zed launches a specific debug adapter.</li>\n<li>Default: Adapter-specific</li>\n<li>Setting: <code>dap.$ADAPTER.binary</code> and <code>dap.$ADAPTER.args</code></li>\n</ul>\n<p>You can pass <code>binary</code>, <code>args</code>, or both. <code>binary</code> should be a path to a <em>debug adapter</em> (like <code>lldb-dap</code>) not a <em>debugger</em> (like <code>lldb</code> itself). The <code>args</code> setting overrides any arguments that Zed would otherwise pass to the adapter.</p>\n<pre><code class=\"language-json\">{\n  \"dap\": {\n    \"CodeLLDB\": {\n      \"binary\": \"/Users/name/bin/lldb-dap\",\n      \"args\": [\"--wait-for-debugger\"]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"theme\"><a class=\"header\" href=\"#theme\">Theme</a></h2>\n<p>The Debugger supports the following theme options:</p>\n<ul>\n<li><code>debugger.accent</code>: Color used to accent breakpoint &amp; breakpoint-related symbols</li>\n<li><code>editor.debugger_active_line.background</code>: Background color of active debug line</li>\n</ul>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<p>If you're running into problems with the debugger, please <a href=\"https://github.com/zed-industries/zed/issues/new?template=04_bug_debugger.yml\">open a GitHub issue</a> or <a href=\"https://cal.com/team/zed-research/debugger\">schedule an onboarding call</a> with us so we can help understand and fix your issue.</p>\n<p>There are also some features you can use to gather more information about the problem:</p>\n<ul>\n<li>When you have a session running in the debug panel, you can run the <code class=\"hljs\">dev: copy debug adapter arguments</code> action to copy a JSON blob to the clipboard that describes how Zed initialized the session. This is especially useful when the session failed to start, and is great context to add if you open a GitHub issue.</li>\n<li>You can also use the <code class=\"hljs\">dev: open debug adapter logs</code> action to see a trace of all of Zed's communications with debug adapters during the most recent debug sessions.</li>\n</ul>\n\n</main>",
    "content_text": "Debugger\nZed uses the Debug Adapter Protocol (DAP) to provide debugging functionality across multiple programming languages.\nDAP is a standardized protocol that defines how debuggers, editors, and IDEs communicate with each other.\nIt allows Zed to support various debuggers without needing to implement language-specific debugging logic.\nZed implements the client side of the protocol, and various debug adapters implement the server side.\nThis protocol enables features like setting breakpoints, stepping through code, inspecting variables,\nand more, in a consistent manner across different programming languages and runtime environments.\nSupported Languages\nTo debug code written in a specific language, Zed needs to find a debug adapter for that language. Some debug adapters are provided by Zed without additional setup, and some are provided by language extensions. The following languages currently have debug adapters available:\n\n\nC (built-in)\nC++ (built-in)\nGo (built-in)\nJavaScript (built-in)\nPHP (built-in)\nPython (built-in)\nRuby (provided by extension)\nRust (built-in)\nSwift (provided by extension)\nTypeScript (built-in)\n\n\nIf your language isn't listed, you can contribute by adding a debug adapter for it. Check out our debugger extensions documentation for more information.\n\nFollow those links for language- and adapter-specific information and examples, or read on for more about Zed's general debugging features that apply to all adapters.\nGetting Started\nFor most languages, the fastest way to get started is to run debugger: start (f4|f4). This opens the new process modal, which shows you a contextual list of preconfigured debug tasks for the current project. Debug tasks are created from tests, entry points (like a main function), and from other sources — consult the documentation for your language for full information about what's supported.\nYou can open the same modal by clicking the \"plus\" button at the top right of the debug panel.\nFor languages that don't provide preconfigured debug tasks (this includes C, C++, and some extension-supported languages), you can define debug configurations in the .zed/debug.json file in your project root. This file should be an array of configuration objects:\n[\n  {\n    \"adapter\": \"CodeLLDB\",\n    \"label\": \"First configuration\"\n    // ...\n  },\n  {\n    \"adapter\": \"Debugpy\",\n    \"label\": \"Second configuration\"\n    // ...\n  }\n]\n\nCheck the documentation for your language for example configurations covering typical use-cases. Once you've added configurations to .zed/debug.json, they'll appear in the list in the new process modal.\nZed will also load debug configurations from .vscode/launch.json, and show them in the new process modal if no configurations are found in .zed/debug.json.\nLaunching & Attaching\nZed debugger offers two ways to debug your program; you can either launch a new instance of your program or attach to an existing process.\nWhich one you choose depends on what you are trying to achieve.\nWhen launching a new instance, Zed (and the underlying debug adapter) can often do a better job at picking up the debug information compared to attaching to an existing process, since it controls the lifetime of a whole program.\nRunning unit tests or a debug build of your application is a good use case for launching.\nCompared to launching, attaching to an existing process might seem inferior, but that's far from truth; there are cases where you cannot afford to restart your program, because for example, the bug is not reproducible outside of a production environment or some other circumstances.\nConfiguration\nWhile configuration fields are debug adapter-dependent, most adapters support the following fields:\n[\n  {\n    // The label for the debug configuration and used to identify the debug session inside the debug panel & new process modal\n    \"label\": \"Example Start debugger config\",\n    // The debug adapter that Zed should use to debug the program\n    \"adapter\": \"Example adapter name\",\n    // Request:\n    //  - launch: Zed will launch the program if specified, or show a debug terminal with the right configuration\n    //  - attach: Zed will attach to a running program to debug it, or when the process_id is not specified, will show a process picker (only supported for node currently)\n    \"request\": \"launch\",\n    // The program to debug. This field supports path resolution with ~ or . symbols.\n    \"program\": \"path_to_program\",\n    // cwd: defaults to the current working directory of your project ($ZED_WORKTREE_ROOT)\n    \"cwd\": \"$ZED_WORKTREE_ROOT\"\n  }\n]\n\nAll configuration fields support task variables.\nBuild tasks\nZed also allows embedding a Zed task in a build field that is run before the debugger starts. This is useful for setting up the environment or running any necessary setup steps before the debugger starts.\n[\n  {\n    \"label\": \"Build Binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"program\": \"path_to_program\",\n    \"request\": \"launch\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"build\", \"-j8\"]\n    }\n  }\n]\n\nBuild tasks can also refer to the existing tasks by unsubstituted label:\n[\n  {\n    \"label\": \"Build Binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"program\": \"path_to_program\",\n    \"request\": \"launch\",\n    \"build\": \"my build task\" // Or \"my build task for $ZED_FILE\"\n  }\n]\n\nAutomatic scenario creation\nGiven a Zed task, Zed can automatically create a scenario for you. Automatic scenario creation also powers our scenario creation from gutter.\nAutomatic scenario creation is currently supported for Rust, Go, Python, JavaScript, and TypeScript.\nBreakpoints\nTo set a breakpoint, simply click next to the line number in the editor gutter.\nBreakpoints can be tweaked depending on your needs; to access additional options of a given breakpoint, right-click on the breakpoint icon in the gutter and select the desired option.\nAt present, you can:\n\nAdd a log to a breakpoint, which will output a log message whenever that breakpoint is hit.\nMake the breakpoint conditional, which will only stop at the breakpoint when the condition is met. The syntax for conditions is adapter-specific.\nAdd a hit count to a breakpoint, which will only stop at the breakpoint after it's hit a certain number of times.\nDisable a breakpoint, which will prevent it from being hit while leaving it visible in the gutter.\n\nSome debug adapters (e.g. CodeLLDB and JavaScript) will also verify whether your breakpoints can be hit; breakpoints that cannot be hit are surfaced more prominently in the UI.\nAll breakpoints enabled for a given project are also listed in \"Breakpoints\" item in your debugging session UI. From \"Breakpoints\" item in your UI you can also manage exception breakpoints.\nThe debug adapter will then stop whenever an exception of a given kind occurs. Which exception types are supported depends on the debug adapter.\nSettings\nThe settings for the debugger are grouped under the debugger key in settings.json:\n\ndock: Determines the position of the debug panel in the UI.\nstepping_granularity: Determines the stepping granularity.\nsave_breakpoints: Whether the breakpoints should be reused across Zed sessions.\nbutton: Whether to show the debug button in the status bar.\ntimeout: Time in milliseconds until timeout error when connecting to a TCP debug adapter.\nlog_dap_communications: Whether to log messages between active debug adapters and Zed.\nformat_dap_log_messages: Whether to format DAP messages when adding them to the debug adapter logger.\n\nDock\n\nDescription: The position of the debug panel in the UI.\nDefault: bottom\nSetting: debugger.dock\n\nOptions\n\nleft - The debug panel will be docked to the left side of the UI.\nright - The debug panel will be docked to the right side of the UI.\nbottom - The debug panel will be docked to the bottom of the UI.\n\n\"debugger\": {\n  \"dock\": \"bottom\"\n},\n\nStepping granularity\n\nDescription: The Step granularity that the debugger will use\nDefault: line\nSetting: debugger.stepping_granularity\n\nOptions\n\nStatement - The step should allow the program to run until the current statement has finished executing.\nThe meaning of a statement is determined by the adapter and it may be considered equivalent to a line.\nFor example 'for(int i = 0; i < 10; i++)' could be considered to have 3 statements 'int i = 0', 'i < 10', and 'i++'.\n\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"statement\"\n  }\n}\n\n\nLine - The step should allow the program to run until the current source line has executed.\n\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"line\"\n  }\n}\n\n\nInstruction - The step should allow one instruction to execute (e.g. one x86 instruction).\n\n{\n  \"debugger\": {\n    \"stepping_granularity\": \"instruction\"\n  }\n}\n\nSave Breakpoints\n\nDescription: Whether the breakpoints should be saved across Zed sessions.\nDefault: true\nSetting: debugger.save_breakpoints\n\nOptions\nboolean values\n{\n  \"debugger\": {\n    \"save_breakpoints\": true\n  }\n}\n\nButton\n\nDescription: Whether the button should be displayed in the debugger toolbar.\nDefault: true\nSetting: debugger.show_button\n\nOptions\nboolean values\n{\n  \"debugger\": {\n    \"show_button\": true\n  }\n}\n\nTimeout\n\nDescription: Time in milliseconds until timeout error when connecting to a TCP debug adapter.\nDefault: 2000\nSetting: debugger.timeout\n\nOptions\ninteger values\n{\n  \"debugger\": {\n    \"timeout\": 3000\n  }\n}\n\nInline Values\n\nDescription: Whether to enable editor inlay hints showing the values of variables in your code during debugging sessions.\nDefault: true\nSetting: inlay_hints.show_value_hints\n\nOptions\n{\n  \"inlay_hints\": {\n    \"show_value_hints\": false\n  }\n}\n\nInline value hints can also be toggled from the Editor Controls menu in the editor toolbar.\nLog Dap Communications\n\nDescription: Whether to log messages between active debug adapters and Zed. (Used for DAP development)\nDefault: false\nSetting: debugger.log_dap_communications\n\nOptions\nboolean values\n{\n  \"debugger\": {\n    \"log_dap_communications\": true\n  }\n}\n\nFormat Dap Log Messages\n\nDescription: Whether to format DAP messages when adding them to the debug adapter logger. (Used for DAP development)\nDefault: false\nSetting: debugger.format_dap_log_messages\n\nOptions\nboolean values\n{\n  \"debugger\": {\n    \"format_dap_log_messages\": true\n  }\n}\n\nCustomizing Debug Adapters\n\nDescription: Custom program path and arguments to override how Zed launches a specific debug adapter.\nDefault: Adapter-specific\nSetting: dap.$ADAPTER.binary and dap.$ADAPTER.args\n\nYou can pass binary, args, or both. binary should be a path to a debug adapter (like lldb-dap) not a debugger (like lldb itself). The args setting overrides any arguments that Zed would otherwise pass to the adapter.\n{\n  \"dap\": {\n    \"CodeLLDB\": {\n      \"binary\": \"/Users/name/bin/lldb-dap\",\n      \"args\": [\"--wait-for-debugger\"]\n    }\n  }\n}\n\nTheme\nThe Debugger supports the following theme options:\n\ndebugger.accent: Color used to accent breakpoint & breakpoint-related symbols\neditor.debugger_active_line.background: Background color of active debug line\n\nTroubleshooting\nIf you're running into problems with the debugger, please open a GitHub issue or schedule an onboarding call with us so we can help understand and fix your issue.\nThere are also some features you can use to gather more information about the problem:\n\nWhen you have a session running in the debug panel, you can run the dev: copy debug adapter arguments action to copy a JSON blob to the clipboard that describes how Zed initialized the session. This is especially useful when the session failed to start, and is great context to add if you open a GitHub issue.\nYou can also use the dev: open debug adapter logs action to see a trace of all of Zed's communications with debug adapters during the most recent debug sessions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:48"
  },
  "diagnostics.html": {
    "url": "https://zed.dev/docs/diagnostics.html",
    "title": "Diagnostics | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\">Diagnostics</a></h1>\n<p>Zed gets its diagnostics from the language servers and supports both push and pull variants of the LSP which makes it compatible with all existing language servers.</p>\n<h1 id=\"regular-diagnostics\"><a class=\"header\" href=\"#regular-diagnostics\">Regular diagnostics</a></h1>\n<p>By default, Zed displays all diagnostics as underlined text in the editor and the scrollbar.</p>\n<p>Editor diagnostics could be filtered with the</p>\n<pre><code class=\"language-json5\">\"diagnostics_max_severity\": null\n</code></pre>\n<p>editor setting (possible values: <code>\"off\"</code>, <code>\"error\"</code>, <code>\"warning\"</code>, <code>\"info\"</code>, <code>\"hint\"</code>, <code>null</code> (default, all diagnostics)).</p>\n<p>The scrollbar ones are configured with the</p>\n<pre><code class=\"language-json5\">\"scrollbar\": {\n  \"diagnostics\": \"all\",\n}\n</code></pre>\n<p>configuration (possible values: <code>\"none\"</code>, <code>\"error\"</code>, <code>\"warning\"</code>, <code>\"information\"</code>, <code>\"all\"</code> (default))</p>\n<p>The diagnostics could be hovered to display a tooltip with full, rendered diagnostic message.\nOr, <code>editor::GoToDiagnostic</code> and <code>editor::GoToPreviousDiagnostic</code> could be used to navigate between diagnostics in the editor, showing a popover for the currently active diagnostic.</p>\n<h1 id=\"inline-diagnostics-error-lens\"><a class=\"header\" href=\"#inline-diagnostics-error-lens\">Inline diagnostics (Error lens)</a></h1>\n<p>Zed supports showing diagnostic as lens to the right of the code.\nThis is disabled by default, but can either be temporarily turned on (or off) using the editor menu, or permanently, using the</p>\n<pre><code class=\"language-json5\">\"diagnostics\": {\n  \"inline\": {\n    \"enabled\": true,\n    \"max_severity\": null, // same values as the `diagnostics_max_severity` from the editor settings\n  }\n}\n</code></pre>\n<h1 id=\"other-ui-places\"><a class=\"header\" href=\"#other-ui-places\">Other UI places</a></h1>\n<h2 id=\"project-panel\"><a class=\"header\" href=\"#project-panel\">Project Panel</a></h2>\n<p>Project panel can have its entries coloured based on the severity of the diagnostics in the file.</p>\n<p>To configure, use</p>\n<pre><code class=\"language-json5\">\"project_panel\": {\n  \"show_diagnostics\": \"all\",\n}\n</code></pre>\n<p>configuration (possible values: <code>\"off\"</code>, <code>\"errors\"</code>, <code>\"all\"</code> (default))</p>\n<h2 id=\"editor-tabs\"><a class=\"header\" href=\"#editor-tabs\">Editor tabs</a></h2>\n<p>Similar to the project panel, editor tabs can be colorized with the</p>\n<pre><code class=\"language-json5\">\"tabs\": {\n  \"show_diagnostics\": \"off\",\n}\n</code></pre>\n<p>configuration (possible values: <code>\"off\"</code> (default), <code>\"errors\"</code>, <code>\"all\"</code>)</p>\n\n</main>",
    "content_text": "Diagnostics\nZed gets its diagnostics from the language servers and supports both push and pull variants of the LSP which makes it compatible with all existing language servers.\nRegular diagnostics\nBy default, Zed displays all diagnostics as underlined text in the editor and the scrollbar.\nEditor diagnostics could be filtered with the\n\"diagnostics_max_severity\": null\n\neditor setting (possible values: \"off\", \"error\", \"warning\", \"info\", \"hint\", null (default, all diagnostics)).\nThe scrollbar ones are configured with the\n\"scrollbar\": {\n  \"diagnostics\": \"all\",\n}\n\nconfiguration (possible values: \"none\", \"error\", \"warning\", \"information\", \"all\" (default))\nThe diagnostics could be hovered to display a tooltip with full, rendered diagnostic message.\nOr, editor::GoToDiagnostic and editor::GoToPreviousDiagnostic could be used to navigate between diagnostics in the editor, showing a popover for the currently active diagnostic.\nInline diagnostics (Error lens)\nZed supports showing diagnostic as lens to the right of the code.\nThis is disabled by default, but can either be temporarily turned on (or off) using the editor menu, or permanently, using the\n\"diagnostics\": {\n  \"inline\": {\n    \"enabled\": true,\n    \"max_severity\": null, // same values as the `diagnostics_max_severity` from the editor settings\n  }\n}\n\nOther UI places\nProject Panel\nProject panel can have its entries coloured based on the severity of the diagnostics in the file.\nTo configure, use\n\"project_panel\": {\n  \"show_diagnostics\": \"all\",\n}\n\nconfiguration (possible values: \"off\", \"errors\", \"all\" (default))\nEditor tabs\nSimilar to the project panel, editor tabs can be colorized with the\n\"tabs\": {\n  \"show_diagnostics\": \"off\",\n}\n\nconfiguration (possible values: \"off\" (default), \"errors\", \"all\")",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:50"
  },
  "tasks.html": {
    "url": "https://zed.dev/docs/tasks.html",
    "title": "Tasks | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"tasks\"><a class=\"header\" href=\"#tasks\">Tasks</a></h1>\n<p>Zed supports ways to spawn (and rerun) commands using its integrated terminal to output the results. These commands can read a limited subset of Zed state (such as a path to the file currently being edited or selected text).</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Example task\",\n    \"command\": \"for i in {1..5}; do echo \\\"Hello $i/5\\\"; sleep 1; done\",\n    //\"args\": [],\n    // Env overrides for the command, will be appended to the terminal's environment from the settings.\n    \"env\": { \"foo\": \"bar\" },\n    // Current working directory to spawn the command into, defaults to current project root.\n    //\"cwd\": \"/path/to/working/directory\",\n    // Whether to use a new terminal tab or reuse the existing one to spawn the process, defaults to `false`.\n    \"use_new_terminal\": false,\n    // Whether to allow multiple instances of the same task to be run, or rather wait for the existing ones to finish, defaults to `false`.\n    \"allow_concurrent_runs\": false,\n    // What to do with the terminal pane and tab, after the command was started:\n    // * `always` — always show the task's pane, and focus the corresponding tab in it (default)\n    // * `no_focus` — always show the task's pane, add the task's tab in it, but don't focus it\n    // * `never` — do not alter focus, but still add/reuse the task's tab in its pane\n    \"reveal\": \"always\",\n    // What to do with the terminal pane and tab, after the command has finished:\n    // * `never` — Do nothing when the command finishes (default)\n    // * `always` — always hide the terminal tab, hide the pane also if it was the last tab in it\n    // * `on_success` — hide the terminal tab on task success only, otherwise behaves similar to `always`\n    \"hide\": \"never\",\n    // Which shell to use when running a task inside the terminal.\n    // May take 3 values:\n    // 1. (default) Use the system's default terminal configuration in /etc/passwd\n    //      \"shell\": \"system\"\n    // 2. A program:\n    //      \"shell\": {\n    //        \"program\": \"sh\"\n    //      }\n    // 3. A program with arguments:\n    //     \"shell\": {\n    //         \"with_arguments\": {\n    //           \"program\": \"/bin/bash\",\n    //           \"args\": [\"--login\"]\n    //         }\n    //     }\n    \"shell\": \"system\",\n    // Whether to show the task line in the output of the spawned task, defaults to `true`.\n    \"show_summary\": true,\n    // Whether to show the command line in the output of the spawned task, defaults to `true`.\n    \"show_output\": true\n    // Represents the tags for inline runnable indicators, or spawning multiple tasks at once.\n    // \"tags\": []\n  }\n]\n</code></pre>\n<p>There are two actions that drive the workflow of using tasks: <code>task: spawn</code> and <code>task: rerun</code>.\n<code>task: spawn</code> opens a modal with all available tasks in the current file.\n<code>task: rerun</code> reruns the most recently spawned task. You can also rerun tasks from the task modal.</p>\n<p>By default, rerunning tasks reuses the same terminal (due to the <code>\"use_new_terminal\": false</code> default) but waits for the previous task to finish before starting (due to the <code>\"allow_concurrent_runs\": false</code> default).</p>\n<p>Keep <code>\"use_new_terminal\": false</code> and set <code>\"allow_concurrent_runs\": true</code> to allow cancelling previous tasks on rerun.</p>\n<h2 id=\"task-templates\"><a class=\"header\" href=\"#task-templates\">Task templates</a></h2>\n<p>Tasks can be defined:</p>\n<ul>\n<li>in the global <code>tasks.json</code> file; such tasks are available in all Zed projects you work on. This file is usually located in <code>~/.config/zed/tasks.json</code>. You can edit them by using the <code>zed: open tasks</code> action.</li>\n<li>in the worktree-specific (local) <code>.zed/tasks.json</code> file; such tasks are available only when working on a project with that worktree included. You can edit worktree-specific tasks by using the <code>zed: open project tasks</code> action.</li>\n<li>on the fly with <a href=\"#oneshot-tasks\">oneshot tasks</a>. These tasks are project-specific and do not persist across sessions.</li>\n<li>by language extension.</li>\n</ul>\n<h2 id=\"variables\"><a class=\"header\" href=\"#variables\">Variables</a></h2>\n<p>Zed tasks act just like your shell; that also means that you can reference environmental variables via sh-esque <code>$VAR_NAME</code> syntax. A couple of additional environmental variables are set for your convenience.\nThese variables allow you to pull information from the current editor and use it in your tasks. The following variables are available:</p>\n<ul>\n<li><code>ZED_COLUMN</code>: current line column</li>\n<li><code>ZED_ROW</code>: current line row</li>\n<li><code>ZED_FILE</code>: absolute path of the currently opened file (e.g. <code>/Users/my-user/path/to/project/src/main.rs</code>)</li>\n<li><code>ZED_FILENAME</code>: filename of the currently opened file (e.g. <code>main.rs</code>)</li>\n<li><code>ZED_DIRNAME</code>: absolute path of the currently opened file with file name stripped (e.g. <code>/Users/my-user/path/to/project/src</code>)</li>\n<li><code>ZED_RELATIVE_FILE</code>: path of the currently opened file, relative to <code>ZED_WORKTREE_ROOT</code> (e.g. <code>src/main.rs</code>)</li>\n<li><code>ZED_RELATIVE_DIR</code>: path of the currently opened file's directory, relative to <code>ZED_WORKTREE_ROOT</code> (e.g. <code>src</code>)</li>\n<li><code>ZED_STEM</code>: stem (filename without extension) of the currently opened file (e.g. <code>main</code>)</li>\n<li><code>ZED_SYMBOL</code>: currently selected symbol; should match the last symbol shown in a symbol breadcrumb (e.g. <code>mod tests &gt; fn test_task_contexts</code>)</li>\n<li><code>ZED_SELECTED_TEXT</code>: currently selected text</li>\n<li><code>ZED_WORKTREE_ROOT</code>: absolute path to the root of the current worktree. (e.g. <code>/Users/my-user/path/to/project</code>)</li>\n<li><code>ZED_CUSTOM_RUST_PACKAGE</code>: (Rust-specific) name of the parent package of $ZED_FILE source file.</li>\n</ul>\n<p>To use a variable in a task, prefix it with a dollar sign (<code>$</code>):</p>\n<pre><code class=\"language-json\">{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\"\n}\n</code></pre>\n<p>You can also use verbose syntax that allows specifying a default if a given variable is not available: <code>${ZED_FILE:default_value}</code></p>\n<p>These environmental variables can also be used in tasks' <code>cwd</code>, <code>args</code>, and <code>label</code> fields.</p>\n<h3 id=\"variable-quoting\"><a class=\"header\" href=\"#variable-quoting\">Variable Quoting</a></h3>\n<p>When working with paths containing spaces or other special characters, please ensure variables are properly escaped.</p>\n<p>For example, instead of this (which will fail if the path has a space):</p>\n<pre><code class=\"language-json\">{\n  \"label\": \"stat current file\",\n  \"command\": \"stat $ZED_FILE\"\n}\n</code></pre>\n<p>Provide the following:</p>\n<pre><code class=\"language-json\">{\n  \"label\": \"stat current file\",\n  \"command\": \"stat\",\n  \"args\": [\"$ZED_FILE\"]\n}\n</code></pre>\n<p>Or explicitly include escaped quotes like so:</p>\n<pre><code class=\"language-json\">{\n  \"label\": \"stat current file\",\n  \"command\": \"stat \\\"$ZED_FILE\\\"\"\n}\n</code></pre>\n<h2 id=\"oneshot-tasks\"><a class=\"header\" href=\"#oneshot-tasks\">Oneshot tasks</a></h2>\n<p>The same task modal opened via <code>task: spawn</code> supports arbitrary bash-like command execution: type a command inside the modal text field, and use <code>opt-enter</code> to spawn it.</p>\n<p>The task modal persists these ad-hoc commands for the duration of the session, <code>task: rerun</code> will also rerun such tasks if they were the last ones spawned.</p>\n<p>You can also adjust the currently selected task in a modal (<code>tab</code> is the default key binding). Doing so will put its command into a prompt that can then be edited &amp; spawned as a oneshot task.</p>\n<h3 id=\"ephemeral-tasks\"><a class=\"header\" href=\"#ephemeral-tasks\">Ephemeral tasks</a></h3>\n<p>You can use the <code>cmd</code> modifier when spawning a task via a modal; tasks spawned this way will not have their usage count increased (thus, they will not be respawned with <code>task: rerun</code> and they won't have a high rank in the task modal).\nThe intended use of ephemeral tasks is to stay in the flow with continuous <code>task: rerun</code> usage.</p>\n<h2 id=\"custom-keybindings-for-tasks\"><a class=\"header\" href=\"#custom-keybindings-for-tasks\">Custom keybindings for tasks</a></h2>\n<p>You can define your own keybindings for your tasks via an additional argument to <code>task::Spawn</code>. If you wanted to bind the aforementioned <code>echo current file's path</code> task to <code>alt-g</code>, you would add the following snippet in your <a href=\"./key-bindings.html\"><code>keymap.json</code></a> file:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"alt-g\": [\"task::Spawn\", { \"task_name\": \"echo current file's path\" }]\n  }\n}\n</code></pre>\n<p>Note that these tasks can also have a 'target' specified to control where the spawned task should show up.\nThis could be useful for launching a terminal application that you want to use in the center area:</p>\n<pre><code class=\"language-json\">// In tasks.json\n{\n  \"label\": \"start lazygit\",\n  \"command\": \"lazygit -p $ZED_WORKTREE_ROOT\"\n}\n</code></pre>\n<pre><code class=\"language-json\">// In keymap.json\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"alt-g\": [\n      \"task::Spawn\",\n      { \"task_name\": \"start lazygit\", \"reveal_target\": \"center\" }\n    ]\n  }\n}\n</code></pre>\n<h2 id=\"binding-runnable-tags-to-task-templates\"><a class=\"header\" href=\"#binding-runnable-tags-to-task-templates\">Binding runnable tags to task templates</a></h2>\n<p>Zed supports overriding the default action for inline runnable indicators via workspace-local and global <code>tasks.json</code> file with the following precedence hierarchy:</p>\n<ol>\n<li>Workspace <code>tasks.json</code></li>\n<li>Global <code>tasks.json</code></li>\n<li>Language-provided tag bindings (default).</li>\n</ol>\n<p>To tag a task, add the runnable tag name to the <code>tags</code> field on the task template:</p>\n<pre><code class=\"language-json\">{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\",\n  \"tags\": [\"rust-test\"]\n}\n</code></pre>\n<p>In doing so, you can change which task is shown in the runnables indicator.</p>\n<h2 id=\"keybindings-to-run-tasks-bound-to-runnables\"><a class=\"header\" href=\"#keybindings-to-run-tasks-bound-to-runnables\">Keybindings to run tasks bound to runnables</a></h2>\n<p>When you have a task definition that is bound to the runnable, you can quickly run it using <a href=\"https://zed.dev/docs/configuring-languages?#code-actions\">Code Actions</a> that you can trigger either via <code>editor: Toggle Code Actions</code> command or by the <code>cmd-.</code>/<code>ctrl-.</code> shortcut. Your task will be the first in the dropdown. The task will run immediately if there are no additional Code Actions for this line.</p>\n\n</main>",
    "content_text": "Tasks\nZed supports ways to spawn (and rerun) commands using its integrated terminal to output the results. These commands can read a limited subset of Zed state (such as a path to the file currently being edited or selected text).\n[\n  {\n    \"label\": \"Example task\",\n    \"command\": \"for i in {1..5}; do echo \\\"Hello $i/5\\\"; sleep 1; done\",\n    //\"args\": [],\n    // Env overrides for the command, will be appended to the terminal's environment from the settings.\n    \"env\": { \"foo\": \"bar\" },\n    // Current working directory to spawn the command into, defaults to current project root.\n    //\"cwd\": \"/path/to/working/directory\",\n    // Whether to use a new terminal tab or reuse the existing one to spawn the process, defaults to `false`.\n    \"use_new_terminal\": false,\n    // Whether to allow multiple instances of the same task to be run, or rather wait for the existing ones to finish, defaults to `false`.\n    \"allow_concurrent_runs\": false,\n    // What to do with the terminal pane and tab, after the command was started:\n    // * `always` — always show the task's pane, and focus the corresponding tab in it (default)\n    // * `no_focus` — always show the task's pane, add the task's tab in it, but don't focus it\n    // * `never` — do not alter focus, but still add/reuse the task's tab in its pane\n    \"reveal\": \"always\",\n    // What to do with the terminal pane and tab, after the command has finished:\n    // * `never` — Do nothing when the command finishes (default)\n    // * `always` — always hide the terminal tab, hide the pane also if it was the last tab in it\n    // * `on_success` — hide the terminal tab on task success only, otherwise behaves similar to `always`\n    \"hide\": \"never\",\n    // Which shell to use when running a task inside the terminal.\n    // May take 3 values:\n    // 1. (default) Use the system's default terminal configuration in /etc/passwd\n    //      \"shell\": \"system\"\n    // 2. A program:\n    //      \"shell\": {\n    //        \"program\": \"sh\"\n    //      }\n    // 3. A program with arguments:\n    //     \"shell\": {\n    //         \"with_arguments\": {\n    //           \"program\": \"/bin/bash\",\n    //           \"args\": [\"--login\"]\n    //         }\n    //     }\n    \"shell\": \"system\",\n    // Whether to show the task line in the output of the spawned task, defaults to `true`.\n    \"show_summary\": true,\n    // Whether to show the command line in the output of the spawned task, defaults to `true`.\n    \"show_output\": true\n    // Represents the tags for inline runnable indicators, or spawning multiple tasks at once.\n    // \"tags\": []\n  }\n]\n\nThere are two actions that drive the workflow of using tasks: task: spawn and task: rerun.\ntask: spawn opens a modal with all available tasks in the current file.\ntask: rerun reruns the most recently spawned task. You can also rerun tasks from the task modal.\nBy default, rerunning tasks reuses the same terminal (due to the \"use_new_terminal\": false default) but waits for the previous task to finish before starting (due to the \"allow_concurrent_runs\": false default).\nKeep \"use_new_terminal\": false and set \"allow_concurrent_runs\": true to allow cancelling previous tasks on rerun.\nTask templates\nTasks can be defined:\n\nin the global tasks.json file; such tasks are available in all Zed projects you work on. This file is usually located in ~/.config/zed/tasks.json. You can edit them by using the zed: open tasks action.\nin the worktree-specific (local) .zed/tasks.json file; such tasks are available only when working on a project with that worktree included. You can edit worktree-specific tasks by using the zed: open project tasks action.\non the fly with oneshot tasks. These tasks are project-specific and do not persist across sessions.\nby language extension.\n\nVariables\nZed tasks act just like your shell; that also means that you can reference environmental variables via sh-esque $VAR_NAME syntax. A couple of additional environmental variables are set for your convenience.\nThese variables allow you to pull information from the current editor and use it in your tasks. The following variables are available:\n\nZED_COLUMN: current line column\nZED_ROW: current line row\nZED_FILE: absolute path of the currently opened file (e.g. /Users/my-user/path/to/project/src/main.rs)\nZED_FILENAME: filename of the currently opened file (e.g. main.rs)\nZED_DIRNAME: absolute path of the currently opened file with file name stripped (e.g. /Users/my-user/path/to/project/src)\nZED_RELATIVE_FILE: path of the currently opened file, relative to ZED_WORKTREE_ROOT (e.g. src/main.rs)\nZED_RELATIVE_DIR: path of the currently opened file's directory, relative to ZED_WORKTREE_ROOT (e.g. src)\nZED_STEM: stem (filename without extension) of the currently opened file (e.g. main)\nZED_SYMBOL: currently selected symbol; should match the last symbol shown in a symbol breadcrumb (e.g. mod tests > fn test_task_contexts)\nZED_SELECTED_TEXT: currently selected text\nZED_WORKTREE_ROOT: absolute path to the root of the current worktree. (e.g. /Users/my-user/path/to/project)\nZED_CUSTOM_RUST_PACKAGE: (Rust-specific) name of the parent package of $ZED_FILE source file.\n\nTo use a variable in a task, prefix it with a dollar sign ($):\n{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\"\n}\n\nYou can also use verbose syntax that allows specifying a default if a given variable is not available: ${ZED_FILE:default_value}\nThese environmental variables can also be used in tasks' cwd, args, and label fields.\nVariable Quoting\nWhen working with paths containing spaces or other special characters, please ensure variables are properly escaped.\nFor example, instead of this (which will fail if the path has a space):\n{\n  \"label\": \"stat current file\",\n  \"command\": \"stat $ZED_FILE\"\n}\n\nProvide the following:\n{\n  \"label\": \"stat current file\",\n  \"command\": \"stat\",\n  \"args\": [\"$ZED_FILE\"]\n}\n\nOr explicitly include escaped quotes like so:\n{\n  \"label\": \"stat current file\",\n  \"command\": \"stat \\\"$ZED_FILE\\\"\"\n}\n\nOneshot tasks\nThe same task modal opened via task: spawn supports arbitrary bash-like command execution: type a command inside the modal text field, and use opt-enter to spawn it.\nThe task modal persists these ad-hoc commands for the duration of the session, task: rerun will also rerun such tasks if they were the last ones spawned.\nYou can also adjust the currently selected task in a modal (tab is the default key binding). Doing so will put its command into a prompt that can then be edited & spawned as a oneshot task.\nEphemeral tasks\nYou can use the cmd modifier when spawning a task via a modal; tasks spawned this way will not have their usage count increased (thus, they will not be respawned with task: rerun and they won't have a high rank in the task modal).\nThe intended use of ephemeral tasks is to stay in the flow with continuous task: rerun usage.\nCustom keybindings for tasks\nYou can define your own keybindings for your tasks via an additional argument to task::Spawn. If you wanted to bind the aforementioned echo current file's path task to alt-g, you would add the following snippet in your keymap.json file:\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"alt-g\": [\"task::Spawn\", { \"task_name\": \"echo current file's path\" }]\n  }\n}\n\nNote that these tasks can also have a 'target' specified to control where the spawned task should show up.\nThis could be useful for launching a terminal application that you want to use in the center area:\n// In tasks.json\n{\n  \"label\": \"start lazygit\",\n  \"command\": \"lazygit -p $ZED_WORKTREE_ROOT\"\n}\n\n// In keymap.json\n{\n  \"context\": \"Workspace\",\n  \"bindings\": {\n    \"alt-g\": [\n      \"task::Spawn\",\n      { \"task_name\": \"start lazygit\", \"reveal_target\": \"center\" }\n    ]\n  }\n}\n\nBinding runnable tags to task templates\nZed supports overriding the default action for inline runnable indicators via workspace-local and global tasks.json file with the following precedence hierarchy:\n\nWorkspace tasks.json\nGlobal tasks.json\nLanguage-provided tag bindings (default).\n\nTo tag a task, add the runnable tag name to the tags field on the task template:\n{\n  \"label\": \"echo current file's path\",\n  \"command\": \"echo $ZED_FILE\",\n  \"tags\": [\"rust-test\"]\n}\n\nIn doing so, you can change which task is shown in the runnables indicator.\nKeybindings to run tasks bound to runnables\nWhen you have a task definition that is bound to the runnable, you can quickly run it using Code Actions that you can trigger either via editor: Toggle Code Actions command or by the cmd-./ctrl-. shortcut. Your task will be the first in the dropdown. The task will run immediately if there are no additional Code Actions for this line.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:53"
  },
  "remote-development.html": {
    "url": "https://zed.dev/docs/remote-development.html",
    "title": "Remote Development | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"remote-development\"><a class=\"header\" href=\"#remote-development\">Remote Development</a></h1>\n<p>Remote Development allows you to code at the speed of thought, even when your codebase is not on your local machine. You use Zed locally so the UI is immediately responsive, but offload heavy computation to the development server so that you can work effectively.</p>\n<h2 id=\"overview\"><a class=\"header\" href=\"#overview\">Overview</a></h2>\n<p>Remote development requires two computers, your local machine that runs the Zed UI and the remote server which runs a Zed headless server. The two communicate over SSH, so you will need to be able to SSH from your local machine into the remote server to use this feature.</p>\n<p><img alt=\"Architectural overview of Zed Remote Development\" src=\"https://zed.dev/img/remote-development/diagram.png\"/></p>\n<p>On your local machine, Zed runs its UI, talks to language models, uses Tree-sitter to parse and syntax-highlight code, and store unsaved changes and recent projects. The source code, language servers, tasks, and the terminal all run on the remote server.</p>\n<blockquote>\n<p><strong>Note:</strong> The original version of remote development sent traffic via Zed's servers. As of Zed v0.157 you can no-longer use that mode.</p>\n</blockquote>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<ol>\n<li>Download and install the latest <a href=\"https://zed.dev/releases\">Zed</a>. You need at least Zed v0.159.</li>\n<li>Use <kbd class=\"keybinding\">ctrl-cmd-shift-o|alt-ctrl-shift-o</kbd> to open the \"Remote Projects\" dialog.</li>\n<li>Click \"Connect New Server\" and enter the command you use to SSH into the server. See <a href=\"#supported-ssh-options\">Supported SSH options</a> for options you can pass.</li>\n<li>Your local machine will attempt to connect to the remote server using the <code>ssh</code> binary on your path. Assuming the connection is successful, Zed will download the server on the remote host and start it.</li>\n<li>Once the Zed server is running, you will be prompted to choose a path to open on the remote server.\n<blockquote>\n<p><strong>Note:</strong> Zed does not currently handle opening very large directories (for example, <code>/</code> or <code>~</code> that may have &gt;100,000 files) very well. We are working on improving this, but suggest in the meantime opening only specific projects, or subfolders of very large mono-repos.</p>\n</blockquote>\n</li>\n</ol>\n<p>For simple cases where you don't need any SSH arguments, you can run <code>zed ssh://[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;]/&lt;path&gt;</code> to open a remote folder/file directly. If you'd like to hotlink into an SSH project, use a link of the format: <code>zed://ssh/[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;]/&lt;path&gt;</code>.</p>\n<h2 id=\"supported-platforms\"><a class=\"header\" href=\"#supported-platforms\">Supported platforms</a></h2>\n<p>The remote machine must be able to run Zed's server. The following platforms should work, though note that we have not exhaustively tested every Linux distribution:</p>\n<ul>\n<li>macOS Catalina or later (Intel or Apple Silicon)</li>\n<li>Linux (x86_64 or arm64, we do not yet support 32-bit platforms)</li>\n<li>Windows is not yet supported.</li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>The list of remote servers is stored in your settings file <kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>. You can edit this list using the Remote Projects dialog <kbd class=\"keybinding\">ctrl-cmd-shift-o|alt-ctrl-shift-o</kbd>, which provides some robustness - for example it checks that the connection can be established before writing it to the settings file.</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }]\n    }\n  ]\n}\n</code></pre>\n<p>Zed shells out to the <code>ssh</code> on your path, and so it will inherit any configuration you have in <code>~/.ssh/config</code> for the given host. That said, if you need to override anything you can configure the following additional options on each connection:</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      // any argument to pass to the ssh master process\n      \"args\": [\"-i\", \"~/.ssh/work_id_file\"],\n      \"port\": 22, // defaults to 22\n      // defaults to your username on your local machine\n      \"username\": \"me\"\n    }\n  ]\n}\n</code></pre>\n<p>There are two additional Zed-specific options per connection, <code>upload_binary_over_ssh</code> and <code>nickname</code>:</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      // by default Zed will download the server binary from the internet on the remote.\n      // When this is true, it'll be downloaded to your laptop and uploaded over SSH.\n      // This is useful when your remote server has restricted internet access.\n      \"upload_binary_over_ssh\": true,\n      // Shown in the Zed UI to help distinguish multiple hosts.\n      \"nickname\": \"lil-linux\"\n    }\n  ]\n}\n</code></pre>\n<p>If you use the command line to open a connection to a host by doing <code>zed ssh://192.168.1.10/~/.vimrc</code>, then extra options are read from your settings file by finding the first connection that matches the host/username/port of the URL on the command line.</p>\n<p>Additionally it's worth noting that while you can pass a password on the command line <code>zed ssh://user:password@host/~</code>, we do not support writing a password to your settings file. If you're connecting repeatedly to the same host, you should configure key-based authentication.</p>\n<h2 id=\"port-forwarding\"><a class=\"header\" href=\"#port-forwarding\">Port forwarding</a></h2>\n<p>If you'd like to be able to connect to ports on your remote server from your local machine, you can configure port forwarding in your settings file. This is particularly useful for developing websites so you can load the site in your browser while working.</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [{ \"local_port\": 8080, \"remote_port\": 80 }]\n    }\n  ]\n}\n</code></pre>\n<p>This will cause requests from your local machine to <code>localhost:8080</code> to be forwarded to the remote machine's port 80. Under the hood this uses the <code>-L</code> argument to ssh.</p>\n<p>By default these ports are bound to localhost, so other computers in the same network as your development machine cannot access them. You can set the local_host to bind to a different interface, for example, 0.0.0.0 will bind to all local interfaces.</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [\n        {\n          \"local_port\": 8080,\n          \"remote_port\": 80,\n          \"local_host\": \"0.0.0.0\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<p>These ports also default to the <code>localhost</code> interface on the remote host. If you need to change this, you can also set the remote host:</p>\n<pre><code class=\"language-json\">{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [\n        {\n          \"local_port\": 8080,\n          \"remote_port\": 80,\n          \"remote_host\": \"docker-host\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<h2 id=\"zed-settings\"><a class=\"header\" href=\"#zed-settings\">Zed settings</a></h2>\n<p>When opening a remote project there are three relevant settings locations:</p>\n<ul>\n<li>The local Zed settings (in <code>~/.zed/settings.json</code> on macOS or <code>~/.config/zed/settings.json</code> on Linux) on your local machine.</li>\n<li>The server Zed settings (in the same place) on the remote server.</li>\n<li>The project settings (in <code>.zed/settings.json</code> or <code>.editorconfig</code> of your project)</li>\n</ul>\n<p>Both the local Zed and the server Zed read the project settings, but they are not aware of the other's main <code>settings.json</code>.</p>\n<p>Depending on the kind of setting you want to make, which settings file you should use:</p>\n<ul>\n<li>Project settings should be used for things that affect the project: indentation settings, which formatter / language server to use, etc.</li>\n<li>Server settings should be used for things that affect the server: paths to language servers, etc.</li>\n<li>Local settings should be used for things that affect the UI: font size, etc.</li>\n</ul>\n<p>In addition any extensions you have installed locally will be propagated to the remote server. This means that language servers, etc. will run correctly.</p>\n<h2 id=\"initializing-the-remote-server\"><a class=\"header\" href=\"#initializing-the-remote-server\">Initializing the remote server</a></h2>\n<p>Once you provide the SSH options, Zed shells out to <code>ssh</code> on your local machine to create a ControlMaster connection with the options you provide.</p>\n<p>Any prompts that SSH needs will be shown in the UI, so you can verify host keys, type key passwords, etc.</p>\n<p>Once the master connection is established, Zed will check to see if the remote server binary is present in <code>~/.zed_server</code> on the remote, and that its version matches the current version of Zed that you're using.</p>\n<p>If it is not there or the version mismatches, Zed will try to download the latest version. By default, it will download from <code>https://zed.dev</code> directly, but if you set: <code>{\"upload_binary_over_ssh\":true}</code> in your settings for that server, it will download the binary to your local machine and then upload it to the remote server.</p>\n<p>If you'd like to maintain the server binary yourself you can. You can either download our prebuilt versions from <a href=\"https://github.com/zed-industries/zed/releases\">GitHub</a>, or <a href=\"https://zed.dev/docs/development\">build your own</a> with <code>cargo build -p remote_server --release</code>. If you do this, you must upload it to <code>~/.zed_server/zed-remote-server-{RELEASE_CHANNEL}-{VERSION}</code> on the server, for example <code>~/.zed_server/zed-remote-server-stable-0.181.6</code>. The version must exactly match the version of Zed itself you are using.</p>\n<h2 id=\"maintaining-the-ssh-connection\"><a class=\"header\" href=\"#maintaining-the-ssh-connection\">Maintaining the SSH connection</a></h2>\n<p>Once the server is initialized. Zed will create new SSH connections (reusing the existing ControlMaster) to run the remote development server.</p>\n<p>Each connection tries to run the development server in proxy mode. This mode will start the daemon if it is not running, and reconnect to it if it is. This way when your connection drops and is restarted, you can continue to work without interruption.</p>\n<p>In the case that reconnecting fails, the daemon will not be re-used. That said, unsaved changes are by default persisted locally, so that you do not lose work. You can always reconnect to the project at a later date and Zed will restore unsaved changes.</p>\n<p>If you are struggling with connection issues, you should be able to see more information in the Zed log <code>cmd-shift-p Open Log</code>. If you are seeing things that are unexpected, please file a <a href=\"https://github.com/zed-industries/zed/issues/new\">GitHub issue</a> or reach out in the #remoting-feedback channel in the <a href=\"https://zed.dev/community-links\">Zed Discord</a>.</p>\n<h2 id=\"supported-ssh-options\"><a class=\"header\" href=\"#supported-ssh-options\">Supported SSH Options</a></h2>\n<p>Under the hood, Zed shells out to the <code>ssh</code> binary to connect to the remote server. We create one SSH control master per project, and use then use that to multiplex SSH connections for the Zed protocol itself, any terminals you open and tasks you run. We read settings from your SSH config file, but if you want to specify additional options to the SSH control master you can configure Zed to set them.</p>\n<p>When typing in the \"Connect New Server\" dialog, you can use bash-style quoting to pass options containing a space. Once you have created a server it will be added to the <code>\"ssh_connections\": []</code> array in your settings file. You can edit the settings file directly to make changes to SSH connections.</p>\n<p>Supported options:</p>\n<ul>\n<li><code>-p</code> / <code>-l</code> - these are equivalent to passing the port and the username in the host string.</li>\n<li><code>-L</code> / <code>-R</code> for port forwarding</li>\n<li><code>-i</code> - to use a specific key file</li>\n<li><code>-o</code> - to set custom options</li>\n<li><code>-J</code> / <code>-w</code> - to proxy the SSH connection</li>\n<li><code>-F</code> for specifying an <code>ssh_config</code></li>\n<li>And also... <code>-4</code>, <code>-6</code>, <code>-A</code>, <code>-B</code>, <code>-C</code>, <code>-D</code>, <code>-I</code>, <code>-K</code>, <code>-P</code>, <code>-X</code>, <code>-Y</code>, <code>-a</code>, <code>-b</code>, <code>-c</code>, <code>-i</code>, <code>-k</code>, <code>-l</code>, <code>-m</code>, <code>-o</code>, <code>-p</code>, <code>-w</code>, <code>-x</code>, <code>-y</code></li>\n</ul>\n<p>Note that we deliberately disallow some options (for example <code>-t</code> or <code>-T</code>) that Zed will set for you.</p>\n<h2 id=\"known-limitations\"><a class=\"header\" href=\"#known-limitations\">Known Limitations</a></h2>\n<ul>\n<li>You can't open files from the remote Terminal by typing the <code>zed</code> command.</li>\n</ul>\n<h2 id=\"feedback\"><a class=\"header\" href=\"#feedback\">Feedback</a></h2>\n<p>Please join the #remoting-feedback channel in the <a href=\"https://zed.dev/community-links\">Zed Discord</a>.</p>\n\n</main>",
    "content_text": "Remote Development\nRemote Development allows you to code at the speed of thought, even when your codebase is not on your local machine. You use Zed locally so the UI is immediately responsive, but offload heavy computation to the development server so that you can work effectively.\nOverview\nRemote development requires two computers, your local machine that runs the Zed UI and the remote server which runs a Zed headless server. The two communicate over SSH, so you will need to be able to SSH from your local machine into the remote server to use this feature.\n\nOn your local machine, Zed runs its UI, talks to language models, uses Tree-sitter to parse and syntax-highlight code, and store unsaved changes and recent projects. The source code, language servers, tasks, and the terminal all run on the remote server.\n\nNote: The original version of remote development sent traffic via Zed's servers. As of Zed v0.157 you can no-longer use that mode.\n\nSetup\n\nDownload and install the latest Zed. You need at least Zed v0.159.\nUse ctrl-cmd-shift-o|alt-ctrl-shift-o to open the \"Remote Projects\" dialog.\nClick \"Connect New Server\" and enter the command you use to SSH into the server. See Supported SSH options for options you can pass.\nYour local machine will attempt to connect to the remote server using the ssh binary on your path. Assuming the connection is successful, Zed will download the server on the remote host and start it.\nOnce the Zed server is running, you will be prompted to choose a path to open on the remote server.\n\nNote: Zed does not currently handle opening very large directories (for example, / or ~ that may have >100,000 files) very well. We are working on improving this, but suggest in the meantime opening only specific projects, or subfolders of very large mono-repos.\n\n\n\nFor simple cases where you don't need any SSH arguments, you can run zed ssh://[<user>@]<host>[:<port>]/<path> to open a remote folder/file directly. If you'd like to hotlink into an SSH project, use a link of the format: zed://ssh/[<user>@]<host>[:<port>]/<path>.\nSupported platforms\nThe remote machine must be able to run Zed's server. The following platforms should work, though note that we have not exhaustively tested every Linux distribution:\n\nmacOS Catalina or later (Intel or Apple Silicon)\nLinux (x86_64 or arm64, we do not yet support 32-bit platforms)\nWindows is not yet supported.\n\nConfiguration\nThe list of remote servers is stored in your settings file cmd-,|ctrl-,. You can edit this list using the Remote Projects dialog ctrl-cmd-shift-o|alt-ctrl-shift-o, which provides some robustness - for example it checks that the connection can be established before writing it to the settings file.\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }]\n    }\n  ]\n}\n\nZed shells out to the ssh on your path, and so it will inherit any configuration you have in ~/.ssh/config for the given host. That said, if you need to override anything you can configure the following additional options on each connection:\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      // any argument to pass to the ssh master process\n      \"args\": [\"-i\", \"~/.ssh/work_id_file\"],\n      \"port\": 22, // defaults to 22\n      // defaults to your username on your local machine\n      \"username\": \"me\"\n    }\n  ]\n}\n\nThere are two additional Zed-specific options per connection, upload_binary_over_ssh and nickname:\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"projects\": [{ \"paths\": [\"~/code/zed/zed\"] }],\n      // by default Zed will download the server binary from the internet on the remote.\n      // When this is true, it'll be downloaded to your laptop and uploaded over SSH.\n      // This is useful when your remote server has restricted internet access.\n      \"upload_binary_over_ssh\": true,\n      // Shown in the Zed UI to help distinguish multiple hosts.\n      \"nickname\": \"lil-linux\"\n    }\n  ]\n}\n\nIf you use the command line to open a connection to a host by doing zed ssh://192.168.1.10/~/.vimrc, then extra options are read from your settings file by finding the first connection that matches the host/username/port of the URL on the command line.\nAdditionally it's worth noting that while you can pass a password on the command line zed ssh://user:password@host/~, we do not support writing a password to your settings file. If you're connecting repeatedly to the same host, you should configure key-based authentication.\nPort forwarding\nIf you'd like to be able to connect to ports on your remote server from your local machine, you can configure port forwarding in your settings file. This is particularly useful for developing websites so you can load the site in your browser while working.\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [{ \"local_port\": 8080, \"remote_port\": 80 }]\n    }\n  ]\n}\n\nThis will cause requests from your local machine to localhost:8080 to be forwarded to the remote machine's port 80. Under the hood this uses the -L argument to ssh.\nBy default these ports are bound to localhost, so other computers in the same network as your development machine cannot access them. You can set the local_host to bind to a different interface, for example, 0.0.0.0 will bind to all local interfaces.\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [\n        {\n          \"local_port\": 8080,\n          \"remote_port\": 80,\n          \"local_host\": \"0.0.0.0\"\n        }\n      ]\n    }\n  ]\n}\n\nThese ports also default to the localhost interface on the remote host. If you need to change this, you can also set the remote host:\n{\n  \"ssh_connections\": [\n    {\n      \"host\": \"192.168.1.10\",\n      \"port_forwards\": [\n        {\n          \"local_port\": 8080,\n          \"remote_port\": 80,\n          \"remote_host\": \"docker-host\"\n        }\n      ]\n    }\n  ]\n}\n\nZed settings\nWhen opening a remote project there are three relevant settings locations:\n\nThe local Zed settings (in ~/.zed/settings.json on macOS or ~/.config/zed/settings.json on Linux) on your local machine.\nThe server Zed settings (in the same place) on the remote server.\nThe project settings (in .zed/settings.json or .editorconfig of your project)\n\nBoth the local Zed and the server Zed read the project settings, but they are not aware of the other's main settings.json.\nDepending on the kind of setting you want to make, which settings file you should use:\n\nProject settings should be used for things that affect the project: indentation settings, which formatter / language server to use, etc.\nServer settings should be used for things that affect the server: paths to language servers, etc.\nLocal settings should be used for things that affect the UI: font size, etc.\n\nIn addition any extensions you have installed locally will be propagated to the remote server. This means that language servers, etc. will run correctly.\nInitializing the remote server\nOnce you provide the SSH options, Zed shells out to ssh on your local machine to create a ControlMaster connection with the options you provide.\nAny prompts that SSH needs will be shown in the UI, so you can verify host keys, type key passwords, etc.\nOnce the master connection is established, Zed will check to see if the remote server binary is present in ~/.zed_server on the remote, and that its version matches the current version of Zed that you're using.\nIf it is not there or the version mismatches, Zed will try to download the latest version. By default, it will download from https://zed.dev directly, but if you set: {\"upload_binary_over_ssh\":true} in your settings for that server, it will download the binary to your local machine and then upload it to the remote server.\nIf you'd like to maintain the server binary yourself you can. You can either download our prebuilt versions from GitHub, or build your own with cargo build -p remote_server --release. If you do this, you must upload it to ~/.zed_server/zed-remote-server-{RELEASE_CHANNEL}-{VERSION} on the server, for example ~/.zed_server/zed-remote-server-stable-0.181.6. The version must exactly match the version of Zed itself you are using.\nMaintaining the SSH connection\nOnce the server is initialized. Zed will create new SSH connections (reusing the existing ControlMaster) to run the remote development server.\nEach connection tries to run the development server in proxy mode. This mode will start the daemon if it is not running, and reconnect to it if it is. This way when your connection drops and is restarted, you can continue to work without interruption.\nIn the case that reconnecting fails, the daemon will not be re-used. That said, unsaved changes are by default persisted locally, so that you do not lose work. You can always reconnect to the project at a later date and Zed will restore unsaved changes.\nIf you are struggling with connection issues, you should be able to see more information in the Zed log cmd-shift-p Open Log. If you are seeing things that are unexpected, please file a GitHub issue or reach out in the #remoting-feedback channel in the Zed Discord.\nSupported SSH Options\nUnder the hood, Zed shells out to the ssh binary to connect to the remote server. We create one SSH control master per project, and use then use that to multiplex SSH connections for the Zed protocol itself, any terminals you open and tasks you run. We read settings from your SSH config file, but if you want to specify additional options to the SSH control master you can configure Zed to set them.\nWhen typing in the \"Connect New Server\" dialog, you can use bash-style quoting to pass options containing a space. Once you have created a server it will be added to the \"ssh_connections\": [] array in your settings file. You can edit the settings file directly to make changes to SSH connections.\nSupported options:\n\n-p / -l - these are equivalent to passing the port and the username in the host string.\n-L / -R for port forwarding\n-i - to use a specific key file\n-o - to set custom options\n-J / -w - to proxy the SSH connection\n-F for specifying an ssh_config\nAnd also... -4, -6, -A, -B, -C, -D, -I, -K, -P, -X, -Y, -a, -b, -c, -i, -k, -l, -m, -o, -p, -w, -x, -y\n\nNote that we deliberately disallow some options (for example -t or -T) that Zed will set for you.\nKnown Limitations\n\nYou can't open files from the remote Terminal by typing the zed command.\n\nFeedback\nPlease join the #remoting-feedback channel in the Zed Discord.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:55"
  },
  "environment.html": {
    "url": "https://zed.dev/docs/environment.html",
    "title": "Environment Variables | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"environment-variables\"><a class=\"header\" href=\"#environment-variables\">Environment Variables</a></h1>\n<p><em><strong>Note</strong>: The following only applies to Zed 0.152.0 and later.</em></p>\n<p>Multiple features in Zed are affected by environment variables:</p>\n<ul>\n<li>Tasks</li>\n<li>Built-in terminal</li>\n<li>Look-up of language servers</li>\n<li>Language servers</li>\n</ul>\n<p>In order to make the best use of these features, it's helpful to understand where Zed gets its environment variables from and how they're used.</p>\n<h2 id=\"where-does-zed-get-its-environment-variables-from\"><a class=\"header\" href=\"#where-does-zed-get-its-environment-variables-from\">Where does Zed get its environment variables from?</a></h2>\n<p>How Zed was started — whether it's icon was clicked in the macOS Dock or in a Linux window manager, or whether it was started via the CLI <code>zed</code> that comes with Zed — influences which environment variables Zed can use.</p>\n<h3 id=\"launched-from-the-cli\"><a class=\"header\" href=\"#launched-from-the-cli\">Launched from the CLI</a></h3>\n<p>If Zed is opened via the CLI (<code>zed</code>), it will inherit the environment variables from the surrounding shell session.</p>\n<p>That means if you do</p>\n<pre><code>$ export MY_ENV_VAR=hello\n$ zed .\n</code></pre>\n<p>the environment variable <code>MY_ENV_VAR</code> is now available inside Zed. For example, in the built-in terminal.</p>\n<p>Starting with Zed 0.152.0, the CLI <code>zed</code> will <em>always</em> pass along its environment to Zed, regardless of whether a Zed instance was previously running or not. Prior to Zed 0.152.0 this was not the case and only the first Zed instance would inherit the environment variables.</p>\n<h3 id=\"launched-via-window-manager-dock-or-launcher\"><a class=\"header\" href=\"#launched-via-window-manager-dock-or-launcher\">Launched via window manager, Dock, or launcher</a></h3>\n<p>When Zed has been launched via the macOS Dock, or a GNOME or KDE icon on Linux, or an application launcher like Alfred or Raycast, it has no surrounding shell environment from which to inherit its environment variables.</p>\n<p>In order to still have a useful environment, Zed spawns a login shell in the user's home directory and gets its environment. This environment is then set on the Zed <em>process</em>. That means all Zed windows and projects will inherit that home directory environment.</p>\n<p>Since that can lead to problems for users that require different environment variables for a project (because they use <code>direnv</code>, or <code>asdf</code>, or <code>mise</code>, ... in that project), when opening project, Zed spawns another login shell. This time in the project's directory. The environment from that login shell is <em>not</em> set on the process (because that would mean opening a new project changes the environment for all Zed windows). Instead, the environment is stored and passed along when running tasks, opening terminals, or spawning language servers.</p>\n<h2 id=\"where-and-how-are-environment-variables-used\"><a class=\"header\" href=\"#where-and-how-are-environment-variables-used\">Where and how are environment variables used?</a></h2>\n<p>There are two sets of environment variables:</p>\n<ol>\n<li>Environment variables of the Zed process</li>\n<li>Environment variables stored per project</li>\n</ol>\n<p>The variables from (1) are always used, since they are stored on the process itself and every spawned process (tasks, terminals, language servers, ...) will inherit them by default.</p>\n<p>The variables from (2) are used explicitly, depending on the feature.</p>\n<h3 id=\"tasks\"><a class=\"header\" href=\"#tasks\">Tasks</a></h3>\n<p>Tasks are spawned with an combined environment. In order of precedence (low to high, with the last overwriting the first):</p>\n<ul>\n<li>the Zed process environment</li>\n<li>if the project was opened from the CLI: the CLI environment</li>\n<li>if the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder</li>\n<li>optional, explicitly configured environment in settings</li>\n</ul>\n<h3 id=\"built-in-terminal\"><a class=\"header\" href=\"#built-in-terminal\">Built-in terminal</a></h3>\n<p>Built-in terminals, like tasks, are spawned with an combined environment. In order of precedence (low to high):</p>\n<ul>\n<li>the Zed process environment</li>\n<li>if the project was opened from the CLI: the CLI environment</li>\n<li>if the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder</li>\n<li>optional, explicitly configured environment in settings</li>\n</ul>\n<h3 id=\"look-up-of-language-servers\"><a class=\"header\" href=\"#look-up-of-language-servers\">Look-up of language servers</a></h3>\n<p>For some languages the language server adapters lookup the binary in the user's <code>$PATH</code>. Examples:</p>\n<ul>\n<li>Go</li>\n<li>Zig</li>\n<li>Rust (if <a href=\"./languages/rust.html#binary\">configured to do so</a>)</li>\n<li>C</li>\n<li>TypeScript</li>\n</ul>\n<p>For this look-up, Zed uses the following the environment:</p>\n<ul>\n<li>if the project was opened from the CLI: the CLI environment</li>\n<li>if the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder</li>\n</ul>\n<h3 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language servers</a></h3>\n<p>After looking up a language server, Zed starts them.</p>\n<p>These language server processes always inherit Zed's process environment. But, depending on the language server look-up, additional environment variables might be set or overwrite the process environment.</p>\n<ul>\n<li>If the language server was found in the project environment's <code>$PATH</code>, then the project environment's is passed along to the language server process. Where the project environment comes from depends on how the project was opened, via CLI or not. See previous point on look-up of language servers.</li>\n<li>If the language servers was not found in the project environment, Zed tries to install it globally and start it globally. In that case, the process will inherit Zed's process environment, and — if the project was opened via ClI — from the CLI.</li>\n</ul>\n\n</main>",
    "content_text": "Environment Variables\nNote: The following only applies to Zed 0.152.0 and later.\nMultiple features in Zed are affected by environment variables:\n\nTasks\nBuilt-in terminal\nLook-up of language servers\nLanguage servers\n\nIn order to make the best use of these features, it's helpful to understand where Zed gets its environment variables from and how they're used.\nWhere does Zed get its environment variables from?\nHow Zed was started — whether it's icon was clicked in the macOS Dock or in a Linux window manager, or whether it was started via the CLI zed that comes with Zed — influences which environment variables Zed can use.\nLaunched from the CLI\nIf Zed is opened via the CLI (zed), it will inherit the environment variables from the surrounding shell session.\nThat means if you do\n$ export MY_ENV_VAR=hello\n$ zed .\n\nthe environment variable MY_ENV_VAR is now available inside Zed. For example, in the built-in terminal.\nStarting with Zed 0.152.0, the CLI zed will always pass along its environment to Zed, regardless of whether a Zed instance was previously running or not. Prior to Zed 0.152.0 this was not the case and only the first Zed instance would inherit the environment variables.\nLaunched via window manager, Dock, or launcher\nWhen Zed has been launched via the macOS Dock, or a GNOME or KDE icon on Linux, or an application launcher like Alfred or Raycast, it has no surrounding shell environment from which to inherit its environment variables.\nIn order to still have a useful environment, Zed spawns a login shell in the user's home directory and gets its environment. This environment is then set on the Zed process. That means all Zed windows and projects will inherit that home directory environment.\nSince that can lead to problems for users that require different environment variables for a project (because they use direnv, or asdf, or mise, ... in that project), when opening project, Zed spawns another login shell. This time in the project's directory. The environment from that login shell is not set on the process (because that would mean opening a new project changes the environment for all Zed windows). Instead, the environment is stored and passed along when running tasks, opening terminals, or spawning language servers.\nWhere and how are environment variables used?\nThere are two sets of environment variables:\n\nEnvironment variables of the Zed process\nEnvironment variables stored per project\n\nThe variables from (1) are always used, since they are stored on the process itself and every spawned process (tasks, terminals, language servers, ...) will inherit them by default.\nThe variables from (2) are used explicitly, depending on the feature.\nTasks\nTasks are spawned with an combined environment. In order of precedence (low to high, with the last overwriting the first):\n\nthe Zed process environment\nif the project was opened from the CLI: the CLI environment\nif the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder\noptional, explicitly configured environment in settings\n\nBuilt-in terminal\nBuilt-in terminals, like tasks, are spawned with an combined environment. In order of precedence (low to high):\n\nthe Zed process environment\nif the project was opened from the CLI: the CLI environment\nif the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder\noptional, explicitly configured environment in settings\n\nLook-up of language servers\nFor some languages the language server adapters lookup the binary in the user's $PATH. Examples:\n\nGo\nZig\nRust (if configured to do so)\nC\nTypeScript\n\nFor this look-up, Zed uses the following the environment:\n\nif the project was opened from the CLI: the CLI environment\nif the project was not opened from the CLI: the project environment variables obtained by running a login shell in the project's root folder\n\nLanguage servers\nAfter looking up a language server, Zed starts them.\nThese language server processes always inherit Zed's process environment. But, depending on the language server look-up, additional environment variables might be set or overwrite the process environment.\n\nIf the language server was found in the project environment's $PATH, then the project environment's is passed along to the language server process. Where the project environment comes from depends on how the project was opened, via CLI or not. See previous point on look-up of language servers.\nIf the language servers was not found in the project environment, Zed tries to install it globally and start it globally. In that case, the process will inherit Zed's process environment, and — if the project was opened via ClI — from the CLI.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:11:57"
  },
  "repl.html": {
    "url": "https://zed.dev/docs/repl.html",
    "title": "REPL | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"repl\"><a class=\"header\" href=\"#repl\">REPL</a></h1>\n<h2 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting started</a></h2>\n<p>Bring the power of <a href=\"https://docs.jupyter.org/en/latest/projects/kernels.html\">Jupyter kernels</a> to your editor! The built-in REPL for Zed allows you to run code interactively in your editor similarly to a notebook with your own text files.</p>\n<figure style=\"width: 100%; margin: 0; overflow: hidden; border-top-left-radius: 2px; border-top-right-radius: 2px;\">\n<video controls=\"\" loop=\"\" playsinline=\"\">\n<source src=\"https://customer-snccc0j9v3kfzkif.cloudflarestream.com/aec66e79f23d6d1a0bee5e388a3f17cc/downloads/default.mp4\" type='video/webm; codecs=\"vp8.0, vorbis\"'/>\n<source src=\"https://customer-snccc0j9v3kfzkif.cloudflarestream.com/aec66e79f23d6d1a0bee5e388a3f17cc/downloads/default.mp4\" type='video/mp4; codecs=\"avc1.4D401E, mp4a.40.2\"'/>\n<source src=\"https://zed.dev/img/post/repl/typescript-deno-kernel-markdown.png\" type=\"image/png\"/>\n</video>\n</figure>\n<h2 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h2>\n<p>Zed supports running code in multiple languages. To get started, you need to install a kernel for the language you want to use.</p>\n<p><strong>Currently supported languages:</strong></p>\n<ul>\n<li><a href=\"#python\">Python (ipykernel)</a></li>\n<li><a href=\"#typescript-deno\">TypeScript (Deno)</a></li>\n<li><a href=\"#r-ark\">R (Ark)</a></li>\n<li><a href=\"#r-xeus\">R (Xeus)</a></li>\n<li><a href=\"#julia\">Julia</a></li>\n<li><a href=\"#scala\">Scala (Almond)</a></li>\n</ul>\n<p>Once installed, you can start using the REPL in the respective language files, or other places those languages are supported, such as Markdown. If you recently added the kernels, run the <code>repl: refresh kernelspecs</code> command to make them available in the editor.</p>\n<h2 id=\"using-the-repl\"><a class=\"header\" href=\"#using-the-repl\">Using the REPL</a></h2>\n<p>To start the REPL, open a file with the language you want to use and use the <code>repl: run</code> command (defaults to <code>ctrl-shift-enter</code> on macOS) to run a block, selection, or line. You can also click on the REPL icon in the toolbar.</p>\n<p>The <code>repl: run</code> command will be executed on your selection(s), and the result will be displayed below the selection.</p>\n<p>Outputs can be cleared with the <code>repl: clear outputs</code> command, or from the REPL menu in the toolbar.</p>\n<h3 id=\"cell-mode\"><a class=\"header\" href=\"#cell-mode\">Cell mode</a></h3>\n<p>Zed supports <a href=\"https://jupytext.readthedocs.io/en/latest/formats-scripts.html\">notebooks as scripts</a> using the <code># %%</code> cell separator in Python and <code>// %%</code> in TypeScript. This allows you to write code in a single file and run it as if it were a notebook, cell by cell.</p>\n<p>The <code>repl: run</code> command will run each block of code between the <code># %%</code> markers as a separate cell.</p>\n<pre><code class=\"language-python\"># %% Cell 1\nimport time\nimport numpy as np\n\n# %% Cell 2\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n</code></pre>\n<h2 id=\"language-specific-instructions\"><a class=\"header\" href=\"#language-specific-instructions\">Language specific instructions</a></h2>\n<h3 id=\"python\"><a class=\"header\" href=\"#python\">Python</a></h3>\n<h4 id=\"global-environment\"><a class=\"header\" href=\"#global-environment\">Global environment</a></h4>\n<div class=\"warning\">\n<p>On macOS, your system Python will <em>not</em> work. Either set up <a href=\"https://github.com/pyenv/pyenv?tab=readme-ov-file#installation\">pyenv</a> or use a virtual environment.</p>\n</div>\n<p>To setup your current Python to have an available kernel, run:</p>\n<pre><code class=\"language-sh\">pip install ipykernel\npython -m ipykernel install --user\n</code></pre>\n<h4 id=\"conda-environment\"><a class=\"header\" href=\"#conda-environment\">Conda Environment</a></h4>\n<pre><code class=\"language-sh\">source activate myenv\nconda install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n</code></pre>\n<h4 id=\"virtualenv-with-pip\"><a class=\"header\" href=\"#virtualenv-with-pip\">Virtualenv with pip</a></h4>\n<pre><code class=\"language-sh\">source activate myenv\npip install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n</code></pre>\n<h3 id=\"r-ark\"><a class=\"header\" href=\"#r-ark\">R (Ark Kernel)</a></h3>\n<p>Install <a href=\"https://github.com/posit-dev/ark/releases\">Ark</a> by downloading the release for your operating system. For example, for macOS just unpack <code>ark</code> binary and put it into <code>/usr/local/bin</code>. Then run:</p>\n<pre><code class=\"language-sh\">ark --install\n</code></pre>\n<h3 id=\"r-xeus\"><a class=\"header\" href=\"#r-xeus\">R (Xeus Kernel)</a></h3>\n<ul>\n<li>Install <a href=\"https://github.com/jupyter-xeus/xeus-r\">Xeus-R</a></li>\n<li>Install the R Extension for Zed (search for <code>R</code> in Zed Extensions)</li>\n</ul>\n<!--\nTBD: Improve R REPL (Ark Kernel) instructions\n-->\n<h3 id=\"typescript-deno\"><a class=\"header\" href=\"#typescript-deno\">Typescript: Deno</a></h3>\n<ul>\n<li><a href=\"https://docs.deno.com/runtime/manual/getting_started/installation/\">Install Deno</a> and then install the Deno jupyter kernel:</li>\n</ul>\n<pre><code class=\"language-sh\">deno jupyter --install\n</code></pre>\n<!--\nTBD: Improve R REPL (Ark Kernel) instructions\n-->\n<h3 id=\"julia\"><a class=\"header\" href=\"#julia\">Julia</a></h3>\n<ul>\n<li>Download and install Julia from the <a href=\"https://julialang.org/downloads/\">official website</a>.</li>\n<li>Install the Julia Extension for Zed (search for <code>Julia</code> in Zed Extensions)</li>\n</ul>\n<!--\nTBD: Improve Julia REPL instructions\n-->\n<h3 id=\"scala\"><a class=\"header\" href=\"#scala\">Scala</a></h3>\n<ul>\n<li><a href=\"https://www.scala-lang.org/download/\">Install Scala</a> with <code>cs setup</code> (Coursier):\n<ul>\n<li><code>brew install coursier/formulas/coursier &amp;&amp; cs setup</code></li>\n</ul>\n</li>\n<li>REPL (Almond) <a href=\"https://almond.sh/docs/quick-start-install\">setup instructions</a>:\n<ul>\n<li><code>brew install --cask temurin</code> (Eclipse foundation official OpenJDK binaries)</li>\n<li><code>brew install coursier/formulas/coursier &amp;&amp; cs setup</code></li>\n<li><code>coursier launch --use-bootstrap almond -- --install</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"changing-kernels\"><a class=\"header\" href=\"#changing-kernels\">Changing which kernel is used per language</a></h2>\n<p>Zed automatically detects the available kernels on your system. If you need to configure a different default kernel for a\nlanguage, you can assign a kernel for any supported language in your <code>settings.json</code>.</p>\n<pre><code class=\"language-json\">{\n  \"jupyter\": {\n    \"kernel_selections\": {\n      \"python\": \"conda-env\",\n      \"typescript\": \"deno\",\n      \"javascript\": \"deno\",\n      \"r\": \"ark\"\n    }\n  }\n}\n</code></pre>\n<h2 id=\"debugging-kernelspecs\"><a class=\"header\" href=\"#debugging-kernelspecs\">Debugging Kernelspecs</a></h2>\n<p>Available kernels are shown via the <code>repl: sessions</code> command. To refresh the kernels you can run, use the <code>repl: refresh kernelspecs</code> command.</p>\n<p>If you have <code>jupyter</code> installed, you can run <code>jupyter kernelspec list</code> to see the available kernels.</p>\n<pre><code class=\"language-sh\">$ jupyter kernelspec list\nAvailable kernels:\n  ark                   /Users/z/Library/Jupyter/kernels/ark\n  conda-base            /Users/z/Library/Jupyter/kernels/conda-base\n  deno                  /Users/z/Library/Jupyter/kernels/deno\n  python-chatlab-dev    /Users/z/Library/Jupyter/kernels/python-chatlab-dev\n  python3               /Users/z/Library/Jupyter/kernels/python3\n  ruby                  /Users/z/Library/Jupyter/kernels/ruby\n  rust                  /Users/z/Library/Jupyter/kernels/rust\n</code></pre>\n<blockquote>\n<p>Note: Zed makes best effort usage of <code>sys.prefix</code> and <code>CONDA_PREFIX</code> to find kernels in Python environments. If you want explicitly control run <code>python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"</code> to install the kernel directly while in the environment.</p>\n</blockquote>\n\n</main>",
    "content_text": "REPL\nGetting started\nBring the power of Jupyter kernels to your editor! The built-in REPL for Zed allows you to run code interactively in your editor similarly to a notebook with your own text files.\n\n\n\n\n\n\n\nInstallation\nZed supports running code in multiple languages. To get started, you need to install a kernel for the language you want to use.\nCurrently supported languages:\n\nPython (ipykernel)\nTypeScript (Deno)\nR (Ark)\nR (Xeus)\nJulia\nScala (Almond)\n\nOnce installed, you can start using the REPL in the respective language files, or other places those languages are supported, such as Markdown. If you recently added the kernels, run the repl: refresh kernelspecs command to make them available in the editor.\nUsing the REPL\nTo start the REPL, open a file with the language you want to use and use the repl: run command (defaults to ctrl-shift-enter on macOS) to run a block, selection, or line. You can also click on the REPL icon in the toolbar.\nThe repl: run command will be executed on your selection(s), and the result will be displayed below the selection.\nOutputs can be cleared with the repl: clear outputs command, or from the REPL menu in the toolbar.\nCell mode\nZed supports notebooks as scripts using the # %% cell separator in Python and // %% in TypeScript. This allows you to write code in a single file and run it as if it were a notebook, cell by cell.\nThe repl: run command will run each block of code between the # %% markers as a separate cell.\n# %% Cell 1\nimport time\nimport numpy as np\n\n# %% Cell 2\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n\nLanguage specific instructions\nPython\nGlobal environment\n\nOn macOS, your system Python will not work. Either set up pyenv or use a virtual environment.\n\nTo setup your current Python to have an available kernel, run:\npip install ipykernel\npython -m ipykernel install --user\n\nConda Environment\nsource activate myenv\nconda install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n\nVirtualenv with pip\nsource activate myenv\npip install ipykernel\npython -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"\n\nR (Ark Kernel)\nInstall Ark by downloading the release for your operating system. For example, for macOS just unpack ark binary and put it into /usr/local/bin. Then run:\nark --install\n\nR (Xeus Kernel)\n\nInstall Xeus-R\nInstall the R Extension for Zed (search for R in Zed Extensions)\n\n\nTypescript: Deno\n\nInstall Deno and then install the Deno jupyter kernel:\n\ndeno jupyter --install\n\n\nJulia\n\nDownload and install Julia from the official website.\nInstall the Julia Extension for Zed (search for Julia in Zed Extensions)\n\n\nScala\n\nInstall Scala with cs setup (Coursier):\n\nbrew install coursier/formulas/coursier && cs setup\n\n\nREPL (Almond) setup instructions:\n\nbrew install --cask temurin (Eclipse foundation official OpenJDK binaries)\nbrew install coursier/formulas/coursier && cs setup\ncoursier launch --use-bootstrap almond -- --install\n\n\n\nChanging which kernel is used per language\nZed automatically detects the available kernels on your system. If you need to configure a different default kernel for a\nlanguage, you can assign a kernel for any supported language in your settings.json.\n{\n  \"jupyter\": {\n    \"kernel_selections\": {\n      \"python\": \"conda-env\",\n      \"typescript\": \"deno\",\n      \"javascript\": \"deno\",\n      \"r\": \"ark\"\n    }\n  }\n}\n\nDebugging Kernelspecs\nAvailable kernels are shown via the repl: sessions command. To refresh the kernels you can run, use the repl: refresh kernelspecs command.\nIf you have jupyter installed, you can run jupyter kernelspec list to see the available kernels.\n$ jupyter kernelspec list\nAvailable kernels:\n  ark                   /Users/z/Library/Jupyter/kernels/ark\n  conda-base            /Users/z/Library/Jupyter/kernels/conda-base\n  deno                  /Users/z/Library/Jupyter/kernels/deno\n  python-chatlab-dev    /Users/z/Library/Jupyter/kernels/python-chatlab-dev\n  python3               /Users/z/Library/Jupyter/kernels/python3\n  ruby                  /Users/z/Library/Jupyter/kernels/ruby\n  rust                  /Users/z/Library/Jupyter/kernels/rust\n\n\nNote: Zed makes best effort usage of sys.prefix and CONDA_PREFIX to find kernels in Python environments. If you want explicitly control run python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\" to install the kernel directly while in the environment.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:00"
  },
  "ai/overview.html": {
    "url": "https://zed.dev/docs/ai/overview.html",
    "title": "Overview | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"ai\"><a class=\"header\" href=\"#ai\">AI</a></h1>\n<p>Learn how to get started using AI with Zed and all its capabilities.</p>\n<h2 id=\"setting-up-ai-in-zed\"><a class=\"header\" href=\"#setting-up-ai-in-zed\">Setting up AI in Zed</a></h2>\n<ul>\n<li>\n<p><a href=\"./configuration.html\">Configuration</a>: Learn how to set up different language model providers like Anthropic, OpenAI, Ollama, Google AI, and more.</p>\n</li>\n<li>\n<p><a href=\"./external-agents.html\">External Agents</a>: Learn how to plug in your favorite agent into Zed.</p>\n</li>\n<li>\n<p><a href=\"./subscription.html\">Subscription</a>: Learn about Zed's hosted model service and other billing-related information.</p>\n</li>\n<li>\n<p><a href=\"./privacy-and-security.html\">Privacy and Security</a>: Understand how Zed handles privacy and security with AI features.</p>\n</li>\n</ul>\n<h2 id=\"agentic-editing\"><a class=\"header\" href=\"#agentic-editing\">Agentic Editing</a></h2>\n<ul>\n<li>\n<p><a href=\"./agent-panel.html\">Agent Panel</a>: Create and manage interactions with LLM agents.</p>\n</li>\n<li>\n<p><a href=\"./rules.html\">Rules</a>: How to define rules for AI interactions.</p>\n</li>\n<li>\n<p><a href=\"./tools.html\">Tools</a>: Explore the tools that enable agentic capabilities.</p>\n</li>\n<li>\n<p><a href=\"./mcp.html\">Model Context Protocol</a>: Learn about how to install and configure MCP servers.</p>\n</li>\n<li>\n<p><a href=\"./inline-assistant.html\">Inline Assistant</a>: Discover how to use the agent to power inline transformations directly within a file or terminal.</p>\n</li>\n</ul>\n<h2 id=\"edit-prediction\"><a class=\"header\" href=\"#edit-prediction\">Edit Prediction</a></h2>\n<ul>\n<li><a href=\"./edit-prediction.html\">Edit Prediction</a>: Learn about Zed's AI prediction feature that helps autocomplete your code.</li>\n</ul>\n<h2 id=\"text-threads\"><a class=\"header\" href=\"#text-threads\">Text Threads</a></h2>\n<ul>\n<li><a href=\"./text-threads.html\">Text Threads</a>: Learn about an alternative, text-based interface for interacting with language models.</li>\n</ul>\n\n</main>",
    "content_text": "AI\nLearn how to get started using AI with Zed and all its capabilities.\nSetting up AI in Zed\n\n\nConfiguration: Learn how to set up different language model providers like Anthropic, OpenAI, Ollama, Google AI, and more.\n\n\nExternal Agents: Learn how to plug in your favorite agent into Zed.\n\n\nSubscription: Learn about Zed's hosted model service and other billing-related information.\n\n\nPrivacy and Security: Understand how Zed handles privacy and security with AI features.\n\n\nAgentic Editing\n\n\nAgent Panel: Create and manage interactions with LLM agents.\n\n\nRules: How to define rules for AI interactions.\n\n\nTools: Explore the tools that enable agentic capabilities.\n\n\nModel Context Protocol: Learn about how to install and configure MCP servers.\n\n\nInline Assistant: Discover how to use the agent to power inline transformations directly within a file or terminal.\n\n\nEdit Prediction\n\nEdit Prediction: Learn about Zed's AI prediction feature that helps autocomplete your code.\n\nText Threads\n\nText Threads: Learn about an alternative, text-based interface for interacting with language models.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:02"
  },
  "ai/agent-panel.html": {
    "url": "https://zed.dev/docs/ai/agent-panel.html",
    "title": "Agent Panel | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"agent-panel\"><a class=\"header\" href=\"#agent-panel\">Agent Panel</a></h1>\n<p>The Agent Panel allows you to interact with many LLMs and coding agents that can help with in various types of tasks, such as generating code, codebase understanding, and other general inquiries like writing emails, documentation, and more.</p>\n<p>To open it, use the <code>agent: new thread</code> action in <a href=\"../getting-started.html#command-palette\">the Command Palette</a> or click the ✨ (sparkles) icon in the status bar.</p>\n<h2 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h2>\n<p>If you're using the Agent Panel for the first time, you need to have at least one LLM provider or external agent configured.\nYou can do that by:</p>\n<ol>\n<li><a href=\"https://zed.dev/pricing\">subscribing to our Pro plan</a>, so you have access to our hosted models</li>\n<li><a href=\"./llm-providers.html#use-your-own-keys\">bringing your own API keys</a> for your desired provider</li>\n<li>using an external agent like <a href=\"./external-agents.html#gemini-cli\">Gemini CLI</a> or <a href=\"./external-agents.html#claude-code\">Claude Code</a></li>\n</ol>\n<h2 id=\"overview\"><a class=\"header\" href=\"#overview\">Overview</a></h2>\n<p>With an LLM provider or an external agent configured, type at the message editor and hit <code>enter</code> to submit your prompt.\nIf you need extra room to type, you can expand the message editor with <kbd class=\"keybinding\">shift-alt-escape|shift-alt-escape</kbd>.</p>\n<p>You should start to see the responses stream in with indications of <a href=\"./tools.html\">which tools</a> the model is using to fulfill your prompt.\nFrom this point on, you can interact with the many supported features outlined below.</p>\n<blockquote>\n<p>Note that for external agents, like <a href=\"./external-agents.html#gemini-cli\">Gemini CLI</a> or <a href=\"./external-agents.html#claude-code\">Claude Code</a>, some of the features outlined below are <em>not</em> currently supported—for example, <em>restoring threads from history</em>, <em>checkpoints</em>, <em>token usage display</em>, <em>model selection</em>, and others. All of them should hopefully be supported in the future.</p>\n</blockquote>\n<h3 id=\"new-thread\"><a class=\"header\" href=\"#new-thread\">Creating New Threads</a></h3>\n<p>By default, the Agent Panel uses Zed's first-party agent.</p>\n<p>To change that, go to the plus button in the top-right of the Agent Panel and choose another option.\nYou choose to create a new <a href=\"./text-threads.html\">Text Thread</a> or, if you have <a href=\"./external-agents.html\">external agents</a> connected, you can create new threads with them.</p>\n<h3 id=\"editing-messages\"><a class=\"header\" href=\"#editing-messages\">Editing Messages</a></h3>\n<p>Any message that you send to the AI is editable.\nYou can click on the card that contains your message and re-submit it with an adjusted prompt and/or new pieces of context.</p>\n<h3 id=\"checkpoints\"><a class=\"header\" href=\"#checkpoints\">Checkpoints</a></h3>\n<p>Every time the AI performs an edit, you should see a \"Restore Checkpoint\" button to the top of your message, allowing you to return your code base to the state it was in prior to that message.</p>\n<p>The checkpoint button appears even if you interrupt the thread midway through an edit attempt, as this is likely a moment when you've identified that the agent is not heading in the right direction and you want to revert back.</p>\n<h3 id=\"navigating-history\"><a class=\"header\" href=\"#navigating-history\">Navigating History</a></h3>\n<p>To quickly navigate through recently opened threads, use the <kbd class=\"keybinding\">cmd-shift-j|ctrl-shift-j</kbd> binding, when focused on the panel's editor, or click the menu icon button at the top right of the panel to open the dropdown that shows you the six most recent threads.</p>\n<p>The items in this menu function similarly to tabs, and closing them doesn’t delete the thread; instead, it simply removes them from the recent list.</p>\n<p>To view all historical conversations, reach for the <code>View All</code> option from within the same menu or via the <kbd class=\"keybinding\">cmd-shift-h|ctrl-shift-h</kbd> binding.</p>\n<h3 id=\"following-the-agent\"><a class=\"header\" href=\"#following-the-agent\">Following the Agent</a></h3>\n<p>Zed is built with collaboration natively integrated.\nThis approach extends to collaboration with AI as well.\nTo follow the agent reading through your codebase and performing edits, click on the \"crosshair\" icon button at the bottom left of the panel.</p>\n<p>You can also do that with the keyboard by pressing the <code>cmd</code>/<code>ctrl</code> modifier with <code>enter</code> when submitting a message.</p>\n<h3 id=\"get-notified\"><a class=\"header\" href=\"#get-notified\">Get Notified</a></h3>\n<p>If you send a prompt to the Agent and then move elsewhere, thus putting Zed in the background, you can be notified of whether its response is finished either via:</p>\n<ul>\n<li>a visual notification that appears in the top right of your screen</li>\n<li>or a sound notification</li>\n</ul>\n<p>Both notification methods can be used together or individually according to your preference.</p>\n<p>You can customize their behavior, including turning them off entirely, by using the <code>agent.notify_when_agent_waiting</code> and <code>agent.play_sound_when_agent_done</code> settings keys.</p>\n<h3 id=\"reviewing-changes\"><a class=\"header\" href=\"#reviewing-changes\">Reviewing Changes</a></h3>\n<p>Once the agent has made changes to your project, the panel will surface which files, and how many of them, have been edited.</p>\n<p>To see which files specifically have been edited, expand the accordion bar that shows up right above the message editor or click the <code>Review Changes</code> button (<kbd class=\"keybinding\">shift-ctrl-r|shift-ctrl-r</kbd>), which opens a multi-buffer tab with all changes.</p>\n<p>You're able to reject or accept each individual change hunk, or the whole set of changes made by the agent.</p>\n<p>Edit diffs also appear in individual buffers.\nSo, if your active tab had edits made by the AI, you'll see diffs with the same accept/reject controls as in the multi-buffer.</p>\n<h2 id=\"adding-context\"><a class=\"header\" href=\"#adding-context\">Adding Context</a></h2>\n<p>Although Zed's agent is very efficient at reading through your code base to autonomously pick up relevant files, directories, and other context, manually adding context is still encouraged as a way to speed up and improve the AI's response quality.</p>\n<p>To add any file, directory, symbol, previous threads, rules files, or even web pages as context, type <code>@</code> to mention them in the editor.</p>\n<p>Pasting images as context is also supported by the Agent Panel.</p>\n<h3 id=\"token-usage\"><a class=\"header\" href=\"#token-usage\">Token Usage</a></h3>\n<p>Zed surfaces how many tokens you are consuming for your currently active thread nearby the profile selector in the panel's message editor.\nDepending on how many pieces of context you add, your token consumption can grow rapidly.</p>\n<p>With that in mind, once you get close to the model's context window, a banner appears below the message editor suggesting to start a new thread with the current one summarized and added as context.\nYou can also do this at any time with an ongoing thread via the \"Agent Options\" menu on the top right.</p>\n<h2 id=\"changing-models\"><a class=\"header\" href=\"#changing-models\">Changing Models</a></h2>\n<p>After you've configured your LLM providers—either via <a href=\"./llm-providers.html#use-your-own-keys\">a custom API key</a> or through <a href=\"./models.html\">Zed's hosted models</a>—you can switch between them by clicking on the model selector on the message editor or by using the <kbd class=\"keybinding\">cmd-alt-/|ctrl-alt-/</kbd> keybinding.</p>\n<h2 id=\"using-tools\"><a class=\"header\" href=\"#using-tools\">Using Tools</a></h2>\n<p>The new Agent Panel supports tool calling, which enables agentic editing.\nZed comes with <a href=\"./tools.html\">several built-in tools</a> that allow models to perform tasks such as searching through your codebase, editing files, running commands, and others.</p>\n<p>You can also extend the set of available tools via <a href=\"./mcp.html\">MCP Servers</a>.</p>\n<h3 id=\"profiles\"><a class=\"header\" href=\"#profiles\">Profiles</a></h3>\n<p>Profiles act as a way to group tools.\nZed offers three built-in profiles and you can create as many custom ones as you want.</p>\n<h4 id=\"built-in-profiles\"><a class=\"header\" href=\"#built-in-profiles\">Built-in Profiles</a></h4>\n<ul>\n<li><code>Write</code>: A profile with tools to allow the LLM to write to your files and run terminal commands. This one essentially has all built-in tools turned on.</li>\n<li><code>Ask</code>: A profile with read-only tools. Best for asking questions about your code base without the concern of the agent making changes.</li>\n<li><code>Minimal</code>: A profile with no tools. Best for general conversations with the LLM where no knowledge of your code base is necessary.</li>\n</ul>\n<p>You can explore the exact tools enabled in each profile by clicking on the profile selector button &gt; <code>Configure Profiles…</code> &gt; the one you want to check out.</p>\n<h4 id=\"custom-profiles\"><a class=\"header\" href=\"#custom-profiles\">Custom Profiles</a></h4>\n<p>You can create a custom profile via the <code>Configure Profiles…</code> option in the profile selector.\nFrom here, you can choose to <code>Add New Profile</code> or fork an existing one with a custom name and your preferred set of tools.</p>\n<p>You can also override built-in profiles.\nWith a built-in profile selected, in the profile selector, navigate to <code>Configure Tools</code>, and select the tools you'd like.</p>\n<p>Zed will store this profile in your settings using the same profile name as the default you overrode.</p>\n<p>All custom profiles can be edited via the UI or by hand under the <code>assistant.profiles</code> key in your <code>settings.json</code> file.</p>\n<h3 id=\"tool-approval\"><a class=\"header\" href=\"#tool-approval\">Tool Approval</a></h3>\n<p>Zed's Agent Panel surfaces the <code>agent.always_allow_tool_actions</code> setting that, if turned to <code>false</code>, will require you to give permission to any editing attempt as well as tool calls coming from MCP servers.</p>\n<p>You can change that by setting this key to <code>true</code> in either your <code>settings.json</code> or via the Agent Panel's settings view.</p>\n<h3 id=\"model-support\"><a class=\"header\" href=\"#model-support\">Model Support</a></h3>\n<p>Tool calling needs to be individually supported by each model and model provider.\nTherefore, despite the presence of tools, some models may not have the ability to pick them up yet in Zed.\nYou should see a \"No tools\" label if you select a model that falls into this case.</p>\n<p>We want to support all of them, though!\nWe may prioritize which ones to focus on based on popularity and user feedback, so feel free to help and contribute to fast-track those that don't fit this bill.</p>\n<p>All <a href=\"./models.html\">Zed's hosted models</a> support tool calling out-of-the-box.</p>\n<h3 id=\"mcp-servers\"><a class=\"header\" href=\"#mcp-servers\">MCP Servers</a></h3>\n<p>Similarly to the built-in tools, some models may not support all tools included in a given MCP Server.\nZed's UI will inform about this via a warning icon that appears close to the model selector.</p>\n<h2 id=\"text-threads\"><a class=\"header\" href=\"#text-threads\">Text Threads</a></h2>\n<p><a href=\"./text-threads.html\">\"Text Threads\"</a> present your conversation with the LLM in a different format—as raw text.\nWith text threads, you have full control over the conversation data.\nYou can remove and edit responses from the LLM, swap roles, and include more context earlier in the conversation.</p>\n<p>For users who have been with us for some time, you'll notice that text threads are our original assistant panel—users love it for the control it offers.\nWe do not plan to deprecate text threads, but it should be noted that if you want the AI to write to your code base autonomously, that's only available in the newer, and now default, \"Threads\".</p>\n<h2 id=\"errors-and-debugging\"><a class=\"header\" href=\"#errors-and-debugging\">Errors and Debugging</a></h2>\n<p>In case of any error or strange LLM response behavior, the best way to help the Zed team debug is by reaching for the <code>agent: open thread as markdown</code> action and attaching that data as part of your issue on GitHub.</p>\n<p>You can also open threads as Markdown by clicking on the file icon button, to the right of the thumbs down button, when focused on the panel's editor.</p>\n<h2 id=\"feedback\"><a class=\"header\" href=\"#feedback\">Feedback</a></h2>\n<p>Every change we make to Zed's system prompt and tool set, needs to be backed by a thorough eval with good scores.</p>\n<p>Every time the LLM performs a weird change or investigates a certain topic in your code base incorrectly, it's an indication that there's an improvement opportunity.</p>\n<blockquote>\n<p>Note that rating responses will send your data related to that response to Zed's servers.\nSee <a href=\"./ai-improvement.html\">AI Improvement</a> and <a href=\"./privacy-and-security.html\">Privacy and Security</a> for more information about Zed's approach to AI improvement, privacy, and security.\n<strong><em>If you don't want data persisted on Zed's servers, don't rate</em></strong>. We will not collect data for improving our Agentic offering without you explicitly rating responses.</p>\n</blockquote>\n<p>The best way you can help influence the next change to Zed's system prompt and tools is by rating the LLM's response via the thumbs up/down buttons at the end of every response.\nIn case of a thumbs down, a new text area will show up where you can add more specifics about what happened.</p>\n<p>You can provide feedback on the thread at any point after the agent responds, and multiple times within the same thread.</p>\n\n</main>",
    "content_text": "Agent Panel\nThe Agent Panel allows you to interact with many LLMs and coding agents that can help with in various types of tasks, such as generating code, codebase understanding, and other general inquiries like writing emails, documentation, and more.\nTo open it, use the agent: new thread action in the Command Palette or click the ✨ (sparkles) icon in the status bar.\nGetting Started\nIf you're using the Agent Panel for the first time, you need to have at least one LLM provider or external agent configured.\nYou can do that by:\n\nsubscribing to our Pro plan, so you have access to our hosted models\nbringing your own API keys for your desired provider\nusing an external agent like Gemini CLI or Claude Code\n\nOverview\nWith an LLM provider or an external agent configured, type at the message editor and hit enter to submit your prompt.\nIf you need extra room to type, you can expand the message editor with shift-alt-escape|shift-alt-escape.\nYou should start to see the responses stream in with indications of which tools the model is using to fulfill your prompt.\nFrom this point on, you can interact with the many supported features outlined below.\n\nNote that for external agents, like Gemini CLI or Claude Code, some of the features outlined below are not currently supported—for example, restoring threads from history, checkpoints, token usage display, model selection, and others. All of them should hopefully be supported in the future.\n\nCreating New Threads\nBy default, the Agent Panel uses Zed's first-party agent.\nTo change that, go to the plus button in the top-right of the Agent Panel and choose another option.\nYou choose to create a new Text Thread or, if you have external agents connected, you can create new threads with them.\nEditing Messages\nAny message that you send to the AI is editable.\nYou can click on the card that contains your message and re-submit it with an adjusted prompt and/or new pieces of context.\nCheckpoints\nEvery time the AI performs an edit, you should see a \"Restore Checkpoint\" button to the top of your message, allowing you to return your code base to the state it was in prior to that message.\nThe checkpoint button appears even if you interrupt the thread midway through an edit attempt, as this is likely a moment when you've identified that the agent is not heading in the right direction and you want to revert back.\nNavigating History\nTo quickly navigate through recently opened threads, use the cmd-shift-j|ctrl-shift-j binding, when focused on the panel's editor, or click the menu icon button at the top right of the panel to open the dropdown that shows you the six most recent threads.\nThe items in this menu function similarly to tabs, and closing them doesn’t delete the thread; instead, it simply removes them from the recent list.\nTo view all historical conversations, reach for the View All option from within the same menu or via the cmd-shift-h|ctrl-shift-h binding.\nFollowing the Agent\nZed is built with collaboration natively integrated.\nThis approach extends to collaboration with AI as well.\nTo follow the agent reading through your codebase and performing edits, click on the \"crosshair\" icon button at the bottom left of the panel.\nYou can also do that with the keyboard by pressing the cmd/ctrl modifier with enter when submitting a message.\nGet Notified\nIf you send a prompt to the Agent and then move elsewhere, thus putting Zed in the background, you can be notified of whether its response is finished either via:\n\na visual notification that appears in the top right of your screen\nor a sound notification\n\nBoth notification methods can be used together or individually according to your preference.\nYou can customize their behavior, including turning them off entirely, by using the agent.notify_when_agent_waiting and agent.play_sound_when_agent_done settings keys.\nReviewing Changes\nOnce the agent has made changes to your project, the panel will surface which files, and how many of them, have been edited.\nTo see which files specifically have been edited, expand the accordion bar that shows up right above the message editor or click the Review Changes button (shift-ctrl-r|shift-ctrl-r), which opens a multi-buffer tab with all changes.\nYou're able to reject or accept each individual change hunk, or the whole set of changes made by the agent.\nEdit diffs also appear in individual buffers.\nSo, if your active tab had edits made by the AI, you'll see diffs with the same accept/reject controls as in the multi-buffer.\nAdding Context\nAlthough Zed's agent is very efficient at reading through your code base to autonomously pick up relevant files, directories, and other context, manually adding context is still encouraged as a way to speed up and improve the AI's response quality.\nTo add any file, directory, symbol, previous threads, rules files, or even web pages as context, type @ to mention them in the editor.\nPasting images as context is also supported by the Agent Panel.\nToken Usage\nZed surfaces how many tokens you are consuming for your currently active thread nearby the profile selector in the panel's message editor.\nDepending on how many pieces of context you add, your token consumption can grow rapidly.\nWith that in mind, once you get close to the model's context window, a banner appears below the message editor suggesting to start a new thread with the current one summarized and added as context.\nYou can also do this at any time with an ongoing thread via the \"Agent Options\" menu on the top right.\nChanging Models\nAfter you've configured your LLM providers—either via a custom API key or through Zed's hosted models—you can switch between them by clicking on the model selector on the message editor or by using the cmd-alt-/|ctrl-alt-/ keybinding.\nUsing Tools\nThe new Agent Panel supports tool calling, which enables agentic editing.\nZed comes with several built-in tools that allow models to perform tasks such as searching through your codebase, editing files, running commands, and others.\nYou can also extend the set of available tools via MCP Servers.\nProfiles\nProfiles act as a way to group tools.\nZed offers three built-in profiles and you can create as many custom ones as you want.\nBuilt-in Profiles\n\nWrite: A profile with tools to allow the LLM to write to your files and run terminal commands. This one essentially has all built-in tools turned on.\nAsk: A profile with read-only tools. Best for asking questions about your code base without the concern of the agent making changes.\nMinimal: A profile with no tools. Best for general conversations with the LLM where no knowledge of your code base is necessary.\n\nYou can explore the exact tools enabled in each profile by clicking on the profile selector button > Configure Profiles… > the one you want to check out.\nCustom Profiles\nYou can create a custom profile via the Configure Profiles… option in the profile selector.\nFrom here, you can choose to Add New Profile or fork an existing one with a custom name and your preferred set of tools.\nYou can also override built-in profiles.\nWith a built-in profile selected, in the profile selector, navigate to Configure Tools, and select the tools you'd like.\nZed will store this profile in your settings using the same profile name as the default you overrode.\nAll custom profiles can be edited via the UI or by hand under the assistant.profiles key in your settings.json file.\nTool Approval\nZed's Agent Panel surfaces the agent.always_allow_tool_actions setting that, if turned to false, will require you to give permission to any editing attempt as well as tool calls coming from MCP servers.\nYou can change that by setting this key to true in either your settings.json or via the Agent Panel's settings view.\nModel Support\nTool calling needs to be individually supported by each model and model provider.\nTherefore, despite the presence of tools, some models may not have the ability to pick them up yet in Zed.\nYou should see a \"No tools\" label if you select a model that falls into this case.\nWe want to support all of them, though!\nWe may prioritize which ones to focus on based on popularity and user feedback, so feel free to help and contribute to fast-track those that don't fit this bill.\nAll Zed's hosted models support tool calling out-of-the-box.\nMCP Servers\nSimilarly to the built-in tools, some models may not support all tools included in a given MCP Server.\nZed's UI will inform about this via a warning icon that appears close to the model selector.\nText Threads\n\"Text Threads\" present your conversation with the LLM in a different format—as raw text.\nWith text threads, you have full control over the conversation data.\nYou can remove and edit responses from the LLM, swap roles, and include more context earlier in the conversation.\nFor users who have been with us for some time, you'll notice that text threads are our original assistant panel—users love it for the control it offers.\nWe do not plan to deprecate text threads, but it should be noted that if you want the AI to write to your code base autonomously, that's only available in the newer, and now default, \"Threads\".\nErrors and Debugging\nIn case of any error or strange LLM response behavior, the best way to help the Zed team debug is by reaching for the agent: open thread as markdown action and attaching that data as part of your issue on GitHub.\nYou can also open threads as Markdown by clicking on the file icon button, to the right of the thumbs down button, when focused on the panel's editor.\nFeedback\nEvery change we make to Zed's system prompt and tool set, needs to be backed by a thorough eval with good scores.\nEvery time the LLM performs a weird change or investigates a certain topic in your code base incorrectly, it's an indication that there's an improvement opportunity.\n\nNote that rating responses will send your data related to that response to Zed's servers.\nSee AI Improvement and Privacy and Security for more information about Zed's approach to AI improvement, privacy, and security.\nIf you don't want data persisted on Zed's servers, don't rate. We will not collect data for improving our Agentic offering without you explicitly rating responses.\n\nThe best way you can help influence the next change to Zed's system prompt and tools is by rating the LLM's response via the thumbs up/down buttons at the end of every response.\nIn case of a thumbs down, a new text area will show up where you can add more specifics about what happened.\nYou can provide feedback on the thread at any point after the agent responds, and multiple times within the same thread.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:04"
  },
  "ai/tools.html": {
    "url": "https://zed.dev/docs/ai/tools.html",
    "title": "Tools | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"tools\"><a class=\"header\" href=\"#tools\">Tools</a></h1>\n<p>Zed's Agent has access to a variety of tools that allow it to interact with your codebase and perform tasks.</p>\n<h2 id=\"read--search-tools\"><a class=\"header\" href=\"#read--search-tools\">Read &amp; Search Tools</a></h2>\n<h3 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\"><code>diagnostics</code></a></h3>\n<p>Gets errors and warnings for either a specific file or the entire project, useful after making edits to determine if further changes are needed.</p>\n<h3 id=\"fetch\"><a class=\"header\" href=\"#fetch\"><code>fetch</code></a></h3>\n<p>Fetches a URL and returns the content as Markdown. Useful for providing docs as context.</p>\n<h3 id=\"find_path\"><a class=\"header\" href=\"#find_path\"><code>find_path</code></a></h3>\n<p>Quickly finds files by matching glob patterns (like \"*<em>/</em>.js\"), returning matching file paths alphabetically.</p>\n<h3 id=\"grep\"><a class=\"header\" href=\"#grep\"><code>grep</code></a></h3>\n<p>Searches file contents across the project using regular expressions, preferred for finding symbols in code without knowing exact file paths.</p>\n<h3 id=\"list_directory\"><a class=\"header\" href=\"#list_directory\"><code>list_directory</code></a></h3>\n<p>Lists files and directories in a given path, providing an overview of filesystem contents.</p>\n<h3 id=\"now\"><a class=\"header\" href=\"#now\"><code>now</code></a></h3>\n<p>Returns the current date and time.</p>\n<h3 id=\"open\"><a class=\"header\" href=\"#open\"><code>open</code></a></h3>\n<p>Opens a file or URL with the default application associated with it on the user's operating system.</p>\n<h3 id=\"read_file\"><a class=\"header\" href=\"#read_file\"><code>read_file</code></a></h3>\n<p>Reads the content of a specified file in the project, allowing access to file contents.</p>\n<h3 id=\"thinking\"><a class=\"header\" href=\"#thinking\"><code>thinking</code></a></h3>\n<p>Allows the Agent to work through problems, brainstorm ideas, or plan without executing actions, useful for complex problem-solving.</p>\n<h3 id=\"web_search\"><a class=\"header\" href=\"#web_search\"><code>web_search</code></a></h3>\n<p>Searches the web for information, providing results with snippets and links from relevant web pages, useful for accessing real-time information.</p>\n<h2 id=\"edit-tools\"><a class=\"header\" href=\"#edit-tools\">Edit Tools</a></h2>\n<h3 id=\"copy_path\"><a class=\"header\" href=\"#copy_path\"><code>copy_path</code></a></h3>\n<p>Copies a file or directory recursively in the project, more efficient than manually reading and writing files when duplicating content.</p>\n<h3 id=\"create_directory\"><a class=\"header\" href=\"#create_directory\"><code>create_directory</code></a></h3>\n<p>Creates a new directory at the specified path within the project, creating all necessary parent directories (similar to <code>mkdir -p</code>).</p>\n<h3 id=\"create_file\"><a class=\"header\" href=\"#create_file\"><code>create_file</code></a></h3>\n<p>Creates a new file at a specified path with given text content, the most efficient way to create new files or completely replace existing ones.</p>\n<h3 id=\"delete_path\"><a class=\"header\" href=\"#delete_path\"><code>delete_path</code></a></h3>\n<p>Deletes a file or directory (including contents recursively) at the specified path and confirms the deletion.</p>\n<h3 id=\"edit_file\"><a class=\"header\" href=\"#edit_file\"><code>edit_file</code></a></h3>\n<p>Edits files by replacing specific text with new content.</p>\n<h3 id=\"move_path\"><a class=\"header\" href=\"#move_path\"><code>move_path</code></a></h3>\n<p>Moves or renames a file or directory in the project, performing a rename if only the filename differs.</p>\n<h3 id=\"terminal\"><a class=\"header\" href=\"#terminal\"><code>terminal</code></a></h3>\n<p>Executes shell commands and returns the combined output, creating a new shell process for each invocation.</p>\n\n</main>",
    "content_text": "Tools\nZed's Agent has access to a variety of tools that allow it to interact with your codebase and perform tasks.\nRead & Search Tools\ndiagnostics\nGets errors and warnings for either a specific file or the entire project, useful after making edits to determine if further changes are needed.\nfetch\nFetches a URL and returns the content as Markdown. Useful for providing docs as context.\nfind_path\nQuickly finds files by matching glob patterns (like \"*/.js\"), returning matching file paths alphabetically.\ngrep\nSearches file contents across the project using regular expressions, preferred for finding symbols in code without knowing exact file paths.\nlist_directory\nLists files and directories in a given path, providing an overview of filesystem contents.\nnow\nReturns the current date and time.\nopen\nOpens a file or URL with the default application associated with it on the user's operating system.\nread_file\nReads the content of a specified file in the project, allowing access to file contents.\nthinking\nAllows the Agent to work through problems, brainstorm ideas, or plan without executing actions, useful for complex problem-solving.\nweb_search\nSearches the web for information, providing results with snippets and links from relevant web pages, useful for accessing real-time information.\nEdit Tools\ncopy_path\nCopies a file or directory recursively in the project, more efficient than manually reading and writing files when duplicating content.\ncreate_directory\nCreates a new directory at the specified path within the project, creating all necessary parent directories (similar to mkdir -p).\ncreate_file\nCreates a new file at a specified path with given text content, the most efficient way to create new files or completely replace existing ones.\ndelete_path\nDeletes a file or directory (including contents recursively) at the specified path and confirms the deletion.\nedit_file\nEdits files by replacing specific text with new content.\nmove_path\nMoves or renames a file or directory in the project, performing a rename if only the filename differs.\nterminal\nExecutes shell commands and returns the combined output, creating a new shell process for each invocation.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:07"
  },
  "ai/external-agents.html": {
    "url": "https://zed.dev/docs/ai/external-agents.html",
    "title": "External Agents | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"external-agents\"><a class=\"header\" href=\"#external-agents\">External Agents</a></h1>\n<p>Zed supports terminal-based agents through the <a href=\"https://agentclientprotocol.com\">Agent Client Protocol (ACP)</a>.</p>\n<p>Currently, <a href=\"https://github.com/google-gemini/gemini-cli\">Gemini CLI</a> serves as the reference implementation.\n<a href=\"https://www.anthropic.com/claude-code\">Claude Code</a> is also included by default, and you can <a href=\"#add-custom-agents\">add custom ACP-compatible agents</a> as well.</p>\n<h2 id=\"gemini-cli\"><a class=\"header\" href=\"#gemini-cli\">Gemini CLI</a></h2>\n<p>Zed provides the ability to run <a href=\"https://github.com/google-gemini/gemini-cli\">Gemini CLI</a> directly in the <a href=\"./agent-panel.html\">agent panel</a>.</p>\n<p>Under the hood we run Gemini CLI in the background, and talk to it over ACP.\nThis means that you're running the real Gemini CLI, with all of the advantages of that, but you can see and interact with files in your editor.</p>\n<h3 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h3>\n<p>As of <a href=\"https://zed.dev/releases/stable/0.201.5\">Zed Stable v0.201.5</a> you should be able to use Gemini CLI directly from Zed. First open the agent panel with <kbd class=\"keybinding\">cmd-?|ctrl-?</kbd>, and then use the <code>+</code> button in the top right to start a new Gemini CLI thread.</p>\n<p>If you'd like to bind this to a keyboard shortcut, you can do so by editing your <code>keymap.json</code> file via the <code>zed: open keymap</code> command to include:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"bindings\": {\n      \"cmd-alt-g\": [\"agent::NewExternalAgentThread\", { \"agent\": \"gemini\" }]\n    }\n  }\n]\n</code></pre>\n<h4 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h4>\n<p>The first time you create a Gemini CLI thread, Zed will install <a href=\"https://github.com/zed-industries/claude-code-acp\">@google/gemini-cli</a>. This installation is only available to Zed and is kept up to date as you use the agent.</p>\n<p>By default, Zed will use this managed version of Gemini CLI even if you have it installed globally. However, you can configure it to use a version in your <code>PATH</code> by adding this to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"agent_servers\": {\n    \"gemini\": {\n      \"ignore_system_version\": false\n    }\n  }\n}\n</code></pre>\n<h4 id=\"authentication\"><a class=\"header\" href=\"#authentication\">Authentication</a></h4>\n<p>After you have Gemini CLI running, you'll be prompted to choose your authentication method.</p>\n<p>Most users should click the \"Log in with Google\". This will cause a browser window to pop-up and auth directly with Gemini CLI. Zed does not see your OAuth or access tokens in this case.</p>\n<p>You can also use the \"Gemini API Key\". If you select this, and have the <code>GEMINI_API_KEY</code> set, then we will use that. Otherwise Zed will prompt you for an API key which will be stored securely in your keychain, and used to start Gemini CLI from within Zed.</p>\n<p>The \"Vertex AI\" option is for those who are using <a href=\"https://cloud.google.com/vertex-ai\">Vertex AI</a>, and have already configured their environment correctly.</p>\n<p>For more information, see the <a href=\"https://github.com/google-gemini/gemini-cli/blob/main/docs/index.md\">Gemini CLI docs</a>.</p>\n<h3 id=\"usage\"><a class=\"header\" href=\"#usage\">Usage</a></h3>\n<p>Similar to Zed's first-party agent, you can use Gemini CLI to do anything that you need.\nAnd to give it context, you can @-mention files, recent threads, symbols, or fetch the web.</p>\n<blockquote>\n<p>Note that some first-party agent features don't yet work with Gemini CLI: editing past messages, resuming threads from history, checkpointing, and using the agent in SSH projects.\nWe hope to add these features in the near future.</p>\n</blockquote>\n<h2 id=\"claude-code\"><a class=\"header\" href=\"#claude-code\">Claude Code</a></h2>\n<p>Similar to Gemini CLI, you can also run <a href=\"https://www.anthropic.com/claude-code\">Claude Code</a> directly via Zed's <a href=\"./agent-panel.html\">agent panel</a>.\nUnder the hood, Zed runs Claude Code and communicate to it over ACP, through <a href=\"https://github.com/zed-industries/claude-code-acp\">a dedicated adapter</a>.</p>\n<h3 id=\"getting-started-1\"><a class=\"header\" href=\"#getting-started-1\">Getting Started</a></h3>\n<p>Open the agent panel with <kbd class=\"keybinding\">cmd-?|ctrl-?</kbd>, and then use the <code>+</code> button in the top right to start a new Claude Code thread.</p>\n<p>If you'd like to bind this to a keyboard shortcut, you can do so by editing your <code>keymap.json</code> file via the <code>zed: open keymap</code> command to include:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"bindings\": {\n      \"cmd-alt-c\": [\"agent::NewExternalAgentThread\", { \"agent\": \"claude_code\" }]\n    }\n  }\n]\n</code></pre>\n<h3 id=\"authentication-1\"><a class=\"header\" href=\"#authentication-1\">Authentication</a></h3>\n<p>As of version <code>0.202.7</code> (stable) and <code>0.203.2</code> (preview), authentication to Zed's Claude Code installation is decoupled entirely from Zed's agent. That is to say, an Anthropic API key added via the <a href=\"./llm-providers.html#anthropic\">Zed Agent's settings</a> will <em>not</em> be utilized by Claude Code for authentication and billing.</p>\n<p>To ensure you're using your billing method of choice, <a href=\"./agent-panel.html#new-thread\">open a new Claude Code thread</a>. Then, run <code>/login</code>, and authenticate either via API key, or via <code>Log in with Claude Code</code> to use a Claude Pro/Max subscription.</p>\n<h4 id=\"installation-1\"><a class=\"header\" href=\"#installation-1\">Installation</a></h4>\n<p>The first time you create a Claude Code thread, Zed will install <a href=\"https://github.com/zed-industries/claude-code-acp\">@zed-industries/claude-code-acp</a>. This installation is only available to Zed and is kept up to date as you use the agent.</p>\n<p>Zed will always use this managed version of Claude Code even if you have it installed globally.</p>\n<h3 id=\"usage-1\"><a class=\"header\" href=\"#usage-1\">Usage</a></h3>\n<p>Similar to Zed's first-party agent, you can use Claude Code to do anything that you need.\nAnd to give it context, you can @-mention files, recent threads, symbols, or fetch the web.</p>\n<p>In complement to talking to it <a href=\"https://agentclientprotocol.com\">over ACP</a>, Zed relies on the <a href=\"https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-overview\">Claude Code SDK</a> to support some of its specific features.\nHowever, the SDK doesn't yet expose everything needed to fully support all of them:</p>\n<ul>\n<li>Slash Commands: A subset of <a href=\"https://docs.anthropic.com/en/docs/claude-code/slash-commands#built-in-slash-commands\">built-in commands</a> are supported, while <a href=\"https://docs.anthropic.com/en/docs/claude-code/slash-commands#custom-slash-commands\">custom slash commands</a> are fully supported.</li>\n<li><a href=\"https://docs.anthropic.com/en/docs/claude-code/sub-agents\">Subagents</a> are supported.</li>\n<li><a href=\"https://docs.anthropic.com/en/docs/claude-code/hooks-guide\">Hooks</a> are currently <em>not</em> supported.</li>\n</ul>\n<blockquote>\n<p>Also note that some <a href=\"./agent-panel.html\">first-party agent</a> features don't yet work with Claude Code: editing past messages, resuming threads from history, checkpointing, and using the agent in SSH projects.\nWe hope to add these features in the near future.</p>\n</blockquote>\n<h4 id=\"claudemd\"><a class=\"header\" href=\"#claudemd\">CLAUDE.md</a></h4>\n<p>Claude Code in Zed will automatically use any <code>CLAUDE.md</code> file found in your project root, project subdirectories, or root <code>.claude</code> directory.</p>\n<p>If you don't have a <code>CLAUDE.md</code> file, you can ask Claude Code to create one for you through the <code>init</code> slash command.</p>\n<h2 id=\"add-custom-agents\"><a class=\"header\" href=\"#add-custom-agents\">Add Custom Agents</a></h2>\n<p>You can run any agent speaking ACP in Zed by changing your settings as follows:</p>\n<pre><code class=\"language-json\">{\n  \"agent_servers\": {\n    \"Custom Agent\": {\n      \"command\": \"node\",\n      \"args\": [\"~/projects/agent/index.js\", \"--acp\"],\n      \"env\": {}\n    }\n  }\n}\n</code></pre>\n<p>This can also be useful if you're in the middle of developing a new agent that speaks the protocol and you want to debug it.</p>\n<p>You can also specify a custom path, arguments, or environment for the builtin integrations by using the <code>claude</code> and <code>gemini</code> names.</p>\n<h2 id=\"debugging-agents\"><a class=\"header\" href=\"#debugging-agents\">Debugging Agents</a></h2>\n<p>When using external agents in Zed, you can access the debug view via with <code>dev: open acp logs</code> from the Command Palette. This lets you see the messages being sent and received between Zed and the agent.</p>\n<p><img alt=\"The debug view for ACP logs.\" src=\"https://zed.dev/img/acp/acp-logs.webp\"/></p>\n\n</main>",
    "content_text": "External Agents\nZed supports terminal-based agents through the Agent Client Protocol (ACP).\nCurrently, Gemini CLI serves as the reference implementation.\nClaude Code is also included by default, and you can add custom ACP-compatible agents as well.\nGemini CLI\nZed provides the ability to run Gemini CLI directly in the agent panel.\nUnder the hood we run Gemini CLI in the background, and talk to it over ACP.\nThis means that you're running the real Gemini CLI, with all of the advantages of that, but you can see and interact with files in your editor.\nGetting Started\nAs of Zed Stable v0.201.5 you should be able to use Gemini CLI directly from Zed. First open the agent panel with cmd-?|ctrl-?, and then use the + button in the top right to start a new Gemini CLI thread.\nIf you'd like to bind this to a keyboard shortcut, you can do so by editing your keymap.json file via the zed: open keymap command to include:\n[\n  {\n    \"bindings\": {\n      \"cmd-alt-g\": [\"agent::NewExternalAgentThread\", { \"agent\": \"gemini\" }]\n    }\n  }\n]\n\nInstallation\nThe first time you create a Gemini CLI thread, Zed will install @google/gemini-cli. This installation is only available to Zed and is kept up to date as you use the agent.\nBy default, Zed will use this managed version of Gemini CLI even if you have it installed globally. However, you can configure it to use a version in your PATH by adding this to your settings:\n{\n  \"agent_servers\": {\n    \"gemini\": {\n      \"ignore_system_version\": false\n    }\n  }\n}\n\nAuthentication\nAfter you have Gemini CLI running, you'll be prompted to choose your authentication method.\nMost users should click the \"Log in with Google\". This will cause a browser window to pop-up and auth directly with Gemini CLI. Zed does not see your OAuth or access tokens in this case.\nYou can also use the \"Gemini API Key\". If you select this, and have the GEMINI_API_KEY set, then we will use that. Otherwise Zed will prompt you for an API key which will be stored securely in your keychain, and used to start Gemini CLI from within Zed.\nThe \"Vertex AI\" option is for those who are using Vertex AI, and have already configured their environment correctly.\nFor more information, see the Gemini CLI docs.\nUsage\nSimilar to Zed's first-party agent, you can use Gemini CLI to do anything that you need.\nAnd to give it context, you can @-mention files, recent threads, symbols, or fetch the web.\n\nNote that some first-party agent features don't yet work with Gemini CLI: editing past messages, resuming threads from history, checkpointing, and using the agent in SSH projects.\nWe hope to add these features in the near future.\n\nClaude Code\nSimilar to Gemini CLI, you can also run Claude Code directly via Zed's agent panel.\nUnder the hood, Zed runs Claude Code and communicate to it over ACP, through a dedicated adapter.\nGetting Started\nOpen the agent panel with cmd-?|ctrl-?, and then use the + button in the top right to start a new Claude Code thread.\nIf you'd like to bind this to a keyboard shortcut, you can do so by editing your keymap.json file via the zed: open keymap command to include:\n[\n  {\n    \"bindings\": {\n      \"cmd-alt-c\": [\"agent::NewExternalAgentThread\", { \"agent\": \"claude_code\" }]\n    }\n  }\n]\n\nAuthentication\nAs of version 0.202.7 (stable) and 0.203.2 (preview), authentication to Zed's Claude Code installation is decoupled entirely from Zed's agent. That is to say, an Anthropic API key added via the Zed Agent's settings will not be utilized by Claude Code for authentication and billing.\nTo ensure you're using your billing method of choice, open a new Claude Code thread. Then, run /login, and authenticate either via API key, or via Log in with Claude Code to use a Claude Pro/Max subscription.\nInstallation\nThe first time you create a Claude Code thread, Zed will install @zed-industries/claude-code-acp. This installation is only available to Zed and is kept up to date as you use the agent.\nZed will always use this managed version of Claude Code even if you have it installed globally.\nUsage\nSimilar to Zed's first-party agent, you can use Claude Code to do anything that you need.\nAnd to give it context, you can @-mention files, recent threads, symbols, or fetch the web.\nIn complement to talking to it over ACP, Zed relies on the Claude Code SDK to support some of its specific features.\nHowever, the SDK doesn't yet expose everything needed to fully support all of them:\n\nSlash Commands: A subset of built-in commands are supported, while custom slash commands are fully supported.\nSubagents are supported.\nHooks are currently not supported.\n\n\nAlso note that some first-party agent features don't yet work with Claude Code: editing past messages, resuming threads from history, checkpointing, and using the agent in SSH projects.\nWe hope to add these features in the near future.\n\nCLAUDE.md\nClaude Code in Zed will automatically use any CLAUDE.md file found in your project root, project subdirectories, or root .claude directory.\nIf you don't have a CLAUDE.md file, you can ask Claude Code to create one for you through the init slash command.\nAdd Custom Agents\nYou can run any agent speaking ACP in Zed by changing your settings as follows:\n{\n  \"agent_servers\": {\n    \"Custom Agent\": {\n      \"command\": \"node\",\n      \"args\": [\"~/projects/agent/index.js\", \"--acp\"],\n      \"env\": {}\n    }\n  }\n}\n\nThis can also be useful if you're in the middle of developing a new agent that speaks the protocol and you want to debug it.\nYou can also specify a custom path, arguments, or environment for the builtin integrations by using the claude and gemini names.\nDebugging Agents\nWhen using external agents in Zed, you can access the debug view via with dev: open acp logs from the Command Palette. This lets you see the messages being sent and received between Zed and the agent.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:09"
  },
  "ai/inline-assistant.html": {
    "url": "https://zed.dev/docs/ai/inline-assistant.html",
    "title": "Inline Assistant | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"inline-assistant\"><a class=\"header\" href=\"#inline-assistant\">Inline Assistant</a></h1>\n<h2 id=\"usage-overview\"><a class=\"header\" href=\"#usage-overview\">Usage Overview</a></h2>\n<p>Use <code>ctrl-enter</code> to open the Inline Assistant nearly anywhere you can enter text: editors, text threads, the rules library, channel notes, and even within the terminal panel.</p>\n<p>The Inline Assistant allows you to send the current selection (or the current line) to a language model and modify the selection with the language model's response.</p>\n<p>You can also perform multiple generation requests in parallel by pressing <code>ctrl-enter</code> with multiple cursors, or by pressing the same binding with a selection that spans multiple excerpts in a multibuffer.</p>\n<h2 id=\"context\"><a class=\"header\" href=\"#context\">Context</a></h2>\n<p>Give the Inline Assistant context the same way you can in <a href=\"./agent-panel.html\">the Agent Panel</a>, allowing you to provide additional instructions or rules for code transformations with @-mentions.</p>\n<p>A useful pattern here is to create a thread in the Agent Panel, and then mention that thread with <code>@thread</code> in the Inline Assistant to include it as context.</p>\n<blockquote>\n<p>The Inline Assistant is limited to normal mode context windows (<a href=\"./models.html\">see Models</a> for more).</p>\n</blockquote>\n<h2 id=\"prefilling-prompts\"><a class=\"header\" href=\"#prefilling-prompts\">Prefilling Prompts</a></h2>\n<p>To create a custom keybinding that prefills a prompt, you can add the following format in your keymap:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"context\": \"Editor &amp;&amp; mode == full\",\n    \"bindings\": {\n      \"ctrl-shift-enter\": [\n        \"assistant::InlineAssist\",\n        { \"prompt\": \"Build a snake game\" }\n      ]\n    }\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "Inline Assistant\nUsage Overview\nUse ctrl-enter to open the Inline Assistant nearly anywhere you can enter text: editors, text threads, the rules library, channel notes, and even within the terminal panel.\nThe Inline Assistant allows you to send the current selection (or the current line) to a language model and modify the selection with the language model's response.\nYou can also perform multiple generation requests in parallel by pressing ctrl-enter with multiple cursors, or by pressing the same binding with a selection that spans multiple excerpts in a multibuffer.\nContext\nGive the Inline Assistant context the same way you can in the Agent Panel, allowing you to provide additional instructions or rules for code transformations with @-mentions.\nA useful pattern here is to create a thread in the Agent Panel, and then mention that thread with @thread in the Inline Assistant to include it as context.\n\nThe Inline Assistant is limited to normal mode context windows (see Models for more).\n\nPrefilling Prompts\nTo create a custom keybinding that prefills a prompt, you can add the following format in your keymap:\n[\n  {\n    \"context\": \"Editor && mode == full\",\n    \"bindings\": {\n      \"ctrl-shift-enter\": [\n        \"assistant::InlineAssist\",\n        { \"prompt\": \"Build a snake game\" }\n      ]\n    }\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:12"
  },
  "ai/edit-prediction.html": {
    "url": "https://zed.dev/docs/ai/edit-prediction.html",
    "title": "Edit Prediction | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"edit-prediction\"><a class=\"header\" href=\"#edit-prediction\">Edit Prediction</a></h1>\n<p>Edit Prediction is Zed's native mechanism for predicting the code you want to write through AI.\nEach keystroke sends a new request to our <a href=\"https://huggingface.co/zed-industries/zeta\">open source, open dataset Zeta model</a> and it returns with individual or multi-line suggestions that can be quickly accepted by pressing <code>tab</code>.</p>\n<h2 id=\"configuring-zeta\"><a class=\"header\" href=\"#configuring-zeta\">Configuring Zeta</a></h2>\n<p>Zed's Edit Prediction was initially introduced via a banner on the title bar.\nClicking on it would take you to a modal with a button (\"Enable Edit Prediction\") that sets <code>zed</code> as your <code>edit_prediction_provider</code>.</p>\n<p><img alt=\"Onboarding banner and modal\" src=\"https://zed.dev/img/edit-prediction/docs.webp\"/></p>\n<p>But, if you haven't come across the banner, Zed's Edit Prediction is the default edit prediction provider and you should see it right away in your status bar.</p>\n<h3 id=\"switching-modes\"><a class=\"header\" href=\"#switching-modes\">Switching Modes</a></h3>\n<p>Zed's Edit Prediction comes with two different display modes:</p>\n<ol>\n<li><code>eager</code> (default): predictions are displayed inline as long as it doesn't conflict with language server completions</li>\n<li><code>subtle</code>: predictions only appear inline when holding a modifier key (<code>alt</code> by default)</li>\n</ol>\n<p>Toggle between them via the <code>mode</code> key:</p>\n<pre><code class=\"language-json\">\"edit_predictions\": {\n  \"mode\": \"eager\" | \"subtle\"\n},\n</code></pre>\n<p>Or directly via the UI through the status bar menu:</p>\n<p><img alt=\"Edit Prediction status bar menu, with the modes toggle.\" src=\"https://zed.dev/img/edit-prediction/status-bar-menu.webp\"/></p>\n<h3 id=\"edit-predictions-conflict\"><a class=\"header\" href=\"#edit-predictions-conflict\">Conflict With Other <code>tab</code> Actions</a></h3>\n<p>By default, when <code>tab</code> would normally perform a different action, Zed requires a modifier key to accept predictions:</p>\n<ol>\n<li>When the language server completions menu is visible.</li>\n<li>When your cursor isn't at the right indentation level.</li>\n</ol>\n<p>In these cases, <code>alt-tab</code> is used instead to accept the prediction. When the language server completions menu is open, holding <code>alt</code> first will cause it to temporarily disappear in order to preview the prediction within the buffer.</p>\n<p>On Linux, <code>alt-tab</code> is often used by the window manager for switching windows, so <code>alt-l</code> is provided as the default binding for accepting predictions. <code>tab</code> and <code>alt-tab</code> also work, but aren't displayed by default.</p>\n<p><code class=\"hljs\">editor: accept partial edit prediction</code> (<kbd class=\"keybinding\">ctrl-cmd-right|alt-right</kbd>) can be used to accept the current edit prediction up to the next word boundary.</p>\n<p>See the <a href=\"#github-copilot\">Configuring GitHub Copilot</a> and <a href=\"#supermaven\">Configuring Supermaven</a> sections below for configuration of other providers. Only text insertions at the current cursor are supported for these providers, whereas the Zeta model provides multiple predictions including deletions.</p>\n<h2 id=\"edit-predictions-keybinding\"><a class=\"header\" href=\"#edit-predictions-keybinding\">Configuring Edit Prediction Keybindings</a></h2>\n<p>By default, <code>tab</code> is used to accept edit predictions. You can use another keybinding by inserting this in your keymap:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor &amp;&amp; edit_prediction\",\n  \"bindings\": {\n    // Here we also allow `alt-enter` to accept the prediction\n    \"alt-enter\": \"editor::AcceptEditPrediction\"\n  }\n}\n</code></pre>\n<p>When there's a <a href=\"#edit-predictions-conflict\">conflict with the <code>tab</code> key</a>, Zed uses a different context to accept keybindings (<code>edit_prediction_conflict</code>). If you want to use a different one, you can insert this in your keymap:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor &amp;&amp; edit_prediction_conflict\",\n  \"bindings\": {\n    \"ctrl-enter\": \"editor::AcceptEditPrediction\" // Example of a modified keybinding\n  }\n}\n</code></pre>\n<p>If your keybinding contains a modifier (<code>ctrl</code> in the example above), it will also be used to preview the edit prediction and temporarily hide the language server completion menu.</p>\n<p>You can also bind this action to keybind without a modifier. In that case, Zed will use the default modifier (<code>alt</code>) to preview the edit prediction.</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor &amp;&amp; edit_prediction_conflict\",\n  \"bindings\": {\n    // Here we bind tab to accept even when there's a language server completion\n    // or the cursor isn't at the correct indentation level\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n</code></pre>\n<p>To maintain the use of the modifier key for accepting predictions when there is a language server completions menu, but allow <code>tab</code> to accept predictions regardless of cursor position, you can specify the context further with <code>showing_completions</code>:</p>\n<pre><code class=\"language-json\">{\n  \"context\": \"Editor &amp;&amp; edit_prediction_conflict &amp;&amp; !showing_completions\",\n  \"bindings\": {\n    // Here we don't require a modifier unless there's a language server completion\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n</code></pre>\n<h3 id=\"keybinding-example-always-use-alt-tab\"><a class=\"header\" href=\"#keybinding-example-always-use-alt-tab\">Keybinding Example: Always Use Alt-Tab</a></h3>\n<p>The keybinding example below causes <code>alt-tab</code> to always be used instead of sometimes using <code>tab</code>. You might want this in order to have just one keybinding to use for accepting edit predictions, since the behavior of <code>tab</code> varies based on context.</p>\n<pre><code class=\"language-json\">  {\n    \"context\": \"Editor &amp;&amp; edit_prediction\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\"\n    }\n  },\n  // Bind `tab` back to its original behavior.\n  {\n    \"context\": \"Editor\",\n    \"bindings\": {\n      \"tab\": \"editor::Tab\"\n    }\n  },\n  {\n    \"context\": \"Editor &amp;&amp; showing_completions\",\n    \"bindings\": {\n      \"tab\": \"editor::ComposeCompletion\"\n    }\n  },\n</code></pre>\n<p>If <code>\"vim_mode\": true</code> is set within <code>settings.json</code>, then additional bindings are needed after the above to return <code>tab</code> to its original behavior:</p>\n<pre><code class=\"language-json\">  {\n    \"context\": \"(VimControl &amp;&amp; !menu) || vim_mode == replace || vim_mode == waiting\",\n    \"bindings\": {\n      \"tab\": \"vim::Tab\"\n    }\n  },\n  {\n    \"context\": \"vim_mode == literal\",\n    \"bindings\": {\n      \"tab\": [\"vim::Literal\", [\"tab\", \"\\u0009\"]]\n    }\n  },\n</code></pre>\n<h3 id=\"keybinding-example-displaying-tab-and-alt-tab-on-linux\"><a class=\"header\" href=\"#keybinding-example-displaying-tab-and-alt-tab-on-linux\">Keybinding Example: Displaying Tab and Alt-Tab on Linux</a></h3>\n<p>While <code>tab</code> and <code>alt-tab</code> are supported on Linux, <code>alt-l</code> is displayed instead. If your window manager does not reserve <code>alt-tab</code>, and you would prefer to use <code>tab</code> and <code>alt-tab</code>, include these bindings in <code>keymap.json</code>:</p>\n<pre><code class=\"language-json\">  {\n    \"context\": \"Editor &amp;&amp; edit_prediction\",\n    \"bindings\": {\n      \"tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n  {\n    \"context\": \"Editor &amp;&amp; edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n</code></pre>\n<h3 id=\"edit-predictions-missing-keybinding\"><a class=\"header\" href=\"#edit-predictions-missing-keybinding\">Missing keybind</a></h3>\n<p>Zed requires at least one keybinding for the <code class=\"hljs\">editor: accept edit prediction</code> action in both the <code>Editor &amp;&amp; edit_prediction</code> and <code>Editor &amp;&amp; edit_prediction_conflict</code> contexts (<a href=\"#edit-predictions-keybinding\">learn more above</a>).</p>\n<p>If you have previously bound the default keybindings to different actions in the global context, you will not be able to preview or accept edit predictions. For example:</p>\n<pre><code class=\"language-json\">[\n  // Your keymap\n  {\n    \"bindings\": {\n      // Binds `alt-tab` to a different action globally\n      \"alt-tab\": \"menu::SelectNext\"\n    }\n  }\n]\n</code></pre>\n<p>To fix this, you can specify your own keybinding for accepting edit predictions:</p>\n<pre><code class=\"language-json\">[\n  // ...\n  {\n    \"context\": \"Editor &amp;&amp; edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-l\": \"editor::AcceptEditPrediction\"\n    }\n  }\n]\n</code></pre>\n<p>If you would like to use the default keybinding, you can free it up by either moving yours to a more specific context or changing it to something else.</p>\n<h2 id=\"disabling-automatic-edit-prediction\"><a class=\"header\" href=\"#disabling-automatic-edit-prediction\">Disabling Automatic Edit Prediction</a></h2>\n<p>There are different levels in which you can disable edit predictions to be displayed, including not having it turned on at all.</p>\n<p>Alternatively, if you have Zed set as your provider, consider <a href=\"#switching-modes\">using Subtle Mode</a>.</p>\n<h3 id=\"on-buffers\"><a class=\"header\" href=\"#on-buffers\">On Buffers</a></h3>\n<p>To not have predictions appear automatically as you type, set this within <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"show_edit_predictions\": false\n}\n</code></pre>\n<p>This hides every indication that there is a prediction available, regardless of <a href=\"#switching-modes\">the display mode</a> you're in (valid only if you have Zed as your provider).\nStill, you can trigger edit predictions manually by executing <code class=\"hljs\">editor: show edit prediction</code> or hitting <kbd class=\"keybinding\">alt-tab|alt-&lt;/kbd&gt;.</kbd></p>\n<h3 id=\"for-specific-languages\"><a class=\"header\" href=\"#for-specific-languages\">For Specific Languages</a></h3>\n<p>To not have predictions appear automatically as you type when working with a specific language, set this within <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language\": {\n    \"python\": {\n      \"show_edit_predictions\": false\n    }\n  }\n}\n</code></pre>\n<h3 id=\"in-specific-directories\"><a class=\"header\" href=\"#in-specific-directories\">In Specific Directories</a></h3>\n<p>To disable edit predictions for specific directories or files, set this within <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\"~/.config/zed/settings.json\"]\n  }\n}\n</code></pre>\n<h3 id=\"turning-off-completely\"><a class=\"header\" href=\"#turning-off-completely\">Turning Off Completely</a></h3>\n<p>To completely turn off edit prediction across all providers, explicitly set the settings to <code>none</code>, like so:</p>\n<pre><code class=\"language-json\">\"features\": {\n  \"edit_prediction_provider\": \"none\"\n},\n</code></pre>\n<h2 id=\"github-copilot\"><a class=\"header\" href=\"#github-copilot\">Configuring GitHub Copilot</a></h2>\n<p>To use GitHub Copilot as your provider, set this within <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"copilot\"\n  }\n}\n</code></pre>\n<p>You should be able to sign-in to GitHub Copilot by clicking on the Copilot icon in the status bar and following the setup instructions.</p>\n<h3 id=\"github-copilot-enterprise\"><a class=\"header\" href=\"#github-copilot-enterprise\">Using GitHub Copilot Enterprise</a></h3>\n<p>If your organization uses GitHub Copilot Enterprise, you can configure Zed to use your enterprise instance by specifying the enterprise URI in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"edit_predictions\": {\n    \"copilot\": {\n      \"enterprise_uri\": \"https://your.enterprise.domain\"\n    }\n  }\n}\n</code></pre>\n<p>Replace <code>\"https://your.enterprise.domain\"</code> with the URL provided by your GitHub Enterprise administrator (e.g., <code>https://foo.ghe.com</code>).</p>\n<p>Once set, Zed will route Copilot requests through your enterprise endpoint. When you sign in by clicking the Copilot icon in the status bar, you will be redirected to your configured enterprise URL to complete authentication. All other Copilot features and usage remain the same.</p>\n<p>Copilot can provide multiple completion alternatives, and these can be navigated with the following actions:</p>\n<ul>\n<li><code class=\"hljs\">editor: next edit prediction</code> (<kbd class=\"keybinding\">alt-tab|alt-]</kbd>): To cycle to the next edit prediction</li>\n<li><code class=\"hljs\">editor: previous edit prediction</code> (<kbd class=\"keybinding\">alt-shift-tab|alt-[</kbd>): To cycle to the previous edit prediction</li>\n</ul>\n<h2 id=\"supermaven\"><a class=\"header\" href=\"#supermaven\">Configuring Supermaven</a></h2>\n<p>To use Supermaven as your provider, set this within <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"features\": {\n    \"edit_prediction_provider\": \"supermaven\"\n  }\n}\n</code></pre>\n<p>You should be able to sign-in to Supermaven by clicking on the Supermaven icon in the status bar and following the setup instructions.</p>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<p>You may also use the <a href=\"./agent-panel.html\">Agent Panel</a> or the <a href=\"./inline-assistant.html\">Inline Assistant</a> to interact with language models, see the <a href=\"./overview.html\">AI documentation</a> for more information on the other AI features in Zed.</p>\n\n</main>",
    "content_text": "Edit Prediction\nEdit Prediction is Zed's native mechanism for predicting the code you want to write through AI.\nEach keystroke sends a new request to our open source, open dataset Zeta model and it returns with individual or multi-line suggestions that can be quickly accepted by pressing tab.\nConfiguring Zeta\nZed's Edit Prediction was initially introduced via a banner on the title bar.\nClicking on it would take you to a modal with a button (\"Enable Edit Prediction\") that sets zed as your edit_prediction_provider.\n\nBut, if you haven't come across the banner, Zed's Edit Prediction is the default edit prediction provider and you should see it right away in your status bar.\nSwitching Modes\nZed's Edit Prediction comes with two different display modes:\n\neager (default): predictions are displayed inline as long as it doesn't conflict with language server completions\nsubtle: predictions only appear inline when holding a modifier key (alt by default)\n\nToggle between them via the mode key:\n\"edit_predictions\": {\n  \"mode\": \"eager\" | \"subtle\"\n},\n\nOr directly via the UI through the status bar menu:\n\nConflict With Other tab Actions\nBy default, when tab would normally perform a different action, Zed requires a modifier key to accept predictions:\n\nWhen the language server completions menu is visible.\nWhen your cursor isn't at the right indentation level.\n\nIn these cases, alt-tab is used instead to accept the prediction. When the language server completions menu is open, holding alt first will cause it to temporarily disappear in order to preview the prediction within the buffer.\nOn Linux, alt-tab is often used by the window manager for switching windows, so alt-l is provided as the default binding for accepting predictions. tab and alt-tab also work, but aren't displayed by default.\neditor: accept partial edit prediction (ctrl-cmd-right|alt-right) can be used to accept the current edit prediction up to the next word boundary.\nSee the Configuring GitHub Copilot and Configuring Supermaven sections below for configuration of other providers. Only text insertions at the current cursor are supported for these providers, whereas the Zeta model provides multiple predictions including deletions.\nConfiguring Edit Prediction Keybindings\nBy default, tab is used to accept edit predictions. You can use another keybinding by inserting this in your keymap:\n{\n  \"context\": \"Editor && edit_prediction\",\n  \"bindings\": {\n    // Here we also allow `alt-enter` to accept the prediction\n    \"alt-enter\": \"editor::AcceptEditPrediction\"\n  }\n}\n\nWhen there's a conflict with the tab key, Zed uses a different context to accept keybindings (edit_prediction_conflict). If you want to use a different one, you can insert this in your keymap:\n{\n  \"context\": \"Editor && edit_prediction_conflict\",\n  \"bindings\": {\n    \"ctrl-enter\": \"editor::AcceptEditPrediction\" // Example of a modified keybinding\n  }\n}\n\nIf your keybinding contains a modifier (ctrl in the example above), it will also be used to preview the edit prediction and temporarily hide the language server completion menu.\nYou can also bind this action to keybind without a modifier. In that case, Zed will use the default modifier (alt) to preview the edit prediction.\n{\n  \"context\": \"Editor && edit_prediction_conflict\",\n  \"bindings\": {\n    // Here we bind tab to accept even when there's a language server completion\n    // or the cursor isn't at the correct indentation level\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n\nTo maintain the use of the modifier key for accepting predictions when there is a language server completions menu, but allow tab to accept predictions regardless of cursor position, you can specify the context further with showing_completions:\n{\n  \"context\": \"Editor && edit_prediction_conflict && !showing_completions\",\n  \"bindings\": {\n    // Here we don't require a modifier unless there's a language server completion\n    \"tab\": \"editor::AcceptEditPrediction\"\n  }\n}\n\nKeybinding Example: Always Use Alt-Tab\nThe keybinding example below causes alt-tab to always be used instead of sometimes using tab. You might want this in order to have just one keybinding to use for accepting edit predictions, since the behavior of tab varies based on context.\n  {\n    \"context\": \"Editor && edit_prediction\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\"\n    }\n  },\n  // Bind `tab` back to its original behavior.\n  {\n    \"context\": \"Editor\",\n    \"bindings\": {\n      \"tab\": \"editor::Tab\"\n    }\n  },\n  {\n    \"context\": \"Editor && showing_completions\",\n    \"bindings\": {\n      \"tab\": \"editor::ComposeCompletion\"\n    }\n  },\n\nIf \"vim_mode\": true is set within settings.json, then additional bindings are needed after the above to return tab to its original behavior:\n  {\n    \"context\": \"(VimControl && !menu) || vim_mode == replace || vim_mode == waiting\",\n    \"bindings\": {\n      \"tab\": \"vim::Tab\"\n    }\n  },\n  {\n    \"context\": \"vim_mode == literal\",\n    \"bindings\": {\n      \"tab\": [\"vim::Literal\", [\"tab\", \"\\u0009\"]]\n    }\n  },\n\nKeybinding Example: Displaying Tab and Alt-Tab on Linux\nWhile tab and alt-tab are supported on Linux, alt-l is displayed instead. If your window manager does not reserve alt-tab, and you would prefer to use tab and alt-tab, include these bindings in keymap.json:\n  {\n    \"context\": \"Editor && edit_prediction\",\n    \"bindings\": {\n      \"tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n  {\n    \"context\": \"Editor && edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-tab\": \"editor::AcceptEditPrediction\",\n      // Optional: This makes the default `alt-l` binding do nothing.\n      \"alt-l\": null\n    }\n  },\n\nMissing keybind\nZed requires at least one keybinding for the editor: accept edit prediction action in both the Editor && edit_prediction and Editor && edit_prediction_conflict contexts (learn more above).\nIf you have previously bound the default keybindings to different actions in the global context, you will not be able to preview or accept edit predictions. For example:\n[\n  // Your keymap\n  {\n    \"bindings\": {\n      // Binds `alt-tab` to a different action globally\n      \"alt-tab\": \"menu::SelectNext\"\n    }\n  }\n]\n\nTo fix this, you can specify your own keybinding for accepting edit predictions:\n[\n  // ...\n  {\n    \"context\": \"Editor && edit_prediction_conflict\",\n    \"bindings\": {\n      \"alt-l\": \"editor::AcceptEditPrediction\"\n    }\n  }\n]\n\nIf you would like to use the default keybinding, you can free it up by either moving yours to a more specific context or changing it to something else.\nDisabling Automatic Edit Prediction\nThere are different levels in which you can disable edit predictions to be displayed, including not having it turned on at all.\nAlternatively, if you have Zed set as your provider, consider using Subtle Mode.\nOn Buffers\nTo not have predictions appear automatically as you type, set this within settings.json:\n{\n  \"show_edit_predictions\": false\n}\n\nThis hides every indication that there is a prediction available, regardless of the display mode you're in (valid only if you have Zed as your provider).\nStill, you can trigger edit predictions manually by executing editor: show edit prediction or hitting alt-tab|alt-</kbd>.\nFor Specific Languages\nTo not have predictions appear automatically as you type when working with a specific language, set this within settings.json:\n{\n  \"language\": {\n    \"python\": {\n      \"show_edit_predictions\": false\n    }\n  }\n}\n\nIn Specific Directories\nTo disable edit predictions for specific directories or files, set this within settings.json:\n{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\"~/.config/zed/settings.json\"]\n  }\n}\n\nTurning Off Completely\nTo completely turn off edit prediction across all providers, explicitly set the settings to none, like so:\n\"features\": {\n  \"edit_prediction_provider\": \"none\"\n},\n\nConfiguring GitHub Copilot\nTo use GitHub Copilot as your provider, set this within settings.json:\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"copilot\"\n  }\n}\n\nYou should be able to sign-in to GitHub Copilot by clicking on the Copilot icon in the status bar and following the setup instructions.\nUsing GitHub Copilot Enterprise\nIf your organization uses GitHub Copilot Enterprise, you can configure Zed to use your enterprise instance by specifying the enterprise URI in your settings.json:\n{\n  \"edit_predictions\": {\n    \"copilot\": {\n      \"enterprise_uri\": \"https://your.enterprise.domain\"\n    }\n  }\n}\n\nReplace \"https://your.enterprise.domain\" with the URL provided by your GitHub Enterprise administrator (e.g., https://foo.ghe.com).\nOnce set, Zed will route Copilot requests through your enterprise endpoint. When you sign in by clicking the Copilot icon in the status bar, you will be redirected to your configured enterprise URL to complete authentication. All other Copilot features and usage remain the same.\nCopilot can provide multiple completion alternatives, and these can be navigated with the following actions:\n\neditor: next edit prediction (alt-tab|alt-]): To cycle to the next edit prediction\neditor: previous edit prediction (alt-shift-tab|alt-[): To cycle to the previous edit prediction\n\nConfiguring Supermaven\nTo use Supermaven as your provider, set this within settings.json:\n{\n  \"features\": {\n    \"edit_prediction_provider\": \"supermaven\"\n  }\n}\n\nYou should be able to sign-in to Supermaven by clicking on the Supermaven icon in the status bar and following the setup instructions.\nSee also\nYou may also use the Agent Panel or the Inline Assistant to interact with language models, see the AI documentation for more information on the other AI features in Zed.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:14"
  },
  "ai/text-threads.html": {
    "url": "https://zed.dev/docs/ai/text-threads.html",
    "title": "Text Threads | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"text-threads\"><a class=\"header\" href=\"#text-threads\">Text Threads</a></h1>\n<h2 id=\"overview\"><a class=\"header\" href=\"#overview\">Overview</a></h2>\n<p>Text threads in the <a href=\"./agent-panel.html\">Agent Panel</a> function similarly to any other editor. You can use custom key bindings and work with multiple cursors, allowing for seamless transitions between coding and engaging in discussions with the language models.</p>\n<p>However, the text threads differ with the inclusion of message blocks. These blocks serve as containers for text that correspond to different roles within the context. These roles include:</p>\n<ul>\n<li><code>You</code></li>\n<li><code>Assistant</code></li>\n<li><code>System</code></li>\n</ul>\n<p>To begin, type a message in a <code>You</code> block.</p>\n<p><img alt=\"Asking a question\" src=\"https://zed.dev/img/assistant/ask-a-question.png\"/></p>\n<p>As you type, the remaining tokens count for the selected model is updated.</p>\n<p>Inserting text from an editor is as simple as highlighting the text and running <code>agent: quote selection</code> (<kbd class=\"keybinding\">cmd-&gt;|ctrl-&gt;</kbd>); Zed will wrap it in a fenced code block if it is code.</p>\n<p><img alt=\"Quoting a selection\" src=\"https://zed.dev/img/assistant/quoting-a-selection.png\"/></p>\n<p>To submit a message, use <kbd class=\"keybinding\">cmd-enter|ctrl-enter</kbd>(<code>assistant: assist</code>). Unlike normal threads, where pressing <kbd>enter</kbd> would submit the message, in text threads, our goal is to make it feel as close to a regular editor as possible. So, pressing <kbd class=\"keybinding\">enter|enter</kbd> simply inserts a new line.</p>\n<p>After submitting a message, the response will be streamed below, in an <code>Assistant</code> message block.</p>\n<p><img alt=\"Receiving an answer\" src=\"https://zed.dev/img/assistant/receiving-an-answer.png\"/></p>\n<p>The stream can be canceled at any point with <kbd>escape</kbd>. This is useful if you realize early on that the response is not what you were looking for.</p>\n<p>If you want to start a new conversation at any time, you can hit <kbd>cmd-n|ctrl-n</kbd> or use the <code>New Chat</code> menu option in the hamburger menu at the top left of the panel.</p>\n<p>Simple back-and-forth conversations work well with the text threads. However, there may come a time when you want to modify the previous text in the conversation and steer it in a different direction.</p>\n<h2 id=\"edit-text-thread\"><a class=\"header\" href=\"#edit-text-thread\">Editing a Text Thread</a></h2>\n<p>Text threads give you the flexibility to have control over the context.\nYou can freely edit any previous text, including the responses from the LLM.\nIf you want to remove a message block entirely, simply place your cursor at the beginning of the block and use the <code>delete</code> key.\nA typical workflow might involve making edits and adjustments throughout the context to refine your inquiry or provide additional information. Here's an example:</p>\n<ol>\n<li>Write text in a <code>You</code> block.</li>\n<li>Submit the message with <kbd class=\"keybinding\">cmd-enter|ctrl-enter</kbd>.</li>\n<li>Receive an <code>Assistant</code> response that doesn't meet your expectations.</li>\n<li>Cancel the response with <kbd>escape</kbd>.</li>\n<li>Erase the content of the <code>Assistant</code> message block and remove the block entirely.</li>\n<li>Add additional context to your original message.</li>\n<li>Submit the message with <kbd class=\"keybinding\">cmd-enter|ctrl-enter</kbd>.</li>\n</ol>\n<p>Being able to edit previous messages gives you control over how tokens are used. You don't need to start up a new chat to correct a mistake or to add additional information, and you don't have to waste tokens by submitting follow-up corrections.</p>\n<blockquote>\n<p><strong>Note</strong>: The act of editing past messages is often referred to as \"Rewriting History\" in the context of the language models.</p>\n</blockquote>\n<p>Some additional points to keep in mind:</p>\n<ul>\n<li>You can cycle the role of a message block by clicking on the role, which is useful when you receive a response in an <code>Assistant</code> block that you want to edit and send back up as a <code>You</code> block.</li>\n</ul>\n<h2 id=\"commands\"><a class=\"header\" href=\"#commands\">Commands Overview</a></h2>\n<p>Slash commands enhance the assistant's capabilities. Begin by typing a <code>/</code> at the beginning of the line to see a list of available commands:</p>\n<ul>\n<li><code>/default</code>: Inserts the default rule</li>\n<li><code>/diagnostics</code>: Injects errors reported by the project's language server</li>\n<li><code>/fetch</code>: Fetches the content of a webpage and inserts it</li>\n<li><code>/file</code>: Inserts a single file or a directory of files</li>\n<li><code>/now</code>: Inserts the current date and time</li>\n<li><code>/prompt</code>: Adds a custom-configured prompt to the context (<a href=\"./rules.html#rules-library\">see Rules Library</a>)</li>\n<li><code>/symbols</code>: Inserts the current tab's active symbols</li>\n<li><code>/tab</code>: Inserts the content of the active tab or all open tabs</li>\n<li><code>/terminal</code>: Inserts a select number of lines of output from the terminal</li>\n<li><code>/selection</code>: Inserts the selected text</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Remember, commands are only evaluated when the text thread is created or when the command is inserted, so a command like <code>/now</code> won't continuously update, or <code>/file</code> commands won't keep their contents up to date.</p>\n</blockquote>\n<h3 id=\"default\"><a class=\"header\" href=\"#default\"><code>/default</code></a></h3>\n<p>Read more about <code>/default</code> in the <a href=\"./rules.html#default-rules\">Rules: Editing the Default Rules</a> section.</p>\n<p>Usage: <code>/default</code></p>\n<h3 id=\"diagnostics\"><a class=\"header\" href=\"#diagnostics\"><code>/diagnostics</code></a></h3>\n<p>The <code>/diagnostics</code> command injects errors reported by the project's language server into the context. This is useful for getting an overview of current issues in your project.</p>\n<p>Usage: <code>/diagnostics [--include-warnings] [path]</code></p>\n<ul>\n<li><code>--include-warnings</code>: Optional flag to include warnings in addition to errors.</li>\n<li><code>path</code>: Optional path to limit diagnostics to a specific file or directory.</li>\n</ul>\n<h3 id=\"file\"><a class=\"header\" href=\"#file\"><code>/file</code></a></h3>\n<p>The <code>/file</code> command inserts the content of a single file or a directory of files into the context. This allows you to reference specific parts of your project in your conversation with the assistant.</p>\n<p>Usage: <code>/file &lt;path&gt;</code></p>\n<p>You can use glob patterns to match multiple files or directories.</p>\n<p>Examples:</p>\n<ul>\n<li><code>/file src/index.js</code> - Inserts the content of <code>src/index.js</code> into the context.</li>\n<li><code>/file src/*.js</code> - Inserts the content of all <code>.js</code> files in the <code>src</code> directory.</li>\n<li><code>/file src</code> - Inserts the content of all files in the <code>src</code> directory.</li>\n</ul>\n<h3 id=\"now\"><a class=\"header\" href=\"#now\"><code>/now</code></a></h3>\n<p>The <code>/now</code> command inserts the current date and time into the context. This can be useful letting the language model know the current time (and by extension, how old their current knowledge base is).</p>\n<p>Usage: <code>/now</code></p>\n<h3 id=\"prompt\"><a class=\"header\" href=\"#prompt\"><code>/prompt</code></a></h3>\n<p>The <code>/prompt</code> command inserts a prompt from the prompt library into the context. It can also be used to nest prompts within prompts.</p>\n<p>Usage: <code>/prompt &lt;prompt_name&gt;</code></p>\n<p>Related: <code>/default</code></p>\n<h3 id=\"symbols\"><a class=\"header\" href=\"#symbols\"><code>/symbols</code></a></h3>\n<p>The <code>/symbols</code> command inserts the active symbols (functions, classes, etc.) from the current tab into the context. This is useful for getting an overview of the structure of the current file.</p>\n<p>Usage: <code>/symbols</code></p>\n<h3 id=\"tab\"><a class=\"header\" href=\"#tab\"><code>/tab</code></a></h3>\n<p>The <code>/tab</code> command inserts the content of the active tab or all open tabs into the context. This allows you to reference the content you're currently working on.</p>\n<p>Usage: <code>/tab [tab_name|all]</code></p>\n<ul>\n<li><code>tab_name</code>: Optional name of a specific tab to insert.</li>\n<li><code>all</code>: Insert content from all open tabs.</li>\n</ul>\n<p>Examples:</p>\n<ul>\n<li><code>/tab</code> - Inserts the content of the active tab.</li>\n<li><code>/tab \"index.js\"</code> - Inserts the content of the tab named \"index.js\".</li>\n<li><code>/tab all</code> - Inserts the content of all open tabs.</li>\n</ul>\n<h3 id=\"terminal\"><a class=\"header\" href=\"#terminal\"><code>/terminal</code></a></h3>\n<p>The <code>/terminal</code> command inserts a select number of lines of output from the terminal into the context. This is useful for referencing recent command outputs or logs.</p>\n<p>Usage: <code>/terminal [&lt;number&gt;]</code></p>\n<ul>\n<li><code>&lt;number&gt;</code>: Optional parameter to specify the number of lines to insert (default is a 50).</li>\n</ul>\n<h3 id=\"selection\"><a class=\"header\" href=\"#selection\"><code>/selection</code></a></h3>\n<p>The <code>/selection</code> command inserts the selected text in the editor into the context. This is useful for referencing specific parts of your code.</p>\n<p>This is equivalent to the <code>agent: quote selection</code> command (<kbd class=\"keybinding\">cmd-&gt;|ctrl-&gt;</kbd>).</p>\n<p>Usage: <code>/selection</code></p>\n<h2 id=\"slash-commands-in-rules\"><a class=\"header\" href=\"#slash-commands-in-rules\">Commands in the Rules Library</a></h2>\n<p><a href=\"#commands\">Commands</a> can be used in rules, in the Rules Library (previously known as Prompt Library), to insert dynamic content or perform actions.\nFor example, if you want to create a rule where it is important for the model to know the date, you can use the <code>/now</code> command to insert the current date.</p>\n<blockquote>\n<p><strong>Warn:</strong> Slash commands in rules <strong>only</strong> work when they are used in text threads. Using them in non-text threads is not supported.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> Slash commands in rules <strong>must</strong> be on their own line.</p>\n</blockquote>\n<p>See the <a href=\"#commands\">list of commands</a> above for more information on commands, and what slash commands are available.</p>\n<h3 id=\"example\"><a class=\"header\" href=\"#example\">Example</a></h3>\n<pre><code class=\"language-plaintext\">You are an expert Rust engineer. The user has asked you to review their project and answer some questions.\n\nHere is some information about their project:\n\n/file Cargo.toml\n</code></pre>\n<p>In the above example, the <code>@file</code> command is used to insert the contents of the <code>Cargo.toml</code> file (or all <code>Cargo.toml</code> files present in the project) into the rule.</p>\n<h2 id=\"nesting-rules\"><a class=\"header\" href=\"#nesting-rules\">Nesting Rules</a></h2>\n<p>Similar to adding rules to the default rules, you can nest rules within other rules with the <code>/prompt</code> command (only supported in Text Threads currently).</p>\n<p>You might want to nest rules to:</p>\n<ul>\n<li>Create templates on the fly</li>\n<li>Break collections like docs or references into smaller, mix-and-matchable parts</li>\n<li>Create variants of a similar rule (e.g., <code>Async Rust - Tokio</code> vs. <code>Async Rust - Async-std</code>)</li>\n</ul>\n<h3 id=\"example-1\"><a class=\"header\" href=\"#example-1\">Example:</a></h3>\n<pre><code class=\"language-plaintext\">Title: Zed-Flavored Rust\n\n## About Zed\n\n/prompt Zed: Zed (a rule about what Zed is)\n\n## Rust - Zed Style\n\n/prompt Rust: Async - Async-std (zed doesn't use tokio)\n/prompt Rust: Zed-style Crates (we have some unique conventions)\n/prompt Rust - Workspace deps (bias towards reusing deps from the workspace)\n</code></pre>\n<p><em>The text in parentheses above are comments and are not part of the rule.</em></p>\n<blockquote>\n<p><strong>Note:</strong> While you technically <em>can</em> nest a rule within itself, we wouldn't recommend it (in the strongest of terms.) Use at your own risk!</p>\n</blockquote>\n<p>By using nested rules, you can create modular and reusable rule components that can be combined in various ways to suit different scenarios.</p>\n<blockquote>\n<p><strong>Note:</strong> When using slash commands to bring in additional context, the injected content can be edited directly inline in the text thread—edits here will not propagate to the saved rules.</p>\n</blockquote>\n<h2 id=\"extensibility\"><a class=\"header\" href=\"#extensibility\">Extensibility</a></h2>\n<p>Additional slash commands can be provided by extensions.</p>\n<p>See <a href=\"../extensions/slash-commands.html\">Extension: Slash Commands</a> to learn how to create your own.</p>\n<h2 id=\"advanced-concepts\"><a class=\"header\" href=\"#advanced-concepts\">Advanced Concepts</a></h2>\n<h3 id=\"rule-templates\"><a class=\"header\" href=\"#rule-templates\">Rule Templates</a></h3>\n<p>Zed uses rule templates to power internal assistant features, like the terminal assistant, or the content rules used in the inline assistant.</p>\n<p>Zed has the following internal rule templates:</p>\n<ul>\n<li><code>content_prompt.hbs</code>: Used for generating content in the editor.</li>\n<li><code>terminal_assistant_prompt.hbs</code>: Used for the terminal assistant feature.</li>\n</ul>\n<p>At this point it is unknown if we will expand templates further to be user-creatable.</p>\n<h3 id=\"overriding-templates\"><a class=\"header\" href=\"#overriding-templates\">Overriding Templates</a></h3>\n<blockquote>\n<p><strong>Note:</strong> It is not recommended to override templates unless you know what you are doing. Editing templates will break your assistant if done incorrectly.</p>\n</blockquote>\n<p>Zed allows you to override the default rules used for various assistant features by placing custom Handlebars (.hbs) templates in your <code>~/.config/zed/prompt_overrides</code> directory.</p>\n<p>The following templates can be overridden:</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/zed-industries/zed/tree/main/assets/prompts/content_prompt.hbs\"><code>content_prompt.hbs</code></a>: Used for generating content in the editor.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/zed-industries/zed/tree/main/assets/prompts/terminal_assistant_prompt.hbs\"><code>terminal_assistant_prompt.hbs</code></a>: Used for the terminal assistant feature.</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Note:</strong> Be sure you want to override these, as you'll miss out on iteration on our built-in features. This should be primarily used when developing Zed.</p>\n</blockquote>\n<p>You can customize these templates to better suit your needs while maintaining the core structure and variables used by Zed. Zed will automatically reload your prompt overrides when they change on disk.</p>\n<p>Consult Zed's <a href=\"https://github.com/zed-industries/zed/tree/main/assets/prompts\">assets/prompts</a> directory for current versions you can play with.</p>\n<h3 id=\"history\"><a class=\"header\" href=\"#history\">History</a></h3>\n<p>After you submit your first message in a text thread, a name for your context is generated by the language model, and the context is automatically saved to your file system in</p>\n<ul>\n<li><code>~/.config/zed/conversations</code> (macOS)</li>\n<li><code>~/.local/share/zed/conversations</code> (Linux)</li>\n<li><code>%LocalAppData%\\Zed\\conversations</code> (Windows)</li>\n</ul>\n<p>You can access and load previous contexts by clicking on the history button in the top-left corner of the agent panel.</p>\n<p><img alt=\"Viewing assistant history\" src=\"https://zed.dev/img/assistant/assistant-history.png\"/></p>\n\n</main>",
    "content_text": "Text Threads\nOverview\nText threads in the Agent Panel function similarly to any other editor. You can use custom key bindings and work with multiple cursors, allowing for seamless transitions between coding and engaging in discussions with the language models.\nHowever, the text threads differ with the inclusion of message blocks. These blocks serve as containers for text that correspond to different roles within the context. These roles include:\n\nYou\nAssistant\nSystem\n\nTo begin, type a message in a You block.\n\nAs you type, the remaining tokens count for the selected model is updated.\nInserting text from an editor is as simple as highlighting the text and running agent: quote selection (cmd->|ctrl->); Zed will wrap it in a fenced code block if it is code.\n\nTo submit a message, use cmd-enter|ctrl-enter(assistant: assist). Unlike normal threads, where pressing enter would submit the message, in text threads, our goal is to make it feel as close to a regular editor as possible. So, pressing enter|enter simply inserts a new line.\nAfter submitting a message, the response will be streamed below, in an Assistant message block.\n\nThe stream can be canceled at any point with escape. This is useful if you realize early on that the response is not what you were looking for.\nIf you want to start a new conversation at any time, you can hit cmd-n|ctrl-n or use the New Chat menu option in the hamburger menu at the top left of the panel.\nSimple back-and-forth conversations work well with the text threads. However, there may come a time when you want to modify the previous text in the conversation and steer it in a different direction.\nEditing a Text Thread\nText threads give you the flexibility to have control over the context.\nYou can freely edit any previous text, including the responses from the LLM.\nIf you want to remove a message block entirely, simply place your cursor at the beginning of the block and use the delete key.\nA typical workflow might involve making edits and adjustments throughout the context to refine your inquiry or provide additional information. Here's an example:\n\nWrite text in a You block.\nSubmit the message with cmd-enter|ctrl-enter.\nReceive an Assistant response that doesn't meet your expectations.\nCancel the response with escape.\nErase the content of the Assistant message block and remove the block entirely.\nAdd additional context to your original message.\nSubmit the message with cmd-enter|ctrl-enter.\n\nBeing able to edit previous messages gives you control over how tokens are used. You don't need to start up a new chat to correct a mistake or to add additional information, and you don't have to waste tokens by submitting follow-up corrections.\n\nNote: The act of editing past messages is often referred to as \"Rewriting History\" in the context of the language models.\n\nSome additional points to keep in mind:\n\nYou can cycle the role of a message block by clicking on the role, which is useful when you receive a response in an Assistant block that you want to edit and send back up as a You block.\n\nCommands Overview\nSlash commands enhance the assistant's capabilities. Begin by typing a / at the beginning of the line to see a list of available commands:\n\n/default: Inserts the default rule\n/diagnostics: Injects errors reported by the project's language server\n/fetch: Fetches the content of a webpage and inserts it\n/file: Inserts a single file or a directory of files\n/now: Inserts the current date and time\n/prompt: Adds a custom-configured prompt to the context (see Rules Library)\n/symbols: Inserts the current tab's active symbols\n/tab: Inserts the content of the active tab or all open tabs\n/terminal: Inserts a select number of lines of output from the terminal\n/selection: Inserts the selected text\n\n\nNote: Remember, commands are only evaluated when the text thread is created or when the command is inserted, so a command like /now won't continuously update, or /file commands won't keep their contents up to date.\n\n/default\nRead more about /default in the Rules: Editing the Default Rules section.\nUsage: /default\n/diagnostics\nThe /diagnostics command injects errors reported by the project's language server into the context. This is useful for getting an overview of current issues in your project.\nUsage: /diagnostics [--include-warnings] [path]\n\n--include-warnings: Optional flag to include warnings in addition to errors.\npath: Optional path to limit diagnostics to a specific file or directory.\n\n/file\nThe /file command inserts the content of a single file or a directory of files into the context. This allows you to reference specific parts of your project in your conversation with the assistant.\nUsage: /file <path>\nYou can use glob patterns to match multiple files or directories.\nExamples:\n\n/file src/index.js - Inserts the content of src/index.js into the context.\n/file src/*.js - Inserts the content of all .js files in the src directory.\n/file src - Inserts the content of all files in the src directory.\n\n/now\nThe /now command inserts the current date and time into the context. This can be useful letting the language model know the current time (and by extension, how old their current knowledge base is).\nUsage: /now\n/prompt\nThe /prompt command inserts a prompt from the prompt library into the context. It can also be used to nest prompts within prompts.\nUsage: /prompt <prompt_name>\nRelated: /default\n/symbols\nThe /symbols command inserts the active symbols (functions, classes, etc.) from the current tab into the context. This is useful for getting an overview of the structure of the current file.\nUsage: /symbols\n/tab\nThe /tab command inserts the content of the active tab or all open tabs into the context. This allows you to reference the content you're currently working on.\nUsage: /tab [tab_name|all]\n\ntab_name: Optional name of a specific tab to insert.\nall: Insert content from all open tabs.\n\nExamples:\n\n/tab - Inserts the content of the active tab.\n/tab \"index.js\" - Inserts the content of the tab named \"index.js\".\n/tab all - Inserts the content of all open tabs.\n\n/terminal\nThe /terminal command inserts a select number of lines of output from the terminal into the context. This is useful for referencing recent command outputs or logs.\nUsage: /terminal [<number>]\n\n<number>: Optional parameter to specify the number of lines to insert (default is a 50).\n\n/selection\nThe /selection command inserts the selected text in the editor into the context. This is useful for referencing specific parts of your code.\nThis is equivalent to the agent: quote selection command (cmd->|ctrl->).\nUsage: /selection\nCommands in the Rules Library\nCommands can be used in rules, in the Rules Library (previously known as Prompt Library), to insert dynamic content or perform actions.\nFor example, if you want to create a rule where it is important for the model to know the date, you can use the /now command to insert the current date.\n\nWarn: Slash commands in rules only work when they are used in text threads. Using them in non-text threads is not supported.\n\n\nNote: Slash commands in rules must be on their own line.\n\nSee the list of commands above for more information on commands, and what slash commands are available.\nExample\nYou are an expert Rust engineer. The user has asked you to review their project and answer some questions.\n\nHere is some information about their project:\n\n/file Cargo.toml\n\nIn the above example, the @file command is used to insert the contents of the Cargo.toml file (or all Cargo.toml files present in the project) into the rule.\nNesting Rules\nSimilar to adding rules to the default rules, you can nest rules within other rules with the /prompt command (only supported in Text Threads currently).\nYou might want to nest rules to:\n\nCreate templates on the fly\nBreak collections like docs or references into smaller, mix-and-matchable parts\nCreate variants of a similar rule (e.g., Async Rust - Tokio vs. Async Rust - Async-std)\n\nExample:\nTitle: Zed-Flavored Rust\n\n## About Zed\n\n/prompt Zed: Zed (a rule about what Zed is)\n\n## Rust - Zed Style\n\n/prompt Rust: Async - Async-std (zed doesn't use tokio)\n/prompt Rust: Zed-style Crates (we have some unique conventions)\n/prompt Rust - Workspace deps (bias towards reusing deps from the workspace)\n\nThe text in parentheses above are comments and are not part of the rule.\n\nNote: While you technically can nest a rule within itself, we wouldn't recommend it (in the strongest of terms.) Use at your own risk!\n\nBy using nested rules, you can create modular and reusable rule components that can be combined in various ways to suit different scenarios.\n\nNote: When using slash commands to bring in additional context, the injected content can be edited directly inline in the text thread—edits here will not propagate to the saved rules.\n\nExtensibility\nAdditional slash commands can be provided by extensions.\nSee Extension: Slash Commands to learn how to create your own.\nAdvanced Concepts\nRule Templates\nZed uses rule templates to power internal assistant features, like the terminal assistant, or the content rules used in the inline assistant.\nZed has the following internal rule templates:\n\ncontent_prompt.hbs: Used for generating content in the editor.\nterminal_assistant_prompt.hbs: Used for the terminal assistant feature.\n\nAt this point it is unknown if we will expand templates further to be user-creatable.\nOverriding Templates\n\nNote: It is not recommended to override templates unless you know what you are doing. Editing templates will break your assistant if done incorrectly.\n\nZed allows you to override the default rules used for various assistant features by placing custom Handlebars (.hbs) templates in your ~/.config/zed/prompt_overrides directory.\nThe following templates can be overridden:\n\n\ncontent_prompt.hbs: Used for generating content in the editor.\n\n\nterminal_assistant_prompt.hbs: Used for the terminal assistant feature.\n\n\n\nNote: Be sure you want to override these, as you'll miss out on iteration on our built-in features. This should be primarily used when developing Zed.\n\nYou can customize these templates to better suit your needs while maintaining the core structure and variables used by Zed. Zed will automatically reload your prompt overrides when they change on disk.\nConsult Zed's assets/prompts directory for current versions you can play with.\nHistory\nAfter you submit your first message in a text thread, a name for your context is generated by the language model, and the context is automatically saved to your file system in\n\n~/.config/zed/conversations (macOS)\n~/.local/share/zed/conversations (Linux)\n%LocalAppData%\\Zed\\conversations (Windows)\n\nYou can access and load previous contexts by clicking on the history button in the top-left corner of the agent panel.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:16"
  },
  "ai/rules.html": {
    "url": "https://zed.dev/docs/ai/rules.html",
    "title": "Rules | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"using-rules\"><a class=\"header\" href=\"#using-rules\">Using Rules</a></h1>\n<p>A rule is essentially a prompt that is inserted at the beginning of each interaction with the Agent.\nCurrently, Zed supports <code>.rules</code> files at the directory's root and the Rules Library, which allows you to store multiple rules for on-demand usage.</p>\n<h2 id=\"rules-files\"><a class=\"header\" href=\"#rules-files\"><code>.rules</code> files</a></h2>\n<p>Zed supports including <code>.rules</code> files at the top level of worktrees, and they act as project-level instructions that are included in all of your interactions with the Agent Panel.\nOther names for this file are also supported for compatibility with other agents, but note that the first file which matches in this list will be used:</p>\n<ul>\n<li><code>.rules</code></li>\n<li><code>.cursorrules</code></li>\n<li><code>.windsurfrules</code></li>\n<li><code>.clinerules</code></li>\n<li><code>.github/copilot-instructions.md</code></li>\n<li><code>AGENT.md</code></li>\n<li><code>AGENTS.md</code></li>\n<li><code>CLAUDE.md</code></li>\n<li><code>GEMINI.md</code></li>\n</ul>\n<h2 id=\"rules-library\"><a class=\"header\" href=\"#rules-library\">Rules Library</a></h2>\n<p>The Rules Library is an interface for writing and managing rules. Like other text-driven UIs in Zed, it is a full editor with syntax highlighting, keyboard shortcuts, etc.</p>\n<p>You can use the inline assistant right in the rules editor, allowing you to automate and rewrite rules.</p>\n<h3 id=\"opening-the-rules-library\"><a class=\"header\" href=\"#opening-the-rules-library\">Opening the Rules Library</a></h3>\n<ol>\n<li>Open the Agent Panel.</li>\n<li>Click on the Agent menu (<code>...</code>) in the top right corner.</li>\n<li>Select <code>Rules...</code> from the dropdown.</li>\n</ol>\n<p>You can also use the <code>agent: open rules library</code> command while in the Agent Panel.</p>\n<h3 id=\"managing-rules\"><a class=\"header\" href=\"#managing-rules\">Managing Rules</a></h3>\n<p>Once a rules file is selected, you can edit it directly in the built-in editor. Its title can be changed from the editor title bar as well.</p>\n<p>Rules can be duplicated, deleted, or added to the default rules using the buttons in the rules editor.</p>\n<h3 id=\"creating-rules\"><a class=\"header\" href=\"#creating-rules\">Creating Rules</a></h3>\n<p>To create a rule file, simply open the <code>Rules Library</code> and click the <code>+</code> button. Rules files are stored locally and can be accessed from the library at any time.</p>\n<p>Having a series of rules files specifically tailored to prompt engineering can also help you write consistent and effective rules.</p>\n<p>Here are a couple of helpful resources for writing better rules:</p>\n<ul>\n<li><a href=\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview\">Anthropic: Prompt Engineering</a></li>\n<li><a href=\"https://platform.openai.com/docs/guides/prompt-engineering\">OpenAI: Prompt Engineering</a></li>\n</ul>\n<h3 id=\"default-rules\"><a class=\"header\" href=\"#default-rules\">Editing the Default Rules</a></h3>\n<p>Zed allows you to customize the default rules used when interacting with LLMs.\nOr to be more precise, it uses a series of rules that are combined to form the default rules.</p>\n<p>Default rules are included in the context of every new thread automatically.\nYou can also manually add other rules (that are not flagged as default) as context using the <code>@rule</code> command.</p>\n<h2 id=\"migrating-from-prompt-library\"><a class=\"header\" href=\"#migrating-from-prompt-library\">Migrating from Prompt Library</a></h2>\n<p>Previously, the Rules Library was called the \"Prompt Library\".\nThe new rules system replaces the Prompt Library except in a few specific cases, which are outlined below.</p>\n<h3 id=\"slash-commands-in-rules\"><a class=\"header\" href=\"#slash-commands-in-rules\">Slash Commands in Rules</a></h3>\n<p>Previously, it was possible to use slash commands (now @-mentions) in custom prompts (now rules).\nThere is currently no support for using @-mentions in rules files, however, slash commands are supported in rules files when used with text threads.\nSee the documentation for using <a href=\"./text-threads.html#slash-commands-in-rules\">slash commands in rules</a> for more information.</p>\n<h3 id=\"prompt-templates\"><a class=\"header\" href=\"#prompt-templates\">Prompt templates</a></h3>\n<p>Zed maintains backwards compatibility with its original template system, which allows you to customize prompts used throughout the application, including the inline assistant.\nWhile the Rules Library is now the primary way to manage prompts, you can still use these legacy templates to override default prompts.\nFor more details, see the <a href=\"./text-threads.html#rule-templates\">Rules Templates</a> section under <a href=\"./text-threads.html\">Text Threads</a>.</p>\n\n</main>",
    "content_text": "Using Rules\nA rule is essentially a prompt that is inserted at the beginning of each interaction with the Agent.\nCurrently, Zed supports .rules files at the directory's root and the Rules Library, which allows you to store multiple rules for on-demand usage.\n.rules files\nZed supports including .rules files at the top level of worktrees, and they act as project-level instructions that are included in all of your interactions with the Agent Panel.\nOther names for this file are also supported for compatibility with other agents, but note that the first file which matches in this list will be used:\n\n.rules\n.cursorrules\n.windsurfrules\n.clinerules\n.github/copilot-instructions.md\nAGENT.md\nAGENTS.md\nCLAUDE.md\nGEMINI.md\n\nRules Library\nThe Rules Library is an interface for writing and managing rules. Like other text-driven UIs in Zed, it is a full editor with syntax highlighting, keyboard shortcuts, etc.\nYou can use the inline assistant right in the rules editor, allowing you to automate and rewrite rules.\nOpening the Rules Library\n\nOpen the Agent Panel.\nClick on the Agent menu (...) in the top right corner.\nSelect Rules... from the dropdown.\n\nYou can also use the agent: open rules library command while in the Agent Panel.\nManaging Rules\nOnce a rules file is selected, you can edit it directly in the built-in editor. Its title can be changed from the editor title bar as well.\nRules can be duplicated, deleted, or added to the default rules using the buttons in the rules editor.\nCreating Rules\nTo create a rule file, simply open the Rules Library and click the + button. Rules files are stored locally and can be accessed from the library at any time.\nHaving a series of rules files specifically tailored to prompt engineering can also help you write consistent and effective rules.\nHere are a couple of helpful resources for writing better rules:\n\nAnthropic: Prompt Engineering\nOpenAI: Prompt Engineering\n\nEditing the Default Rules\nZed allows you to customize the default rules used when interacting with LLMs.\nOr to be more precise, it uses a series of rules that are combined to form the default rules.\nDefault rules are included in the context of every new thread automatically.\nYou can also manually add other rules (that are not flagged as default) as context using the @rule command.\nMigrating from Prompt Library\nPreviously, the Rules Library was called the \"Prompt Library\".\nThe new rules system replaces the Prompt Library except in a few specific cases, which are outlined below.\nSlash Commands in Rules\nPreviously, it was possible to use slash commands (now @-mentions) in custom prompts (now rules).\nThere is currently no support for using @-mentions in rules files, however, slash commands are supported in rules files when used with text threads.\nSee the documentation for using slash commands in rules for more information.\nPrompt templates\nZed maintains backwards compatibility with its original template system, which allows you to customize prompts used throughout the application, including the inline assistant.\nWhile the Rules Library is now the primary way to manage prompts, you can still use these legacy templates to override default prompts.\nFor more details, see the Rules Templates section under Text Threads.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:19"
  },
  "ai/mcp.html": {
    "url": "https://zed.dev/docs/ai/mcp.html",
    "title": "Model Context Protocol | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"model-context-protocol\"><a class=\"header\" href=\"#model-context-protocol\">Model Context Protocol</a></h1>\n<p>Zed uses the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a> to interact with context servers.</p>\n<blockquote>\n<p>The Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.</p>\n</blockquote>\n<p>Check out the <a href=\"https://www.anthropic.com/news/model-context-protocol\">Anthropic news post</a> and the <a href=\"https://zed.dev/blog/mcp\">Zed blog post</a> for a general intro to MCP.</p>\n<h2 id=\"installing-mcp-servers\"><a class=\"header\" href=\"#installing-mcp-servers\">Installing MCP Servers</a></h2>\n<h3 id=\"as-extensions\"><a class=\"header\" href=\"#as-extensions\">As Extensions</a></h3>\n<p>One of the ways you can use MCP servers in Zed is by exposing them as an extension.\nTo learn how to create your own, check out the <a href=\"../extensions/mcp-extensions.html\">MCP Server Extensions</a> page for more details.</p>\n<p>Thanks to our awesome community, many MCP servers have already been added as extensions.\nYou can check which ones are available via any of these routes:</p>\n<ol>\n<li><a href=\"https://zed.dev/extensions?filter=context-servers\">the Zed website</a></li>\n<li>in the app, open the Command Palette and run the <code>zed: extensions</code> action</li>\n<li>in the app, go to the Agent Panel's top-right menu and look for the \"View Server Extensions\" menu item</li>\n</ol>\n<p>In any case, here are some of the ones available:</p>\n<ul>\n<li><a href=\"https://zed.dev/extensions/context7-mcp-server\">Context7</a></li>\n<li><a href=\"https://zed.dev/extensions/github-mcp-server\">GitHub</a></li>\n<li><a href=\"https://zed.dev/extensions/puppeteer-mcp-server\">Puppeteer</a></li>\n<li><a href=\"https://zed.dev/extensions/gem\">Gem</a></li>\n<li><a href=\"https://zed.dev/extensions/brave-search-mcp-server\">Brave Search</a></li>\n<li><a href=\"https://github.com/aqrln/prisma-mcp-zed\">Prisma</a></li>\n<li><a href=\"https://zed.dev/extensions/framelink-figma-mcp-server\">Framelink Figma</a></li>\n<li><a href=\"https://zed.dev/extensions/linear-mcp-server\">Linear</a></li>\n<li><a href=\"https://zed.dev/extensions/resend-mcp-server\">Resend</a></li>\n</ul>\n<h3 id=\"as-custom-servers\"><a class=\"header\" href=\"#as-custom-servers\">As Custom Servers</a></h3>\n<p>Creating an extension is not the only way to use MCP servers in Zed.\nYou can connect them by adding their commands directly to your <code>settings.json</code>, like so:</p>\n<pre><code class=\"language-json\">{\n  \"context_servers\": {\n    \"your-mcp-server\": {\n      \"source\": \"custom\",\n      \"command\": \"some-command\",\n      \"args\": [\"arg-1\", \"arg-2\"],\n      \"env\": {}\n    }\n  }\n}\n</code></pre>\n<p>Alternatively, you can also add a custom server by accessing the Agent Panel's Settings view (also accessible via the <code>agent: open settings</code> action).\nFrom there, you can add it through the modal that appears when you click the \"Add Custom Server\" button.</p>\n<h2 id=\"using-mcp-servers\"><a class=\"header\" href=\"#using-mcp-servers\">Using MCP Servers</a></h2>\n<h3 id=\"installation-check\"><a class=\"header\" href=\"#installation-check\">Installation Check</a></h3>\n<p>Regardless of whether you're using MCP servers as an extension or adding them directly, most servers out there need some sort of configuration as part of the set up process.</p>\n<p>In the case of extensions, Zed will show a modal displaying what is required for you to properly set up a given server.\nFor example, the GitHub MCP extension requires you to add a <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\">Personal Access Token</a>.</p>\n<p>In the case of custom servers, make sure you check the provider documentation to determine what type of command, arguments, and environment variables need to be added to the JSON.</p>\n<p>To check whether your MCP server is properly installed, go to the Agent Panel's settings view and watch the indicator dot next to its name.\nIf they're running correctly, the indicator will be green and its tooltip will say \"Server is active\".\nIf not, other colors and tooltip messages will indicate what is happening.</p>\n<h3 id=\"using-in-the-agent-panel\"><a class=\"header\" href=\"#using-in-the-agent-panel\">Using in the Agent Panel</a></h3>\n<p>Once installation is complete, you can return to the Agent Panel and start prompting.\nMentioning your MCP server by name helps the agent pick it up.</p>\n<p>If you want to ensure a given server will be used, you can create <a href=\"./agent-panel.html#custom-profiles\">a custom profile</a> by turning off the built-in tools (either all of them or the ones that would cause conflicts) and turning on only the tools coming from the MCP server.</p>\n<p>As an example, <a href=\"https://container-use.com/agent-integrations#add-container-use-agent-profile-optional\">the Dagger team suggests</a> doing that with their <a href=\"https://zed.dev/extensions/mcp-server-container-use\">Container Use MCP server</a>:</p>\n<pre><code class=\"language-json\">\"agent\": {\n  \"profiles\": {\n    \"container-use\": {\n      \"name\": \"Container Use\",\n      \"tools\": {\n        \"fetch\": true,\n        \"thinking\": true,\n        \"copy_path\": false,\n        \"find_path\": false,\n        \"delete_path\": false,\n        \"create_directory\": false,\n        \"list_directory\": false,\n        \"diagnostics\": false,\n        \"read_file\": false,\n        \"open\": false,\n        \"move_path\": false,\n        \"grep\": false,\n        \"edit_file\": false,\n        \"terminal\": false\n      },\n      \"enable_all_context_servers\": false,\n      \"context_servers\": {\n        \"container-use\": {\n          \"tools\": {\n            \"environment_create\": true,\n            \"environment_add_service\": true,\n            \"environment_update\": true,\n            \"environment_run_cmd\": true,\n            \"environment_open\": true,\n            \"environment_file_write\": true,\n            \"environment_file_read\": true,\n            \"environment_file_list\": true,\n            \"environment_file_delete\": true,\n            \"environment_checkpoint\": true\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"tool-approval\"><a class=\"header\" href=\"#tool-approval\">Tool Approval</a></h3>\n<p>Zed's Agent Panel includes the <code>agent.always_allow_tool_actions</code> setting that, if set to <code>false</code>, will require you to give permission for any editing attempt as well as tool calls coming from MCP servers.</p>\n<p>You can change this by setting this key to <code>true</code> in either your <code>settings.json</code> or through the Agent Panel's settings view.</p>\n\n</main>",
    "content_text": "Model Context Protocol\nZed uses the Model Context Protocol to interact with context servers.\n\nThe Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nCheck out the Anthropic news post and the Zed blog post for a general intro to MCP.\nInstalling MCP Servers\nAs Extensions\nOne of the ways you can use MCP servers in Zed is by exposing them as an extension.\nTo learn how to create your own, check out the MCP Server Extensions page for more details.\nThanks to our awesome community, many MCP servers have already been added as extensions.\nYou can check which ones are available via any of these routes:\n\nthe Zed website\nin the app, open the Command Palette and run the zed: extensions action\nin the app, go to the Agent Panel's top-right menu and look for the \"View Server Extensions\" menu item\n\nIn any case, here are some of the ones available:\n\nContext7\nGitHub\nPuppeteer\nGem\nBrave Search\nPrisma\nFramelink Figma\nLinear\nResend\n\nAs Custom Servers\nCreating an extension is not the only way to use MCP servers in Zed.\nYou can connect them by adding their commands directly to your settings.json, like so:\n{\n  \"context_servers\": {\n    \"your-mcp-server\": {\n      \"source\": \"custom\",\n      \"command\": \"some-command\",\n      \"args\": [\"arg-1\", \"arg-2\"],\n      \"env\": {}\n    }\n  }\n}\n\nAlternatively, you can also add a custom server by accessing the Agent Panel's Settings view (also accessible via the agent: open settings action).\nFrom there, you can add it through the modal that appears when you click the \"Add Custom Server\" button.\nUsing MCP Servers\nInstallation Check\nRegardless of whether you're using MCP servers as an extension or adding them directly, most servers out there need some sort of configuration as part of the set up process.\nIn the case of extensions, Zed will show a modal displaying what is required for you to properly set up a given server.\nFor example, the GitHub MCP extension requires you to add a Personal Access Token.\nIn the case of custom servers, make sure you check the provider documentation to determine what type of command, arguments, and environment variables need to be added to the JSON.\nTo check whether your MCP server is properly installed, go to the Agent Panel's settings view and watch the indicator dot next to its name.\nIf they're running correctly, the indicator will be green and its tooltip will say \"Server is active\".\nIf not, other colors and tooltip messages will indicate what is happening.\nUsing in the Agent Panel\nOnce installation is complete, you can return to the Agent Panel and start prompting.\nMentioning your MCP server by name helps the agent pick it up.\nIf you want to ensure a given server will be used, you can create a custom profile by turning off the built-in tools (either all of them or the ones that would cause conflicts) and turning on only the tools coming from the MCP server.\nAs an example, the Dagger team suggests doing that with their Container Use MCP server:\n\"agent\": {\n  \"profiles\": {\n    \"container-use\": {\n      \"name\": \"Container Use\",\n      \"tools\": {\n        \"fetch\": true,\n        \"thinking\": true,\n        \"copy_path\": false,\n        \"find_path\": false,\n        \"delete_path\": false,\n        \"create_directory\": false,\n        \"list_directory\": false,\n        \"diagnostics\": false,\n        \"read_file\": false,\n        \"open\": false,\n        \"move_path\": false,\n        \"grep\": false,\n        \"edit_file\": false,\n        \"terminal\": false\n      },\n      \"enable_all_context_servers\": false,\n      \"context_servers\": {\n        \"container-use\": {\n          \"tools\": {\n            \"environment_create\": true,\n            \"environment_add_service\": true,\n            \"environment_update\": true,\n            \"environment_run_cmd\": true,\n            \"environment_open\": true,\n            \"environment_file_write\": true,\n            \"environment_file_read\": true,\n            \"environment_file_list\": true,\n            \"environment_file_delete\": true,\n            \"environment_checkpoint\": true\n          }\n        }\n      }\n    }\n  }\n}\n\nTool Approval\nZed's Agent Panel includes the agent.always_allow_tool_actions setting that, if set to false, will require you to give permission for any editing attempt as well as tool calls coming from MCP servers.\nYou can change this by setting this key to true in either your settings.json or through the Agent Panel's settings view.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:21"
  },
  "ai/configuration.html": {
    "url": "https://zed.dev/docs/ai/configuration.html",
    "title": "Configuration | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h1>\n<p>When using AI in Zed, you can customize several aspects:</p>\n<ol>\n<li>Which <a href=\"./llm-providers.html\">LLM providers</a> you can use</li>\n<li><a href=\"./agent-settings.html#model-settings\">Model parameters and usage</a></li>\n<li><a href=\"./agent-settings.html#agent-panel-settings\">Interactions with the Agent Panel</a></li>\n</ol>\n<h2 id=\"turning-ai-off-entirely\"><a class=\"header\" href=\"#turning-ai-off-entirely\">Turning AI Off Entirely</a></h2>\n<p>We want to respect users who want to use Zed without interacting with AI whatsoever.\nTo do that, add the following key to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"disable_ai\": true\n}\n</code></pre>\n<p>Read <a href=\"https://zed.dev/blog/disable-ai-features\">the following blog post</a> to learn more about our motivation to promote this, as much as we also encourage users to explore AI-assisted programming.</p>\n\n</main>",
    "content_text": "Configuration\nWhen using AI in Zed, you can customize several aspects:\n\nWhich LLM providers you can use\nModel parameters and usage\nInteractions with the Agent Panel\n\nTurning AI Off Entirely\nWe want to respect users who want to use Zed without interacting with AI whatsoever.\nTo do that, add the following key to your settings.json:\n{\n  \"disable_ai\": true\n}\n\nRead the following blog post to learn more about our motivation to promote this, as much as we also encourage users to explore AI-assisted programming.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:23"
  },
  "ai/llm-providers.html": {
    "url": "https://zed.dev/docs/ai/llm-providers.html",
    "title": "LLM Providers | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"llm-providers\"><a class=\"header\" href=\"#llm-providers\">LLM Providers</a></h1>\n<p>To use AI in Zed, you need to have at least one large language model provider set up.</p>\n<p>You can do that by either subscribing to <a href=\"./plans-and-usage.html\">one of Zed's plans</a>, or by using API keys you already have for the supported providers.</p>\n<h2 id=\"use-your-own-keys\"><a class=\"header\" href=\"#use-your-own-keys\">Use Your Own Keys</a></h2>\n<p>If you already have an API key for an existing LLM provider—say Anthropic or OpenAI, for example—you can insert them into Zed and use the full power of the Agent Panel <strong><em>for free</em></strong>.</p>\n<p>To add an existing API key to a given provider, go to the Agent Panel settings (<code>agent: open settings</code>), look for the desired provider, paste the key into the input, and hit enter.</p>\n<blockquote>\n<p>Note: API keys are <em>not</em> stored as plain text in your <code>settings.json</code>, but rather in your OS's secure credential storage.</p>\n</blockquote>\n<h2 id=\"supported-providers\"><a class=\"header\" href=\"#supported-providers\">Supported Providers</a></h2>\n<p>Here's all the supported LLM providers for which you can use your own API keys:</p>\n<ul>\n<li><a href=\"#amazon-bedrock\">Amazon Bedrock</a></li>\n<li><a href=\"#anthropic\">Anthropic</a></li>\n<li><a href=\"#deepseek\">DeepSeek</a></li>\n<li><a href=\"#github-copilot-chat\">GitHub Copilot Chat</a></li>\n<li><a href=\"#google-ai\">Google AI</a></li>\n<li><a href=\"#lmstudio\">LM Studio</a></li>\n<li><a href=\"#mistral\">Mistral</a></li>\n<li><a href=\"#ollama\">Ollama</a></li>\n<li><a href=\"#openai\">OpenAI</a></li>\n<li><a href=\"#openai-api-compatible\">OpenAI API Compatible</a></li>\n<li><a href=\"#openrouter\">OpenRouter</a></li>\n<li><a href=\"#vercel-v0\">Vercel</a></li>\n<li><a href=\"#xai\">xAI</a></li>\n</ul>\n<h3 id=\"amazon-bedrock\"><a class=\"header\" href=\"#amazon-bedrock\">Amazon Bedrock</a></h3>\n<blockquote>\n<p>Supports tool use with models that support streaming tool use.\nMore details can be found in the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference-supported-models-features.html\">Amazon Bedrock's Tool Use documentation</a>.</p>\n</blockquote>\n<p>To use Amazon Bedrock's models, an AWS authentication is required.\nEnsure your credentials have the following permissions set up:</p>\n<ul>\n<li><code>bedrock:InvokeModelWithResponseStream</code></li>\n<li><code>bedrock:InvokeModel</code></li>\n</ul>\n<p>Your IAM policy should look similar to:</p>\n<pre><code class=\"language-json\">{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>\n<p>With that done, choose one of the two authentication methods:</p>\n<h4 id=\"authentication-via-named-profile-recommended\"><a class=\"header\" href=\"#authentication-via-named-profile-recommended\">Authentication via Named Profile (Recommended)</a></h4>\n<ol>\n<li>Ensure you have the AWS CLI installed and configured with a named profile</li>\n<li>Open your <code>settings.json</code> (<code>zed: open settings</code>) and include the <code>bedrock</code> key under <code>language_models</code> with the following settings:\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"bedrock\": {\n      \"authentication_method\": \"named_profile\",\n      \"region\": \"your-aws-region\",\n      \"profile\": \"your-profile-name\"\n    }\n  }\n}\n</code></pre>\n</li>\n</ol>\n<h4 id=\"authentication-via-static-credentials\"><a class=\"header\" href=\"#authentication-via-static-credentials\">Authentication via Static Credentials</a></h4>\n<p>While it's possible to configure through the Agent Panel settings UI by entering your AWS access key and secret directly, we recommend using named profiles instead for better security practices.\nTo do this:</p>\n<ol>\n<li>Create an IAM User that you can assume in the <a href=\"https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/users\">IAM Console</a>.</li>\n<li>Create security credentials for that User, save them and keep them secure.</li>\n<li>Open the Agent Configuration with (<code>agent: open settings</code>) and go to the Amazon Bedrock section</li>\n<li>Copy the credentials from Step 2 into the respective <strong>Access Key ID</strong>, <strong>Secret Access Key</strong>, and <strong>Region</strong> fields.</li>\n</ol>\n<h4 id=\"cross-region-inference\"><a class=\"header\" href=\"#cross-region-inference\">Cross-Region Inference</a></h4>\n<p>The Zed implementation of Amazon Bedrock uses <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html\">Cross-Region inference</a> for all the models and region combinations that support it.\nWith Cross-Region inference, you can distribute traffic across multiple AWS Regions, enabling higher throughput.</p>\n<p>For example, if you use <code>Claude Sonnet 3.7 Thinking</code> from <code>us-east-1</code>, it may be processed across the US regions, namely: <code>us-east-1</code>, <code>us-east-2</code>, or <code>us-west-2</code>.\nCross-Region inference requests are kept within the AWS Regions that are part of the geography where the data originally resides.\nFor example, a request made within the US is kept within the AWS Regions in the US.</p>\n<p>Although the data remains stored only in the source Region, your input prompts and output results might move outside of your source Region during cross-Region inference.\nAll data will be transmitted encrypted across Amazon's secure network.</p>\n<p>We will support Cross-Region inference for each of the models on a best-effort basis, please refer to the <a href=\"https://github.com/zed-industries/zed/blob/main/crates/bedrock/src/models.rs#L297\">Cross-Region Inference method Code</a>.</p>\n<p>For the most up-to-date supported regions and models, refer to the <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-support.html\">Supported Models and Regions for Cross Region inference</a>.</p>\n<h3 id=\"anthropic\"><a class=\"header\" href=\"#anthropic\">Anthropic</a></h3>\n<p>You can use Anthropic models by choosing them via the model dropdown in the Agent Panel.</p>\n<ol>\n<li>Sign up for Anthropic and <a href=\"https://console.anthropic.com/settings/keys\">create an API key</a></li>\n<li>Make sure that your Anthropic account has credits</li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the Anthropic section</li>\n<li>Enter your Anthropic API key</li>\n</ol>\n<p>Even if you pay for Claude Pro, you will still have to <a href=\"https://console.anthropic.com/settings/plans\">pay for additional credits</a> to use it via the API.</p>\n<p>Zed will also use the <code>ANTHROPIC_API_KEY</code> environment variable if it's defined.</p>\n<h4 id=\"anthropic-custom-models\"><a class=\"header\" href=\"#anthropic-custom-models\">Custom Models</a></h4>\n<p>You can add custom models to the Anthropic provider by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"anthropic\": {\n      \"available_models\": [\n        {\n          \"name\": \"claude-3-5-sonnet-20240620\",\n          \"display_name\": \"Sonnet 2024-June\",\n          \"max_tokens\": 128000,\n          \"max_output_tokens\": 2560,\n          \"cache_configuration\": {\n            \"max_cache_anchors\": 10,\n            \"min_total_token\": 10000,\n            \"should_speculate\": false\n          },\n          \"tool_override\": \"some-model-that-supports-toolcalling\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Custom models will be listed in the model dropdown in the Agent Panel.</p>\n<p>You can configure a model to use <a href=\"https://docs.anthropic.com/en/docs/about-claude/models/extended-thinking-models\">extended thinking</a> (if it supports it) by changing the mode in your model's configuration to <code>thinking</code>, for example:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"claude-sonnet-4-latest\",\n  \"display_name\": \"claude-sonnet-4-thinking\",\n  \"max_tokens\": 200000,\n  \"mode\": {\n    \"type\": \"thinking\",\n    \"budget_tokens\": 4_096\n  }\n}\n</code></pre>\n<h3 id=\"deepseek\"><a class=\"header\" href=\"#deepseek\">DeepSeek</a></h3>\n<ol>\n<li>Visit the DeepSeek platform and <a href=\"https://platform.deepseek.com/api_keys\">create an API key</a></li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the DeepSeek section</li>\n<li>Enter your DeepSeek API key</li>\n</ol>\n<p>The DeepSeek API key will be saved in your keychain.</p>\n<p>Zed will also use the <code>DEEPSEEK_API_KEY</code> environment variable if it's defined.</p>\n<h4 id=\"deepseek-custom-models\"><a class=\"header\" href=\"#deepseek-custom-models\">Custom Models</a></h4>\n<p>The Zed agent comes pre-configured to use the latest version for common models (DeepSeek Chat, DeepSeek Reasoner).\nIf you wish to use alternate models or customize the API endpoint, you can do so by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"deepseek\": {\n      \"api_url\": \"https://api.deepseek.com\",\n      \"available_models\": [\n        {\n          \"name\": \"deepseek-chat\",\n          \"display_name\": \"DeepSeek Chat\",\n          \"max_tokens\": 64000\n        },\n        {\n          \"name\": \"deepseek-reasoner\",\n          \"display_name\": \"DeepSeek Reasoner\",\n          \"max_tokens\": 64000,\n          \"max_output_tokens\": 4096\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Custom models will be listed in the model dropdown in the Agent Panel.\nYou can also modify the <code>api_url</code> to use a custom endpoint if needed.</p>\n<h3 id=\"github-copilot-chat\"><a class=\"header\" href=\"#github-copilot-chat\">GitHub Copilot Chat</a></h3>\n<p>You can use GitHub Copilot Chat with the Zed agent by choosing it via the model dropdown in the Agent Panel.</p>\n<ol>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the GitHub Copilot Chat section</li>\n<li>Click on <code>Sign in to use GitHub Copilot</code>, follow the steps shown in the modal.</li>\n</ol>\n<p>Alternatively, you can provide an OAuth token via the <code>GH_COPILOT_TOKEN</code> environment variable.</p>\n<blockquote>\n<p><strong>Note</strong>: If you don't see specific models in the dropdown, you may need to enable them in your <a href=\"https://github.com/settings/copilot/features\">GitHub Copilot settings</a>.</p>\n</blockquote>\n<p>To use Copilot Enterprise with Zed (for both agent and completions), you must configure your enterprise endpoint as described in <a href=\"./edit-prediction.html#github-copilot-enterprise\">Configuring GitHub Copilot Enterprise</a>.</p>\n<h3 id=\"google-ai\"><a class=\"header\" href=\"#google-ai\">Google AI</a></h3>\n<p>You can use Gemini models with the Zed agent by choosing it via the model dropdown in the Agent Panel.</p>\n<ol>\n<li>Go to the Google AI Studio site and <a href=\"https://aistudio.google.com/app/apikey\">create an API key</a>.</li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the Google AI section</li>\n<li>Enter your Google AI API key and press enter.</li>\n</ol>\n<p>The Google AI API key will be saved in your keychain.</p>\n<p>Zed will also use the <code>GEMINI_API_KEY</code> environment variable if it's defined. See <a href=\"https://ai.google.dev/gemini-api/docs/api-key\">Using Gemini API keys</a> in the Gemini docs for more.</p>\n<h4 id=\"google-ai-custom-models\"><a class=\"header\" href=\"#google-ai-custom-models\">Custom Models</a></h4>\n<p>By default, Zed will use <code>stable</code> versions of models, but you can use specific versions of models, including <a href=\"https://ai.google.dev/gemini-api/docs/models/experimental-models\">experimental models</a>. You can configure a model to use <a href=\"https://ai.google.dev/gemini-api/docs/thinking\">thinking mode</a> (if it supports it) by adding a <code>mode</code> configuration to your model. This is useful for controlling reasoning token usage and response speed. If not specified, Gemini will automatically choose the thinking budget.</p>\n<p>Here is an example of a custom Google AI model you could add to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"google\": {\n      \"available_models\": [\n        {\n          \"name\": \"gemini-2.5-flash-preview-05-20\",\n          \"display_name\": \"Gemini 2.5 Flash (Thinking)\",\n          \"max_tokens\": 1000000,\n          \"mode\": {\n            \"type\": \"thinking\",\n            \"budget_tokens\": 24000\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Custom models will be listed in the model dropdown in the Agent Panel.</p>\n<h3 id=\"lmstudio\"><a class=\"header\" href=\"#lmstudio\">LM Studio</a></h3>\n<ol>\n<li>\n<p>Download and install <a href=\"https://lmstudio.ai/download\">the latest version of LM Studio</a></p>\n</li>\n<li>\n<p>In the app press <code>cmd/ctrl-shift-m</code> and download at least one model (e.g., qwen2.5-coder-7b). Alternatively, you can get models via the LM Studio CLI:</p>\n<pre><code class=\"language-sh\">lms get qwen2.5-coder-7b\n</code></pre>\n</li>\n<li>\n<p>Make sure the LM Studio API server is running by executing:</p>\n<pre><code class=\"language-sh\">lms server start\n</code></pre>\n</li>\n</ol>\n<p>Tip: Set <a href=\"https://lmstudio.ai/docs/advanced/headless#run-the-llm-service-on-machine-login\">LM Studio as a login item</a> to automate running the LM Studio server.</p>\n<h3 id=\"mistral\"><a class=\"header\" href=\"#mistral\">Mistral</a></h3>\n<ol>\n<li>Visit the Mistral platform and <a href=\"https://console.mistral.ai/api-keys/\">create an API key</a></li>\n<li>Open the configuration view (<code>agent: open settings</code>) and navigate to the Mistral section</li>\n<li>Enter your Mistral API key</li>\n</ol>\n<p>The Mistral API key will be saved in your keychain.</p>\n<p>Zed will also use the <code>MISTRAL_API_KEY</code> environment variable if it's defined.</p>\n<h4 id=\"mistral-custom-models\"><a class=\"header\" href=\"#mistral-custom-models\">Custom Models</a></h4>\n<p>The Zed agent comes pre-configured with several Mistral models (codestral-latest, mistral-large-latest, mistral-medium-latest, mistral-small-latest, open-mistral-nemo, and open-codestral-mamba).\nAll the default models support tool use.\nIf you wish to use alternate models or customize their parameters, you can do so by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"mistral\": {\n      \"api_url\": \"https://api.mistral.ai/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"mistral-tiny-latest\",\n          \"display_name\": \"Mistral Tiny\",\n          \"max_tokens\": 32000,\n          \"max_output_tokens\": 4096,\n          \"max_completion_tokens\": 1024,\n          \"supports_tools\": true,\n          \"supports_images\": false\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>Custom models will be listed in the model dropdown in the Agent Panel.</p>\n<h3 id=\"ollama\"><a class=\"header\" href=\"#ollama\">Ollama</a></h3>\n<p>Download and install Ollama from <a href=\"https://ollama.com/download\">ollama.com/download</a> (Linux or macOS) and ensure it's running with <code>ollama --version</code>.</p>\n<ol>\n<li>\n<p>Download one of the <a href=\"https://ollama.com/models\">available models</a>, for example, for <code>mistral</code>:</p>\n<pre><code class=\"language-sh\">ollama pull mistral\n</code></pre>\n</li>\n<li>\n<p>Make sure that the Ollama server is running. You can start it either via running Ollama.app (macOS) or launching:</p>\n<pre><code class=\"language-sh\">ollama serve\n</code></pre>\n</li>\n<li>\n<p>In the Agent Panel, select one of the Ollama models using the model dropdown.</p>\n</li>\n</ol>\n<h4 id=\"ollama-context\"><a class=\"header\" href=\"#ollama-context\">Ollama Context Length</a></h4>\n<p>Zed has pre-configured maximum context lengths (<code>max_tokens</code>) to match the capabilities of common models.\nZed API requests to Ollama include this as the <code>num_ctx</code> parameter, but the default values do not exceed <code>16384</code> so users with ~16GB of RAM are able to use most models out of the box.</p>\n<p>See <a href=\"https://github.com/zed-industries/zed/blob/main/crates/ollama/src/ollama.rs\">get_max_tokens in ollama.rs</a> for a complete set of defaults.</p>\n<blockquote>\n<p><strong>Note</strong>: Token counts displayed in the Agent Panel are only estimates and will differ from the model's native tokenizer.</p>\n</blockquote>\n<p>Depending on your hardware or use-case you may wish to limit or increase the context length for a specific model via settings.json:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"ollama\": {\n      \"api_url\": \"http://localhost:11434\",\n      \"available_models\": [\n        {\n          \"name\": \"qwen2.5-coder\",\n          \"display_name\": \"qwen 2.5 coder 32K\",\n          \"max_tokens\": 32768,\n          \"supports_tools\": true,\n          \"supports_thinking\": true,\n          \"supports_images\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>If you specify a context length that is too large for your hardware, Ollama will log an error.\nYou can watch these logs by running: <code>tail -f ~/.ollama/logs/ollama.log</code> (macOS) or <code>journalctl -u ollama -f</code> (Linux).\nDepending on the memory available on your machine, you may need to adjust the context length to a smaller value.</p>\n<p>You may also optionally specify a value for <code>keep_alive</code> for each available model.\nThis can be an integer (seconds) or alternatively a string duration like \"5m\", \"10m\", \"1h\", \"1d\", etc.\nFor example, <code>\"keep_alive\": \"120s\"</code> will allow the remote server to unload the model (freeing up GPU VRAM) after 120 seconds.</p>\n<p>The <code>supports_tools</code> option controls whether the model will use additional tools.\nIf the model is tagged with <code>tools</code> in the Ollama catalog, this option should be supplied, and the built-in profiles <code>Ask</code> and <code>Write</code> can be used.\nIf the model is not tagged with <code>tools</code> in the Ollama catalog, this option can still be supplied with the value <code>true</code>; however, be aware that only the <code>Minimal</code> built-in profile will work.</p>\n<p>The <code>supports_thinking</code> option controls whether the model will perform an explicit \"thinking\" (reasoning) pass before producing its final answer.\nIf the model is tagged with <code>thinking</code> in the Ollama catalog, set this option and you can use it in Zed.</p>\n<p>The <code>supports_images</code> option enables the model's vision capabilities, allowing it to process images included in the conversation context.\nIf the model is tagged with <code>vision</code> in the Ollama catalog, set this option and you can use it in Zed.</p>\n<h3 id=\"openai\"><a class=\"header\" href=\"#openai\">OpenAI</a></h3>\n<ol>\n<li>Visit the OpenAI platform and <a href=\"https://platform.openai.com/account/api-keys\">create an API key</a></li>\n<li>Make sure that your OpenAI account has credits</li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the OpenAI section</li>\n<li>Enter your OpenAI API key</li>\n</ol>\n<p>The OpenAI API key will be saved in your keychain.</p>\n<p>Zed will also use the <code>OPENAI_API_KEY</code> environment variable if it's defined.</p>\n<h4 id=\"openai-custom-models\"><a class=\"header\" href=\"#openai-custom-models\">Custom Models</a></h4>\n<p>The Zed agent comes pre-configured to use the latest version for common models (GPT-5, GPT-5 mini, o4-mini, GPT-4.1, and others).\nTo use alternate models, perhaps a preview release, or if you wish to control the request parameters, you can do so by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"openai\": {\n      \"available_models\": [\n        {\n          \"name\": \"gpt-5\",\n          \"display_name\": \"gpt-5 high\",\n          \"reasoning_effort\": \"high\",\n          \"max_tokens\": 272000,\n          \"max_completion_tokens\": 20000\n        },\n        {\n          \"name\": \"gpt-4o-2024-08-06\",\n          \"display_name\": \"GPT 4o Summer 2024\",\n          \"max_tokens\": 128000\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>You must provide the model's context window in the <code>max_tokens</code> parameter; this can be found in the <a href=\"https://platform.openai.com/docs/models\">OpenAI model documentation</a>.</p>\n<p>OpenAI <code>o1</code> models should set <code>max_completion_tokens</code> as well to avoid incurring high reasoning token costs.\nCustom models will be listed in the model dropdown in the Agent Panel.</p>\n<h3 id=\"openai-api-compatible\"><a class=\"header\" href=\"#openai-api-compatible\">OpenAI API Compatible</a></h3>\n<p>Zed supports using <a href=\"https://platform.openai.com/docs/api-reference/chat\">OpenAI compatible APIs</a> by specifying a custom <code>api_url</code> and <code>available_models</code> for the OpenAI provider.\nThis is useful for connecting to other hosted services (like Together AI, Anyscale, etc.) or local models.</p>\n<p>You can add a custom, OpenAI-compatible model either via the UI or by editing your <code>settings.json</code>.</p>\n<p>To do it via the UI, go to the Agent Panel settings (<code>agent: open settings</code>) and look for the \"Add Provider\" button to the right of the \"LLM Providers\" section title.\nThen, fill up the input fields available in the modal.</p>\n<p>To do it via your <code>settings.json</code>, add the following snippet under <code>language_models</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"openai_compatible\": {\n      // Using Together AI as an example\n      \"Together AI\": {\n        \"api_url\": \"https://api.together.xyz/v1\",\n        \"available_models\": [\n          {\n            \"name\": \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n            \"display_name\": \"Together Mixtral 8x7B\",\n            \"max_tokens\": 32768,\n            \"capabilities\": {\n              \"tools\": true,\n              \"images\": false,\n              \"parallel_tool_calls\": false,\n              \"prompt_cache_key\": false\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<p>By default, OpenAI-compatible models inherit the following capabilities:</p>\n<ul>\n<li><code>tools</code>: true (supports tool/function calling)</li>\n<li><code>images</code>: false (does not support image inputs)</li>\n<li><code>parallel_tool_calls</code>: false (does not support <code>parallel_tool_calls</code> parameter)</li>\n<li><code>prompt_cache_key</code>: false (does not support <code>prompt_cache_key</code> parameter)</li>\n</ul>\n<p>Note that LLM API keys aren't stored in your settings file.\nSo, ensure you have it set in your environment variables (<code>&lt;PROVIDER_NAME&gt;_API_KEY=&lt;your api key&gt;</code>) so your settings can pick it up. In the example above, it would be <code>TOGETHER_AI_API_KEY=&lt;your api key&gt;</code>.</p>\n<h3 id=\"openrouter\"><a class=\"header\" href=\"#openrouter\">OpenRouter</a></h3>\n<p>OpenRouter provides access to multiple AI models through a single API. It supports tool use for compatible models.</p>\n<ol>\n<li>Visit <a href=\"https://openrouter.ai\">OpenRouter</a> and create an account</li>\n<li>Generate an API key from your <a href=\"https://openrouter.ai/keys\">OpenRouter keys page</a></li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the OpenRouter section</li>\n<li>Enter your OpenRouter API key</li>\n</ol>\n<p>The OpenRouter API key will be saved in your keychain.</p>\n<p>Zed will also use the <code>OPENROUTER_API_KEY</code> environment variable if it's defined.</p>\n<h4 id=\"openrouter-custom-models\"><a class=\"header\" href=\"#openrouter-custom-models\">Custom Models</a></h4>\n<p>You can add custom models to the OpenRouter provider by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"open_router\": {\n      \"api_url\": \"https://openrouter.ai/api/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"google/gemini-2.0-flash-thinking-exp\",\n          \"display_name\": \"Gemini 2.0 Flash (Thinking)\",\n          \"max_tokens\": 200000,\n          \"max_output_tokens\": 8192,\n          \"supports_tools\": true,\n          \"supports_images\": true,\n          \"mode\": {\n            \"type\": \"thinking\",\n            \"budget_tokens\": 8000\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<p>The available configuration options for each model are:</p>\n<ul>\n<li><code>name</code> (required): The model identifier used by OpenRouter</li>\n<li><code>display_name</code> (optional): A human-readable name shown in the UI</li>\n<li><code>max_tokens</code> (required): The model's context window size</li>\n<li><code>max_output_tokens</code> (optional): Maximum tokens the model can generate</li>\n<li><code>max_completion_tokens</code> (optional): Maximum completion tokens</li>\n<li><code>supports_tools</code> (optional): Whether the model supports tool/function calling</li>\n<li><code>supports_images</code> (optional): Whether the model supports image inputs</li>\n<li><code>mode</code> (optional): Special mode configuration for thinking models</li>\n</ul>\n<p>You can find available models and their specifications on the <a href=\"https://openrouter.ai/models\">OpenRouter models page</a>.</p>\n<p>Custom models will be listed in the model dropdown in the Agent Panel.</p>\n<h3 id=\"vercel-v0\"><a class=\"header\" href=\"#vercel-v0\">Vercel v0</a></h3>\n<p><a href=\"https://vercel.com/docs/v0/api\">Vercel v0</a> is an expert model for generating full-stack apps, with framework-aware completions optimized for modern stacks like Next.js and Vercel.\nIt supports text and image inputs and provides fast streaming responses.</p>\n<p>The v0 models are <a href=\"/#openai-api-compatible\">OpenAI-compatible models</a>, but Vercel is listed as first-class provider in the panel's settings view.</p>\n<p>To start using it with Zed, ensure you have first created a <a href=\"https://v0.dev/chat/settings/keys\">v0 API key</a>.\nOnce you have it, paste it directly into the Vercel provider section in the panel's settings view.</p>\n<p>You should then find it as <code>v0-1.5-md</code> in the model dropdown in the Agent Panel.</p>\n<h3 id=\"xai\"><a class=\"header\" href=\"#xai\">xAI</a></h3>\n<p>Zed has first-class support for <a href=\"https://x.ai/\">xAI</a> models. You can use your own API key to access Grok models.</p>\n<ol>\n<li><a href=\"https://console.x.ai/team/default/api-keys\">Create an API key in the xAI Console</a></li>\n<li>Open the settings view (<code>agent: open settings</code>) and go to the <strong>xAI</strong> section</li>\n<li>Enter your xAI API key</li>\n</ol>\n<p>The xAI API key will be saved in your keychain. Zed will also use the <code>XAI_API_KEY</code> environment variable if it's defined.</p>\n<blockquote>\n<p><strong>Note:</strong> While the xAI API is OpenAI-compatible, Zed has first-class support for it as a dedicated provider. For the best experience, we recommend using the dedicated <code>x_ai</code> provider configuration instead of the <a href=\"#openai-api-compatible\">OpenAI API Compatible</a> method.</p>\n</blockquote>\n<h4 id=\"xai-custom-models\"><a class=\"header\" href=\"#xai-custom-models\">Custom Models</a></h4>\n<p>The Zed agent comes pre-configured with common Grok models. If you wish to use alternate models or customize their parameters, you can do so by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"x_ai\": {\n      \"api_url\": \"https://api.x.ai/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"grok-1.5\",\n          \"display_name\": \"Grok 1.5\",\n          \"max_tokens\": 131072,\n          \"max_output_tokens\": 8192\n        },\n        {\n          \"name\": \"grok-1.5v\",\n          \"display_name\": \"Grok 1.5V (Vision)\",\n          \"max_tokens\": 131072,\n          \"max_output_tokens\": 8192,\n          \"supports_images\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"custom-provider-endpoint\"><a class=\"header\" href=\"#custom-provider-endpoint\">Custom Provider Endpoints</a></h2>\n<p>You can use a custom API endpoint for different providers, as long as it's compatible with the provider's API structure.\nTo do so, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"language_models\": {\n    \"some-provider\": {\n      \"api_url\": \"http://localhost:11434\"\n    }\n  }\n}\n</code></pre>\n<p>Currently, <code>some-provider</code> can be any of the following values: <code>anthropic</code>, <code>google</code>, <code>ollama</code>, <code>openai</code>.</p>\n<p>This is the same infrastructure that powers models that are, for example, <a href=\"#openai-api-compatible\">OpenAI-compatible</a>.</p>\n\n</main>",
    "content_text": "LLM Providers\nTo use AI in Zed, you need to have at least one large language model provider set up.\nYou can do that by either subscribing to one of Zed's plans, or by using API keys you already have for the supported providers.\nUse Your Own Keys\nIf you already have an API key for an existing LLM provider—say Anthropic or OpenAI, for example—you can insert them into Zed and use the full power of the Agent Panel for free.\nTo add an existing API key to a given provider, go to the Agent Panel settings (agent: open settings), look for the desired provider, paste the key into the input, and hit enter.\n\nNote: API keys are not stored as plain text in your settings.json, but rather in your OS's secure credential storage.\n\nSupported Providers\nHere's all the supported LLM providers for which you can use your own API keys:\n\nAmazon Bedrock\nAnthropic\nDeepSeek\nGitHub Copilot Chat\nGoogle AI\nLM Studio\nMistral\nOllama\nOpenAI\nOpenAI API Compatible\nOpenRouter\nVercel\nxAI\n\nAmazon Bedrock\n\nSupports tool use with models that support streaming tool use.\nMore details can be found in the Amazon Bedrock's Tool Use documentation.\n\nTo use Amazon Bedrock's models, an AWS authentication is required.\nEnsure your credentials have the following permissions set up:\n\nbedrock:InvokeModelWithResponseStream\nbedrock:InvokeModel\n\nYour IAM policy should look similar to:\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n\nWith that done, choose one of the two authentication methods:\nAuthentication via Named Profile (Recommended)\n\nEnsure you have the AWS CLI installed and configured with a named profile\nOpen your settings.json (zed: open settings) and include the bedrock key under language_models with the following settings:\n{\n  \"language_models\": {\n    \"bedrock\": {\n      \"authentication_method\": \"named_profile\",\n      \"region\": \"your-aws-region\",\n      \"profile\": \"your-profile-name\"\n    }\n  }\n}\n\n\n\nAuthentication via Static Credentials\nWhile it's possible to configure through the Agent Panel settings UI by entering your AWS access key and secret directly, we recommend using named profiles instead for better security practices.\nTo do this:\n\nCreate an IAM User that you can assume in the IAM Console.\nCreate security credentials for that User, save them and keep them secure.\nOpen the Agent Configuration with (agent: open settings) and go to the Amazon Bedrock section\nCopy the credentials from Step 2 into the respective Access Key ID, Secret Access Key, and Region fields.\n\nCross-Region Inference\nThe Zed implementation of Amazon Bedrock uses Cross-Region inference for all the models and region combinations that support it.\nWith Cross-Region inference, you can distribute traffic across multiple AWS Regions, enabling higher throughput.\nFor example, if you use Claude Sonnet 3.7 Thinking from us-east-1, it may be processed across the US regions, namely: us-east-1, us-east-2, or us-west-2.\nCross-Region inference requests are kept within the AWS Regions that are part of the geography where the data originally resides.\nFor example, a request made within the US is kept within the AWS Regions in the US.\nAlthough the data remains stored only in the source Region, your input prompts and output results might move outside of your source Region during cross-Region inference.\nAll data will be transmitted encrypted across Amazon's secure network.\nWe will support Cross-Region inference for each of the models on a best-effort basis, please refer to the Cross-Region Inference method Code.\nFor the most up-to-date supported regions and models, refer to the Supported Models and Regions for Cross Region inference.\nAnthropic\nYou can use Anthropic models by choosing them via the model dropdown in the Agent Panel.\n\nSign up for Anthropic and create an API key\nMake sure that your Anthropic account has credits\nOpen the settings view (agent: open settings) and go to the Anthropic section\nEnter your Anthropic API key\n\nEven if you pay for Claude Pro, you will still have to pay for additional credits to use it via the API.\nZed will also use the ANTHROPIC_API_KEY environment variable if it's defined.\nCustom Models\nYou can add custom models to the Anthropic provider by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"anthropic\": {\n      \"available_models\": [\n        {\n          \"name\": \"claude-3-5-sonnet-20240620\",\n          \"display_name\": \"Sonnet 2024-June\",\n          \"max_tokens\": 128000,\n          \"max_output_tokens\": 2560,\n          \"cache_configuration\": {\n            \"max_cache_anchors\": 10,\n            \"min_total_token\": 10000,\n            \"should_speculate\": false\n          },\n          \"tool_override\": \"some-model-that-supports-toolcalling\"\n        }\n      ]\n    }\n  }\n}\n\nCustom models will be listed in the model dropdown in the Agent Panel.\nYou can configure a model to use extended thinking (if it supports it) by changing the mode in your model's configuration to thinking, for example:\n{\n  \"name\": \"claude-sonnet-4-latest\",\n  \"display_name\": \"claude-sonnet-4-thinking\",\n  \"max_tokens\": 200000,\n  \"mode\": {\n    \"type\": \"thinking\",\n    \"budget_tokens\": 4_096\n  }\n}\n\nDeepSeek\n\nVisit the DeepSeek platform and create an API key\nOpen the settings view (agent: open settings) and go to the DeepSeek section\nEnter your DeepSeek API key\n\nThe DeepSeek API key will be saved in your keychain.\nZed will also use the DEEPSEEK_API_KEY environment variable if it's defined.\nCustom Models\nThe Zed agent comes pre-configured to use the latest version for common models (DeepSeek Chat, DeepSeek Reasoner).\nIf you wish to use alternate models or customize the API endpoint, you can do so by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"deepseek\": {\n      \"api_url\": \"https://api.deepseek.com\",\n      \"available_models\": [\n        {\n          \"name\": \"deepseek-chat\",\n          \"display_name\": \"DeepSeek Chat\",\n          \"max_tokens\": 64000\n        },\n        {\n          \"name\": \"deepseek-reasoner\",\n          \"display_name\": \"DeepSeek Reasoner\",\n          \"max_tokens\": 64000,\n          \"max_output_tokens\": 4096\n        }\n      ]\n    }\n  }\n}\n\nCustom models will be listed in the model dropdown in the Agent Panel.\nYou can also modify the api_url to use a custom endpoint if needed.\nGitHub Copilot Chat\nYou can use GitHub Copilot Chat with the Zed agent by choosing it via the model dropdown in the Agent Panel.\n\nOpen the settings view (agent: open settings) and go to the GitHub Copilot Chat section\nClick on Sign in to use GitHub Copilot, follow the steps shown in the modal.\n\nAlternatively, you can provide an OAuth token via the GH_COPILOT_TOKEN environment variable.\n\nNote: If you don't see specific models in the dropdown, you may need to enable them in your GitHub Copilot settings.\n\nTo use Copilot Enterprise with Zed (for both agent and completions), you must configure your enterprise endpoint as described in Configuring GitHub Copilot Enterprise.\nGoogle AI\nYou can use Gemini models with the Zed agent by choosing it via the model dropdown in the Agent Panel.\n\nGo to the Google AI Studio site and create an API key.\nOpen the settings view (agent: open settings) and go to the Google AI section\nEnter your Google AI API key and press enter.\n\nThe Google AI API key will be saved in your keychain.\nZed will also use the GEMINI_API_KEY environment variable if it's defined. See Using Gemini API keys in the Gemini docs for more.\nCustom Models\nBy default, Zed will use stable versions of models, but you can use specific versions of models, including experimental models. You can configure a model to use thinking mode (if it supports it) by adding a mode configuration to your model. This is useful for controlling reasoning token usage and response speed. If not specified, Gemini will automatically choose the thinking budget.\nHere is an example of a custom Google AI model you could add to your Zed settings.json:\n{\n  \"language_models\": {\n    \"google\": {\n      \"available_models\": [\n        {\n          \"name\": \"gemini-2.5-flash-preview-05-20\",\n          \"display_name\": \"Gemini 2.5 Flash (Thinking)\",\n          \"max_tokens\": 1000000,\n          \"mode\": {\n            \"type\": \"thinking\",\n            \"budget_tokens\": 24000\n          }\n        }\n      ]\n    }\n  }\n}\n\nCustom models will be listed in the model dropdown in the Agent Panel.\nLM Studio\n\n\nDownload and install the latest version of LM Studio\n\n\nIn the app press cmd/ctrl-shift-m and download at least one model (e.g., qwen2.5-coder-7b). Alternatively, you can get models via the LM Studio CLI:\nlms get qwen2.5-coder-7b\n\n\n\nMake sure the LM Studio API server is running by executing:\nlms server start\n\n\n\nTip: Set LM Studio as a login item to automate running the LM Studio server.\nMistral\n\nVisit the Mistral platform and create an API key\nOpen the configuration view (agent: open settings) and navigate to the Mistral section\nEnter your Mistral API key\n\nThe Mistral API key will be saved in your keychain.\nZed will also use the MISTRAL_API_KEY environment variable if it's defined.\nCustom Models\nThe Zed agent comes pre-configured with several Mistral models (codestral-latest, mistral-large-latest, mistral-medium-latest, mistral-small-latest, open-mistral-nemo, and open-codestral-mamba).\nAll the default models support tool use.\nIf you wish to use alternate models or customize their parameters, you can do so by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"mistral\": {\n      \"api_url\": \"https://api.mistral.ai/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"mistral-tiny-latest\",\n          \"display_name\": \"Mistral Tiny\",\n          \"max_tokens\": 32000,\n          \"max_output_tokens\": 4096,\n          \"max_completion_tokens\": 1024,\n          \"supports_tools\": true,\n          \"supports_images\": false\n        }\n      ]\n    }\n  }\n}\n\nCustom models will be listed in the model dropdown in the Agent Panel.\nOllama\nDownload and install Ollama from ollama.com/download (Linux or macOS) and ensure it's running with ollama --version.\n\n\nDownload one of the available models, for example, for mistral:\nollama pull mistral\n\n\n\nMake sure that the Ollama server is running. You can start it either via running Ollama.app (macOS) or launching:\nollama serve\n\n\n\nIn the Agent Panel, select one of the Ollama models using the model dropdown.\n\n\nOllama Context Length\nZed has pre-configured maximum context lengths (max_tokens) to match the capabilities of common models.\nZed API requests to Ollama include this as the num_ctx parameter, but the default values do not exceed 16384 so users with ~16GB of RAM are able to use most models out of the box.\nSee get_max_tokens in ollama.rs for a complete set of defaults.\n\nNote: Token counts displayed in the Agent Panel are only estimates and will differ from the model's native tokenizer.\n\nDepending on your hardware or use-case you may wish to limit or increase the context length for a specific model via settings.json:\n{\n  \"language_models\": {\n    \"ollama\": {\n      \"api_url\": \"http://localhost:11434\",\n      \"available_models\": [\n        {\n          \"name\": \"qwen2.5-coder\",\n          \"display_name\": \"qwen 2.5 coder 32K\",\n          \"max_tokens\": 32768,\n          \"supports_tools\": true,\n          \"supports_thinking\": true,\n          \"supports_images\": true\n        }\n      ]\n    }\n  }\n}\n\nIf you specify a context length that is too large for your hardware, Ollama will log an error.\nYou can watch these logs by running: tail -f ~/.ollama/logs/ollama.log (macOS) or journalctl -u ollama -f (Linux).\nDepending on the memory available on your machine, you may need to adjust the context length to a smaller value.\nYou may also optionally specify a value for keep_alive for each available model.\nThis can be an integer (seconds) or alternatively a string duration like \"5m\", \"10m\", \"1h\", \"1d\", etc.\nFor example, \"keep_alive\": \"120s\" will allow the remote server to unload the model (freeing up GPU VRAM) after 120 seconds.\nThe supports_tools option controls whether the model will use additional tools.\nIf the model is tagged with tools in the Ollama catalog, this option should be supplied, and the built-in profiles Ask and Write can be used.\nIf the model is not tagged with tools in the Ollama catalog, this option can still be supplied with the value true; however, be aware that only the Minimal built-in profile will work.\nThe supports_thinking option controls whether the model will perform an explicit \"thinking\" (reasoning) pass before producing its final answer.\nIf the model is tagged with thinking in the Ollama catalog, set this option and you can use it in Zed.\nThe supports_images option enables the model's vision capabilities, allowing it to process images included in the conversation context.\nIf the model is tagged with vision in the Ollama catalog, set this option and you can use it in Zed.\nOpenAI\n\nVisit the OpenAI platform and create an API key\nMake sure that your OpenAI account has credits\nOpen the settings view (agent: open settings) and go to the OpenAI section\nEnter your OpenAI API key\n\nThe OpenAI API key will be saved in your keychain.\nZed will also use the OPENAI_API_KEY environment variable if it's defined.\nCustom Models\nThe Zed agent comes pre-configured to use the latest version for common models (GPT-5, GPT-5 mini, o4-mini, GPT-4.1, and others).\nTo use alternate models, perhaps a preview release, or if you wish to control the request parameters, you can do so by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"openai\": {\n      \"available_models\": [\n        {\n          \"name\": \"gpt-5\",\n          \"display_name\": \"gpt-5 high\",\n          \"reasoning_effort\": \"high\",\n          \"max_tokens\": 272000,\n          \"max_completion_tokens\": 20000\n        },\n        {\n          \"name\": \"gpt-4o-2024-08-06\",\n          \"display_name\": \"GPT 4o Summer 2024\",\n          \"max_tokens\": 128000\n        }\n      ]\n    }\n  }\n}\n\nYou must provide the model's context window in the max_tokens parameter; this can be found in the OpenAI model documentation.\nOpenAI o1 models should set max_completion_tokens as well to avoid incurring high reasoning token costs.\nCustom models will be listed in the model dropdown in the Agent Panel.\nOpenAI API Compatible\nZed supports using OpenAI compatible APIs by specifying a custom api_url and available_models for the OpenAI provider.\nThis is useful for connecting to other hosted services (like Together AI, Anyscale, etc.) or local models.\nYou can add a custom, OpenAI-compatible model either via the UI or by editing your settings.json.\nTo do it via the UI, go to the Agent Panel settings (agent: open settings) and look for the \"Add Provider\" button to the right of the \"LLM Providers\" section title.\nThen, fill up the input fields available in the modal.\nTo do it via your settings.json, add the following snippet under language_models:\n{\n  \"language_models\": {\n    \"openai_compatible\": {\n      // Using Together AI as an example\n      \"Together AI\": {\n        \"api_url\": \"https://api.together.xyz/v1\",\n        \"available_models\": [\n          {\n            \"name\": \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n            \"display_name\": \"Together Mixtral 8x7B\",\n            \"max_tokens\": 32768,\n            \"capabilities\": {\n              \"tools\": true,\n              \"images\": false,\n              \"parallel_tool_calls\": false,\n              \"prompt_cache_key\": false\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\nBy default, OpenAI-compatible models inherit the following capabilities:\n\ntools: true (supports tool/function calling)\nimages: false (does not support image inputs)\nparallel_tool_calls: false (does not support parallel_tool_calls parameter)\nprompt_cache_key: false (does not support prompt_cache_key parameter)\n\nNote that LLM API keys aren't stored in your settings file.\nSo, ensure you have it set in your environment variables (<PROVIDER_NAME>_API_KEY=<your api key>) so your settings can pick it up. In the example above, it would be TOGETHER_AI_API_KEY=<your api key>.\nOpenRouter\nOpenRouter provides access to multiple AI models through a single API. It supports tool use for compatible models.\n\nVisit OpenRouter and create an account\nGenerate an API key from your OpenRouter keys page\nOpen the settings view (agent: open settings) and go to the OpenRouter section\nEnter your OpenRouter API key\n\nThe OpenRouter API key will be saved in your keychain.\nZed will also use the OPENROUTER_API_KEY environment variable if it's defined.\nCustom Models\nYou can add custom models to the OpenRouter provider by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"open_router\": {\n      \"api_url\": \"https://openrouter.ai/api/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"google/gemini-2.0-flash-thinking-exp\",\n          \"display_name\": \"Gemini 2.0 Flash (Thinking)\",\n          \"max_tokens\": 200000,\n          \"max_output_tokens\": 8192,\n          \"supports_tools\": true,\n          \"supports_images\": true,\n          \"mode\": {\n            \"type\": \"thinking\",\n            \"budget_tokens\": 8000\n          }\n        }\n      ]\n    }\n  }\n}\n\nThe available configuration options for each model are:\n\nname (required): The model identifier used by OpenRouter\ndisplay_name (optional): A human-readable name shown in the UI\nmax_tokens (required): The model's context window size\nmax_output_tokens (optional): Maximum tokens the model can generate\nmax_completion_tokens (optional): Maximum completion tokens\nsupports_tools (optional): Whether the model supports tool/function calling\nsupports_images (optional): Whether the model supports image inputs\nmode (optional): Special mode configuration for thinking models\n\nYou can find available models and their specifications on the OpenRouter models page.\nCustom models will be listed in the model dropdown in the Agent Panel.\nVercel v0\nVercel v0 is an expert model for generating full-stack apps, with framework-aware completions optimized for modern stacks like Next.js and Vercel.\nIt supports text and image inputs and provides fast streaming responses.\nThe v0 models are OpenAI-compatible models, but Vercel is listed as first-class provider in the panel's settings view.\nTo start using it with Zed, ensure you have first created a v0 API key.\nOnce you have it, paste it directly into the Vercel provider section in the panel's settings view.\nYou should then find it as v0-1.5-md in the model dropdown in the Agent Panel.\nxAI\nZed has first-class support for xAI models. You can use your own API key to access Grok models.\n\nCreate an API key in the xAI Console\nOpen the settings view (agent: open settings) and go to the xAI section\nEnter your xAI API key\n\nThe xAI API key will be saved in your keychain. Zed will also use the XAI_API_KEY environment variable if it's defined.\n\nNote: While the xAI API is OpenAI-compatible, Zed has first-class support for it as a dedicated provider. For the best experience, we recommend using the dedicated x_ai provider configuration instead of the OpenAI API Compatible method.\n\nCustom Models\nThe Zed agent comes pre-configured with common Grok models. If you wish to use alternate models or customize their parameters, you can do so by adding the following to your Zed settings.json:\n{\n  \"language_models\": {\n    \"x_ai\": {\n      \"api_url\": \"https://api.x.ai/v1\",\n      \"available_models\": [\n        {\n          \"name\": \"grok-1.5\",\n          \"display_name\": \"Grok 1.5\",\n          \"max_tokens\": 131072,\n          \"max_output_tokens\": 8192\n        },\n        {\n          \"name\": \"grok-1.5v\",\n          \"display_name\": \"Grok 1.5V (Vision)\",\n          \"max_tokens\": 131072,\n          \"max_output_tokens\": 8192,\n          \"supports_images\": true\n        }\n      ]\n    }\n  }\n}\n\nCustom Provider Endpoints\nYou can use a custom API endpoint for different providers, as long as it's compatible with the provider's API structure.\nTo do so, add the following to your settings.json:\n{\n  \"language_models\": {\n    \"some-provider\": {\n      \"api_url\": \"http://localhost:11434\"\n    }\n  }\n}\n\nCurrently, some-provider can be any of the following values: anthropic, google, ollama, openai.\nThis is the same infrastructure that powers models that are, for example, OpenAI-compatible.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:25"
  },
  "ai/agent-settings.html": {
    "url": "https://zed.dev/docs/ai/agent-settings.html",
    "title": "Agent Settings | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"agent-settings\"><a class=\"header\" href=\"#agent-settings\">Agent Settings</a></h1>\n<p>Learn about all the settings you can customize in Zed's Agent Panel.</p>\n<h2 id=\"model-settings\"><a class=\"header\" href=\"#model-settings\">Model Settings</a></h2>\n<h3 id=\"default-model\"><a class=\"header\" href=\"#default-model\">Default Model</a></h3>\n<p>If you're using <a href=\"./plans-and-usage.html\">Zed's hosted LLM service</a>, it sets <code>claude-sonnet-4</code> as the default model.\nBut if you're not subscribed to it or simply just want to change it, you can do it so either via the model dropdown in the Agent Panel's bottom-right corner or by manually editing the <code>default_model</code> object in your settings:</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"gpt-4o\"\n    }\n  }\n}\n</code></pre>\n<h3 id=\"feature-specific-models\"><a class=\"header\" href=\"#feature-specific-models\">Feature-specific Models</a></h3>\n<p>Assign distinct and specific models for the following AI-powered features in Zed:</p>\n<ul>\n<li>Thread summary model: Used for generating thread summaries</li>\n<li>Inline assistant model: Used for the inline assistant feature</li>\n<li>Commit message model: Used for generating Git commit messages</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-sonnet-4\"\n    },\n    \"inline_assistant_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-sonnet\"\n    },\n    \"commit_message_model\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o-mini\"\n    },\n    \"thread_summary_model\": {\n      \"provider\": \"google\",\n      \"model\": \"gemini-2.0-flash\"\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p>If a custom model isn't set for one of these features, they automatically fall back to using the default model.</p>\n</blockquote>\n<h3 id=\"alternative-assists\"><a class=\"header\" href=\"#alternative-assists\">Alternative Models for Inline Assists</a></h3>\n<p>The Inline Assist feature in particular has the capacity to perform multiple generations in parallel using different models.\nThat is possible by assigning more than one model to it, taking the configuration shown above one step further.</p>\n<p>When configured, the inline assist UI will surface controls to cycle between the outputs generated by each model.</p>\n<p>The models you specify here are always used in <em>addition</em> to your <a href=\"#default-model\">default model</a>.</p>\n<p>For example, the following configuration will generate two outputs for every assist.\nOne with Claude Sonnet 4 (the default model), and one with GPT-4o.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-sonnet-4\"\n    },\n    \"inline_alternatives\": [\n      {\n        \"provider\": \"zed.dev\",\n        \"model\": \"gpt-4o\"\n      }\n    ]\n  }\n}\n</code></pre>\n<h3 id=\"model-temperature\"><a class=\"header\" href=\"#model-temperature\">Model Temperature</a></h3>\n<p>Specify a custom temperature for a provider and/or model:</p>\n<pre><code class=\"language-json\">\"model_parameters\": [\n  // To set parameters for all requests to OpenAI models:\n  {\n    \"provider\": \"openai\",\n    \"temperature\": 0.5\n  },\n  // To set parameters for all requests in general:\n  {\n    \"temperature\": 0\n  },\n  // To set parameters for a specific provider and model:\n  {\n    \"provider\": \"zed.dev\",\n    \"model\": \"claude-sonnet-4\",\n    \"temperature\": 1.0\n  }\n],\n</code></pre>\n<h2 id=\"agent-panel-settings\"><a class=\"header\" href=\"#agent-panel-settings\">Agent Panel Settings</a></h2>\n<p>Note that some of these settings are also surfaced in the Agent Panel's settings UI, which you can access either via the <code>agent: open settings</code> action or by the dropdown menu on the top-right corner of the panel.</p>\n<h3 id=\"default-view\"><a class=\"header\" href=\"#default-view\">Default View</a></h3>\n<p>Use the <code>default_view</code> setting to change the default view of the Agent Panel.\nYou can choose between <code>thread</code> (the default) and <code>text_thread</code>:</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"default_view\": \"text_thread\"\n  }\n}\n</code></pre>\n<h3 id=\"auto-run-commands\"><a class=\"header\" href=\"#auto-run-commands\">Auto-run Commands</a></h3>\n<p>Control whether you want to allow the agent to run commands without asking you for permission.\nThe default value is <code>false</code>.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"always_allow_tool_actions\": true\n  }\n}\n</code></pre>\n<blockquote>\n<p>This setting is available via the Agent Panel's settings UI.</p>\n</blockquote>\n<h3 id=\"single-file-review\"><a class=\"header\" href=\"#single-file-review\">Single-file Review</a></h3>\n<p>Control whether you want to see review actions (accept &amp; reject) in single buffers after the agent is done performing edits.\nThe default value is <code>false</code>.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"single_file_review\": true\n  }\n}\n</code></pre>\n<p>When set to false, these controls are only available in the multibuffer review tab.</p>\n<blockquote>\n<p>This setting is available via the Agent Panel's settings UI.</p>\n</blockquote>\n<h3 id=\"sound-notification\"><a class=\"header\" href=\"#sound-notification\">Sound Notification</a></h3>\n<p>Control whether you want to hear a notification sound when the agent is done generating changes or needs your input.\nThe default value is <code>false</code>.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"play_sound_when_agent_done\": true\n  }\n}\n</code></pre>\n<blockquote>\n<p>This setting is available via the Agent Panel's settings UI.</p>\n</blockquote>\n<h3 id=\"modifier-to-send\"><a class=\"header\" href=\"#modifier-to-send\">Modifier to Send</a></h3>\n<p>Make a modifier (<code>cmd</code> on macOS, <code>ctrl</code> on Linux) required to send messages.\nThis is encouraged for more thoughtful prompt crafting.\nThe default value is <code>false</code>.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"use_modifier_to_send\": true\n  }\n}\n</code></pre>\n<blockquote>\n<p>This setting is available via the Agent Panel's settings UI.</p>\n</blockquote>\n<h3 id=\"edit-card\"><a class=\"header\" href=\"#edit-card\">Edit Card</a></h3>\n<p>Use the <code>expand_edit_card</code> setting to control whether edit cards show the full diff in the Agent Panel.\nIt is set to <code>true</code> by default, but if set to false, the card's height is capped to a certain number of lines, requiring a click to be expanded.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"expand_edit_card\": false\n  }\n}\n</code></pre>\n<h3 id=\"terminal-card\"><a class=\"header\" href=\"#terminal-card\">Terminal Card</a></h3>\n<p>Use the <code>expand_terminal_card</code> setting to control whether terminal cards show the command output in the Agent Panel.\nIt is set to <code>true</code> by default, but if set to false, the card will be fully collapsed even while the command is running, requiring a click to be expanded.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"expand_terminal_card\": false\n  }\n}\n</code></pre>\n<h3 id=\"feedback-controls\"><a class=\"header\" href=\"#feedback-controls\">Feedback Controls</a></h3>\n<p>Control whether you want to see the thumbs up/down buttons to give Zed feedback about the agent's performance.\nThe default value is <code>true</code>.</p>\n<pre><code class=\"language-json\">{\n  \"agent\": {\n    \"enable_feedback\": false\n  }\n}\n</code></pre>\n\n</main>",
    "content_text": "Agent Settings\nLearn about all the settings you can customize in Zed's Agent Panel.\nModel Settings\nDefault Model\nIf you're using Zed's hosted LLM service, it sets claude-sonnet-4 as the default model.\nBut if you're not subscribed to it or simply just want to change it, you can do it so either via the model dropdown in the Agent Panel's bottom-right corner or by manually editing the default_model object in your settings:\n{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"gpt-4o\"\n    }\n  }\n}\n\nFeature-specific Models\nAssign distinct and specific models for the following AI-powered features in Zed:\n\nThread summary model: Used for generating thread summaries\nInline assistant model: Used for the inline assistant feature\nCommit message model: Used for generating Git commit messages\n\n{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-sonnet-4\"\n    },\n    \"inline_assistant_model\": {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-sonnet\"\n    },\n    \"commit_message_model\": {\n      \"provider\": \"openai\",\n      \"model\": \"gpt-4o-mini\"\n    },\n    \"thread_summary_model\": {\n      \"provider\": \"google\",\n      \"model\": \"gemini-2.0-flash\"\n    }\n  }\n}\n\n\nIf a custom model isn't set for one of these features, they automatically fall back to using the default model.\n\nAlternative Models for Inline Assists\nThe Inline Assist feature in particular has the capacity to perform multiple generations in parallel using different models.\nThat is possible by assigning more than one model to it, taking the configuration shown above one step further.\nWhen configured, the inline assist UI will surface controls to cycle between the outputs generated by each model.\nThe models you specify here are always used in addition to your default model.\nFor example, the following configuration will generate two outputs for every assist.\nOne with Claude Sonnet 4 (the default model), and one with GPT-4o.\n{\n  \"agent\": {\n    \"default_model\": {\n      \"provider\": \"zed.dev\",\n      \"model\": \"claude-sonnet-4\"\n    },\n    \"inline_alternatives\": [\n      {\n        \"provider\": \"zed.dev\",\n        \"model\": \"gpt-4o\"\n      }\n    ]\n  }\n}\n\nModel Temperature\nSpecify a custom temperature for a provider and/or model:\n\"model_parameters\": [\n  // To set parameters for all requests to OpenAI models:\n  {\n    \"provider\": \"openai\",\n    \"temperature\": 0.5\n  },\n  // To set parameters for all requests in general:\n  {\n    \"temperature\": 0\n  },\n  // To set parameters for a specific provider and model:\n  {\n    \"provider\": \"zed.dev\",\n    \"model\": \"claude-sonnet-4\",\n    \"temperature\": 1.0\n  }\n],\n\nAgent Panel Settings\nNote that some of these settings are also surfaced in the Agent Panel's settings UI, which you can access either via the agent: open settings action or by the dropdown menu on the top-right corner of the panel.\nDefault View\nUse the default_view setting to change the default view of the Agent Panel.\nYou can choose between thread (the default) and text_thread:\n{\n  \"agent\": {\n    \"default_view\": \"text_thread\"\n  }\n}\n\nAuto-run Commands\nControl whether you want to allow the agent to run commands without asking you for permission.\nThe default value is false.\n{\n  \"agent\": {\n    \"always_allow_tool_actions\": true\n  }\n}\n\n\nThis setting is available via the Agent Panel's settings UI.\n\nSingle-file Review\nControl whether you want to see review actions (accept & reject) in single buffers after the agent is done performing edits.\nThe default value is false.\n{\n  \"agent\": {\n    \"single_file_review\": true\n  }\n}\n\nWhen set to false, these controls are only available in the multibuffer review tab.\n\nThis setting is available via the Agent Panel's settings UI.\n\nSound Notification\nControl whether you want to hear a notification sound when the agent is done generating changes or needs your input.\nThe default value is false.\n{\n  \"agent\": {\n    \"play_sound_when_agent_done\": true\n  }\n}\n\n\nThis setting is available via the Agent Panel's settings UI.\n\nModifier to Send\nMake a modifier (cmd on macOS, ctrl on Linux) required to send messages.\nThis is encouraged for more thoughtful prompt crafting.\nThe default value is false.\n{\n  \"agent\": {\n    \"use_modifier_to_send\": true\n  }\n}\n\n\nThis setting is available via the Agent Panel's settings UI.\n\nEdit Card\nUse the expand_edit_card setting to control whether edit cards show the full diff in the Agent Panel.\nIt is set to true by default, but if set to false, the card's height is capped to a certain number of lines, requiring a click to be expanded.\n{\n  \"agent\": {\n    \"expand_edit_card\": false\n  }\n}\n\nTerminal Card\nUse the expand_terminal_card setting to control whether terminal cards show the command output in the Agent Panel.\nIt is set to true by default, but if set to false, the card will be fully collapsed even while the command is running, requiring a click to be expanded.\n{\n  \"agent\": {\n    \"expand_terminal_card\": false\n  }\n}\n\nFeedback Controls\nControl whether you want to see the thumbs up/down buttons to give Zed feedback about the agent's performance.\nThe default value is true.\n{\n  \"agent\": {\n    \"enable_feedback\": false\n  }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:28"
  },
  "ai/subscription.html": {
    "url": "https://zed.dev/docs/ai/subscription.html",
    "title": "Subscription | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"subscription\"><a class=\"header\" href=\"#subscription\">Subscription</a></h1>\n<p>Zed's hosted models are offered via subscription to Zed Pro or Zed Business.</p>\n<blockquote>\n<p>Using your own API keys is <em>free</em>—you do not need to subscribe to a Zed plan to use our AI features with your own keys.</p>\n</blockquote>\n<p>See the following pages for specific aspects of our subscription offering:</p>\n<ul>\n<li>\n<p><a href=\"./plans-and-usage.html\">Plans and Usage</a>: Outlines Zed's plans, how usage is measured, and usage-based pricing for overages.</p>\n</li>\n<li>\n<p><a href=\"./billing.html\">Billing</a>: Billing policies and procedures, and how to update or view various billing settings.</p>\n</li>\n<li>\n<p><a href=\"./models.html\">Models</a>: Overview of the models offered by Zed's subscriptions.</p>\n</li>\n</ul>\n\n</main>",
    "content_text": "Subscription\nZed's hosted models are offered via subscription to Zed Pro or Zed Business.\n\nUsing your own API keys is free—you do not need to subscribe to a Zed plan to use our AI features with your own keys.\n\nSee the following pages for specific aspects of our subscription offering:\n\n\nPlans and Usage: Outlines Zed's plans, how usage is measured, and usage-based pricing for overages.\n\n\nBilling: Billing policies and procedures, and how to update or view various billing settings.\n\n\nModels: Overview of the models offered by Zed's subscriptions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:30"
  },
  "ai/plans-and-usage.html": {
    "url": "https://zed.dev/docs/ai/plans-and-usage.html",
    "title": "Plans and Usage | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"plans-and-usage\"><a class=\"header\" href=\"#plans-and-usage\">Plans and Usage</a></h1>\n<p>To view your current usage, you can visit your account at <a href=\"https://zed.dev/account\">zed.dev/account</a>.\nYou’ll also find usage meters in-product when you’re nearing the limit for your plan or trial.</p>\n<h2 id=\"plans\"><a class=\"header\" href=\"#plans\">Available Plans</a></h2>\n<p>For costs and more information on pricing, visit <a href=\"https://zed.dev/pricing\">Zed’s pricing page</a>.</p>\n<p>Please note that if you’re interested in just using Zed as the world’s fastest editor, with no AI or subscription features, you can always do so for free, without <a href=\"../accounts.html\">authentication</a>.</p>\n<h2 id=\"usage\"><a class=\"header\" href=\"#usage\">Usage</a></h2>\n<ul>\n<li>A <code>prompt</code> in Zed is an input from the user, initiated by pressing enter, composed of one or many <code>requests</code>. A <code>prompt</code> can be initiated from the Agent Panel, or via Inline Assist.</li>\n<li>A <code>request</code> in Zed is a response to a <code>prompt</code>, plus any tool calls that are initiated as part of that response. There may be one <code>request</code> per <code>prompt</code>, or many.</li>\n</ul>\n<p>Most models offered by Zed are metered per-prompt.\nSome models that use large context windows and unlimited tool calls (<a href=\"./models.html#burn-mode\">“Burn Mode”</a>) count each individual request within a prompt against your prompt limit, since the agentic work spawned by the prompt is expensive to support.</p>\n<p>See <a href=\"./models.html\">the Models page</a> for a list of which subset of models are metered by request.</p>\n<p>Plans come with a set amount of prompts included, with the number varying depending on the plan you’ve selected.</p>\n<h2 id=\"ubp\"><a class=\"header\" href=\"#ubp\">Usage-Based Pricing</a></h2>\n<p>You may opt in to usage-based pricing for prompts that exceed what is included in your paid plan from <a href=\"https://zed.dev/account\">your account page</a>.</p>\n<p>Usage-based pricing is only available with a paid plan, and is exclusively opt-in.\nFrom the dashboard, you can toggle usage-based pricing for usage exceeding your paid plan.\nYou can also configure a spend limit in USD.\nOnce the spend limit is hit, we’ll stop any further usage until your prompt limit resets.</p>\n<p>We will bill for additional prompts when you’ve made prompts totaling $20, or when your billing date occurs, whichever comes first.</p>\n<p>Cost per request for each model can be found on <a href=\"./models.html\">the models page</a>.</p>\n<h2 id=\"business-usage\"><a class=\"header\" href=\"#business-usage\">Business Usage</a></h2>\n<p>Email <a href=\"mailto:sales@zed.dev\">sales@zed.dev</a> with any questions on business plans, metering, and usage-based pricing.</p>\n\n</main>",
    "content_text": "Plans and Usage\nTo view your current usage, you can visit your account at zed.dev/account.\nYou’ll also find usage meters in-product when you’re nearing the limit for your plan or trial.\nAvailable Plans\nFor costs and more information on pricing, visit Zed’s pricing page.\nPlease note that if you’re interested in just using Zed as the world’s fastest editor, with no AI or subscription features, you can always do so for free, without authentication.\nUsage\n\nA prompt in Zed is an input from the user, initiated by pressing enter, composed of one or many requests. A prompt can be initiated from the Agent Panel, or via Inline Assist.\nA request in Zed is a response to a prompt, plus any tool calls that are initiated as part of that response. There may be one request per prompt, or many.\n\nMost models offered by Zed are metered per-prompt.\nSome models that use large context windows and unlimited tool calls (“Burn Mode”) count each individual request within a prompt against your prompt limit, since the agentic work spawned by the prompt is expensive to support.\nSee the Models page for a list of which subset of models are metered by request.\nPlans come with a set amount of prompts included, with the number varying depending on the plan you’ve selected.\nUsage-Based Pricing\nYou may opt in to usage-based pricing for prompts that exceed what is included in your paid plan from your account page.\nUsage-based pricing is only available with a paid plan, and is exclusively opt-in.\nFrom the dashboard, you can toggle usage-based pricing for usage exceeding your paid plan.\nYou can also configure a spend limit in USD.\nOnce the spend limit is hit, we’ll stop any further usage until your prompt limit resets.\nWe will bill for additional prompts when you’ve made prompts totaling $20, or when your billing date occurs, whichever comes first.\nCost per request for each model can be found on the models page.\nBusiness Usage\nEmail sales@zed.dev with any questions on business plans, metering, and usage-based pricing.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:32"
  },
  "ai/billing.html": {
    "url": "https://zed.dev/docs/ai/billing.html",
    "title": "Billing | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"billing\"><a class=\"header\" href=\"#billing\">Billing</a></h1>\n<p>We use Stripe as our billing and payments provider. All Pro plans require payment via credit card.\nFor invoice-based billing, a Business plan is required. Contact <a href=\"mailto:sales@zed.dev\">sales@zed.dev</a> for more information.</p>\n<h2 id=\"settings\"><a class=\"header\" href=\"#settings\">Settings</a></h2>\n<p>You can access billing settings at <a href=\"https://zed.dev/account\">zed.dev/account</a>.\nClicking the button under Account Settings will navigate you to Stripe’s secure portal, where you can update all billing-related settings and configuration.</p>\n<h2 id=\"billing-cycles\"><a class=\"header\" href=\"#billing-cycles\">Billing Cycles</a></h2>\n<p>Zed is billed on a monthly basis based on the date you initially subscribe.</p>\n<p>We’ll also bill in-month for additional prompts used beyond your plan’s prompt limit, if usage exceeds $20 before month end.\nSee <a href=\"./plans-and-usage.html#ubp\">usage-based pricing</a> for more.</p>\n<h2 id=\"invoice-history\"><a class=\"header\" href=\"#invoice-history\">Invoice History</a></h2>\n<p>You can access your invoice history by navigating to <a href=\"https://zed.dev/account\">zed.dev/account</a> and clicking \"Manage\" on your subscription.</p>\n<p>From Stripe’s secure portal, you can download all current and historical invoices.</p>\n<h2 id=\"updating-billing-info\"><a class=\"header\" href=\"#updating-billing-info\">Updating Billing Information</a></h2>\n<p>You can update your payment method, company name, address, and tax information through the billing portal.</p>\n<p>Please note that changes to billing information will <strong>only</strong> affect future invoices — <strong>we cannot modify historical invoices</strong>.</p>\n<h2 id=\"sales-tax\"><a class=\"header\" href=\"#sales-tax\">Sales Tax</a></h2>\n<p>Zed partners with <a href=\"https://www.getsphere.com/\">Sphere</a> to calculate indirect tax rate for invoices, based on customer location and the product being sold. Tax is listed as a separate line item on invoices, based preferentially on your billing address, followed by the card issue country known to Stripe.</p>\n<p>If you have a VAT/GST ID, you can add it at <a href=\"https://zed.dev/account\">zed.dev/account</a> by clicking \"Manage\" on your subscription. Check the box that denotes you as a business.</p>\n<p>Please note that changes to VAT/GST IDs and address will <strong>only</strong> affect future invoices — <strong>we cannot modify historical invoices</strong>.\nQuestions or issues can be directed to <a href=\"mailto:billing-support@zed.dev\">billing-support@zed.dev</a>.</p>\n\n</main>",
    "content_text": "Billing\nWe use Stripe as our billing and payments provider. All Pro plans require payment via credit card.\nFor invoice-based billing, a Business plan is required. Contact sales@zed.dev for more information.\nSettings\nYou can access billing settings at zed.dev/account.\nClicking the button under Account Settings will navigate you to Stripe’s secure portal, where you can update all billing-related settings and configuration.\nBilling Cycles\nZed is billed on a monthly basis based on the date you initially subscribe.\nWe’ll also bill in-month for additional prompts used beyond your plan’s prompt limit, if usage exceeds $20 before month end.\nSee usage-based pricing for more.\nInvoice History\nYou can access your invoice history by navigating to zed.dev/account and clicking \"Manage\" on your subscription.\nFrom Stripe’s secure portal, you can download all current and historical invoices.\nUpdating Billing Information\nYou can update your payment method, company name, address, and tax information through the billing portal.\nPlease note that changes to billing information will only affect future invoices — we cannot modify historical invoices.\nSales Tax\nZed partners with Sphere to calculate indirect tax rate for invoices, based on customer location and the product being sold. Tax is listed as a separate line item on invoices, based preferentially on your billing address, followed by the card issue country known to Stripe.\nIf you have a VAT/GST ID, you can add it at zed.dev/account by clicking \"Manage\" on your subscription. Check the box that denotes you as a business.\nPlease note that changes to VAT/GST IDs and address will only affect future invoices — we cannot modify historical invoices.\nQuestions or issues can be directed to billing-support@zed.dev.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:34"
  },
  "ai/models.html": {
    "url": "https://zed.dev/docs/ai/models.html",
    "title": "Models | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"models\"><a class=\"header\" href=\"#models\">Models</a></h1>\n<p>Zed’s plans offer hosted versions of major LLM’s, generally with higher rate limits than individual API keys.\nWe’re working hard to expand the models supported by Zed’s subscription offerings, so please check back often.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Model</th><th>Provider</th><th>Burn Mode</th><th>Context Window</th><th>Price per Prompt</th><th>Price per Request</th></tr></thead><tbody>\n<tr><td>Claude 3.5 Sonnet</td><td>Anthropic</td><td>❌</td><td>60k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude 3.7 Sonnet</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude 3.7 Sonnet</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.05</td></tr>\n<tr><td>Claude Sonnet 4</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude Sonnet 4</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.05</td></tr>\n<tr><td>Claude Opus 4</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.20</td><td>N/A</td></tr>\n<tr><td>Claude Opus 4</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.25</td></tr>\n<tr><td>Claude Opus 4.1</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.20</td><td>N/A</td></tr>\n<tr><td>Claude Opus 4.1</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.25</td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p>Note: Because of the 5x token cost for <a href=\"https://www.anthropic.com/pricing#api\">Opus relative to Sonnet</a>, each Opus 4 and 4.1 prompt consumes 5 prompts against your billing meter</p>\n</blockquote>\n<h2 id=\"usage\"><a class=\"header\" href=\"#usage\">Usage</a></h2>\n<p>The models above can be used with the prompts included in your plan. For models not marked with <a href=\"#burn-mode\">“Burn Mode”</a>, each prompt is counted against the monthly limit of your plan.</p>\n<p>If you’ve exceeded your limit for the month, and are on a paid plan, you can enable usage-based pricing to continue using models for the rest of the month. See <a href=\"./plans-and-usage.html\">Plans and Usage</a> for more information.</p>\n<p>Non-Burn Mode usage will use up to 25 tool calls per one prompt. If your prompt extends beyond 25 tool calls, Zed will ask if you’d like to continue, which will consume a second prompt.</p>\n<h2 id=\"burn-mode\"><a class=\"header\" href=\"#burn-mode\">Burn Mode</a></h2>\n<blockquote>\n<p>Note: \"Burn Mode\" is the new name for what was previously called \"Max Mode\".</p>\n</blockquote>\n<p>In Burn Mode, we enable models to use <a href=\"#context-windows\">large context windows</a>, unlimited tool calls, and other capabilities for expanded reasoning, to allow an unfettered agentic experience.</p>\n<p>Because of the increased cost to Zed, each subsequent request beyond the initial user prompt in Burn Mode models is counted as a prompt for metering.</p>\n<p>In addition, usage-based pricing per request is slightly more expensive for Burn Mode models than usage-based pricing per prompt for regular models.</p>\n<blockquote>\n<p>Note that the Agent Panel using a Burn Mode model may consume a good bit of your monthly prompt capacity, if many tool calls are used.\nWe encourage you to think through what model is best for your needs before leaving the Agent Panel to work.</p>\n</blockquote>\n<p>By default, all threads and <a href=\"./text-threads.html\">text threads</a> start in normal mode.\nHowever, you can use the <code>agent.preferred_completion_mode</code> setting to have Burn Mode activated by default.</p>\n<h2 id=\"context-windows\"><a class=\"header\" href=\"#context-windows\">Context Windows</a></h2>\n<p>A context window is the maximum span of text and code an LLM can consider at once, including both the input prompt and output generated by the model.</p>\n<p>In <a href=\"#burn-mode\">Burn Mode</a>, we increase context window size to allow models to have enhanced reasoning capabilities.</p>\n<p>Each Agent thread and text thread in Zed maintains its own context window.\nThe more prompts, attached files, and responses included in a session, the larger the context window grows.</p>\n<p>For best results, it’s recommended you take a purpose-based approach to Agent thread management, starting a new thread for each unique task.</p>\n<h2 id=\"tool-calls\"><a class=\"header\" href=\"#tool-calls\">Tool Calls</a></h2>\n<p>Models can use <a href=\"./tools.html\">tools</a> to interface with your code, search the web, and perform other useful functions.</p>\n<p>In <a href=\"#burn-mode\">Burn Mode</a>, models can use an unlimited number of tools per prompt, with each tool call counting as a prompt for metering purposes.</p>\n<p>For non-Burn Mode models, you'll need to interact with the model every 25 tool calls to continue, at which point a new prompt will be counted against your plan limit.</p>\n\n</main>",
    "content_text": "Models\nZed’s plans offer hosted versions of major LLM’s, generally with higher rate limits than individual API keys.\nWe’re working hard to expand the models supported by Zed’s subscription offerings, so please check back often.\nModelProviderBurn ModeContext WindowPrice per PromptPrice per Request\nClaude 3.5 SonnetAnthropic❌60k$0.04N/A\nClaude 3.7 SonnetAnthropic❌120k$0.04N/A\nClaude 3.7 SonnetAnthropic✅200kN/A$0.05\nClaude Sonnet 4Anthropic❌120k$0.04N/A\nClaude Sonnet 4Anthropic✅200kN/A$0.05\nClaude Opus 4Anthropic❌120k$0.20N/A\nClaude Opus 4Anthropic✅200kN/A$0.25\nClaude Opus 4.1Anthropic❌120k$0.20N/A\nClaude Opus 4.1Anthropic✅200kN/A$0.25\n\n\n\nNote: Because of the 5x token cost for Opus relative to Sonnet, each Opus 4 and 4.1 prompt consumes 5 prompts against your billing meter\n\nUsage\nThe models above can be used with the prompts included in your plan. For models not marked with “Burn Mode”, each prompt is counted against the monthly limit of your plan.\nIf you’ve exceeded your limit for the month, and are on a paid plan, you can enable usage-based pricing to continue using models for the rest of the month. See Plans and Usage for more information.\nNon-Burn Mode usage will use up to 25 tool calls per one prompt. If your prompt extends beyond 25 tool calls, Zed will ask if you’d like to continue, which will consume a second prompt.\nBurn Mode\n\nNote: \"Burn Mode\" is the new name for what was previously called \"Max Mode\".\n\nIn Burn Mode, we enable models to use large context windows, unlimited tool calls, and other capabilities for expanded reasoning, to allow an unfettered agentic experience.\nBecause of the increased cost to Zed, each subsequent request beyond the initial user prompt in Burn Mode models is counted as a prompt for metering.\nIn addition, usage-based pricing per request is slightly more expensive for Burn Mode models than usage-based pricing per prompt for regular models.\n\nNote that the Agent Panel using a Burn Mode model may consume a good bit of your monthly prompt capacity, if many tool calls are used.\nWe encourage you to think through what model is best for your needs before leaving the Agent Panel to work.\n\nBy default, all threads and text threads start in normal mode.\nHowever, you can use the agent.preferred_completion_mode setting to have Burn Mode activated by default.\nContext Windows\nA context window is the maximum span of text and code an LLM can consider at once, including both the input prompt and output generated by the model.\nIn Burn Mode, we increase context window size to allow models to have enhanced reasoning capabilities.\nEach Agent thread and text thread in Zed maintains its own context window.\nThe more prompts, attached files, and responses included in a session, the larger the context window grows.\nFor best results, it’s recommended you take a purpose-based approach to Agent thread management, starting a new thread for each unique task.\nTool Calls\nModels can use tools to interface with your code, search the web, and perform other useful functions.\nIn Burn Mode, models can use an unlimited number of tools per prompt, with each tool call counting as a prompt for metering purposes.\nFor non-Burn Mode models, you'll need to interact with the model every 25 tool calls to continue, at which point a new prompt will be counted against your plan limit.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:36"
  },
  "ai/privacy-and-security.html": {
    "url": "https://zed.dev/docs/ai/privacy-and-security.html",
    "title": "Privacy and Security | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"privacy-and-security\"><a class=\"header\" href=\"#privacy-and-security\">Privacy and Security</a></h1>\n<h2 id=\"philosophy\"><a class=\"header\" href=\"#philosophy\">Philosophy</a></h2>\n<p>Zed aims to collect on the minimum data necessary to serve and improve our product.</p>\n<p>We believe in opt-in data sharing as the default in building AI products, rather than opt-out, like most of our competitors. Privacy Mode is not a setting to be toggled, it's a default stance.</p>\n<p>As an open-source product, we believe in maximal transparency, and invite you to examine our codebase. If you find issues, we encourage you to share them with us.</p>\n<p>It is entirely possible to use Zed without sharing any data with us and without authenticating into the product. We're happy to always support this desired use pattern.</p>\n<h2 id=\"documentation\"><a class=\"header\" href=\"#documentation\">Documentation</a></h2>\n<ul>\n<li>\n<p><a href=\"../telemetry.html\">Telemetry</a>: How Zed collects general telemetry data.</p>\n</li>\n<li>\n<p><a href=\"./ai-improvement.html\">AI Improvement</a>: Zed's opt-in-only approach to data collection for AI improvement, whether our Agentic offering or Edit Predictions.</p>\n</li>\n<li>\n<p><a href=\"../accounts.html\">Accounts</a>: When and why you'd need to authenticate into Zed, how to do so, and what scope we need from you.</p>\n</li>\n</ul>\n<h2 id=\"legal-links\"><a class=\"header\" href=\"#legal-links\">Legal Links</a></h2>\n<ul>\n<li><a href=\"https://zed.dev/terms-of-service\">Terms of Service</a></li>\n<li><a href=\"https://zed.dev/terms\">Terms of Use</a></li>\n<li><a href=\"https://zed.dev/privacy-policy\">Privacy Policy</a></li>\n<li><a href=\"https://zed.dev/cla\">Zed's Contributor License and Feedback Agreement</a></li>\n<li><a href=\"https://zed.dev/subprocessors\">Subprocessors</a></li>\n</ul>\n\n</main>",
    "content_text": "Privacy and Security\nPhilosophy\nZed aims to collect on the minimum data necessary to serve and improve our product.\nWe believe in opt-in data sharing as the default in building AI products, rather than opt-out, like most of our competitors. Privacy Mode is not a setting to be toggled, it's a default stance.\nAs an open-source product, we believe in maximal transparency, and invite you to examine our codebase. If you find issues, we encourage you to share them with us.\nIt is entirely possible to use Zed without sharing any data with us and without authenticating into the product. We're happy to always support this desired use pattern.\nDocumentation\n\n\nTelemetry: How Zed collects general telemetry data.\n\n\nAI Improvement: Zed's opt-in-only approach to data collection for AI improvement, whether our Agentic offering or Edit Predictions.\n\n\nAccounts: When and why you'd need to authenticate into Zed, how to do so, and what scope we need from you.\n\n\nLegal Links\n\nTerms of Service\nTerms of Use\nPrivacy Policy\nZed's Contributor License and Feedback Agreement\nSubprocessors",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:38"
  },
  "ai/ai-improvement.html": {
    "url": "https://zed.dev/docs/ai/ai-improvement.html",
    "title": "AI Improvement | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zed-ai-improvement\"><a class=\"header\" href=\"#zed-ai-improvement\">Zed AI Improvement</a></h1>\n<h2 id=\"agent-panel\"><a class=\"header\" href=\"#agent-panel\">Agent Panel</a></h2>\n<h3 id=\"opt-in\"><a class=\"header\" href=\"#opt-in\">Opt-In</a></h3>\n<p>When using the Agent Panel, whether through Zed's hosted AI service or via connecting a non-Zed AI service via API key, Zed does not persistently store user content or use user content to evaluate and/or improve our AI features, unless it is explicitly shared with Zed. Each share is opt-in, and sharing once will not cause future content or data to be shared again.</p>\n<blockquote>\n<p>Note that rating responses will send your data related to that response to Zed's servers.\n<strong><em>If you don't want data persisted on Zed's servers, don't rate</em></strong>. We will not collect data for improving our Agentic offering without you explicitly rating responses.</p>\n</blockquote>\n<p>When using upstream services through Zed AI, we require assurances from our service providers that your user content won't be used for training models. For example, usage of Anthropic Claude 3.5 via Zed AI in the Assistant is governed by the <a href=\"https://www.anthropic.com/legal/commercial-terms\">Anthropic Commercial Terms</a> which includes the following:</p>\n<blockquote>\n<p>\"Anthropic may not train models on Customer Content from paid Services.\"</p>\n</blockquote>\n<p>We also have a <a href=\"https://privacy.anthropic.com/en/articles/8956058-i-have-a-zero-data-retention-agreement-with-anthropic-what-products-does-it-apply-to\">zero-data retention agreement</a> with Anthropic.</p>\n<p>When you directly connect Zed with a non Zed AI service (e.g., via API key) Zed does not have control over how your data is used by that service provider.\nYou should reference your agreement with each service provider to understand what terms and conditions apply.</p>\n<h3 id=\"data-we-collect\"><a class=\"header\" href=\"#data-we-collect\">Data we collect</a></h3>\n<p>For prompts you have explicitly shared with us, Zed may store copies of those prompts and other data about the specific use of the Agent Panel.</p>\n<p>This data includes:</p>\n<ul>\n<li>The prompt given to the Agent</li>\n<li>Any commentary you include</li>\n<li>Product telemetry about the agentic thread</li>\n<li>Metadata about your Zed installation</li>\n</ul>\n<h3 id=\"data-handling\"><a class=\"header\" href=\"#data-handling\">Data Handling</a></h3>\n<p>Collected data is stored in Snowflake, a private database where we track other metrics. We periodically review this data to improve our overall agentic approach and refine the product via our system prompt, tool use, etc. We ensure any included data is anonymized and contains no sensitive information (access tokens, user IDs, email addresses, etc).</p>\n<h2 id=\"edit-predictions\"><a class=\"header\" href=\"#edit-predictions\">Edit Predictions</a></h2>\n<p>By default, when using Zed Edit Predictions, Zed does not persistently store user content or use user content for training of its models.</p>\n<h3 id=\"opt-in-1\"><a class=\"header\" href=\"#opt-in-1\">Opt-in</a></h3>\n<p>Users who are working on open source licensed projects may optionally opt-in to providing model improvement feedback. This opt-in occurs on a per-project basis. If you work on multiple open source projects and wish to provide model improvement feedback you will have to opt-in for each individual project.</p>\n<p>When working on other projects where you haven't opted-in, Zed will not persistently store user content or use user content for training of its models.</p>\n<p>You can see exactly how Zed detects open source licenses in: <a href=\"https://github.com/zed-industries/zed/blob/main/crates/zeta/src/license_detection.rs\">license_detection.rs</a>.</p>\n<h3 id=\"exclusions\"><a class=\"header\" href=\"#exclusions\">Exclusions</a></h3>\n<p>Zed will intentionally exclude certain files from Predictive Edits entirely, even when you have opted-in to model improvement feedback.</p>\n<p>You can inspect this exclusion list by opening <code>zed: open default settings</code> from the command palette:</p>\n<pre><code class=\"language-json\">{\n  \"edit_predictions\": {\n    // A list of globs representing files that edit predictions should be disabled for.\n    // There's a sensible default list of globs already included.\n    // Any addition to this list will be merged with the default list.\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/secrets.yml\"\n    ]\n  }\n}\n</code></pre>\n<p>Users may explicitly exclude additional paths and/or file extensions by adding them to <a href=\"https://zed.dev/docs/configuring-zed#edit-predictions\"><code>edit_predictions.disabled_globs</code></a> in their Zed settings.json:</p>\n<pre><code class=\"language-json\">{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\"secret_dir/*\", \"**/*.log\"]\n  }\n}\n</code></pre>\n<h3 id=\"data-we-collect-1\"><a class=\"header\" href=\"#data-we-collect-1\">Data we collect</a></h3>\n<p>For open source projects where you have opted-in, Zed may store copies of requests and responses to the Zed AI Prediction service.</p>\n<p>This data includes:</p>\n<ul>\n<li>the edit prediction</li>\n<li>a portion of the buffer content around the cursor</li>\n<li>a few recent edits</li>\n<li>the current buffer outline</li>\n<li>diagnostics (errors, warnings, etc) from language servers</li>\n</ul>\n<h3 id=\"data-handling-1\"><a class=\"header\" href=\"#data-handling-1\">Data Handling</a></h3>\n<p>Collected data is stored in Snowflake, a private database where we track other metrics. We periodically review this data to select training samples for inclusion in our model training dataset. We ensure any included data is anonymized and contains no sensitive information (access tokens, user IDs, email addresses, etc). This training dataset is publicly available at <a href=\"https://huggingface.co/datasets/zed-industries/zeta\">huggingface.co/datasets/zed-industries/zeta</a>.</p>\n<h3 id=\"model-output\"><a class=\"header\" href=\"#model-output\">Model Output</a></h3>\n<p>We then use this training dataset to fine-tune <a href=\"https://huggingface.co/Qwen/Qwen2.5-Coder-7B\">Qwen2.5-Coder-7B</a> and make the resulting model available at <a href=\"https://huggingface.co/zed-industries/zeta\">huggingface.co/zed-industries/zeta</a>.</p>\n<h2 id=\"applicable-terms\"><a class=\"header\" href=\"#applicable-terms\">Applicable terms</a></h2>\n<p>Please see the <a href=\"https://zed.dev/terms-of-service\">Zed Terms of Service</a> for more.</p>\n\n</main>",
    "content_text": "Zed AI Improvement\nAgent Panel\nOpt-In\nWhen using the Agent Panel, whether through Zed's hosted AI service or via connecting a non-Zed AI service via API key, Zed does not persistently store user content or use user content to evaluate and/or improve our AI features, unless it is explicitly shared with Zed. Each share is opt-in, and sharing once will not cause future content or data to be shared again.\n\nNote that rating responses will send your data related to that response to Zed's servers.\nIf you don't want data persisted on Zed's servers, don't rate. We will not collect data for improving our Agentic offering without you explicitly rating responses.\n\nWhen using upstream services through Zed AI, we require assurances from our service providers that your user content won't be used for training models. For example, usage of Anthropic Claude 3.5 via Zed AI in the Assistant is governed by the Anthropic Commercial Terms which includes the following:\n\n\"Anthropic may not train models on Customer Content from paid Services.\"\n\nWe also have a zero-data retention agreement with Anthropic.\nWhen you directly connect Zed with a non Zed AI service (e.g., via API key) Zed does not have control over how your data is used by that service provider.\nYou should reference your agreement with each service provider to understand what terms and conditions apply.\nData we collect\nFor prompts you have explicitly shared with us, Zed may store copies of those prompts and other data about the specific use of the Agent Panel.\nThis data includes:\n\nThe prompt given to the Agent\nAny commentary you include\nProduct telemetry about the agentic thread\nMetadata about your Zed installation\n\nData Handling\nCollected data is stored in Snowflake, a private database where we track other metrics. We periodically review this data to improve our overall agentic approach and refine the product via our system prompt, tool use, etc. We ensure any included data is anonymized and contains no sensitive information (access tokens, user IDs, email addresses, etc).\nEdit Predictions\nBy default, when using Zed Edit Predictions, Zed does not persistently store user content or use user content for training of its models.\nOpt-in\nUsers who are working on open source licensed projects may optionally opt-in to providing model improvement feedback. This opt-in occurs on a per-project basis. If you work on multiple open source projects and wish to provide model improvement feedback you will have to opt-in for each individual project.\nWhen working on other projects where you haven't opted-in, Zed will not persistently store user content or use user content for training of its models.\nYou can see exactly how Zed detects open source licenses in: license_detection.rs.\nExclusions\nZed will intentionally exclude certain files from Predictive Edits entirely, even when you have opted-in to model improvement feedback.\nYou can inspect this exclusion list by opening zed: open default settings from the command palette:\n{\n  \"edit_predictions\": {\n    // A list of globs representing files that edit predictions should be disabled for.\n    // There's a sensible default list of globs already included.\n    // Any addition to this list will be merged with the default list.\n    \"disabled_globs\": [\n      \"**/.env*\",\n      \"**/*.pem\",\n      \"**/*.key\",\n      \"**/*.cert\",\n      \"**/*.crt\",\n      \"**/secrets.yml\"\n    ]\n  }\n}\n\nUsers may explicitly exclude additional paths and/or file extensions by adding them to edit_predictions.disabled_globs in their Zed settings.json:\n{\n  \"edit_predictions\": {\n    \"disabled_globs\": [\"secret_dir/*\", \"**/*.log\"]\n  }\n}\n\nData we collect\nFor open source projects where you have opted-in, Zed may store copies of requests and responses to the Zed AI Prediction service.\nThis data includes:\n\nthe edit prediction\na portion of the buffer content around the cursor\na few recent edits\nthe current buffer outline\ndiagnostics (errors, warnings, etc) from language servers\n\nData Handling\nCollected data is stored in Snowflake, a private database where we track other metrics. We periodically review this data to select training samples for inclusion in our model training dataset. We ensure any included data is anonymized and contains no sensitive information (access tokens, user IDs, email addresses, etc). This training dataset is publicly available at huggingface.co/datasets/zed-industries/zeta.\nModel Output\nWe then use this training dataset to fine-tune Qwen2.5-Coder-7B and make the resulting model available at huggingface.co/zed-industries/zeta.\nApplicable terms\nPlease see the Zed Terms of Service for more.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:40"
  },
  "extensions.html": {
    "url": "https://zed.dev/docs/extensions.html",
    "title": "Overview | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"extensions\"><a class=\"header\" href=\"#extensions\">Extensions</a></h1>\n<p>Zed lets you add new functionality using user-defined extensions.</p>\n<ul>\n<li><a href=\"./extensions/installing-extensions.html\">Installing Extensions</a></li>\n<li><a href=\"./extensions/developing-extensions.html\">Developing Extensions</a>\n<ul>\n<li><a href=\"./extensions/languages.html\">Developing Language Extensions</a></li>\n<li><a href=\"./extensions/debugger-extensions.html\">Developing Debugger Extensions</a></li>\n<li><a href=\"./extensions/themes.html\">Developing Themes</a></li>\n<li><a href=\"./extensions/icon-themes.html\">Developing Icon Themes</a></li>\n<li><a href=\"./extensions/slash-commands.html\">Developing Slash Commands</a></li>\n<li><a href=\"./extensions/mcp-extensions.html\">Developing MCP Servers</a></li>\n</ul>\n</li>\n</ul>\n\n</main>",
    "content_text": "Extensions\nZed lets you add new functionality using user-defined extensions.\n\nInstalling Extensions\nDeveloping Extensions\n\nDeveloping Language Extensions\nDeveloping Debugger Extensions\nDeveloping Themes\nDeveloping Icon Themes\nDeveloping Slash Commands\nDeveloping MCP Servers",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:42"
  },
  "extensions/installing-extensions.html": {
    "url": "https://zed.dev/docs/extensions/installing-extensions.html",
    "title": "Installing Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"installing-extensions\"><a class=\"header\" href=\"#installing-extensions\">Installing Extensions</a></h1>\n<p>You can search for extensions by launching the Zed Extension Gallery by pressing <kbd class=\"keybinding\">cmd-shift-x|ctrl-shift-x</kbd> , opening the command palette and selecting <code class=\"hljs\">zed: extensions</code> or by selecting \"Zed &gt; Extensions\" from the menu bar.</p>\n<p>Here you can view the extensions that you currently have installed or search and install new ones.</p>\n<h2 id=\"installation-location\"><a class=\"header\" href=\"#installation-location\">Installation Location</a></h2>\n<ul>\n<li>On macOS, extensions are installed in <code>~/Library/Application Support/Zed/extensions</code>.</li>\n<li>On Linux, they are installed in either <code>$XDG_DATA_HOME/zed/extensions</code> or <code>~/.local/share/zed/extensions</code>.</li>\n</ul>\n<p>This directory contains two subdirectories:</p>\n<ul>\n<li><code>installed</code>, which contains the source code for each extension.</li>\n<li><code>work</code> which contains files created by the extension itself, such as downloaded language servers.</li>\n</ul>\n<h2 id=\"auto-installing\"><a class=\"header\" href=\"#auto-installing\">Auto installing</a></h2>\n<p>To automate extension installation/uninstallation see the docs for <a href=\"../configuring-zed.html#auto-install-extensions\">auto_install_extensions</a>.</p>\n\n</main>",
    "content_text": "Installing Extensions\nYou can search for extensions by launching the Zed Extension Gallery by pressing cmd-shift-x|ctrl-shift-x , opening the command palette and selecting zed: extensions or by selecting \"Zed > Extensions\" from the menu bar.\nHere you can view the extensions that you currently have installed or search and install new ones.\nInstallation Location\n\nOn macOS, extensions are installed in ~/Library/Application Support/Zed/extensions.\nOn Linux, they are installed in either $XDG_DATA_HOME/zed/extensions or ~/.local/share/zed/extensions.\n\nThis directory contains two subdirectories:\n\ninstalled, which contains the source code for each extension.\nwork which contains files created by the extension itself, such as downloaded language servers.\n\nAuto installing\nTo automate extension installation/uninstallation see the docs for auto_install_extensions.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:44"
  },
  "extensions/developing-extensions.html": {
    "url": "https://zed.dev/docs/extensions/developing-extensions.html",
    "title": "Developing Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"developing-extensions\"><a class=\"header\" href=\"#developing-extensions\">Developing Extensions</a></h1>\n<h2 id=\"extension-capabilities\"><a class=\"header\" href=\"#extension-capabilities\">Extension Capabilities</a></h2>\n<p>Extensions can add the following capabilities to Zed:</p>\n<ul>\n<li><a href=\"./languages.html\">Languages</a></li>\n<li><a href=\"./debugger-extensions.html\">Debuggers</a></li>\n<li><a href=\"./themes.html\">Themes</a></li>\n<li><a href=\"./icon-themes.html\">Icon Themes</a></li>\n<li><a href=\"./slash-commands.html\">Slash Commands</a></li>\n<li><a href=\"./mcp-extensions.html\">MCP Servers</a></li>\n</ul>\n<h2 id=\"developing-an-extension-locally\"><a class=\"header\" href=\"#developing-an-extension-locally\">Developing an Extension Locally</a></h2>\n<p>Before starting to develop an extension for Zed, be sure to <a href=\"https://www.rust-lang.org/tools/install\">install Rust via rustup</a>.</p>\n<blockquote>\n<p>Rust must be installed via rustup. If you have Rust installed via homebrew or otherwise, installing dev extensions will not work.</p>\n</blockquote>\n<p>When developing an extension, you can use it in Zed without needing to publish it by installing it as a <em>dev extension</em>.</p>\n<p>From the extensions page, click the <code>Install Dev Extension</code> button (or the <code class=\"hljs\">zed: install dev extension</code> action) and select the directory containing your extension.</p>\n<p>If you need to troubleshoot, you can check the Zed.log (<code class=\"hljs\">zed: open log</code>) for additional output. For debug output, close and relaunch zed with the <code>zed --foreground</code> from the command line which show more verbose INFO level logging.</p>\n<p>If you already have a published extension with the same name installed, your dev extension will override it.</p>\n<p>After installing the <code>Extensions</code> page will indicate that that the upstream extension is \"Overridden by dev extension\".</p>\n<p>Pre-installed extensions with the same name have to be uninstalled before installing the dev extension. See <a href=\"https://github.com/zed-industries/zed/issues/31106\">#31106</a> for more.</p>\n<h2 id=\"directory-structure-of-a-zed-extension\"><a class=\"header\" href=\"#directory-structure-of-a-zed-extension\">Directory Structure of a Zed Extension</a></h2>\n<p>A Zed extension is a Git repository that contains an <code>extension.toml</code>. This file must contain some\nbasic information about the extension:</p>\n<pre><code class=\"language-toml\">id = \"my-extension\"\nname = \"My extension\"\nversion = \"0.0.1\"\nschema_version = 1\nauthors = [\"Your Name &lt;you@example.com&gt;\"]\ndescription = \"My cool extension\"\nrepository = \"https://github.com/your-name/my-zed-extension\"\n</code></pre>\n<p>In addition to this, there are several other optional files and directories that can be used to add functionality to a Zed extension. An example directory structure of an extension that provides all capabilities is as follows:</p>\n<pre><code>my-extension/\n  extension.toml\n  Cargo.toml\n  src/\n    lib.rs\n  languages/\n    my-language/\n      config.toml\n      highlights.scm\n  themes/\n    my-theme.json\n</code></pre>\n<h2 id=\"webassembly\"><a class=\"header\" href=\"#webassembly\">WebAssembly</a></h2>\n<p>Procedural parts of extensions are written in Rust and compiled to WebAssembly. To develop an extension that includes custom code, include a <code>Cargo.toml</code> like this:</p>\n<pre><code class=\"language-toml\">[package]\nname = \"my-extension\"\nversion = \"0.0.1\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nzed_extension_api = \"0.1.0\"\n</code></pre>\n<p>Use the latest version of the <a href=\"https://crates.io/crates/zed_extension_api\"><code>zed_extension_api</code></a> available on crates.io. Make sure it's still <a href=\"https://github.com/zed-industries/zed/blob/main/crates/extension_api#compatible-zed-versions\">compatible with Zed versions</a> you want to support.</p>\n<p>In the <code>src/lib.rs</code> file in your Rust crate you will need to define a struct for your extension and implement the <code>Extension</code> trait, as well as use the <code>register_extension!</code> macro to register your extension:</p>\n<pre><code class=\"language-rs\">use zed_extension_api as zed;\n\nstruct MyExtension {\n    // ... state\n}\n\nimpl zed::Extension for MyExtension {\n    // ...\n}\n\nzed::register_extension!(MyExtension);\n</code></pre>\n<blockquote>\n<p><code>stdout</code>/<code>stderr</code> is forwarded directly to the Zed process. In order to see <code>println!</code>/<code>dbg!</code> output from your extension, you can start Zed in your terminal with a <code>--foreground</code> flag.</p>\n</blockquote>\n<h2 id=\"forking-and-cloning-the-repo\"><a class=\"header\" href=\"#forking-and-cloning-the-repo\">Forking and cloning the repo</a></h2>\n<ol>\n<li>Fork the repo</li>\n</ol>\n<blockquote>\n<p>Note: It is very helpful if you fork the <code>zed-industries/extensions</code> repo to a personal GitHub account instead of a GitHub organization, as this allows Zed staff to push any needed changes to your PR to expedite the publishing process.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Clone the repo to your local machine</li>\n</ol>\n<pre><code class=\"language-sh\"># Substitute the url of your fork here:\n# git clone https://github.com/zed-industries/extensions\ncd extensions\ngit submodule init\ngit submodule update\n</code></pre>\n<h2 id=\"publishing-your-extension\"><a class=\"header\" href=\"#publishing-your-extension\">Publishing your extension</a></h2>\n<p>To publish an extension, open a PR to <a href=\"https://github.com/zed-industries/extensions\">the <code>zed-industries/extensions</code> repo</a>.</p>\n<p>In your PR, do the following:</p>\n<ol>\n<li>Add your extension as a Git submodule within the <code>extensions/</code> directory</li>\n</ol>\n<pre><code class=\"language-sh\">git submodule add https://github.com/your-username/foobar-zed.git extensions/foobar\ngit add extensions/foobar\n</code></pre>\n<blockquote>\n<p>All extension submodules must use HTTPS URLs and not SSH URLS (<code>git@github.com</code>).</p>\n</blockquote>\n<ol start=\"2\">\n<li>Add a new entry to the top-level <code>extensions.toml</code> file containing your extension:</li>\n</ol>\n<pre><code class=\"language-toml\">[my-extension]\nsubmodule = \"extensions/my-extension\"\nversion = \"0.0.1\"\n</code></pre>\n<blockquote>\n<p>If your extension is in a subdirectory within the submodule you can use the <code>path</code> field to point to where the extension resides.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Run <code>pnpm sort-extensions</code> to ensure <code>extensions.toml</code> and <code>.gitmodules</code> are sorted</li>\n</ol>\n<p>Once your PR is merged, the extension will be packaged and published to the Zed extension registry.</p>\n<blockquote>\n<p>Extension IDs and names should not contain <code>zed</code> or <code>Zed</code>, since they are all Zed extensions.</p>\n</blockquote>\n<h2 id=\"updating-an-extension\"><a class=\"header\" href=\"#updating-an-extension\">Updating an extension</a></h2>\n<p>To update an extension, open a PR to <a href=\"https://github.com/zed-industries/extensions\">the <code>zed-industries/extensions</code> repo</a>.</p>\n<p>In your PR do the following:</p>\n<ol>\n<li>Update the extension's submodule to the commit of the new version.</li>\n<li>Update the <code>version</code> field for the extension in <code>extensions.toml</code>\n<ul>\n<li>Make sure the <code>version</code> matches the one set in <code>extension.toml</code> at the particular commit.</li>\n</ul>\n</li>\n</ol>\n<p>If you'd like to automate this process, there is a <a href=\"https://github.com/huacnlee/zed-extension-action\">community GitHub Action</a> you can use.</p>\n\n</main>",
    "content_text": "Developing Extensions\nExtension Capabilities\nExtensions can add the following capabilities to Zed:\n\nLanguages\nDebuggers\nThemes\nIcon Themes\nSlash Commands\nMCP Servers\n\nDeveloping an Extension Locally\nBefore starting to develop an extension for Zed, be sure to install Rust via rustup.\n\nRust must be installed via rustup. If you have Rust installed via homebrew or otherwise, installing dev extensions will not work.\n\nWhen developing an extension, you can use it in Zed without needing to publish it by installing it as a dev extension.\nFrom the extensions page, click the Install Dev Extension button (or the zed: install dev extension action) and select the directory containing your extension.\nIf you need to troubleshoot, you can check the Zed.log (zed: open log) for additional output. For debug output, close and relaunch zed with the zed --foreground from the command line which show more verbose INFO level logging.\nIf you already have a published extension with the same name installed, your dev extension will override it.\nAfter installing the Extensions page will indicate that that the upstream extension is \"Overridden by dev extension\".\nPre-installed extensions with the same name have to be uninstalled before installing the dev extension. See #31106 for more.\nDirectory Structure of a Zed Extension\nA Zed extension is a Git repository that contains an extension.toml. This file must contain some\nbasic information about the extension:\nid = \"my-extension\"\nname = \"My extension\"\nversion = \"0.0.1\"\nschema_version = 1\nauthors = [\"Your Name <you@example.com>\"]\ndescription = \"My cool extension\"\nrepository = \"https://github.com/your-name/my-zed-extension\"\n\nIn addition to this, there are several other optional files and directories that can be used to add functionality to a Zed extension. An example directory structure of an extension that provides all capabilities is as follows:\nmy-extension/\n  extension.toml\n  Cargo.toml\n  src/\n    lib.rs\n  languages/\n    my-language/\n      config.toml\n      highlights.scm\n  themes/\n    my-theme.json\n\nWebAssembly\nProcedural parts of extensions are written in Rust and compiled to WebAssembly. To develop an extension that includes custom code, include a Cargo.toml like this:\n[package]\nname = \"my-extension\"\nversion = \"0.0.1\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nzed_extension_api = \"0.1.0\"\n\nUse the latest version of the zed_extension_api available on crates.io. Make sure it's still compatible with Zed versions you want to support.\nIn the src/lib.rs file in your Rust crate you will need to define a struct for your extension and implement the Extension trait, as well as use the register_extension! macro to register your extension:\nuse zed_extension_api as zed;\n\nstruct MyExtension {\n    // ... state\n}\n\nimpl zed::Extension for MyExtension {\n    // ...\n}\n\nzed::register_extension!(MyExtension);\n\n\nstdout/stderr is forwarded directly to the Zed process. In order to see println!/dbg! output from your extension, you can start Zed in your terminal with a --foreground flag.\n\nForking and cloning the repo\n\nFork the repo\n\n\nNote: It is very helpful if you fork the zed-industries/extensions repo to a personal GitHub account instead of a GitHub organization, as this allows Zed staff to push any needed changes to your PR to expedite the publishing process.\n\n\nClone the repo to your local machine\n\n# Substitute the url of your fork here:\n# git clone https://github.com/zed-industries/extensions\ncd extensions\ngit submodule init\ngit submodule update\n\nPublishing your extension\nTo publish an extension, open a PR to the zed-industries/extensions repo.\nIn your PR, do the following:\n\nAdd your extension as a Git submodule within the extensions/ directory\n\ngit submodule add https://github.com/your-username/foobar-zed.git extensions/foobar\ngit add extensions/foobar\n\n\nAll extension submodules must use HTTPS URLs and not SSH URLS (git@github.com).\n\n\nAdd a new entry to the top-level extensions.toml file containing your extension:\n\n[my-extension]\nsubmodule = \"extensions/my-extension\"\nversion = \"0.0.1\"\n\n\nIf your extension is in a subdirectory within the submodule you can use the path field to point to where the extension resides.\n\n\nRun pnpm sort-extensions to ensure extensions.toml and .gitmodules are sorted\n\nOnce your PR is merged, the extension will be packaged and published to the Zed extension registry.\n\nExtension IDs and names should not contain zed or Zed, since they are all Zed extensions.\n\nUpdating an extension\nTo update an extension, open a PR to the zed-industries/extensions repo.\nIn your PR do the following:\n\nUpdate the extension's submodule to the commit of the new version.\nUpdate the version field for the extension in extensions.toml\n\nMake sure the version matches the one set in extension.toml at the particular commit.\n\n\n\nIf you'd like to automate this process, there is a community GitHub Action you can use.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:46"
  },
  "extensions/languages.html": {
    "url": "https://zed.dev/docs/extensions/languages.html",
    "title": "Language Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"language-extensions\"><a class=\"header\" href=\"#language-extensions\">Language Extensions</a></h1>\n<p>Language support in Zed has several components:</p>\n<ul>\n<li>Language metadata and configuration</li>\n<li>Grammar</li>\n<li>Queries</li>\n<li>Language servers</li>\n</ul>\n<h2 id=\"language-metadata\"><a class=\"header\" href=\"#language-metadata\">Language Metadata</a></h2>\n<p>Each language supported by Zed must be defined in a subdirectory inside the <code>languages</code> directory of your extension.</p>\n<p>This subdirectory must contain a file called <code>config.toml</code> file with the following structure:</p>\n<pre><code class=\"language-toml\">name = \"My Language\"\ngrammar = \"my-language\"\npath_suffixes = [\"myl\"]\nline_comments = [\"# \"]\n</code></pre>\n<ul>\n<li><code>name</code> (required) is the human readable name that will show up in the Select Language dropdown.</li>\n<li><code>grammar</code> (required) is the name of a grammar. Grammars are registered separately, described below.</li>\n<li><code>path_suffixes</code> is an array of file suffixes that should be associated with this language. Unlike <code>file_types</code> in settings, this does not support glob patterns.</li>\n<li><code>line_comments</code> is an array of strings that are used to identify line comments in the language. This is used for the <code>editor::ToggleComments</code> keybind: <kbd class=\"keybinding\">cmd-/|ctrl-/</kbd> for toggling lines of code.</li>\n<li><code>tab_size</code> defines the indentation/tab size used for this language (default is <code>4</code>).</li>\n<li><code>hard_tabs</code> whether to indent with tabs (<code>true</code>) or spaces (<code>false</code>, the default).</li>\n<li><code>first_line_pattern</code> is a regular expression, that in addition to <code>path_suffixes</code> (above) or <code>file_types</code> in settings can be used to match files which should use this language. For example Zed uses this to identify Shell Scripts by matching the <a href=\"https://github.com/zed-industries/zed/blob/main/crates/languages/src/bash/config.toml\">shebangs lines</a> in the first line of a script.</li>\n<li><code>debuggers</code> is an array of strings that are used to identify debuggers in the language. When launching a debugger's <code>New Process Modal</code>, Zed will order available debuggers by the order of entries in this array.</li>\n</ul>\n<!--\nTBD: Document `language_name/config.toml` keys\n\n- autoclose_before\n- brackets (start, end, close, newline, not_in: [\"comment\", \"string\"])\n- word_characters\n- prettier_parser_name\n- opt_into_language_servers\n- code_fence_block_name\n- scope_opt_in_language_servers\n- increase_indent_pattern, decrease_indent_pattern\n- collapsed_placeholder\n- auto_indent_on_paste, auto_indent_using_last_non_empty_line\n- overrides: `[overrides.element]`, `[overrides.string]`\n-->\n<h2 id=\"grammar\"><a class=\"header\" href=\"#grammar\">Grammar</a></h2>\n<p>Zed uses the <a href=\"https://tree-sitter.github.io\">Tree-sitter</a> parsing library to provide built-in language-specific features. There are grammars available for many languages, and you can also <a href=\"https://tree-sitter.github.io/tree-sitter/creating-parsers#writing-the-grammar\">develop your own grammar</a>. A growing list of Zed features are built using pattern matching over syntax trees with Tree-sitter queries. As mentioned above, every language that is defined in an extension must specify the name of a Tree-sitter grammar that is used for parsing. These grammars are then registered separately in extensions' <code>extension.toml</code> file, like this:</p>\n<pre><code class=\"language-toml\">[grammars.gleam]\nrepository = \"https://github.com/gleam-lang/tree-sitter-gleam\"\nrev = \"58b7cac8fc14c92b0677c542610d8738c373fa81\"\n</code></pre>\n<p>The <code>repository</code> field must specify a repository where the Tree-sitter grammar should be loaded from, and the <code>rev</code> field must contain a Git revision to use, such as the SHA of a Git commit. If you're developing an extension locally and want to load a grammar from the local filesystem, you can use a <code>file://</code> URL for <code>repository</code>. An extension can provide multiple grammars by referencing multiple tree-sitter repositories.</p>\n<h2 id=\"tree-sitter-queries\"><a class=\"header\" href=\"#tree-sitter-queries\">Tree-sitter Queries</a></h2>\n<p>Zed uses the syntax tree produced by the <a href=\"https://tree-sitter.github.io\">Tree-sitter</a> query language to implement\nseveral features:</p>\n<ul>\n<li>Syntax highlighting</li>\n<li>Bracket matching</li>\n<li>Code outline/structure</li>\n<li>Auto-indentation</li>\n<li>Code injections</li>\n<li>Syntax overrides</li>\n<li>Text redactions</li>\n<li>Runnable code detection</li>\n<li>Selecting classes, functions, etc.</li>\n</ul>\n<p>The following sections elaborate on how <a href=\"https://tree-sitter.github.io/tree-sitter/using-parsers#query-syntax\">Tree-sitter queries</a> enable these\nfeatures in Zed, using <a href=\"https://www.json.org/json-en.html\">JSON syntax</a> as a guiding example.</p>\n<h3 id=\"syntax-highlighting\"><a class=\"header\" href=\"#syntax-highlighting\">Syntax highlighting</a></h3>\n<p>In Tree-sitter, the <code>highlights.scm</code> file defines syntax highlighting rules for a particular syntax.</p>\n<p>Here's an example from a <code>highlights.scm</code> for JSON:</p>\n<pre><code class=\"language-scheme\">(string) @string\n\n(pair\n  key: (string) @property.json_key)\n\n(number) @number\n</code></pre>\n<p>This query marks strings, object keys, and numbers for highlighting. The following is a comprehensive list of captures supported by themes:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@attribute</td><td>Captures attributes</td></tr>\n<tr><td>@boolean</td><td>Captures boolean values</td></tr>\n<tr><td>@comment</td><td>Captures comments</td></tr>\n<tr><td>@comment.doc</td><td>Captures documentation comments</td></tr>\n<tr><td>@constant</td><td>Captures constants</td></tr>\n<tr><td>@constructor</td><td>Captures constructors</td></tr>\n<tr><td>@embedded</td><td>Captures embedded content</td></tr>\n<tr><td>@emphasis</td><td>Captures emphasized text</td></tr>\n<tr><td>@emphasis.strong</td><td>Captures strongly emphasized text</td></tr>\n<tr><td>@enum</td><td>Captures enumerations</td></tr>\n<tr><td>@function</td><td>Captures functions</td></tr>\n<tr><td>@hint</td><td>Captures hints</td></tr>\n<tr><td>@keyword</td><td>Captures keywords</td></tr>\n<tr><td>@label</td><td>Captures labels</td></tr>\n<tr><td>@link_text</td><td>Captures link text</td></tr>\n<tr><td>@link_uri</td><td>Captures link URIs</td></tr>\n<tr><td>@number</td><td>Captures numeric values</td></tr>\n<tr><td>@operator</td><td>Captures operators</td></tr>\n<tr><td>@predictive</td><td>Captures predictive text</td></tr>\n<tr><td>@preproc</td><td>Captures preprocessor directives</td></tr>\n<tr><td>@primary</td><td>Captures primary elements</td></tr>\n<tr><td>@property</td><td>Captures properties</td></tr>\n<tr><td>@punctuation</td><td>Captures punctuation</td></tr>\n<tr><td>@punctuation.bracket</td><td>Captures brackets</td></tr>\n<tr><td>@punctuation.delimiter</td><td>Captures delimiters</td></tr>\n<tr><td>@punctuation.list_marker</td><td>Captures list markers</td></tr>\n<tr><td>@punctuation.special</td><td>Captures special punctuation</td></tr>\n<tr><td>@string</td><td>Captures string literals</td></tr>\n<tr><td>@string.escape</td><td>Captures escaped characters in strings</td></tr>\n<tr><td>@string.regex</td><td>Captures regular expressions</td></tr>\n<tr><td>@string.special</td><td>Captures special strings</td></tr>\n<tr><td>@string.special.symbol</td><td>Captures special symbols</td></tr>\n<tr><td>@tag</td><td>Captures tags</td></tr>\n<tr><td>@tag.doctype</td><td>Captures doctypes (e.g., in HTML)</td></tr>\n<tr><td>@text.literal</td><td>Captures literal text</td></tr>\n<tr><td>@title</td><td>Captures titles</td></tr>\n<tr><td>@type</td><td>Captures types</td></tr>\n<tr><td>@variable</td><td>Captures variables</td></tr>\n<tr><td>@variable.special</td><td>Captures special variables</td></tr>\n<tr><td>@variant</td><td>Captures variants</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"bracket-matching\"><a class=\"header\" href=\"#bracket-matching\">Bracket matching</a></h3>\n<p>The <code>brackets.scm</code> file defines matching brackets.</p>\n<p>Here's an example from a <code>brackets.scm</code> file for JSON:</p>\n<pre><code class=\"language-scheme\">(\"[\" @open \"]\" @close)\n(\"{\" @open \"}\" @close)\n(\"\\\"\" @open \"\\\"\" @close)\n</code></pre>\n<p>This query identifies opening and closing brackets, braces, and quotation marks.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@open</td><td>Captures opening brackets, braces, and quotes</td></tr>\n<tr><td>@close</td><td>Captures closing brackets, braces, and quotes</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"code-outlinestructure\"><a class=\"header\" href=\"#code-outlinestructure\">Code outline/structure</a></h3>\n<p>The <code>outline.scm</code> file defines the structure for the code outline.</p>\n<p>Here's an example from an <code>outline.scm</code> file for JSON:</p>\n<pre><code class=\"language-scheme\">(pair\n  key: (string (string_content) @name)) @item\n</code></pre>\n<p>This query captures object keys for the outline structure.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@name</td><td>Captures the content of object keys</td></tr>\n<tr><td>@item</td><td>Captures the entire key-value pair</td></tr>\n<tr><td>@context</td><td>Captures elements that provide context for the outline item</td></tr>\n<tr><td>@context.extra</td><td>Captures additional contextual information for the outline item</td></tr>\n<tr><td>@annotation</td><td>Captures nodes that annotate outline item (doc comments, attributes, decorators)<sup class=\"footnote-reference\"><a href=\"#1\">1</a></sup></td></tr>\n</tbody></table>\n</div>\n<div class=\"footnote-definition\" id=\"1\"><sup class=\"footnote-definition-label\">1</sup>\n<p>These annotations are used by Assistant when generating code modification steps.</p>\n</div>\n<h3 id=\"auto-indentation\"><a class=\"header\" href=\"#auto-indentation\">Auto-indentation</a></h3>\n<p>The <code>indents.scm</code> file defines indentation rules.</p>\n<p>Here's an example from an <code>indents.scm</code> file for JSON:</p>\n<pre><code class=\"language-scheme\">(array \"]\" @end) @indent\n(object \"}\" @end) @indent\n</code></pre>\n<p>This query marks the end of arrays and objects for indentation purposes.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@end</td><td>Captures closing brackets and braces</td></tr>\n<tr><td>@indent</td><td>Captures entire arrays and objects for indentation</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"code-injections\"><a class=\"header\" href=\"#code-injections\">Code injections</a></h3>\n<p>The <code>injections.scm</code> file defines rules for embedding one language within another, such as code blocks in Markdown or SQL queries in Python strings.</p>\n<p>Here's an example from an <code>injections.scm</code> file for Markdown:</p>\n<pre><code class=\"language-scheme\">(fenced_code_block\n  (info_string\n    (language) @injection.language)\n  (code_fence_content) @injection.content)\n\n((inline) @content\n (#set! injection.language \"markdown-inline\"))\n</code></pre>\n<p>This query identifies fenced code blocks, capturing the language specified in the info string and the content within the block. It also captures inline content and sets its language to \"markdown-inline\".</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@injection.language</td><td>Captures the language identifier for a code block</td></tr>\n<tr><td>@injection.content</td><td>Captures the content to be treated as a different language</td></tr>\n</tbody></table>\n</div>\n<p>Note that we couldn't use JSON as an example here because it doesn't support language injections.</p>\n<h3 id=\"syntax-overrides\"><a class=\"header\" href=\"#syntax-overrides\">Syntax overrides</a></h3>\n<p>The <code>overrides.scm</code> file defines syntactic <em>scopes</em> that can be used to override certain editor settings within specific language constructs.</p>\n<p>For example, there is a language-specific setting called <code>word_characters</code> that controls which non-alphabetic characters are considered part of a word, for example when you double click to select a variable. In JavaScript, \"$\" and \"#\" are considered word characters.</p>\n<p>There is also a language-specific setting called <code>completion_query_characters</code> that controls which characters trigger autocomplete suggestions. In JavaScript, when your cursor is within a <em>string</em>, \"-\" is should be considered a completion query character. To achieve this, the JavaScript <code>overrides.scm</code> file contains the following pattern:</p>\n<pre><code class=\"language-scheme\">[\n  (string)\n  (template_string)\n] @string\n</code></pre>\n<p>And the JavaScript <code>config.toml</code> contains this setting:</p>\n<pre><code class=\"language-toml\">word_characters = [\"#\", \"$\"]\n\n[overrides.string]\ncompletion_query_characters = [\"-\"]\n</code></pre>\n<p>You can also disable certain auto-closing brackets in a specific scope. For example, to prevent auto-closing <code>'</code> within strings, you could put the following in the JavaScript <code>config.toml</code>:</p>\n<pre><code class=\"language-toml\">brackets = [\n  { start = \"'\", end = \"'\", close = true, newline = false, not_in = [\"string\"] },\n  # other pairs...\n]\n</code></pre>\n<h4 id=\"range-inclusivity\"><a class=\"header\" href=\"#range-inclusivity\">Range inclusivity</a></h4>\n<p>By default, the ranges defined in <code>overrides.scm</code> are <em>exclusive</em>. So in the case above, if you cursor was <em>outside</em> the quotation marks delimiting the string, the <code>string</code> scope would not take effect. Sometimes, you may want to make the range <em>inclusive</em>. You can do this by adding the <code>.inclusive</code> suffix to the capture name in the query.</p>\n<p>For example, in JavaScript, we also disable auto-closing of single quotes within comments. And the comment scope must extend all the way to the newline after a line comment. To achieve this, the JavaScript <code>overrides.scm</code> contains the following pattern:</p>\n<pre><code class=\"language-scheme\">(comment) @comment.inclusive\n</code></pre>\n<h3 id=\"text-objects\"><a class=\"header\" href=\"#text-objects\">Text objects</a></h3>\n<p>The <code>textobjects.scm</code> file defines rules for navigating by text objects. This was added in Zed v0.165 and is currently used only in Vim mode.</p>\n<p>Vim provides two levels of granularity for navigating around files. Section-by-section with <code>[]</code> etc., and method-by-method with <code>]m</code> etc. Even languages that don't support functions and classes can work well by defining similar concepts. For example CSS defines a rule-set as a method, and a media-query as a class.</p>\n<p>For languages with closures, these typically should not count as functions in Zed. This is best-effort however, as languages like Javascript do not syntactically differentiate syntactically between closures and top-level function declarations.</p>\n<p>For languages with declarations like C, provide queries that match <code>@class.around</code> or <code>@function.around</code>. The <code>if</code> and <code>ic</code> text objects will default to these if there is no inside.</p>\n<p>If you are not sure what to put in textobjects.scm, both <a href=\"https://github.com/nvim-treesitter/nvim-treesitter-textobjects\">nvim-treesitter-textobjects</a>, and the <a href=\"https://github.com/helix-editor/helix\">Helix editor</a> have queries for many languages. You can refer to the Zed <a href=\"https://github.com/zed-industries/zed/tree/main/crates/languages/src\">built-in languages</a> to see how to adapt these.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th><th>Vim mode</th></tr></thead><tbody>\n<tr><td>@function.around</td><td>An entire function definition or equivalent small section of a file.</td><td><code>[m</code>, <code>]m</code>, <code>[M</code>,<code>]M</code> motions. <code>af</code> text object</td></tr>\n<tr><td>@function.inside</td><td>The function body (the stuff within the braces).</td><td><code>if</code> text object</td></tr>\n<tr><td>@class.around</td><td>An entire class definition or equivalent large section of a file.</td><td><code>[[</code>, <code>]]</code>, <code>[]</code>, <code>][</code> motions. <code>ac</code> text object</td></tr>\n<tr><td>@class.inside</td><td>The contents of a class definition.</td><td><code>ic</code> text object</td></tr>\n<tr><td>@comment.around</td><td>An entire comment (e.g. all adjacent line comments, or a block comment)</td><td><code>gc</code> text object</td></tr>\n<tr><td>@comment.inside</td><td>The contents of a comment</td><td><code>igc</code> text object (rarely supported)</td></tr>\n</tbody></table>\n</div>\n<p>For example:</p>\n<pre><code class=\"language-scheme\">; include only the content of the method in the function\n(method_definition\n    body: (_\n        \"{\"\n        (_)* @function.inside\n        \"}\")) @function.around\n\n; match function.around for declarations with no body\n(function_signature_item) @function.around\n\n; join all adjacent comments into one\n(comment)+ @comment.around\n</code></pre>\n<h3 id=\"text-redactions\"><a class=\"header\" href=\"#text-redactions\">Text redactions</a></h3>\n<p>The <code>redactions.scm</code> file defines text redaction rules. When collaborating and sharing your screen, it makes sure that certain syntax nodes are rendered in a redacted mode to avoid them from leaking.</p>\n<p>Here's an example from a <code>redactions.scm</code> file for JSON:</p>\n<pre><code class=\"language-scheme\">(pair value: (number) @redact)\n(pair value: (string) @redact)\n(array (number) @redact)\n(array (string) @redact)\n</code></pre>\n<p>This query marks number and string values in key-value pairs and arrays for redaction.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@redact</td><td>Captures values to be redacted</td></tr>\n</tbody></table>\n</div>\n<h3 id=\"runnable-code-detection\"><a class=\"header\" href=\"#runnable-code-detection\">Runnable code detection</a></h3>\n<p>The <code>runnables.scm</code> file defines rules for detecting runnable code.</p>\n<p>Here's an example from an <code>runnables.scm</code> file for JSON:</p>\n<pre><code class=\"language-scheme\">(\n    (document\n        (object\n            (pair\n                key: (string\n                    (string_content) @_name\n                    (#eq? @_name \"scripts\")\n                )\n                value: (object\n                    (pair\n                        key: (string (string_content) @run @script)\n                    )\n                )\n            )\n        )\n    )\n    (#set! tag package-script)\n    (#set! tag composer-script)\n)\n</code></pre>\n<p>This query detects runnable scripts in package.json and composer.json files.</p>\n<p>The <code>@run</code> capture specifies where the run button should appear in the editor. Other captures, except those prefixed with an underscore, are exposed as environment variables with a prefix of <code>ZED_CUSTOM_$(capture_name)</code> when running the code.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Capture</th><th>Description</th></tr></thead><tbody>\n<tr><td>@_name</td><td>Captures the \"scripts\" key</td></tr>\n<tr><td>@run</td><td>Captures the script name</td></tr>\n<tr><td>@script</td><td>Also captures the script name (for different purposes)</td></tr>\n</tbody></table>\n</div><!--\nTBD: `#set! tag`\n-->\n<h2 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language Servers</a></h2>\n<p>Zed uses the <a href=\"https://microsoft.github.io/language-server-protocol/\">Language Server Protocol</a> to provide advanced language support.</p>\n<p>An extension may provide any number of language servers. To provide a language server from your extension, add an entry to your <code>extension.toml</code> with the name of your language server and the language(s) it applies to:</p>\n<pre><code class=\"language-toml\">[language_servers.my-language-server]\nname = \"My Language LSP\"\nlanguages = [\"My Language\"]\n</code></pre>\n<p>Then, in the Rust code for your extension, implement the <code>language_server_command</code> method on your extension:</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn language_server_command(\n        &amp;mut self,\n        language_server_id: &amp;LanguageServerId,\n        worktree: &amp;zed::Worktree,\n    ) -&gt; Result&lt;zed::Command&gt; {\n        Ok(zed::Command {\n            command: get_path_to_language_server_executable()?,\n            args: get_args_for_language_server()?,\n            env: get_env_for_language_server()?,\n        })\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>You can customize the handling of the language server using several optional methods in the <code>Extension</code> trait. For example, you can control how completions are styled using the <code>label_for_completion</code> method. For a complete list of methods, see the <a href=\"https://docs.rs/zed_extension_api\">API docs for the Zed extension API</a>.</p>\n<h3 id=\"multi-language-support\"><a class=\"header\" href=\"#multi-language-support\">Multi-Language Support</a></h3>\n<p>If your language server supports additional languages, you can use <code>language_ids</code> to map Zed <code>languages</code> to the desired <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem\">LSP-specific <code>languageId</code></a> identifiers:</p>\n<pre><code class=\"language-toml\">\n[language-servers.my-language-server]\nname = \"Whatever LSP\"\nlanguages = [\"JavaScript\", \"HTML\", \"CSS\"]\n\n[language-servers.my-language-server.language_ids]\n\"JavaScript\" = \"javascript\"\n\"TSX\" = \"typescriptreact\"\n\"HTML\" = \"html\"\n\"CSS\" = \"css\"\n</code></pre>\n\n</main>",
    "content_text": "Language Extensions\nLanguage support in Zed has several components:\n\nLanguage metadata and configuration\nGrammar\nQueries\nLanguage servers\n\nLanguage Metadata\nEach language supported by Zed must be defined in a subdirectory inside the languages directory of your extension.\nThis subdirectory must contain a file called config.toml file with the following structure:\nname = \"My Language\"\ngrammar = \"my-language\"\npath_suffixes = [\"myl\"]\nline_comments = [\"# \"]\n\n\nname (required) is the human readable name that will show up in the Select Language dropdown.\ngrammar (required) is the name of a grammar. Grammars are registered separately, described below.\npath_suffixes is an array of file suffixes that should be associated with this language. Unlike file_types in settings, this does not support glob patterns.\nline_comments is an array of strings that are used to identify line comments in the language. This is used for the editor::ToggleComments keybind: cmd-/|ctrl-/ for toggling lines of code.\ntab_size defines the indentation/tab size used for this language (default is 4).\nhard_tabs whether to indent with tabs (true) or spaces (false, the default).\nfirst_line_pattern is a regular expression, that in addition to path_suffixes (above) or file_types in settings can be used to match files which should use this language. For example Zed uses this to identify Shell Scripts by matching the shebangs lines in the first line of a script.\ndebuggers is an array of strings that are used to identify debuggers in the language. When launching a debugger's New Process Modal, Zed will order available debuggers by the order of entries in this array.\n\n\nGrammar\nZed uses the Tree-sitter parsing library to provide built-in language-specific features. There are grammars available for many languages, and you can also develop your own grammar. A growing list of Zed features are built using pattern matching over syntax trees with Tree-sitter queries. As mentioned above, every language that is defined in an extension must specify the name of a Tree-sitter grammar that is used for parsing. These grammars are then registered separately in extensions' extension.toml file, like this:\n[grammars.gleam]\nrepository = \"https://github.com/gleam-lang/tree-sitter-gleam\"\nrev = \"58b7cac8fc14c92b0677c542610d8738c373fa81\"\n\nThe repository field must specify a repository where the Tree-sitter grammar should be loaded from, and the rev field must contain a Git revision to use, such as the SHA of a Git commit. If you're developing an extension locally and want to load a grammar from the local filesystem, you can use a file:// URL for repository. An extension can provide multiple grammars by referencing multiple tree-sitter repositories.\nTree-sitter Queries\nZed uses the syntax tree produced by the Tree-sitter query language to implement\nseveral features:\n\nSyntax highlighting\nBracket matching\nCode outline/structure\nAuto-indentation\nCode injections\nSyntax overrides\nText redactions\nRunnable code detection\nSelecting classes, functions, etc.\n\nThe following sections elaborate on how Tree-sitter queries enable these\nfeatures in Zed, using JSON syntax as a guiding example.\nSyntax highlighting\nIn Tree-sitter, the highlights.scm file defines syntax highlighting rules for a particular syntax.\nHere's an example from a highlights.scm for JSON:\n(string) @string\n\n(pair\n  key: (string) @property.json_key)\n\n(number) @number\n\nThis query marks strings, object keys, and numbers for highlighting. The following is a comprehensive list of captures supported by themes:\nCaptureDescription\n@attributeCaptures attributes\n@booleanCaptures boolean values\n@commentCaptures comments\n@comment.docCaptures documentation comments\n@constantCaptures constants\n@constructorCaptures constructors\n@embeddedCaptures embedded content\n@emphasisCaptures emphasized text\n@emphasis.strongCaptures strongly emphasized text\n@enumCaptures enumerations\n@functionCaptures functions\n@hintCaptures hints\n@keywordCaptures keywords\n@labelCaptures labels\n@link_textCaptures link text\n@link_uriCaptures link URIs\n@numberCaptures numeric values\n@operatorCaptures operators\n@predictiveCaptures predictive text\n@preprocCaptures preprocessor directives\n@primaryCaptures primary elements\n@propertyCaptures properties\n@punctuationCaptures punctuation\n@punctuation.bracketCaptures brackets\n@punctuation.delimiterCaptures delimiters\n@punctuation.list_markerCaptures list markers\n@punctuation.specialCaptures special punctuation\n@stringCaptures string literals\n@string.escapeCaptures escaped characters in strings\n@string.regexCaptures regular expressions\n@string.specialCaptures special strings\n@string.special.symbolCaptures special symbols\n@tagCaptures tags\n@tag.doctypeCaptures doctypes (e.g., in HTML)\n@text.literalCaptures literal text\n@titleCaptures titles\n@typeCaptures types\n@variableCaptures variables\n@variable.specialCaptures special variables\n@variantCaptures variants\n\n\nBracket matching\nThe brackets.scm file defines matching brackets.\nHere's an example from a brackets.scm file for JSON:\n(\"[\" @open \"]\" @close)\n(\"{\" @open \"}\" @close)\n(\"\\\"\" @open \"\\\"\" @close)\n\nThis query identifies opening and closing brackets, braces, and quotation marks.\nCaptureDescription\n@openCaptures opening brackets, braces, and quotes\n@closeCaptures closing brackets, braces, and quotes\n\n\nCode outline/structure\nThe outline.scm file defines the structure for the code outline.\nHere's an example from an outline.scm file for JSON:\n(pair\n  key: (string (string_content) @name)) @item\n\nThis query captures object keys for the outline structure.\nCaptureDescription\n@nameCaptures the content of object keys\n@itemCaptures the entire key-value pair\n@contextCaptures elements that provide context for the outline item\n@context.extraCaptures additional contextual information for the outline item\n@annotationCaptures nodes that annotate outline item (doc comments, attributes, decorators)1\n\n\n1\nThese annotations are used by Assistant when generating code modification steps.\n\nAuto-indentation\nThe indents.scm file defines indentation rules.\nHere's an example from an indents.scm file for JSON:\n(array \"]\" @end) @indent\n(object \"}\" @end) @indent\n\nThis query marks the end of arrays and objects for indentation purposes.\nCaptureDescription\n@endCaptures closing brackets and braces\n@indentCaptures entire arrays and objects for indentation\n\n\nCode injections\nThe injections.scm file defines rules for embedding one language within another, such as code blocks in Markdown or SQL queries in Python strings.\nHere's an example from an injections.scm file for Markdown:\n(fenced_code_block\n  (info_string\n    (language) @injection.language)\n  (code_fence_content) @injection.content)\n\n((inline) @content\n (#set! injection.language \"markdown-inline\"))\n\nThis query identifies fenced code blocks, capturing the language specified in the info string and the content within the block. It also captures inline content and sets its language to \"markdown-inline\".\nCaptureDescription\n@injection.languageCaptures the language identifier for a code block\n@injection.contentCaptures the content to be treated as a different language\n\n\nNote that we couldn't use JSON as an example here because it doesn't support language injections.\nSyntax overrides\nThe overrides.scm file defines syntactic scopes that can be used to override certain editor settings within specific language constructs.\nFor example, there is a language-specific setting called word_characters that controls which non-alphabetic characters are considered part of a word, for example when you double click to select a variable. In JavaScript, \"$\" and \"#\" are considered word characters.\nThere is also a language-specific setting called completion_query_characters that controls which characters trigger autocomplete suggestions. In JavaScript, when your cursor is within a string, \"-\" is should be considered a completion query character. To achieve this, the JavaScript overrides.scm file contains the following pattern:\n[\n  (string)\n  (template_string)\n] @string\n\nAnd the JavaScript config.toml contains this setting:\nword_characters = [\"#\", \"$\"]\n\n[overrides.string]\ncompletion_query_characters = [\"-\"]\n\nYou can also disable certain auto-closing brackets in a specific scope. For example, to prevent auto-closing ' within strings, you could put the following in the JavaScript config.toml:\nbrackets = [\n  { start = \"'\", end = \"'\", close = true, newline = false, not_in = [\"string\"] },\n  # other pairs...\n]\n\nRange inclusivity\nBy default, the ranges defined in overrides.scm are exclusive. So in the case above, if you cursor was outside the quotation marks delimiting the string, the string scope would not take effect. Sometimes, you may want to make the range inclusive. You can do this by adding the .inclusive suffix to the capture name in the query.\nFor example, in JavaScript, we also disable auto-closing of single quotes within comments. And the comment scope must extend all the way to the newline after a line comment. To achieve this, the JavaScript overrides.scm contains the following pattern:\n(comment) @comment.inclusive\n\nText objects\nThe textobjects.scm file defines rules for navigating by text objects. This was added in Zed v0.165 and is currently used only in Vim mode.\nVim provides two levels of granularity for navigating around files. Section-by-section with [] etc., and method-by-method with ]m etc. Even languages that don't support functions and classes can work well by defining similar concepts. For example CSS defines a rule-set as a method, and a media-query as a class.\nFor languages with closures, these typically should not count as functions in Zed. This is best-effort however, as languages like Javascript do not syntactically differentiate syntactically between closures and top-level function declarations.\nFor languages with declarations like C, provide queries that match @class.around or @function.around. The if and ic text objects will default to these if there is no inside.\nIf you are not sure what to put in textobjects.scm, both nvim-treesitter-textobjects, and the Helix editor have queries for many languages. You can refer to the Zed built-in languages to see how to adapt these.\nCaptureDescriptionVim mode\n@function.aroundAn entire function definition or equivalent small section of a file.[m, ]m, [M,]M motions. af text object\n@function.insideThe function body (the stuff within the braces).if text object\n@class.aroundAn entire class definition or equivalent large section of a file.[[, ]], [], ][ motions. ac text object\n@class.insideThe contents of a class definition.ic text object\n@comment.aroundAn entire comment (e.g. all adjacent line comments, or a block comment)gc text object\n@comment.insideThe contents of a commentigc text object (rarely supported)\n\n\nFor example:\n; include only the content of the method in the function\n(method_definition\n    body: (_\n        \"{\"\n        (_)* @function.inside\n        \"}\")) @function.around\n\n; match function.around for declarations with no body\n(function_signature_item) @function.around\n\n; join all adjacent comments into one\n(comment)+ @comment.around\n\nText redactions\nThe redactions.scm file defines text redaction rules. When collaborating and sharing your screen, it makes sure that certain syntax nodes are rendered in a redacted mode to avoid them from leaking.\nHere's an example from a redactions.scm file for JSON:\n(pair value: (number) @redact)\n(pair value: (string) @redact)\n(array (number) @redact)\n(array (string) @redact)\n\nThis query marks number and string values in key-value pairs and arrays for redaction.\nCaptureDescription\n@redactCaptures values to be redacted\n\n\nRunnable code detection\nThe runnables.scm file defines rules for detecting runnable code.\nHere's an example from an runnables.scm file for JSON:\n(\n    (document\n        (object\n            (pair\n                key: (string\n                    (string_content) @_name\n                    (#eq? @_name \"scripts\")\n                )\n                value: (object\n                    (pair\n                        key: (string (string_content) @run @script)\n                    )\n                )\n            )\n        )\n    )\n    (#set! tag package-script)\n    (#set! tag composer-script)\n)\n\nThis query detects runnable scripts in package.json and composer.json files.\nThe @run capture specifies where the run button should appear in the editor. Other captures, except those prefixed with an underscore, are exposed as environment variables with a prefix of ZED_CUSTOM_$(capture_name) when running the code.\nCaptureDescription\n@_nameCaptures the \"scripts\" key\n@runCaptures the script name\n@scriptAlso captures the script name (for different purposes)\n\n\nLanguage Servers\nZed uses the Language Server Protocol to provide advanced language support.\nAn extension may provide any number of language servers. To provide a language server from your extension, add an entry to your extension.toml with the name of your language server and the language(s) it applies to:\n[language_servers.my-language-server]\nname = \"My Language LSP\"\nlanguages = [\"My Language\"]\n\nThen, in the Rust code for your extension, implement the language_server_command method on your extension:\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn language_server_command(\n        &mut self,\n        language_server_id: &LanguageServerId,\n        worktree: &zed::Worktree,\n    ) -> Result<zed::Command> {\n        Ok(zed::Command {\n            command: get_path_to_language_server_executable()?,\n            args: get_args_for_language_server()?,\n            env: get_env_for_language_server()?,\n        })\n    }\n}\n}\nYou can customize the handling of the language server using several optional methods in the Extension trait. For example, you can control how completions are styled using the label_for_completion method. For a complete list of methods, see the API docs for the Zed extension API.\nMulti-Language Support\nIf your language server supports additional languages, you can use language_ids to map Zed languages to the desired LSP-specific languageId identifiers:\n\n[language-servers.my-language-server]\nname = \"Whatever LSP\"\nlanguages = [\"JavaScript\", \"HTML\", \"CSS\"]\n\n[language-servers.my-language-server.language_ids]\n\"JavaScript\" = \"javascript\"\n\"TSX\" = \"typescriptreact\"\n\"HTML\" = \"html\"\n\"CSS\" = \"css\"",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:48"
  },
  "extensions/debugger-extensions.html": {
    "url": "https://zed.dev/docs/extensions/debugger-extensions.html",
    "title": "Debugger Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"debugger-extensions\"><a class=\"header\" href=\"#debugger-extensions\">Debugger Extensions</a></h1>\n<p><a href=\"https://microsoft.github.io/debug-adapter-protocol\">Debug Adapter Protocol</a> Servers can be exposed as extensions for use in the <a href=\"../debugger.html\">debugger</a>.</p>\n<h2 id=\"defining-debugger-extensions\"><a class=\"header\" href=\"#defining-debugger-extensions\">Defining Debugger Extensions</a></h2>\n<p>A given extension may provide one or more DAP servers.\nEach DAP server must be registered in the <code>extension.toml</code>:</p>\n<pre><code class=\"language-toml\">[debug_adapters.my-debug-adapter]\n# Optional relative path to the JSON schema for the debug adapter configuration schema. Defaults to `debug_adapter_schemas/$DEBUG_ADAPTER_NAME_ID.json`.\n# Note that while this field is optional, a schema is mandatory.\nschema_path = \"relative/path/to/schema.json\"\n</code></pre>\n<p>Then, in the Rust code for your extension, implement the <code>get_dap_binary</code> method on your extension:</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn get_dap_binary(\n        &amp;mut self,\n        adapter_name: String,\n        config: DebugTaskDefinition,\n        user_provided_debug_adapter_path: Option&lt;String&gt;,\n        worktree: &amp;Worktree,\n    ) -&gt; Result&lt;DebugAdapterBinary, String&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This method should return the command to start up a debug adapter protocol server, along with any arguments or environment variables necessary for it to function.</p>\n<p>If you need to download the DAP server from an external source—like GitHub Releases or npm—you can also do that in this function. Make sure to check for updates only periodically, as this function is called whenever a user spawns a new debug session with your debug adapter.</p>\n<p>You must also implement <code>dap_request_kind</code>. This function is used to determine whether a given debug scenario will <em>launch</em> a new debuggee or <em>attach</em> to an existing one.\nWe also use it to determine that a given debug scenario requires running a <em>locator</em>.</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn dap_request_kind(\n        &amp;mut self,\n        _adapter_name: String,\n        _config: Value,\n    ) -&gt; Result&lt;StartDebuggingRequestArgumentsRequest, String&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>These two functions are sufficient to expose your debug adapter in <code>debug.json</code>-based user workflows, but you should strongly consider implementing <code>dap_config_to_scenario</code> as well.</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn dap_config_to_scenario(\n        &amp;mut self,\n        _adapter_name: DebugConfig,\n    ) -&gt; Result&lt;DebugScenario, String&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code>dap_config_to_scenario</code> is used when the user spawns a session via new process modal UI. At a high level, it takes a generic debug configuration (that isn't specific to any\ndebug adapter) and tries to turn it into a concrete debug scenario for your adapter.\nPut another way, it is supposed to answer the question: \"Given a program, a list of arguments, current working directory and environment variables, what would the configuration for spawning this debug adapter look like?\".</p>\n<h2 id=\"defining-debug-locators\"><a class=\"header\" href=\"#defining-debug-locators\">Defining Debug Locators</a></h2>\n<p>Zed offers an automatic way to create debug scenarios with <em>debug locators</em>.\nA locator locates the debug target and figures out how to spawn a debug session for it. Thanks to locators, we can automatically convert existing user tasks (e.g. <code>cargo run</code>) and convert them into debug scenarios (e.g. <code>cargo build</code> followed by spawning a debugger with <code>target/debug/my_program</code> as the program to debug).</p>\n<blockquote>\n<p>Your extension can define it's own debug locators even if it does not expose a debug adapter. We strongly recommend doing so when your extension already exposes language tasks, as it allows users to spawn a debug session without having to manually configure the debug adapter.</p>\n</blockquote>\n<p>Locators can (but don't have to) be agnostic to the debug adapter they are used with. They are simply responsible for locating the debug target and figuring out how to spawn a debug session for it. This allows for a more flexible and extensible debugging experience.</p>\n<p>Your extension can define one or more debug locators. Each debug locator must be registered in the <code>extension.toml</code>:</p>\n<pre><code class=\"language-toml\">[debug_locators.my-debug-locator]\n</code></pre>\n<p>Locators have two components.\nFirst, each locator is ran on each available task to figure out if any of the available locators can provide a debug scenario for a given task. This is done by calling <code>dap_locator_create_scenario</code>.</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn dap_locator_create_scenario(\n        &amp;mut self,\n        _locator_name: String,\n        _build_task: TaskTemplate,\n        _resolved_label: String,\n        _debug_adapter_name: String,\n    ) -&gt; Option&lt;DebugScenario&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This function should return <code>Some</code> debug scenario when that scenario defines a debugging counterpart to a given user task.\nNote that a <code>DebugScenario</code> can include a <a href=\"../debugger.html#build-tasks\">build task</a>. If there is one, we will execute <code>run_dap_locator</code> after a build task is finished successfully.</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn run_dap_locator(\n        &amp;mut self,\n        _locator_name: String,\n        _build_task: TaskTemplate,\n    ) -&gt; Result&lt;DebugRequest, String&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><code>run_dap_locator</code> is useful in case you cannot determine a build target deterministically. Some build systems may produce artifacts whose names are not known up-front.\nNote however that you do <em>not</em> need to go through a 2-phase resolution; if you can determine the full debug configuration with just <code>dap_locator_create_scenario</code>, you can omit <code>build</code> property on a returned <code>DebugScenario</code>. Please also note that your locator <strong>will be</strong> called with tasks it's unlikely to accept; thus you should take some effort to return <code>None</code> early before performing any expensive operations.</p>\n<h2 id=\"available-extensions\"><a class=\"header\" href=\"#available-extensions\">Available Extensions</a></h2>\n<p>Check out all the DAP servers that have already been exposed as extensions <a href=\"https://zed.dev/extensions?filter=debug-adapters\">on Zed's site</a>.</p>\n<p>We recommend taking a look at their repositories as a way to understand how they are generally created and structured.</p>\n<h2 id=\"testing\"><a class=\"header\" href=\"#testing\">Testing</a></h2>\n<p>To test your new Debug Adapter Protocol server extension, you can <a href=\"./developing-extensions.html#developing-an-extension-locally\">install it as a dev extension</a>.</p>\n\n</main>",
    "content_text": "Debugger Extensions\nDebug Adapter Protocol Servers can be exposed as extensions for use in the debugger.\nDefining Debugger Extensions\nA given extension may provide one or more DAP servers.\nEach DAP server must be registered in the extension.toml:\n[debug_adapters.my-debug-adapter]\n# Optional relative path to the JSON schema for the debug adapter configuration schema. Defaults to `debug_adapter_schemas/$DEBUG_ADAPTER_NAME_ID.json`.\n# Note that while this field is optional, a schema is mandatory.\nschema_path = \"relative/path/to/schema.json\"\n\nThen, in the Rust code for your extension, implement the get_dap_binary method on your extension:\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn get_dap_binary(\n        &mut self,\n        adapter_name: String,\n        config: DebugTaskDefinition,\n        user_provided_debug_adapter_path: Option<String>,\n        worktree: &Worktree,\n    ) -> Result<DebugAdapterBinary, String>;\n}\n}\nThis method should return the command to start up a debug adapter protocol server, along with any arguments or environment variables necessary for it to function.\nIf you need to download the DAP server from an external source—like GitHub Releases or npm—you can also do that in this function. Make sure to check for updates only periodically, as this function is called whenever a user spawns a new debug session with your debug adapter.\nYou must also implement dap_request_kind. This function is used to determine whether a given debug scenario will launch a new debuggee or attach to an existing one.\nWe also use it to determine that a given debug scenario requires running a locator.\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn dap_request_kind(\n        &mut self,\n        _adapter_name: String,\n        _config: Value,\n    ) -> Result<StartDebuggingRequestArgumentsRequest, String>;\n}\n}\nThese two functions are sufficient to expose your debug adapter in debug.json-based user workflows, but you should strongly consider implementing dap_config_to_scenario as well.\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn dap_config_to_scenario(\n        &mut self,\n        _adapter_name: DebugConfig,\n    ) -> Result<DebugScenario, String>;\n}\n}\ndap_config_to_scenario is used when the user spawns a session via new process modal UI. At a high level, it takes a generic debug configuration (that isn't specific to any\ndebug adapter) and tries to turn it into a concrete debug scenario for your adapter.\nPut another way, it is supposed to answer the question: \"Given a program, a list of arguments, current working directory and environment variables, what would the configuration for spawning this debug adapter look like?\".\nDefining Debug Locators\nZed offers an automatic way to create debug scenarios with debug locators.\nA locator locates the debug target and figures out how to spawn a debug session for it. Thanks to locators, we can automatically convert existing user tasks (e.g. cargo run) and convert them into debug scenarios (e.g. cargo build followed by spawning a debugger with target/debug/my_program as the program to debug).\n\nYour extension can define it's own debug locators even if it does not expose a debug adapter. We strongly recommend doing so when your extension already exposes language tasks, as it allows users to spawn a debug session without having to manually configure the debug adapter.\n\nLocators can (but don't have to) be agnostic to the debug adapter they are used with. They are simply responsible for locating the debug target and figuring out how to spawn a debug session for it. This allows for a more flexible and extensible debugging experience.\nYour extension can define one or more debug locators. Each debug locator must be registered in the extension.toml:\n[debug_locators.my-debug-locator]\n\nLocators have two components.\nFirst, each locator is ran on each available task to figure out if any of the available locators can provide a debug scenario for a given task. This is done by calling dap_locator_create_scenario.\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn dap_locator_create_scenario(\n        &mut self,\n        _locator_name: String,\n        _build_task: TaskTemplate,\n        _resolved_label: String,\n        _debug_adapter_name: String,\n    ) -> Option<DebugScenario>;\n}\n}\nThis function should return Some debug scenario when that scenario defines a debugging counterpart to a given user task.\nNote that a DebugScenario can include a build task. If there is one, we will execute run_dap_locator after a build task is finished successfully.\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn run_dap_locator(\n        &mut self,\n        _locator_name: String,\n        _build_task: TaskTemplate,\n    ) -> Result<DebugRequest, String>;\n}\n}\nrun_dap_locator is useful in case you cannot determine a build target deterministically. Some build systems may produce artifacts whose names are not known up-front.\nNote however that you do not need to go through a 2-phase resolution; if you can determine the full debug configuration with just dap_locator_create_scenario, you can omit build property on a returned DebugScenario. Please also note that your locator will be called with tasks it's unlikely to accept; thus you should take some effort to return None early before performing any expensive operations.\nAvailable Extensions\nCheck out all the DAP servers that have already been exposed as extensions on Zed's site.\nWe recommend taking a look at their repositories as a way to understand how they are generally created and structured.\nTesting\nTo test your new Debug Adapter Protocol server extension, you can install it as a dev extension.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:51"
  },
  "extensions/themes.html": {
    "url": "https://zed.dev/docs/extensions/themes.html",
    "title": "Theme Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"themes\"><a class=\"header\" href=\"#themes\">Themes</a></h1>\n<p>The <code>themes</code> directory in an extension should contain one or more theme files.</p>\n<p>Each theme file should adhere to the JSON schema specified at <a href=\"https://zed.dev/schema/themes/v0.2.0.json\"><code>https://zed.dev/schema/themes/v0.2.0.json</code></a>.</p>\n<p>See <a href=\"https://zed.dev/blog/user-themes-now-in-preview\">this blog post</a> for more details about creating themes.</p>\n<h2 id=\"theme-json-structure\"><a class=\"header\" href=\"#theme-json-structure\">Theme JSON Structure</a></h2>\n<p>The structure of a Zed theme is defined in the <a href=\"https://zed.dev/schema/themes/v0.2.0.json\">Zed Theme JSON Schema</a>.</p>\n<p>A Zed theme consists of a Theme Family object including:</p>\n<ul>\n<li><code>name</code>: The name for the theme family</li>\n<li><code>author</code>: The name of the author of the theme family</li>\n<li><code>themes</code>: An array of Themes belonging to the theme family</li>\n</ul>\n<p>The core components a Theme object include:</p>\n<ol>\n<li>\n<p>Theme Metadata:</p>\n<ul>\n<li><code>name</code>: The name of the theme</li>\n<li><code>appearance</code>: Either \"light\" or \"dark\"</li>\n</ul>\n</li>\n<li>\n<p>Style Properties under the <code>style</code>, such as:</p>\n<ul>\n<li><code>background</code>: The main background color</li>\n<li><code>foreground</code>: The main text color</li>\n<li><code>accent</code>: The accent color used for highlighting and emphasis</li>\n</ul>\n</li>\n<li>\n<p>Syntax Highlighting:</p>\n<ul>\n<li><code>syntax</code>: An object containing color definitions for various syntax elements (e.g., keywords, strings, comments)</li>\n</ul>\n</li>\n<li>\n<p>UI Elements:</p>\n<ul>\n<li>Colors for various UI components such as:\n<ul>\n<li><code>element.background</code>: Background color for UI elements</li>\n<li><code>border</code>: Border colors for different states (normal, focused, selected)</li>\n<li><code>text</code>: Text colors for different states (normal, muted, accent)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Editor-specific Colors:</p>\n<ul>\n<li>Colors for editor-related elements such as:\n<ul>\n<li><code>editor.background</code>: Editor background color</li>\n<li><code>editor.gutter</code>: Gutter colors</li>\n<li><code>editor.line_number</code>: Line number colors</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Terminal Colors:</p>\n<ul>\n<li>ANSI color definitions for the integrated terminal</li>\n</ul>\n</li>\n</ol>\n<p>We recommend looking at our <a href=\"https://github.com/zed-industries/zed/tree/main/assets/themes\">existing themes</a> to get a more comprehensive idea of what can be styled.</p>\n\n</main>",
    "content_text": "Themes\nThe themes directory in an extension should contain one or more theme files.\nEach theme file should adhere to the JSON schema specified at https://zed.dev/schema/themes/v0.2.0.json.\nSee this blog post for more details about creating themes.\nTheme JSON Structure\nThe structure of a Zed theme is defined in the Zed Theme JSON Schema.\nA Zed theme consists of a Theme Family object including:\n\nname: The name for the theme family\nauthor: The name of the author of the theme family\nthemes: An array of Themes belonging to the theme family\n\nThe core components a Theme object include:\n\n\nTheme Metadata:\n\nname: The name of the theme\nappearance: Either \"light\" or \"dark\"\n\n\n\nStyle Properties under the style, such as:\n\nbackground: The main background color\nforeground: The main text color\naccent: The accent color used for highlighting and emphasis\n\n\n\nSyntax Highlighting:\n\nsyntax: An object containing color definitions for various syntax elements (e.g., keywords, strings, comments)\n\n\n\nUI Elements:\n\nColors for various UI components such as:\n\nelement.background: Background color for UI elements\nborder: Border colors for different states (normal, focused, selected)\ntext: Text colors for different states (normal, muted, accent)\n\n\n\n\n\nEditor-specific Colors:\n\nColors for editor-related elements such as:\n\neditor.background: Editor background color\neditor.gutter: Gutter colors\neditor.line_number: Line number colors\n\n\n\n\n\nTerminal Colors:\n\nANSI color definitions for the integrated terminal\n\n\n\nWe recommend looking at our existing themes to get a more comprehensive idea of what can be styled.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:53"
  },
  "extensions/icon-themes.html": {
    "url": "https://zed.dev/docs/extensions/icon-themes.html",
    "title": "Icon Theme Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"icon-themes\"><a class=\"header\" href=\"#icon-themes\">Icon Themes</a></h1>\n<p>Extensions may provide icon themes in order to change the icons Zed uses for folders and files.</p>\n<h2 id=\"example-extension\"><a class=\"header\" href=\"#example-extension\">Example extension</a></h2>\n<p>The <a href=\"https://github.com/zed-extensions/material-icon-theme\">Material Icon Theme</a> serves as an example for the structure of an extension containing an icon theme.</p>\n<h2 id=\"directory-structure\"><a class=\"header\" href=\"#directory-structure\">Directory structure</a></h2>\n<p>There are two important directories for an icon theme extension:</p>\n<ul>\n<li><code>icon_themes</code>: This directory will contain one or more JSON files containing the icon theme definitions.</li>\n<li><code>icons</code>: This directory contains the icons assets that will be distributed with the extension. You can created subdirectories in this directory, if so desired.</li>\n</ul>\n<p>Each icon theme file should adhere to the JSON schema specified at <a href=\"https://zed.dev/schema/icon_themes/v0.2.0.json\"><code>https://zed.dev/schema/icon_themes/v0.2.0.json</code></a>.</p>\n<p>Here is an example of the structure of an icon theme:</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://zed.dev/schema/icon_themes/v0.2.0.json\",\n  \"name\": \"My Icon Theme\",\n  \"author\": \"Your Name\",\n  \"themes\": [\n    {\n      \"name\": \"My Icon Theme\",\n      \"appearance\": \"dark\",\n      \"directory_icons\": {\n        \"collapsed\": \"./icons/folder.svg\",\n        \"expanded\": \"./icons/folder-open.svg\"\n      },\n      \"chevron_icons\": {\n        \"collapsed\": \"./icons/chevron-right.svg\",\n        \"expanded\": \"./icons/chevron-down.svg\"\n      },\n      \"file_stems\": {\n        \"Makefile\": \"make\"\n      },\n      \"file_suffixes\": {\n        \"mp3\": \"audio\",\n        \"rs\": \"rust\"\n      },\n      \"file_icons\": {\n        \"audio\": { \"path\": \"./icons/audio.svg\" },\n        \"default\": { \"path\": \"./icons/file.svg\" },\n        \"make\": { \"path\": \"./icons/make.svg\" },\n        \"rust\": { \"path\": \"./icons/rust.svg\" }\n        // ...\n      }\n    }\n  ]\n}\n</code></pre>\n<p>Each icon path is resolved relative to the root of the extension directory.</p>\n<p>In this example, the extension would have a structure like so:</p>\n<pre><code>extension.toml\nicon_themes/\n  my-icon-theme.json\nicons/\n  audio.svg\n  chevron-down.svg\n  chevron-right.svg\n  file.svg\n  folder-open.svg\n  folder.svg\n  rust.svg\n</code></pre>\n\n</main>",
    "content_text": "Icon Themes\nExtensions may provide icon themes in order to change the icons Zed uses for folders and files.\nExample extension\nThe Material Icon Theme serves as an example for the structure of an extension containing an icon theme.\nDirectory structure\nThere are two important directories for an icon theme extension:\n\nicon_themes: This directory will contain one or more JSON files containing the icon theme definitions.\nicons: This directory contains the icons assets that will be distributed with the extension. You can created subdirectories in this directory, if so desired.\n\nEach icon theme file should adhere to the JSON schema specified at https://zed.dev/schema/icon_themes/v0.2.0.json.\nHere is an example of the structure of an icon theme:\n{\n  \"$schema\": \"https://zed.dev/schema/icon_themes/v0.2.0.json\",\n  \"name\": \"My Icon Theme\",\n  \"author\": \"Your Name\",\n  \"themes\": [\n    {\n      \"name\": \"My Icon Theme\",\n      \"appearance\": \"dark\",\n      \"directory_icons\": {\n        \"collapsed\": \"./icons/folder.svg\",\n        \"expanded\": \"./icons/folder-open.svg\"\n      },\n      \"chevron_icons\": {\n        \"collapsed\": \"./icons/chevron-right.svg\",\n        \"expanded\": \"./icons/chevron-down.svg\"\n      },\n      \"file_stems\": {\n        \"Makefile\": \"make\"\n      },\n      \"file_suffixes\": {\n        \"mp3\": \"audio\",\n        \"rs\": \"rust\"\n      },\n      \"file_icons\": {\n        \"audio\": { \"path\": \"./icons/audio.svg\" },\n        \"default\": { \"path\": \"./icons/file.svg\" },\n        \"make\": { \"path\": \"./icons/make.svg\" },\n        \"rust\": { \"path\": \"./icons/rust.svg\" }\n        // ...\n      }\n    }\n  ]\n}\n\nEach icon path is resolved relative to the root of the extension directory.\nIn this example, the extension would have a structure like so:\nextension.toml\nicon_themes/\n  my-icon-theme.json\nicons/\n  audio.svg\n  chevron-down.svg\n  chevron-right.svg\n  file.svg\n  folder-open.svg\n  folder.svg\n  rust.svg",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:55"
  },
  "extensions/slash-commands.html": {
    "url": "https://zed.dev/docs/extensions/slash-commands.html",
    "title": "Slash Command Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"slash-commands\"><a class=\"header\" href=\"#slash-commands\">Slash Commands</a></h1>\n<p>Extensions may provide slash commands for use in the Assistant.</p>\n<h2 id=\"example-extension\"><a class=\"header\" href=\"#example-extension\">Example extension</a></h2>\n<p>To see a working example of an extension that provides slash commands, check out the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/slash-commands-example\"><code>slash-commands-example</code> extension</a>.</p>\n<p>This extension can be <a href=\"./developing-extensions.html#developing-an-extension-locally\">installed as a dev extension</a> if you want to try it out for yourself.</p>\n<h2 id=\"defining-slash-commands\"><a class=\"header\" href=\"#defining-slash-commands\">Defining slash commands</a></h2>\n<p>A given extension may provide one or more slash commands. Each slash command must be registered in the <code>extension.toml</code>.</p>\n<p>For example, here is an extension that provides two slash commands: <code>/echo</code> and <code>/pick-one</code>:</p>\n<pre><code class=\"language-toml\">[slash_commands.echo]\ndescription = \"echoes the provided input\"\nrequires_argument = true\n\n[slash_commands.pick-one]\ndescription = \"pick one of three options\"\nrequires_argument = true\n</code></pre>\n<p>Each slash command may define the following properties:</p>\n<ul>\n<li><code>description</code>: A description of the slash command that will be shown when completing available commands.</li>\n<li><code>requires_argument</code>: Indicates whether a slash command requires at least one argument to run.</li>\n</ul>\n<h2 id=\"implementing-slash-command-behavior\"><a class=\"header\" href=\"#implementing-slash-command-behavior\">Implementing slash command behavior</a></h2>\n<p>To implement behavior for your slash commands, implement <code>run_slash_command</code> for your extension.</p>\n<p>This method accepts the slash command that will be run, the list of arguments passed to it, and an optional <code>Worktree</code>.</p>\n<p>This method returns <code>SlashCommandOutput</code>, which contains the textual output of the command in the <code>text</code> field. The output may also define <code>SlashCommandOutputSection</code>s that contain ranges into the output. These sections are then rendered as creases in the Assistant's context editor.</p>\n<p>Your extension should <code>match</code> on the command name (without the leading <code>/</code>) and then execute behavior accordingly:</p>\n<pre><code class=\"language-rs\">impl zed::Extension for MyExtension {\n    fn run_slash_command(\n        &amp;self,\n        command: SlashCommand,\n        args: Vec&lt;String&gt;,\n        _worktree: Option&lt;&amp;Worktree&gt;,\n    ) -&gt; Result&lt;SlashCommandOutput, String&gt; {\n        match command.name.as_str() {\n            \"echo\" =&gt; {\n                if args.is_empty() {\n                    return Err(\"nothing to echo\".to_string());\n                }\n\n                let text = args.join(\" \");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: \"Echo\".to_string(),\n                    }],\n                    text,\n                })\n            }\n            \"pick-one\" =&gt; {\n                let Some(selection) = args.first() else {\n                    return Err(\"no option selected\".to_string());\n                };\n\n                match selection.as_str() {\n                    \"option-1\" | \"option-2\" | \"option-3\" =&gt; {}\n                    invalid_option =&gt; {\n                        return Err(format!(\"{invalid_option} is not a valid option\"));\n                    }\n                }\n\n                let text = format!(\"You chose {selection}.\");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: format!(\"Pick One: {selection}\"),\n                    }],\n                    text,\n                })\n            }\n            command =&gt; Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}\n</code></pre>\n<h2 id=\"auto-completing-slash-command-arguments\"><a class=\"header\" href=\"#auto-completing-slash-command-arguments\">Auto-completing slash command arguments</a></h2>\n<p>For slash commands that have arguments, you may also choose to implement <code>complete_slash_command_argument</code> to provide completions for your slash commands.</p>\n<p>This method accepts the slash command that will be run and the list of arguments passed to it. It returns a list of <code>SlashCommandArgumentCompletion</code>s that will be shown in the completion menu.</p>\n<p>A <code>SlashCommandArgumentCompletion</code> consists of the following properties:</p>\n<ul>\n<li><code>label</code>: The label that will be shown in the completion menu.</li>\n<li><code>new_text</code>: The text that will be inserted when the completion is accepted.</li>\n<li><code>run_command</code>: Whether the slash command will be run when the completion is accepted.</li>\n</ul>\n<p>Once again, your extension should <code>match</code> on the command name (without the leading <code>/</code>) and return the desired argument completions:</p>\n<pre><code class=\"language-rs\">impl zed::Extension for MyExtension {\n    fn complete_slash_command_argument(\n        &amp;self,\n        command: SlashCommand,\n        _args: Vec&lt;String&gt;,\n    ) -&gt; Result&lt;Vec&lt;SlashCommandArgumentCompletion&gt;, String&gt; {\n        match command.name.as_str() {\n            \"echo\" =&gt; Ok(vec![]),\n            \"pick-one\" =&gt; Ok(vec![\n                SlashCommandArgumentCompletion {\n                    label: \"Option One\".to_string(),\n                    new_text: \"option-1\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Two\".to_string(),\n                    new_text: \"option-2\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Three\".to_string(),\n                    new_text: \"option-3\".to_string(),\n                    run_command: true,\n                },\n            ]),\n            command =&gt; Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}\n</code></pre>\n\n</main>",
    "content_text": "Slash Commands\nExtensions may provide slash commands for use in the Assistant.\nExample extension\nTo see a working example of an extension that provides slash commands, check out the slash-commands-example extension.\nThis extension can be installed as a dev extension if you want to try it out for yourself.\nDefining slash commands\nA given extension may provide one or more slash commands. Each slash command must be registered in the extension.toml.\nFor example, here is an extension that provides two slash commands: /echo and /pick-one:\n[slash_commands.echo]\ndescription = \"echoes the provided input\"\nrequires_argument = true\n\n[slash_commands.pick-one]\ndescription = \"pick one of three options\"\nrequires_argument = true\n\nEach slash command may define the following properties:\n\ndescription: A description of the slash command that will be shown when completing available commands.\nrequires_argument: Indicates whether a slash command requires at least one argument to run.\n\nImplementing slash command behavior\nTo implement behavior for your slash commands, implement run_slash_command for your extension.\nThis method accepts the slash command that will be run, the list of arguments passed to it, and an optional Worktree.\nThis method returns SlashCommandOutput, which contains the textual output of the command in the text field. The output may also define SlashCommandOutputSections that contain ranges into the output. These sections are then rendered as creases in the Assistant's context editor.\nYour extension should match on the command name (without the leading /) and then execute behavior accordingly:\nimpl zed::Extension for MyExtension {\n    fn run_slash_command(\n        &self,\n        command: SlashCommand,\n        args: Vec<String>,\n        _worktree: Option<&Worktree>,\n    ) -> Result<SlashCommandOutput, String> {\n        match command.name.as_str() {\n            \"echo\" => {\n                if args.is_empty() {\n                    return Err(\"nothing to echo\".to_string());\n                }\n\n                let text = args.join(\" \");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: \"Echo\".to_string(),\n                    }],\n                    text,\n                })\n            }\n            \"pick-one\" => {\n                let Some(selection) = args.first() else {\n                    return Err(\"no option selected\".to_string());\n                };\n\n                match selection.as_str() {\n                    \"option-1\" | \"option-2\" | \"option-3\" => {}\n                    invalid_option => {\n                        return Err(format!(\"{invalid_option} is not a valid option\"));\n                    }\n                }\n\n                let text = format!(\"You chose {selection}.\");\n\n                Ok(SlashCommandOutput {\n                    sections: vec![SlashCommandOutputSection {\n                        range: (0..text.len()).into(),\n                        label: format!(\"Pick One: {selection}\"),\n                    }],\n                    text,\n                })\n            }\n            command => Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}\n\nAuto-completing slash command arguments\nFor slash commands that have arguments, you may also choose to implement complete_slash_command_argument to provide completions for your slash commands.\nThis method accepts the slash command that will be run and the list of arguments passed to it. It returns a list of SlashCommandArgumentCompletions that will be shown in the completion menu.\nA SlashCommandArgumentCompletion consists of the following properties:\n\nlabel: The label that will be shown in the completion menu.\nnew_text: The text that will be inserted when the completion is accepted.\nrun_command: Whether the slash command will be run when the completion is accepted.\n\nOnce again, your extension should match on the command name (without the leading /) and return the desired argument completions:\nimpl zed::Extension for MyExtension {\n    fn complete_slash_command_argument(\n        &self,\n        command: SlashCommand,\n        _args: Vec<String>,\n    ) -> Result<Vec<SlashCommandArgumentCompletion>, String> {\n        match command.name.as_str() {\n            \"echo\" => Ok(vec![]),\n            \"pick-one\" => Ok(vec![\n                SlashCommandArgumentCompletion {\n                    label: \"Option One\".to_string(),\n                    new_text: \"option-1\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Two\".to_string(),\n                    new_text: \"option-2\".to_string(),\n                    run_command: true,\n                },\n                SlashCommandArgumentCompletion {\n                    label: \"Option Three\".to_string(),\n                    new_text: \"option-3\".to_string(),\n                    run_command: true,\n                },\n            ]),\n            command => Err(format!(\"unknown slash command: \\\"{command}\\\"\")),\n        }\n    }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:57"
  },
  "extensions/mcp-extensions.html": {
    "url": "https://zed.dev/docs/extensions/mcp-extensions.html",
    "title": "MCP Server Extensions | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"mcp-server-extensions\"><a class=\"header\" href=\"#mcp-server-extensions\">MCP Server Extensions</a></h1>\n<p><a href=\"../ai/mcp.html\">Model Context Protocol servers</a> can be exposed as extensions for use in the Agent Panel.</p>\n<h2 id=\"defining-mcp-extensions\"><a class=\"header\" href=\"#defining-mcp-extensions\">Defining MCP Extensions</a></h2>\n<p>A given extension may provide one or more MCP servers.\nEach MCP server must be registered in the <code>extension.toml</code>:</p>\n<pre><code class=\"language-toml\">[context_servers.my-context-server]\n</code></pre>\n<p>Then, in the Rust code for your extension, implement the <code>context_server_command</code> method on your extension:</p>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>impl zed::Extension for MyExtension {\n    fn context_server_command(\n        &amp;mut self,\n        context_server_id: &amp;ContextServerId,\n        project: &amp;zed::Project,\n    ) -&gt; Result&lt;zed::Command&gt; {\n        Ok(zed::Command {\n            command: get_path_to_context_server_executable()?,\n            args: get_args_for_context_server()?,\n            env: get_env_for_context_server()?,\n        })\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This method should return the command to start up an MCP server, along with any arguments or environment variables necessary for it to function.</p>\n<p>If you need to download the MCP server from an external source—like GitHub Releases or npm—you can also do that in this function.</p>\n<h2 id=\"available-extensions\"><a class=\"header\" href=\"#available-extensions\">Available Extensions</a></h2>\n<p>Check out all the MCP servers that have already been exposed as extensions <a href=\"https://zed.dev/extensions?filter=context-servers\">on Zed's site</a>.</p>\n<p>We recommend taking a look at their repositories as a way to understand how they are generally created and structured.</p>\n<h2 id=\"testing\"><a class=\"header\" href=\"#testing\">Testing</a></h2>\n<p>To test your new MCP server extension, you can <a href=\"./developing-extensions.html#developing-an-extension-locally\">install it as a dev extension</a>.</p>\n\n</main>",
    "content_text": "MCP Server Extensions\nModel Context Protocol servers can be exposed as extensions for use in the Agent Panel.\nDefining MCP Extensions\nA given extension may provide one or more MCP servers.\nEach MCP server must be registered in the extension.toml:\n[context_servers.my-context-server]\n\nThen, in the Rust code for your extension, implement the context_server_command method on your extension:\n#![allow(unused)]\nfn main() {\nimpl zed::Extension for MyExtension {\n    fn context_server_command(\n        &mut self,\n        context_server_id: &ContextServerId,\n        project: &zed::Project,\n    ) -> Result<zed::Command> {\n        Ok(zed::Command {\n            command: get_path_to_context_server_executable()?,\n            args: get_args_for_context_server()?,\n            env: get_env_for_context_server()?,\n        })\n    }\n}\n}\nThis method should return the command to start up an MCP server, along with any arguments or environment variables necessary for it to function.\nIf you need to download the MCP server from an external source—like GitHub Releases or npm—you can also do that in this function.\nAvailable Extensions\nCheck out all the MCP servers that have already been exposed as extensions on Zed's site.\nWe recommend taking a look at their repositories as a way to understand how they are generally created and structured.\nTesting\nTo test your new MCP server extension, you can install it as a dev extension.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:12:59"
  },
  "languages.html": {
    "url": "https://zed.dev/docs/languages.html",
    "title": "All Languages | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"language-support-in-zed\"><a class=\"header\" href=\"#language-support-in-zed\">Language Support in Zed</a></h1>\n<p>Zed supports hundreds of programming languages and text formats.\nSome work out-of-the box and others rely on 3rd party extensions.</p>\n<blockquote>\n<p>The ones included out-of-the-box, natively built into Zed, are marked with *.</p>\n</blockquote>\n<h2 id=\"languages-with-documentation\"><a class=\"header\" href=\"#languages-with-documentation\">Languages with Documentation</a></h2>\n<ul>\n<li><a href=\"./languages/ansible.html\">Ansible</a></li>\n<li><a href=\"./languages/asciidoc.html\">AsciiDoc</a></li>\n<li><a href=\"./languages/astro.html\">Astro</a></li>\n<li><a href=\"./languages/bash.html\">Bash</a></li>\n<li><a href=\"./languages/biome.html\">Biome</a></li>\n<li><a href=\"./languages/c.html\">C</a> *</li>\n<li><a href=\"./languages/cpp.html\">C++</a> *</li>\n<li><a href=\"./languages/csharp.html\">C#</a></li>\n<li><a href=\"./languages/clojure.html\">Clojure</a></li>\n<li><a href=\"./languages/css.html\">CSS</a> *</li>\n<li><a href=\"./languages/dart.html\">Dart</a></li>\n<li><a href=\"./languages/deno.html\">Deno</a></li>\n<li><a href=\"./languages/diff.html\">Diff</a> *</li>\n<li><a href=\"./languages/docker.html\">Docker</a></li>\n<li><a href=\"./languages/elixir.html\">Elixir</a></li>\n<li><a href=\"./languages/elm.html\">Elm</a></li>\n<li><a href=\"./languages/emmet.html\">Emmet</a></li>\n<li><a href=\"./languages/erlang.html\">Erlang</a></li>\n<li><a href=\"./languages/fish.html\">Fish</a></li>\n<li><a href=\"./languages/gdscript.html\">GDScript</a></li>\n<li><a href=\"./languages/gleam.html\">Gleam</a></li>\n<li><a href=\"./languages/glsl.html\">GLSL</a></li>\n<li><a href=\"./languages/go.html\">Go</a> *</li>\n<li><a href=\"./languages/groovy.html\">Groovy</a></li>\n<li><a href=\"./languages/haskell.html\">Haskell</a></li>\n<li><a href=\"./languages/helm.html\">Helm</a></li>\n<li><a href=\"./languages/html.html\">HTML</a></li>\n<li><a href=\"./languages/java.html\">Java</a></li>\n<li><a href=\"./languages/javascript.html\">JavaScript</a> *</li>\n<li><a href=\"./languages/julia.html\">Julia</a></li>\n<li><a href=\"./languages/json.html\">JSON</a> *</li>\n<li><a href=\"./languages/jsonnet.html\">Jsonnet</a></li>\n<li><a href=\"./languages/kotlin.html\">Kotlin</a></li>\n<li><a href=\"./languages/lua.html\">Lua</a></li>\n<li><a href=\"./languages/luau.html\">Luau</a></li>\n<li><a href=\"./languages/makefile.html\">Makefile</a></li>\n<li><a href=\"./languages/markdown.html\">Markdown</a> *</li>\n<li><a href=\"./languages/nim.html\">Nim</a></li>\n<li><a href=\"./languages/ocaml.html\">OCaml</a></li>\n<li><a href=\"./languages/php.html\">PHP</a></li>\n<li><a href=\"./languages/prisma.html\">Prisma</a></li>\n<li><a href=\"./languages/proto.html\">Proto</a></li>\n<li><a href=\"./languages/purescript.html\">PureScript</a></li>\n<li><a href=\"./languages/python.html\">Python</a> *</li>\n<li><a href=\"./languages/r.html\">R</a></li>\n<li><a href=\"./languages/rego.html\">Rego</a></li>\n<li><a href=\"./languages/rst.html\">ReStructuredText</a></li>\n<li><a href=\"./languages/racket.html\">Racket</a></li>\n<li><a href=\"./languages/roc.html\">Roc</a></li>\n<li><a href=\"./languages/ruby.html\">Ruby</a></li>\n<li><a href=\"./languages/rust.html\">Rust</a> * (Zed's written in Rust)</li>\n<li><a href=\"./languages/scala.html\">Scala</a></li>\n<li><a href=\"./languages/scheme.html\">Scheme</a></li>\n<li><a href=\"./languages/sh.html\">Shell Script</a></li>\n<li><a href=\"./languages/svelte.html\">Svelte</a></li>\n<li><a href=\"./languages/swift.html\">Swift</a></li>\n<li><a href=\"./languages/tailwindcss.html\">Tailwind CSS</a> *</li>\n<li><a href=\"./languages/terraform.html\">Terraform</a></li>\n<li><a href=\"./languages/toml.html\">TOML</a></li>\n<li><a href=\"./languages/typescript.html\">TypeScript</a> *</li>\n<li><a href=\"./languages/uiua.html\">Uiua</a></li>\n<li><a href=\"./languages/vue.html\">Vue</a></li>\n<li><a href=\"./languages/xml.html\">XML</a></li>\n<li><a href=\"./languages/yaml.html\">YAML</a> *</li>\n<li><a href=\"./languages/yarn.html\">Yara</a></li>\n<li><a href=\"./languages/yarn.html\">Yarn</a></li>\n<li><a href=\"./languages/zig.html\">Zig</a></li>\n</ul>\n<h2 id=\"additional-community-language-extensions\"><a class=\"header\" href=\"#additional-community-language-extensions\">Additional Community Language Extensions</a></h2>\n<ul>\n<li><a href=\"https://github.com/wisn/zed-ada-language\">Ada</a></li>\n<li><a href=\"https://github.com/aiken-lang/zed-aiken\">Aiken</a></li>\n<li><a href=\"https://github.com/amber-lang/zed-amber-extension\">Amber</a></li>\n<li><a href=\"https://github.com/DevBlocky/zed-asm\">Assembly</a></li>\n<li><a href=\"https://github.com/dangh/zed-awk\">AWK</a></li>\n<li><a href=\"https://github.com/zed-extensions/beancount\">Beancount</a></li>\n<li><a href=\"https://github.com/mrpedrobraga/zed-bend\">Bend</a></li>\n<li><a href=\"https://github.com/bajrangCoder/zed-laravel-blade\">Blade</a></li>\n<li><a href=\"https://github.com/tfuxu/zed-blueprint\">Blueprint</a></li>\n<li><a href=\"https://github.com/DavidZwitser/zed-bqn\">BQN</a></li>\n<li><a href=\"https://github.com/JosephTLyons/zed-brainfuck\">Brainfuck</a></li>\n<li><a href=\"https://github.com/janezpodhostnik/cadence.zed\">Cadence</a></li>\n<li><a href=\"https://github.com/trbutler4/zed-cairo\">Cairo</a></li>\n<li><a href=\"https://github.com/cmackenzie1/zed-capnp\">Cap'n Proto</a></li>\n<li><a href=\"https://github.com/chrnorm/zed-cedar\">Cedar</a></li>\n<li><a href=\"https://github.com/olehermanse/zed-cfengine\">CFEngine policy language</a></li>\n<li><a href=\"https://github.com/huacnlee/zed-csv\">CSV</a></li>\n<li><a href=\"https://github.com/thlcodes/zed-extension-cucumber\">Cucumber/Gherkin</a></li>\n<li><a href=\"https://github.com/jkasky/zed-cue\">CUE</a></li>\n<li><a href=\"https://github.com/fwcd/zed-curry\">Curry</a></li>\n<li><a href=\"https://github.com/staysail/zed-d\">D</a></li>\n<li><a href=\"https://github.com/shuklaayush/zed-dbml\">Database Markup Language (DBML)</a></li>\n<li><a href=\"https://github.com/glehmann/earthfile.zed\">Earthfile</a></li>\n<li><a href=\"https://github.com/dangh/zed-ejs\">EJS template</a></li>\n<li><a href=\"https://github.com/JosephTLyons/zed-elisp\">Elisp</a></li>\n<li><a href=\"https://github.com/jylamont/zed-ember\">Ember</a></li>\n<li><a href=\"https://github.com/zarifpour/zed-env\">Env</a></li>\n<li><a href=\"https://github.com/exograph/zed-extension\">Exograph</a></li>\n<li><a href=\"https://github.com/Xavier-Maruff/zed-fortran\">Fortran</a></li>\n<li><a href=\"https://github.com/nathanjcollins/zed-fsharp\">F#</a></li>\n<li><a href=\"https://github.com/clseibold/gemini-zed\">Gemini gemtext</a></li>\n<li><a href=\"https://github.com/d1y/git_firefly\">Git Firefly</a></li>\n<li><a href=\"https://github.com/11bit/zed-extension-graphql\">GraphQL</a></li>\n<li><a href=\"https://github.com/juice49/zed-groq\">Groq</a></li>\n<li><a href=\"https://github.com/bajrangCoder/zed-ini\">INI</a></li>\n<li><a href=\"https://github.com/zed-extensions/java\">Java</a></li>\n<li><a href=\"https://github.com/jackTabsCode/zed-just\">Justfiles</a></li>\n<li><a href=\"https://github.com/rzukic/zed-latex\">LaTeX</a></li>\n<li><a href=\"https://github.com/mrkstwrt/zed-ledger\">Ledger</a></li>\n<li><a href=\"https://github.com/jimliang/zed-less\">Less</a></li>\n<li><a href=\"https://github.com/nwhetsell/lilypond-zed-extension\">LilyPond</a></li>\n<li><a href=\"https://github.com/TheBeyondGroup/zed-shopify-liquid\">Liquid</a></li>\n<li><a href=\"https://github.com/evrensen467/zed-log\">Log</a></li>\n<li><a href=\"https://github.com/arian81/zed-lox\">Lox</a></li>\n<li><a href=\"https://github.com/Feel-ix-343/markdown-oxide-zed\">Markdown Oxide</a></li>\n<li><a href=\"https://github.com/vitallium/zed-marksman\">Marksman</a></li>\n<li><a href=\"https://github.com/rzukic/zed-matlab\">Matlab</a></li>\n<li><a href=\"https://github.com/hqnna/zed-meson\">Meson</a></li>\n<li><a href=\"https://github.com/navi-language/zed-navi\">Navi</a></li>\n<li><a href=\"https://github.com/k0tran/zed_neocmake\">NeoCMake</a></li>\n<li><a href=\"https://github.com/d1y/nginx-zed\">Nginx</a></li>\n<li><a href=\"https://github.com/foxoman/zed-nim\">Nim</a></li>\n<li><a href=\"https://github.com/zed-extensions/nix\">Nix</a></li>\n<li><a href=\"https://github.com/shuklaayush/zed-noir\">Noir</a></li>\n<li><a href=\"https://github.com/zed-extensions/nu\">Nu</a></li>\n<li><a href=\"https://github.com/rxptr/zed-odin\">Odin</a></li>\n<li><a href=\"https://github.com/kadena-community/pact-zed\">Pact</a></li>\n<li><a href=\"https://github.com/pest-parser/zed-pest\">Pest</a></li>\n<li><a href=\"https://github.com/Squareheron942/zed-pica200\">PICA200 assembly</a></li>\n<li><a href=\"https://github.com/Moshyfawn/pkl-zed\">Pkl</a></li>\n<li><a href=\"https://github.com/notpeter/playdate-zed-extension\">PlaydateSDK</a></li>\n<li><a href=\"https://github.com/lkroll/zed-qml\">QML</a></li>\n<li><a href=\"https://github.com/weartist/zed-rainbow-csv\">Rainbow CSV</a></li>\n<li><a href=\"https://github.com/StyraInc/zed-rego\">Rego</a></li>\n<li><a href=\"https://github.com/humaans/rescript-zed\">Rescript</a></li>\n<li><a href=\"https://github.com/h2000/zed-roc\">Roclang</a></li>\n<li><a href=\"https://github.com/onbjerg/zed-ron\">Ron</a></li>\n<li><a href=\"https://github.com/scalameta/metals-zed\">Metals</a></li>\n<li><a href=\"https://github.com/bajrangCoder/zed-scss\">SCSS</a></li>\n<li><a href=\"https://github.com/calmyournerves/zed-slim\">Slim</a></li>\n<li><a href=\"https://gitlab.com/flukejones/zed-slint\">Slint</a></li>\n<li><a href=\"https://github.com/joshrutkowski/zed-smithy\">Smithy</a></li>\n<li><a href=\"https://github.com/zarifpour/zed-solidity\">Solidity</a></li>\n<li><a href=\"https://github.com/evrensen467/zed-sql\">SQL</a></li>\n<li><a href=\"https://github.com/sigmaSd/zed-strace\">Strace</a></li>\n<li><a href=\"https://github.com/zed-extensions/swift\">Swift</a></li>\n<li><a href=\"https://github.com/makifdb/zed-templ\">Templ</a></li>\n<li><a href=\"https://github.com/dangh/zed-tmux\">Tmux</a></li>\n<li><a href=\"https://github.com/YussufSassi/zed-twig\">Twig</a></li>\n<li><a href=\"https://github.com/WeetHet/typst.zed\">Typst</a></li>\n<li><a href=\"https://github.com/zetashift/unison-zed\">Unison</a></li>\n<li><a href=\"https://github.com/bajrangCoder/zed-unocss\">UnoCSS</a></li>\n<li><a href=\"https://github.com/lv37/zed-v\">Vlang</a></li>\n<li><a href=\"https://github.com/FyraLabs/zed-vala\">Vala</a></li>\n<li><a href=\"https://github.com/koozz/zed-vale\">Vale</a></li>\n<li><a href=\"https://github.com/someone13574/zed-verilog-extension\">Verilog</a></li>\n<li><a href=\"https://github.com/eth0net/zed-vhs\">VHS</a></li>\n<li><a href=\"https://github.com/luan/zed-wgsl\">Wgsl</a></li>\n<li><a href=\"https://github.com/valentinegb/zed-wit\">WIT</a></li>\n</ul>\n\n</main>",
    "content_text": "Language Support in Zed\nZed supports hundreds of programming languages and text formats.\nSome work out-of-the box and others rely on 3rd party extensions.\n\nThe ones included out-of-the-box, natively built into Zed, are marked with *.\n\nLanguages with Documentation\n\nAnsible\nAsciiDoc\nAstro\nBash\nBiome\nC *\nC++ *\nC#\nClojure\nCSS *\nDart\nDeno\nDiff *\nDocker\nElixir\nElm\nEmmet\nErlang\nFish\nGDScript\nGleam\nGLSL\nGo *\nGroovy\nHaskell\nHelm\nHTML\nJava\nJavaScript *\nJulia\nJSON *\nJsonnet\nKotlin\nLua\nLuau\nMakefile\nMarkdown *\nNim\nOCaml\nPHP\nPrisma\nProto\nPureScript\nPython *\nR\nRego\nReStructuredText\nRacket\nRoc\nRuby\nRust * (Zed's written in Rust)\nScala\nScheme\nShell Script\nSvelte\nSwift\nTailwind CSS *\nTerraform\nTOML\nTypeScript *\nUiua\nVue\nXML\nYAML *\nYara\nYarn\nZig\n\nAdditional Community Language Extensions\n\nAda\nAiken\nAmber\nAssembly\nAWK\nBeancount\nBend\nBlade\nBlueprint\nBQN\nBrainfuck\nCadence\nCairo\nCap'n Proto\nCedar\nCFEngine policy language\nCSV\nCucumber/Gherkin\nCUE\nCurry\nD\nDatabase Markup Language (DBML)\nEarthfile\nEJS template\nElisp\nEmber\nEnv\nExograph\nFortran\nF#\nGemini gemtext\nGit Firefly\nGraphQL\nGroq\nINI\nJava\nJustfiles\nLaTeX\nLedger\nLess\nLilyPond\nLiquid\nLog\nLox\nMarkdown Oxide\nMarksman\nMatlab\nMeson\nNavi\nNeoCMake\nNginx\nNim\nNix\nNoir\nNu\nOdin\nPact\nPest\nPICA200 assembly\nPkl\nPlaydateSDK\nQML\nRainbow CSV\nRego\nRescript\nRoclang\nRon\nMetals\nSCSS\nSlim\nSlint\nSmithy\nSolidity\nSQL\nStrace\nSwift\nTempl\nTmux\nTwig\nTypst\nUnison\nUnoCSS\nVlang\nVala\nVale\nVerilog\nVHS\nWgsl\nWIT",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:02"
  },
  "languages/ansible.html": {
    "url": "https://zed.dev/docs/languages/ansible.html",
    "title": "Ansible | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"ansible\"><a class=\"header\" href=\"#ansible\">Ansible</a></h1>\n<p>Support for Ansible in Zed is provided via a community-maintained <a href=\"https://github.com/kartikvashistha/zed-ansible\">Ansible extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/zed-industries/tree-sitter-yaml\">zed-industries/tree-sitter-yaml</a></li>\n<li>Language Server: <a href=\"https://github.com/ansible/vscode-ansible/tree/main/packages/ansible-language-server\">ansible/vscode-ansible</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<h3 id=\"file-detection\"><a class=\"header\" href=\"#file-detection\">File detection</a></h3>\n<p>To avoid mishandling non-Ansible YAML files, the Ansible Language is not associated with any file extensions by default. To change this behavior you can add a <code>\"file_types\"</code> section to Zed settings inside your project (<code>.zed/settings.json</code>) or your Zed user settings (<code>~/.config/zed/settings.json</code>) to match your folder/naming conventions. For example:</p>\n<pre><code class=\"language-json\">\"file_types\": {\n    \"Ansible\": [\n      \"**.ansible.yml\",\n      \"**.ansible.yaml\",\n      \"**/defaults/*.yml\",\n      \"**/defaults/*.yaml\",\n      \"**/meta/*.yml\",\n      \"**/meta/*.yaml\",\n      \"**/tasks/*.yml\",\n      \"**/tasks/*.yaml\",\n      \"**/handlers/*.yml\",\n      \"**/handlers/*.yaml\",\n      \"**/group_vars/*.yml\",\n      \"**/group_vars/*.yaml\",\n      \"**/host_vars/*.yml\",\n      \"**/host_vars/*.yaml\",\n      \"**/playbooks/*.yml\",\n      \"**/playbooks/*.yaml\",\n      \"**playbook*.yml\",\n      \"**playbook*.yaml\"\n    ]\n  }\n</code></pre>\n<p>Feel free to modify this list as per your needs.</p>\n<h4 id=\"inventory\"><a class=\"header\" href=\"#inventory\">Inventory</a></h4>\n<p>If your inventory file is in the YAML format, you can either:</p>\n<ul>\n<li>Append the <code>ansible-lint</code> inventory json schema to it via the following comment at the top of your inventory file:</li>\n</ul>\n<pre><code class=\"language-yml\"># yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/inventory.json\n</code></pre>\n<ul>\n<li>Or configure the yaml language server settings to set this schema for all your inventory files, that match your inventory pattern, under your Zed settings (<a href=\"https://zed.dev/docs/languages/yaml\">ref</a>):</li>\n</ul>\n<pre><code class=\"language-json\">\"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"schemas\": {\n            \"https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/inventory.json\": [\n              \"./inventory/*.yaml\",\n              \"hosts.yml\",\n            ]\n          }\n        }\n      }\n    }\n},\n</code></pre>\n<h3 id=\"lsp-configuration\"><a class=\"header\" href=\"#lsp-configuration\">LSP Configuration</a></h3>\n<p>By default, the following default config is passed to the Ansible language server. It conveniently mirrors the defaults set by <a href=\"https://github.com/neovim/nvim-lspconfig/blob/03bc581e05e81d33808b42b2d7e76d70adb3b595/lua/lspconfig/configs/ansiblels.lua\">nvim-lspconfig</a> for the Ansible language server:</p>\n<pre><code class=\"language-json\">{\n  \"ansible\": {\n    \"ansible\": {\n      \"path\": \"ansible\"\n    },\n    \"executionEnvironment\": {\n      \"enabled\": false\n    },\n    \"python\": {\n      \"interpreterPath\": \"python3\"\n    },\n    \"validation\": {\n      \"enabled\": true,\n      \"lint\": {\n        \"enabled\": true,\n        \"path\": \"ansible-lint\"\n      }\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p>[!NOTE]\nIn order for linting to work, ensure that <code>ansible-lint</code> is installed and discoverable on your PATH</p>\n</blockquote>\n<p>When desired, any of the above default settings can be overridden under the <code>\"lsp\"</code> section of your Zed settings file. For example:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  // Note, the Zed Ansible extension prefixes all settings with `ansible`\n  // so instead of using `ansible.ansible.path` use `ansible.path`.\n  \"ansible-language-server\": {\n    \"settings\": {\n      \"ansible\": {\n        \"path\": \"ansible\"\n      },\n      \"executionEnvironment\": {\n        \"enabled\": false\n      },\n      \"python\": {\n        \"interpreterPath\": \"python3\"\n      },\n      \"validation\": {\n        \"enabled\": false, // disable validation\n        \"lint\": {\n          \"enabled\": false, // disable ansible-lint\n          \"path\": \"ansible-lint\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>A full list of options/settings, that can be passed to the server, can be found at the project's page <a href=\"https://github.com/ansible/vscode-ansible/blob/5a89836d66d470fb9d20e7ea8aa2af96f12f61fb/docs/als/settings.md\">here</a>.\nFeel free to modify option values as needed.</p>\n\n</main>",
    "content_text": "Ansible\nSupport for Ansible in Zed is provided via a community-maintained Ansible extension.\n\nTree-sitter: zed-industries/tree-sitter-yaml\nLanguage Server: ansible/vscode-ansible\n\nSetup\nFile detection\nTo avoid mishandling non-Ansible YAML files, the Ansible Language is not associated with any file extensions by default. To change this behavior you can add a \"file_types\" section to Zed settings inside your project (.zed/settings.json) or your Zed user settings (~/.config/zed/settings.json) to match your folder/naming conventions. For example:\n\"file_types\": {\n    \"Ansible\": [\n      \"**.ansible.yml\",\n      \"**.ansible.yaml\",\n      \"**/defaults/*.yml\",\n      \"**/defaults/*.yaml\",\n      \"**/meta/*.yml\",\n      \"**/meta/*.yaml\",\n      \"**/tasks/*.yml\",\n      \"**/tasks/*.yaml\",\n      \"**/handlers/*.yml\",\n      \"**/handlers/*.yaml\",\n      \"**/group_vars/*.yml\",\n      \"**/group_vars/*.yaml\",\n      \"**/host_vars/*.yml\",\n      \"**/host_vars/*.yaml\",\n      \"**/playbooks/*.yml\",\n      \"**/playbooks/*.yaml\",\n      \"**playbook*.yml\",\n      \"**playbook*.yaml\"\n    ]\n  }\n\nFeel free to modify this list as per your needs.\nInventory\nIf your inventory file is in the YAML format, you can either:\n\nAppend the ansible-lint inventory json schema to it via the following comment at the top of your inventory file:\n\n# yaml-language-server: $schema=https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/inventory.json\n\n\nOr configure the yaml language server settings to set this schema for all your inventory files, that match your inventory pattern, under your Zed settings (ref):\n\n\"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"schemas\": {\n            \"https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/inventory.json\": [\n              \"./inventory/*.yaml\",\n              \"hosts.yml\",\n            ]\n          }\n        }\n      }\n    }\n},\n\nLSP Configuration\nBy default, the following default config is passed to the Ansible language server. It conveniently mirrors the defaults set by nvim-lspconfig for the Ansible language server:\n{\n  \"ansible\": {\n    \"ansible\": {\n      \"path\": \"ansible\"\n    },\n    \"executionEnvironment\": {\n      \"enabled\": false\n    },\n    \"python\": {\n      \"interpreterPath\": \"python3\"\n    },\n    \"validation\": {\n      \"enabled\": true,\n      \"lint\": {\n        \"enabled\": true,\n        \"path\": \"ansible-lint\"\n      }\n    }\n  }\n}\n\n\n[!NOTE]\nIn order for linting to work, ensure that ansible-lint is installed and discoverable on your PATH\n\nWhen desired, any of the above default settings can be overridden under the \"lsp\" section of your Zed settings file. For example:\n\"lsp\": {\n  // Note, the Zed Ansible extension prefixes all settings with `ansible`\n  // so instead of using `ansible.ansible.path` use `ansible.path`.\n  \"ansible-language-server\": {\n    \"settings\": {\n      \"ansible\": {\n        \"path\": \"ansible\"\n      },\n      \"executionEnvironment\": {\n        \"enabled\": false\n      },\n      \"python\": {\n        \"interpreterPath\": \"python3\"\n      },\n      \"validation\": {\n        \"enabled\": false, // disable validation\n        \"lint\": {\n          \"enabled\": false, // disable ansible-lint\n          \"path\": \"ansible-lint\"\n        }\n      }\n    }\n  }\n}\n\nA full list of options/settings, that can be passed to the server, can be found at the project's page here.\nFeel free to modify option values as needed.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:04"
  },
  "languages/asciidoc.html": {
    "url": "https://zed.dev/docs/languages/asciidoc.html",
    "title": "AsciiDoc | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"asciidoc\"><a class=\"header\" href=\"#asciidoc\">AsciiDoc</a></h1>\n<p>AsciiDoc language support in Zed is provided by the community-maintained <a href=\"https://github.com/andreicek/zed-asciidoc\">AsciiDoc extension</a>.\nReport issues to: <a href=\"https://github.com/andreicek/zed-asciidoc/issues\">https://github.com/andreicek/zed-asciidoc/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/cathaysia/tree-sitter-asciidoc\">cathaysia/tree-sitter-asciidoc</a></li>\n</ul>\n\n</main>",
    "content_text": "AsciiDoc\nAsciiDoc language support in Zed is provided by the community-maintained AsciiDoc extension.\nReport issues to: https://github.com/andreicek/zed-asciidoc/issues\n\nTree-sitter: cathaysia/tree-sitter-asciidoc",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:06"
  },
  "languages/astro.html": {
    "url": "https://zed.dev/docs/languages/astro.html",
    "title": "Astro | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"astro\"><a class=\"header\" href=\"#astro\">Astro</a></h1>\n<p>Astro support is available through the <a href=\"https://github.com/zed-extensions/astro\">Astro extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/virchau13/tree-sitter-astro\">virchau13/tree-sitter-astro</a></li>\n<li>Language Server: <a href=\"https://github.com/withastro/language-tools\">withastro/language-tools</a></li>\n</ul>\n<!--\nTBD: Documentation Astro usage / configuration\n-->\n\n</main>",
    "content_text": "Astro\nAstro support is available through the Astro extension.\n\nTree-sitter: virchau13/tree-sitter-astro\nLanguage Server: withastro/language-tools",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:08"
  },
  "languages/bash.html": {
    "url": "https://zed.dev/docs/languages/bash.html",
    "title": "Bash | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"bash\"><a class=\"header\" href=\"#bash\">Bash</a></h1>\n<p>Bash language support in Zed is provided by the community-maintained <a href=\"https://github.com/d1y/bash.zed\">Basher extension</a>.\nReport issues to: <a href=\"https://github.com/d1y/bash.zed/issues\">https://github.com/d1y/bash.zed/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-bash\">tree-sitter/tree-sitter-bash</a></li>\n<li>Language Server: <a href=\"https://github.com/bash-lsp/bash-language-server\">bash-lsp/bash-language-server</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>When <code>shellcheck</code> is available <code>bash-language-server</code> will use it internally to provide diagnostics.</p>\n<h3 id=\"install-shellcheck\"><a class=\"header\" href=\"#install-shellcheck\">Install <code>shellcheck</code>:</a></h3>\n<pre><code class=\"language-sh\">brew install shellcheck             # macOS (HomeBrew)\napt-get install shellcheck          # Ubuntu/Debian\npacman -S shellcheck                # ArchLinux\ndnf install shellcheck              # Fedora\nyum install shellcheck              # CentOS/RHEL\nzypper install shellcheck           # openSUSE\nchoco install shellcheck            # Windows (Chocolatey)\n</code></pre>\n<p>And verify it is available from your path:</p>\n<pre><code class=\"language-sh\">which shellcheck\nshellcheck --version\n</code></pre>\n<p>If you wish to customize the warnings/errors reported you just need to create a <code>.shellcheckrc</code> file. You can do this in the root of your project or in your home directory (<code>~/.shellcheckrc</code>). See: <a href=\"https://github.com/koalaman/shellcheck/wiki/Ignore#ignoring-one-or-more-types-of-errors-forever\">shellcheck documentation</a> for more.</p>\n<h3 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also:</a></h3>\n<ul>\n<li><a href=\"./sh.html\">Zed Docs: Language Support: Shell Scripts</a></li>\n</ul>\n\n</main>",
    "content_text": "Bash\nBash language support in Zed is provided by the community-maintained Basher extension.\nReport issues to: https://github.com/d1y/bash.zed/issues\n\nTree-sitter: tree-sitter/tree-sitter-bash\nLanguage Server: bash-lsp/bash-language-server\n\nConfiguration\nWhen shellcheck is available bash-language-server will use it internally to provide diagnostics.\nInstall shellcheck:\nbrew install shellcheck             # macOS (HomeBrew)\napt-get install shellcheck          # Ubuntu/Debian\npacman -S shellcheck                # ArchLinux\ndnf install shellcheck              # Fedora\nyum install shellcheck              # CentOS/RHEL\nzypper install shellcheck           # openSUSE\nchoco install shellcheck            # Windows (Chocolatey)\n\nAnd verify it is available from your path:\nwhich shellcheck\nshellcheck --version\n\nIf you wish to customize the warnings/errors reported you just need to create a .shellcheckrc file. You can do this in the root of your project or in your home directory (~/.shellcheckrc). See: shellcheck documentation for more.\nSee also:\n\nZed Docs: Language Support: Shell Scripts",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:11"
  },
  "languages/biome.html": {
    "url": "https://zed.dev/docs/languages/biome.html",
    "title": "Biome | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"biome\"><a class=\"header\" href=\"#biome\">Biome</a></h1>\n<p><a href=\"https://biomejs.dev/\">Biome</a> support in Zed is provided by the community-maintained <a href=\"https://github.com/biomejs/biome-zed\">Biome extension</a>.\nReport issues to: <a href=\"https://github.com/biomejs/biome-zed/issues\">https://github.com/biomejs/biome-zed/issues</a></p>\n<ul>\n<li>Language Server: <a href=\"https://github.com/biomejs/biome\">biomejs/biome</a></li>\n</ul>\n<h2 id=\"biome-language-support\"><a class=\"header\" href=\"#biome-language-support\">Biome Language Support</a></h2>\n<p>The Biome extension includes support for the following languages:</p>\n<ul>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>JSX</li>\n<li>TSX</li>\n<li>JSON</li>\n<li>JSONC</li>\n<li>Vue.js</li>\n<li>Astro</li>\n<li>Svelte</li>\n<li>CSS</li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>By default, the <code>biome.json</code> file is required to be in the root of the workspace.</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\"\n}\n</code></pre>\n<p>For a full list of <code>biome.json</code> options see <a href=\"https://biomejs.dev/reference/configuration/\">Biome Configuration</a> documentation.</p>\n<p>See the <a href=\"https://github.com/biomejs/biome-zed\">Biome Zed Extension README</a> for a complete list of features and configuration options.</p>\n\n</main>",
    "content_text": "Biome\nBiome support in Zed is provided by the community-maintained Biome extension.\nReport issues to: https://github.com/biomejs/biome-zed/issues\n\nLanguage Server: biomejs/biome\n\nBiome Language Support\nThe Biome extension includes support for the following languages:\n\nJavaScript\nTypeScript\nJSX\nTSX\nJSON\nJSONC\nVue.js\nAstro\nSvelte\nCSS\n\nConfiguration\nBy default, the biome.json file is required to be in the root of the workspace.\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\"\n}\n\nFor a full list of biome.json options see Biome Configuration documentation.\nSee the Biome Zed Extension README for a complete list of features and configuration options.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:13"
  },
  "languages/c.html": {
    "url": "https://zed.dev/docs/languages/c.html",
    "title": "C | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"c\"><a class=\"header\" href=\"#c\">C</a></h1>\n<p>C support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-c\">tree-sitter/tree-sitter-c</a></li>\n<li>Language Server: <a href=\"https://github.com/clangd/clangd\">clangd/clangd</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/vadimcn\">CodeLLDB</a> (primary), <a href=\"https://sourceware.org/gdb/\">GDB</a> (secondary, not available on Apple silicon)</li>\n</ul>\n<h2 id=\"clangd-force-detect-as-c\"><a class=\"header\" href=\"#clangd-force-detect-as-c\">Clangd: Force detect as C</a></h2>\n<p>Clangd out of the box assumes mixed C++/C projects. If you have a C-only project you may wish to instruct clangd to all files as C using the <code>-xc</code> flag. To do this, create a <code>.clangd</code> file in the root of your project with the following:</p>\n<pre><code class=\"language-yaml\">CompileFlags:\n  Add: [-xc]\n</code></pre>\n<p>By default clang and gcc by will recognize <code>*.C</code> and <code>*.H</code> (uppercase extensions) as C++ and not C and so Zed too follows this convention. If you are working with a C-only project (perhaps one with legacy uppercase pathing like <code>FILENAME.C</code>) you can override this behavior by adding this to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"file_types\": {\n    \"C\": [\"C\", \"H\"]\n  }\n}\n</code></pre>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>By default Zed will use the <code>clangd</code> language server for formatting C code. The Clangd is the same as the <code>clang-format</code> CLI tool. To configure this you can add a <code>.clang-format</code> file. For example:</p>\n<pre><code class=\"language-yaml\">---\nBasedOnStyle: GNU\nIndentWidth: 2\n---\n</code></pre>\n<p>See <a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">Clang-Format Style Options</a> for a complete list of options.</p>\n<p>You can trigger formatting via <kbd class=\"keybinding\">cmd-shift-i|ctrl-shift-i</kbd> or the <code>editor: format</code> action from the command palette or by adding <code>format_on_save</code> to your Zed settings:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n</code></pre>\n<h2 id=\"compile-commands\"><a class=\"header\" href=\"#compile-commands\">Compile Commands</a></h2>\n<p>For some projects Clangd requires a <code>compile_commands.json</code> file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.</p>\n<h3 id=\"cmake-compile-commands\"><a class=\"header\" href=\"#cmake-compile-commands\">CMake Compile Commands</a></h3>\n<p>With CMake, you can generate <code>compile_commands.json</code> automatically by adding the following line to your <code>CMakeLists.txt</code>:</p>\n<pre><code class=\"language-cmake\">set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n</code></pre>\n<p>After building your project, CMake will generate the <code>compile_commands.json</code> file in the build directory and clangd will automatically pick it up.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>You can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes <code>-g</code> to the C compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to <code>.zed/debug.json</code>.</p>\n<h3 id=\"build-and-debug-binary\"><a class=\"header\" href=\"#build-and-debug-binary\">Build and Debug Binary</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "C\nC support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-c\nLanguage Server: clangd/clangd\nDebug Adapter: CodeLLDB (primary), GDB (secondary, not available on Apple silicon)\n\nClangd: Force detect as C\nClangd out of the box assumes mixed C++/C projects. If you have a C-only project you may wish to instruct clangd to all files as C using the -xc flag. To do this, create a .clangd file in the root of your project with the following:\nCompileFlags:\n  Add: [-xc]\n\nBy default clang and gcc by will recognize *.C and *.H (uppercase extensions) as C++ and not C and so Zed too follows this convention. If you are working with a C-only project (perhaps one with legacy uppercase pathing like FILENAME.C) you can override this behavior by adding this to your settings:\n{\n  \"file_types\": {\n    \"C\": [\"C\", \"H\"]\n  }\n}\n\nFormatting\nBy default Zed will use the clangd language server for formatting C code. The Clangd is the same as the clang-format CLI tool. To configure this you can add a .clang-format file. For example:\n---\nBasedOnStyle: GNU\nIndentWidth: 2\n---\n\nSee Clang-Format Style Options for a complete list of options.\nYou can trigger formatting via cmd-shift-i|ctrl-shift-i or the editor: format action from the command palette or by adding format_on_save to your Zed settings:\n  \"languages\": {\n    \"C\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n\nCompile Commands\nFor some projects Clangd requires a compile_commands.json file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.\nCMake Compile Commands\nWith CMake, you can generate compile_commands.json automatically by adding the following line to your CMakeLists.txt:\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nAfter building your project, CMake will generate the compile_commands.json file in the build directory and clangd will automatically pick it up.\nDebugging\nYou can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes -g to the C compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to .zed/debug.json.\nBuild and Debug Binary\n[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:15"
  },
  "languages/cpp.html": {
    "url": "https://zed.dev/docs/languages/cpp.html",
    "title": "C++ | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"c\"><a class=\"header\" href=\"#c\">C++</a></h1>\n<p>C++ support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-cpp\">tree-sitter/tree-sitter-cpp</a></li>\n<li>Language Server: <a href=\"https://github.com/clangd/clangd\">clangd/clangd</a></li>\n</ul>\n<h2 id=\"binary\"><a class=\"header\" href=\"#binary\">Binary</a></h2>\n<p>You can configure which <code>clangd</code> binary Zed should use.</p>\n<p>By default, Zed will try to find a <code>clangd</code> in your <code>$PATH</code> and try to use that. If that binary successfully executes, it's used. Otherwise, Zed will fall back to installing its own <code>clangd</code> version and use that.</p>\n<p>If you want to install a pre-release <code>clangd</code> version instead you can instruct Zed to do so by setting <code>pre_release</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to disable Zed looking for a <code>clangd</code> binary, you can set <code>ignore_system_version</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to use a binary in a custom location, you can specify a <code>path</code> and optional <code>arguments</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"cangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n</code></pre>\n<p>This <code>\"path\"</code> has to be an absolute path.</p>\n<h2 id=\"arguments\"><a class=\"header\" href=\"#arguments\">Arguments</a></h2>\n<p>You can pass any number of arguments to clangd. To see a full set of available options, run <code>clangd --help</code> from the command line. For example with <code>--function-arg-placeholders=0</code> completions contain only parentheses for function calls, while the default (<code>--function-arg-placeholders=1</code>) completions also contain placeholders for method parameters.</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": [\"--function-arg-placeholders=0\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>By default Zed will use the <code>clangd</code> language server for formatting C++ code. The Clangd is the same as the <code>clang-format</code> CLI tool. To configure this you can add a <code>.clang-format</code> file. For example:</p>\n<pre><code class=\"language-yaml\">---\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\n</code></pre>\n<p>See <a href=\"https://clang.llvm.org/docs/ClangFormatStyleOptions.html\">Clang-Format Style Options</a> for a complete list of options.</p>\n<p>You can trigger formatting via <kbd class=\"keybinding\">cmd-shift-i|ctrl-shift-i</kbd> or the <code>editor: format</code> action from the command palette or by adding <code>format_on_save</code> to your Zed settings:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"C++\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n</code></pre>\n<h2 id=\"more-server-configuration\"><a class=\"header\" href=\"#more-server-configuration\">More server configuration</a></h2>\n<p>In the root of your project, it is generally common to create a <code>.clangd</code> file to set extra configuration.</p>\n<pre><code class=\"language-text\">CompileFlags:\n  Add:\n    - \"--include-directory=/path/to/include\"\nDiagnostics:\n  MissingIncludes: Strict\n  UnusedIncludes: Strict\n</code></pre>\n<p>For more advanced usage of clangd configuration file, take a look into their <a href=\"https://clangd.llvm.org/config.html\">official page</a>.</p>\n<h2 id=\"compile-commands\"><a class=\"header\" href=\"#compile-commands\">Compile Commands</a></h2>\n<p>For some projects Clangd requires a <code>compile_commands.json</code> file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.</p>\n<h3 id=\"cmake-compile-commands\"><a class=\"header\" href=\"#cmake-compile-commands\">CMake Compile Commands</a></h3>\n<p>With CMake, you can generate <code>compile_commands.json</code> automatically by adding the following line to your <code>CMakeLists.txt</code>:</p>\n<pre><code class=\"language-cmake\">set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n</code></pre>\n<p>After building your project, CMake will generate the <code>compile_commands.json</code> file in the build directory and clangd will automatically pick it up.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>You can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes <code>-g</code> to the C++ compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to <code>.zed/debug.json</code>.</p>\n<h3 id=\"build-and-debug-binary\"><a class=\"header\" href=\"#build-and-debug-binary\">Build and Debug Binary</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "C++\nC++ support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-cpp\nLanguage Server: clangd/clangd\n\nBinary\nYou can configure which clangd binary Zed should use.\nBy default, Zed will try to find a clangd in your $PATH and try to use that. If that binary successfully executes, it's used. Otherwise, Zed will fall back to installing its own clangd version and use that.\nIf you want to install a pre-release clangd version instead you can instruct Zed to do so by setting pre_release to true in your settings.json:\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n\nIf you want to disable Zed looking for a clangd binary, you can set ignore_system_version to true in your settings.json:\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n\nIf you want to use a binary in a custom location, you can specify a path and optional arguments:\n{\n  \"lsp\": {\n    \"cangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n\nThis \"path\" has to be an absolute path.\nArguments\nYou can pass any number of arguments to clangd. To see a full set of available options, run clangd --help from the command line. For example with --function-arg-placeholders=0 completions contain only parentheses for function calls, while the default (--function-arg-placeholders=1) completions also contain placeholders for method parameters.\n{\n  \"lsp\": {\n    \"clangd\": {\n      \"binary\": {\n        \"path\": \"/path/to/clangd\",\n        \"arguments\": [\"--function-arg-placeholders=0\"]\n      }\n    }\n  }\n}\n\nFormatting\nBy default Zed will use the clangd language server for formatting C++ code. The Clangd is the same as the clang-format CLI tool. To configure this you can add a .clang-format file. For example:\n---\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\n\nSee Clang-Format Style Options for a complete list of options.\nYou can trigger formatting via cmd-shift-i|ctrl-shift-i or the editor: format action from the command palette or by adding format_on_save to your Zed settings:\n  \"languages\": {\n    \"C++\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 2\n    }\n  }\n\nMore server configuration\nIn the root of your project, it is generally common to create a .clangd file to set extra configuration.\nCompileFlags:\n  Add:\n    - \"--include-directory=/path/to/include\"\nDiagnostics:\n  MissingIncludes: Strict\n  UnusedIncludes: Strict\n\nFor more advanced usage of clangd configuration file, take a look into their official page.\nCompile Commands\nFor some projects Clangd requires a compile_commands.json file to properly analyze your project. This file contains the compilation database that tells clangd how your project should be built.\nCMake Compile Commands\nWith CMake, you can generate compile_commands.json automatically by adding the following line to your CMakeLists.txt:\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nAfter building your project, CMake will generate the compile_commands.json file in the build directory and clangd will automatically pick it up.\nDebugging\nYou can use CodeLLDB or GDB to debug native binaries. (Make sure that your build process passes -g to the C++ compiler, so that debug information is included in the resulting binary.) See below for examples of debug configurations that you can add to .zed/debug.json.\nBuild and Debug Binary\n[\n  {\n    \"label\": \"Debug native binary\",\n    \"build\": {\n      \"command\": \"make\",\n      \"args\": [\"-j8\"],\n      \"cwd\": \"$ZED_WORKTREE_ROOT\"\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/build/prog\",\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:17"
  },
  "languages/csharp.html": {
    "url": "https://zed.dev/docs/languages/csharp.html",
    "title": "C# | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"c\"><a class=\"header\" href=\"#c\">C#</a></h1>\n<p>Note language name is \"CSharp\" for settings not \"C#'</p>\n<p>C# support is available through the <a href=\"https://github.com/zed-extensions/csharp\">C# extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-c-sharp\">tree-sitter/tree-sitter-c-sharp</a></li>\n<li>Language Server: <a href=\"https://github.com/OmniSharp/omnisharp-roslyn\">OmniSharp/omnisharp-roslyn</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>The <code>OmniSharp</code> binary can be configured in a Zed settings file with:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"omnisharp\": {\n      \"binary\": {\n        \"path\": \"/path/to/OmniSharp\",\n        \"arguments\": [\"optional\", \"additional\", \"args\", \"-lsp\"]\n      }\n    }\n  }\n}\n</code></pre>\n\n</main>",
    "content_text": "C#\nNote language name is \"CSharp\" for settings not \"C#'\nC# support is available through the C# extension.\n\nTree-sitter: tree-sitter/tree-sitter-c-sharp\nLanguage Server: OmniSharp/omnisharp-roslyn\n\nConfiguration\nThe OmniSharp binary can be configured in a Zed settings file with:\n{\n  \"lsp\": {\n    \"omnisharp\": {\n      \"binary\": {\n        \"path\": \"/path/to/OmniSharp\",\n        \"arguments\": [\"optional\", \"additional\", \"args\", \"-lsp\"]\n      }\n    }\n  }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:19"
  },
  "languages/clojure.html": {
    "url": "https://zed.dev/docs/languages/clojure.html",
    "title": "Clojure | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"clojure\"><a class=\"header\" href=\"#clojure\">Clojure</a></h1>\n<p>Clojure support is available through the <a href=\"https://github.com/zed-extensions/clojure\">Clojure extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/prcastro/tree-sitter-clojure\">prcastro/tree-sitter-clojure</a></li>\n<li>Language Server: <a href=\"https://github.com/clojure-lsp/clojure-lsp\">clojure-lsp/clojure-lsp</a></li>\n</ul>\n<!--\nTBD: Add some Clojure Docs\n-->\n\n</main>",
    "content_text": "Clojure\nClojure support is available through the Clojure extension.\n\nTree-sitter: prcastro/tree-sitter-clojure\nLanguage Server: clojure-lsp/clojure-lsp",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:21"
  },
  "languages/css.html": {
    "url": "https://zed.dev/docs/languages/css.html",
    "title": "CSS | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"css\"><a class=\"header\" href=\"#css\">CSS</a></h1>\n<p>Zed has built-in support for CSS.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-css\">tree-sitter/tree-sitter-css</a></li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/microsoft/vscode-html-languageservice\">microsoft/vscode-html-languageservice</a></li>\n<li><a href=\"https://github.com/tailwindlabs/tailwindcss-intellisense\">tailwindcss-language-server</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tailwind-css\"><a class=\"header\" href=\"#tailwind-css\">Tailwind CSS</a></h2>\n<p>Zed also supports <a href=\"./tailwindcss.html\">Tailwind CSS</a> out-of-the-box for languages and frameworks like JavaScript, Astro, Svelte, and more.</p>\n<!-- TBD: Document CS -->\n<h2 id=\"recommended-reading\"><a class=\"header\" href=\"#recommended-reading\">Recommended Reading</a></h2>\n<ul>\n<li><a href=\"./html.html\">HTML</a></li>\n<li><a href=\"./typescript.html\">TypeScript</a></li>\n<li><a href=\"./javascript.html\">JavaScript</a></li>\n</ul>\n\n</main>",
    "content_text": "CSS\nZed has built-in support for CSS.\n\nTree-sitter: tree-sitter/tree-sitter-css\nLanguage Servers:\n\nmicrosoft/vscode-html-languageservice\ntailwindcss-language-server\n\n\n\nTailwind CSS\nZed also supports Tailwind CSS out-of-the-box for languages and frameworks like JavaScript, Astro, Svelte, and more.\n\nRecommended Reading\n\nHTML\nTypeScript\nJavaScript",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:23"
  },
  "languages/dart.html": {
    "url": "https://zed.dev/docs/languages/dart.html",
    "title": "Dart | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"dart\"><a class=\"header\" href=\"#dart\">Dart</a></h1>\n<p>Dart support is available through the <a href=\"https://github.com/zed-extensions/dart\">Dart extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/UserNobody14/tree-sitter-dart\">UserNobody14/tree-sitter-dart</a></li>\n<li>Language Server: <a href=\"https://github.com/dart-lang/sdk\">dart language-server</a></li>\n</ul>\n<h2 id=\"pre-requisites\"><a class=\"header\" href=\"#pre-requisites\">Pre-requisites</a></h2>\n<p>You will need to install the Dart SDK.</p>\n<p>You can install dart from <a href=\"https://dart.dev/get-dart\">dart.dev/get-dart</a> or via the <a href=\"https://fvm.app/documentation/getting-started/installation\">Flutter Version Management CLI (fvm)</a></p>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>The dart extension requires no configuration if you have <code>dart</code> in your path:</p>\n<pre><code class=\"language-sh\">which dart\ndart --version\n</code></pre>\n<p>If you would like to use a specific dart binary or use dart via FVM you can specify the <code>dart</code> binary in your Zed settings.jsons file:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"dart\": {\n      \"binary\": {\n        \"path\": \"/opt/homebrew/bin/fvm\",\n        \"arguments\": [\"dart\", \"language-server\", \"--protocol=lsp\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h3>\n<p>Dart by-default uses a very conservative maximum line length (80). If you would like the dart LSP to permit a longer line length when auto-formatting, add the following to your Zed settings.json:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"dart\": {\n      \"settings\": {\n        \"lineLength\": 140\n      }\n    }\n  }\n}\n</code></pre>\n<p>Please see the Dart documentation for more information on <a href=\"https://github.com/dart-lang/sdk/blob/main/pkg/analysis_server/tool/lsp_spec/README.md\">dart language-server capabilities</a>.</p>\n\n</main>",
    "content_text": "Dart\nDart support is available through the Dart extension.\n\nTree-sitter: UserNobody14/tree-sitter-dart\nLanguage Server: dart language-server\n\nPre-requisites\nYou will need to install the Dart SDK.\nYou can install dart from dart.dev/get-dart or via the Flutter Version Management CLI (fvm)\nConfiguration\nThe dart extension requires no configuration if you have dart in your path:\nwhich dart\ndart --version\n\nIf you would like to use a specific dart binary or use dart via FVM you can specify the dart binary in your Zed settings.jsons file:\n{\n  \"lsp\": {\n    \"dart\": {\n      \"binary\": {\n        \"path\": \"/opt/homebrew/bin/fvm\",\n        \"arguments\": [\"dart\", \"language-server\", \"--protocol=lsp\"]\n      }\n    }\n  }\n}\n\nFormatting\nDart by-default uses a very conservative maximum line length (80). If you would like the dart LSP to permit a longer line length when auto-formatting, add the following to your Zed settings.json:\n{\n  \"lsp\": {\n    \"dart\": {\n      \"settings\": {\n        \"lineLength\": 140\n      }\n    }\n  }\n}\n\nPlease see the Dart documentation for more information on dart language-server capabilities.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:25"
  },
  "languages/deno.html": {
    "url": "https://zed.dev/docs/languages/deno.html",
    "title": "Deno | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"deno\"><a class=\"header\" href=\"#deno\">Deno</a></h1>\n<p>Deno support is available through the <a href=\"https://github.com/zed-extensions/deno\">Deno extension</a>.</p>\n<ul>\n<li>Language server: <a href=\"https://docs.deno.com/runtime/manual/advanced/language_server/overview/\">Deno Language Server</a></li>\n</ul>\n<h2 id=\"deno-configuration\"><a class=\"header\" href=\"#deno-configuration\">Deno Configuration</a></h2>\n<p>To use the Deno Language Server with TypeScript and TSX files, you will likely wish to disable the default language servers and enable deno by adding the following to your settings.json:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"deno\": {\n      \"settings\": {\n        \"deno\": {\n          \"enable\": true\n        }\n      }\n    }\n  },\n  \"languages\": {\n    \"JavaScript\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    },\n    \"TypeScript\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    },\n    \"TSX\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"../configuring-languages.html\">Configuring supported languages</a> in the Zed documentation for more information.</p>\n<!--\nTBD: Deno Typescript REPL instructions [docs/repl#typescript-deno](../repl.md#typescript-deno)\n-->\n<h2 id=\"dap-support\"><a class=\"header\" href=\"#dap-support\">DAP support</a></h2>\n<p>To debug deno programs, add this to <code>.zed/debug.json</code></p>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Deno\",\n    \"request\": \"launch\",\n    \"type\": \"pwa-node\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"program\": \"$ZED_FILE\",\n    \"runtimeExecutable\": \"deno\",\n    \"runtimeArgs\": [\"run\", \"--allow-all\", \"--inspect-wait\"],\n    \"attachSimplePort\": 9229\n  }\n]\n</code></pre>\n<h2 id=\"runnable-support\"><a class=\"header\" href=\"#runnable-support\">Runnable support</a></h2>\n<p>To run deno tasks like tests from the ui, add this to <code>.zed/tasks.json</code></p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"deno test\",\n    \"command\": \"deno test -A --filter '/^$ZED_CUSTOM_DENO_TEST_NAME$/' $ZED_FILE\",\n    \"tags\": [\"js-test\"]\n  }\n]\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also:</a></h2>\n<ul>\n<li><a href=\"./typescript.html\">TypeScript</a></li>\n<li><a href=\"./javascript.html\">JavaScript</a></li>\n</ul>\n\n</main>",
    "content_text": "Deno\nDeno support is available through the Deno extension.\n\nLanguage server: Deno Language Server\n\nDeno Configuration\nTo use the Deno Language Server with TypeScript and TSX files, you will likely wish to disable the default language servers and enable deno by adding the following to your settings.json:\n{\n  \"lsp\": {\n    \"deno\": {\n      \"settings\": {\n        \"deno\": {\n          \"enable\": true\n        }\n      }\n    }\n  },\n  \"languages\": {\n    \"JavaScript\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    },\n    \"TypeScript\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    },\n    \"TSX\": {\n      \"language_servers\": [\n        \"deno\",\n        \"!typescript-language-server\",\n        \"!vtsls\",\n        \"!eslint\"\n      ],\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n\nSee Configuring supported languages in the Zed documentation for more information.\n\nDAP support\nTo debug deno programs, add this to .zed/debug.json\n[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Deno\",\n    \"request\": \"launch\",\n    \"type\": \"pwa-node\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"program\": \"$ZED_FILE\",\n    \"runtimeExecutable\": \"deno\",\n    \"runtimeArgs\": [\"run\", \"--allow-all\", \"--inspect-wait\"],\n    \"attachSimplePort\": 9229\n  }\n]\n\nRunnable support\nTo run deno tasks like tests from the ui, add this to .zed/tasks.json\n[\n  {\n    \"label\": \"deno test\",\n    \"command\": \"deno test -A --filter '/^$ZED_CUSTOM_DENO_TEST_NAME$/' $ZED_FILE\",\n    \"tags\": [\"js-test\"]\n  }\n]\n\nSee also:\n\nTypeScript\nJavaScript",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:27"
  },
  "languages/diff.html": {
    "url": "https://zed.dev/docs/languages/diff.html",
    "title": "Diff | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"diff\"><a class=\"header\" href=\"#diff\">Diff</a></h1>\n<p>Diff support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/the-mikedavis/tree-sitter-diff\">zed-industries/the-mikedavis/tree-sitter-diff</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>Zed will not attempt to format diff files and has <a href=\"https://zed.dev/docs/configuring-zed#remove-trailing-whitespace-on-save\"><code>remove_trailing_whitespace_on_save</code></a> and <a href=\"https://zed.dev/docs/configuring-zed#ensure-final-newline-on-save\"><code>ensure-final-newline-on-save</code></a> set to false.</p>\n<p>Zed will automatically recognize files with <code>patch</code> and <code>diff</code> extensions as Diff files. To recognize other extensions, add them to <code>file_types</code> in your Zed settings.json:</p>\n<pre><code class=\"language-json\">  \"file_types\": {\n    \"Diff\": [\"dif\"]\n  },\n</code></pre>\n\n</main>",
    "content_text": "Diff\nDiff support is available natively in Zed.\n\nTree-sitter: zed-industries/the-mikedavis/tree-sitter-diff\n\nConfiguration\nZed will not attempt to format diff files and has remove_trailing_whitespace_on_save and ensure-final-newline-on-save set to false.\nZed will automatically recognize files with patch and diff extensions as Diff files. To recognize other extensions, add them to file_types in your Zed settings.json:\n  \"file_types\": {\n    \"Diff\": [\"dif\"]\n  },",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:29"
  },
  "languages/docker.html": {
    "url": "https://zed.dev/docs/languages/docker.html",
    "title": "Docker | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"docker\"><a class=\"header\" href=\"#docker\">Docker</a></h1>\n<p>Support for <code>Dockerfile</code> and <code>docker-compose.yaml</code> in Zed is provided by community-maintained extensions.</p>\n<h2 id=\"docker-compose\"><a class=\"header\" href=\"#docker-compose\">Docker Compose</a></h2>\n<p>Docker <code>compose.yaml</code> language support in Zed is provided by the <a href=\"https://github.com/eth0net/zed-docker-compose\">Docker Compose extension</a>. Please report issues to: <a href=\"https://github.com/eth0net/zed-docker-compose/issues\">https://github.com/eth0net/zed-docker-compose/issues</a>.</p>\n<ul>\n<li>Language Server: <a href=\"https://github.com/microsoft/compose-language-service\">microsoft/compose-language-service</a></li>\n</ul>\n<h2 id=\"dockerfile\"><a class=\"header\" href=\"#dockerfile\">Dockerfile</a></h2>\n<p><code>Dockerfile</code> language support in Zed is provided by the <a href=\"https://github.com/d1y/dockerfile.zed\">Dockerfile extension</a>. Please issues to: <a href=\"https://github.com/d1y/dockerfile.zed/issues\">https://github.com/d1y/dockerfile.zed/issues</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/camdencheek/tree-sitter-dockerfile\">camdencheek/tree-sitter-dockerfile</a></li>\n<li>Language Server: <a href=\"https://github.com/rcjsuen/dockerfile-language-server\">rcjsuen/dockerfile-language-server</a></li>\n</ul>\n\n</main>",
    "content_text": "Docker\nSupport for Dockerfile and docker-compose.yaml in Zed is provided by community-maintained extensions.\nDocker Compose\nDocker compose.yaml language support in Zed is provided by the Docker Compose extension. Please report issues to: https://github.com/eth0net/zed-docker-compose/issues.\n\nLanguage Server: microsoft/compose-language-service\n\nDockerfile\nDockerfile language support in Zed is provided by the Dockerfile extension. Please issues to: https://github.com/d1y/dockerfile.zed/issues.\n\nTree-sitter: camdencheek/tree-sitter-dockerfile\nLanguage Server: rcjsuen/dockerfile-language-server",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:31"
  },
  "languages/elixir.html": {
    "url": "https://zed.dev/docs/languages/elixir.html",
    "title": "Elixir | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"elixir\"><a class=\"header\" href=\"#elixir\">Elixir</a></h1>\n<p>Elixir support is available through the <a href=\"https://github.com/zed-extensions/elixir\">Elixir extension</a>.</p>\n<ul>\n<li>Tree-sitter:\n<ul>\n<li><a href=\"https://github.com/elixir-lang/tree-sitter-elixir\">elixir-lang/tree-sitter-elixir</a></li>\n<li><a href=\"https://github.com/phoenixframework/tree-sitter-heex\">phoenixframework/tree-sitter-heex</a></li>\n</ul>\n</li>\n<li>Language servers:\n<ul>\n<li><a href=\"https://github.com/elixir-lang/expert\">elixir-lang/expert</a></li>\n<li><a href=\"https://github.com/elixir-lsp/elixir-ls\">elixir-lsp/elixir-ls</a></li>\n<li><a href=\"https://github.com/elixir-tools/next-ls\">elixir-tools/next-ls</a></li>\n<li><a href=\"https://github.com/lexical-lsp/lexical\">lexical-lsp/lexical</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"choosing-a-language-server\"><a class=\"header\" href=\"#choosing-a-language-server\">Choosing a language server</a></h2>\n<p>The Elixir extension offers language server support for <code>expert</code>, <code>elixir-ls</code>, <code>next-ls</code>, and <code>lexical</code>.</p>\n<p><code>elixir-ls</code> is enabled by default.</p>\n<h3 id=\"expert\"><a class=\"header\" href=\"#expert\">Expert</a></h3>\n<p>To switch to <code>expert</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h3 id=\"next-ls\"><a class=\"header\" href=\"#next-ls\">Next LS</a></h3>\n<p>To switch to <code>next-ls</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"next-ls\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h3 id=\"lexical\"><a class=\"header\" href=\"#lexical\">Lexical</a></h3>\n<p>To switch to <code>lexical</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"lexical\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setting-up-elixir-ls\"><a class=\"header\" href=\"#setting-up-elixir-ls\">Setting up <code>elixir-ls</code></a></h2>\n<ol>\n<li>Install <code>elixir</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">brew install elixir\n</code></pre>\n<ol start=\"2\">\n<li>Install <code>elixir-ls</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">brew install elixir-ls\n</code></pre>\n<ol start=\"3\">\n<li>Restart Zed</li>\n</ol>\n<blockquote>\n<p>If <code>elixir-ls</code> is not running in an elixir project, check the error log via the command palette action <code>zed: open log</code>. If you find an error message mentioning: <code>invalid LSP message header \"Shall I install Hex? (if running non-interactively, use \\\"mix local.hex --force\\\") [Yn]</code>, you might need to install <a href=\"https://hex.pm\"><code>Hex</code></a>. You run <code>elixir-ls</code> from the command line and accept the prompt to install <code>Hex</code>.</p>\n</blockquote>\n<h3 id=\"formatting-with-mix\"><a class=\"header\" href=\"#formatting-with-mix\">Formatting with Mix</a></h3>\n<p>If you prefer to format your code with <a href=\"https://hexdocs.pm/mix/Mix.html\">Mix</a>, use the following snippet in your <code>settings.json</code> file to configure it as an external formatter. Formatting will occur on file save.</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"format_on_save\": {\n        \"external\": {\n          \"command\": \"mix\",\n          \"arguments\": [\"format\", \"--stdin-filename\", \"{buffer_path}\", \"-\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"additional-workspace-configuration-options\"><a class=\"header\" href=\"#additional-workspace-configuration-options\">Additional workspace configuration options</a></h3>\n<p>You can pass additional elixir-ls workspace configuration options via lsp settings in <code>settings.json</code>.</p>\n<p>The following example disables dialyzer:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"elixir-ls\": {\n    \"settings\": {\n      \"dialyzerEnabled\": false\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"https://github.com/elixir-lsp/elixir-ls#elixirls-configuration-settings\">ElixirLS configuration settings</a> for more options.</p>\n<h3 id=\"heex\"><a class=\"header\" href=\"#heex\">HEEx</a></h3>\n<p>Zed also supports HEEx templates. HEEx is a mix of <a href=\"https://hexdocs.pm/eex/1.12.3/EEx.html\">EEx</a> (Embedded Elixir) and HTML, and is used in Phoenix LiveView applications.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/phoenixframework/tree-sitter-heex\">phoenixframework/tree-sitter-heex</a></li>\n</ul>\n\n</main>",
    "content_text": "Elixir\nElixir support is available through the Elixir extension.\n\nTree-sitter:\n\nelixir-lang/tree-sitter-elixir\nphoenixframework/tree-sitter-heex\n\n\nLanguage servers:\n\nelixir-lang/expert\nelixir-lsp/elixir-ls\nelixir-tools/next-ls\nlexical-lsp/lexical\n\n\n\nChoosing a language server\nThe Elixir extension offers language server support for expert, elixir-ls, next-ls, and lexical.\nelixir-ls is enabled by default.\nExpert\nTo switch to expert, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nNext LS\nTo switch to next-ls, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"next-ls\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nLexical\nTo switch to lexical, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"lexical\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nSetting up elixir-ls\n\nInstall elixir:\n\nbrew install elixir\n\n\nInstall elixir-ls:\n\nbrew install elixir-ls\n\n\nRestart Zed\n\n\nIf elixir-ls is not running in an elixir project, check the error log via the command palette action zed: open log. If you find an error message mentioning: invalid LSP message header \"Shall I install Hex? (if running non-interactively, use \\\"mix local.hex --force\\\") [Yn], you might need to install Hex. You run elixir-ls from the command line and accept the prompt to install Hex.\n\nFormatting with Mix\nIf you prefer to format your code with Mix, use the following snippet in your settings.json file to configure it as an external formatter. Formatting will occur on file save.\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"format_on_save\": {\n        \"external\": {\n          \"command\": \"mix\",\n          \"arguments\": [\"format\", \"--stdin-filename\", \"{buffer_path}\", \"-\"]\n        }\n      }\n    }\n  }\n}\n\nAdditional workspace configuration options\nYou can pass additional elixir-ls workspace configuration options via lsp settings in settings.json.\nThe following example disables dialyzer:\n\"lsp\": {\n  \"elixir-ls\": {\n    \"settings\": {\n      \"dialyzerEnabled\": false\n    }\n  }\n}\n\nSee ElixirLS configuration settings for more options.\nHEEx\nZed also supports HEEx templates. HEEx is a mix of EEx (Embedded Elixir) and HTML, and is used in Phoenix LiveView applications.\n\nTree-sitter: phoenixframework/tree-sitter-heex",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:34"
  },
  "languages/elm.html": {
    "url": "https://zed.dev/docs/languages/elm.html",
    "title": "Elm | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"elm\"><a class=\"header\" href=\"#elm\">Elm</a></h1>\n<p>Elm support is available through the <a href=\"https://github.com/zed-extensions/elm\">Elm extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/elm-tooling/tree-sitter-elm\">elm-tooling/tree-sitter-elm</a></li>\n<li>Language Server: <a href=\"https://github.com/elm-tooling/elm-language-server\">elm-tooling/elm-language-server</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<p>Zed support for Elm requires installation of <code>elm</code>, <code>elm-format</code>, and <code>elm-review</code>.</p>\n<ol>\n<li><a href=\"https://guide.elm-lang.org/install/elm.html\">Install Elm</a> (or run <code>brew install elm</code> on macOS).</li>\n<li>Install <code>elm-review</code> to support code linting:\n<pre><code class=\"language-sh\">npm install elm-review --save-dev\n</code></pre>\n</li>\n<li>Install <code>elm-format</code> to support automatic formatting\n<pre><code class=\"language-sh\">npm install -g elm-format\n</code></pre>\n</li>\n</ol>\n<h2 id=\"configuring-elm-language-server\"><a class=\"header\" href=\"#configuring-elm-language-server\">Configuring <code>elm-language-server</code></a></h2>\n<p>Elm language server can be configured in your <code>settings.json</code>, e.g.:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"elm-language-server\": {\n      \"initialization_options\": {\n        \"disableElmLSDiagnostics\": true,\n        \"onlyUpdateDiagnosticsOnSave\": false,\n        \"elmReviewDiagnostics\": \"warning\"\n      }\n    }\n  }\n}\n</code></pre>\n<p><code>elm-format</code>, <code>elm-review</code> and <code>elm</code> need to be installed and made available in the environment or configured in the settings. See the <a href=\"https://github.com/elm-tooling/elm-language-server?tab=readme-ov-file#server-settings\">full list of server settings here</a>.</p>\n\n</main>",
    "content_text": "Elm\nElm support is available through the Elm extension.\n\nTree-sitter: elm-tooling/tree-sitter-elm\nLanguage Server: elm-tooling/elm-language-server\n\nSetup\nZed support for Elm requires installation of elm, elm-format, and elm-review.\n\nInstall Elm (or run brew install elm on macOS).\nInstall elm-review to support code linting:\nnpm install elm-review --save-dev\n\n\nInstall elm-format to support automatic formatting\nnpm install -g elm-format\n\n\n\nConfiguring elm-language-server\nElm language server can be configured in your settings.json, e.g.:\n{\n  \"lsp\": {\n    \"elm-language-server\": {\n      \"initialization_options\": {\n        \"disableElmLSDiagnostics\": true,\n        \"onlyUpdateDiagnosticsOnSave\": false,\n        \"elmReviewDiagnostics\": \"warning\"\n      }\n    }\n  }\n}\n\nelm-format, elm-review and elm need to be installed and made available in the environment or configured in the settings. See the full list of server settings here.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:37"
  },
  "languages/emmet.html": {
    "url": "https://zed.dev/docs/languages/emmet.html",
    "title": "Emmet | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"emmet\"><a class=\"header\" href=\"#emmet\">Emmet</a></h1>\n<p>Emmet support is available through the <a href=\"https://github.com/zed-extensions/emmet\">Emmet extension</a>.</p>\n<p><a href=\"https://emmet.io/\">Emmet</a> is a web-developer’s toolkit that can greatly improve your HTML &amp; CSS workflow.</p>\n<ul>\n<li>Language Server: <a href=\"https://github.com/olrtg/emmet-language-server\">olrtg/emmet-language-server</a></li>\n</ul>\n<!--\nTBD: Document Emmet usage in zed with: HTML, PHP, ERB, Javascript, TSX, CSS\n-->\n\n</main>",
    "content_text": "Emmet\nEmmet support is available through the Emmet extension.\nEmmet is a web-developer’s toolkit that can greatly improve your HTML & CSS workflow.\n\nLanguage Server: olrtg/emmet-language-server",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:40"
  },
  "languages/erlang.html": {
    "url": "https://zed.dev/docs/languages/erlang.html",
    "title": "Erlang | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"erlang\"><a class=\"header\" href=\"#erlang\">Erlang</a></h1>\n<p>Erlang support is available through the <a href=\"https://github.com/zed-extensions/erlang\">Erlang extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/WhatsApp/tree-sitter-erlang\">WhatsApp/tree-sitter-erlang</a></li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/erlang-ls/erlang_ls\">erlang-ls/erlang_ls</a></li>\n<li><a href=\"https://github.com/WhatsApp/erlang-language-platform\">WhatsApp/erlang-language-platform</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"choosing-a-language-server\"><a class=\"header\" href=\"#choosing-a-language-server\">Choosing a language server</a></h2>\n<p>The Erlang extension offers language server support for <code>erlang_ls</code> and <code>erlang-language-platform</code>.</p>\n<p><code>erlang_ls</code> is enabled by default.</p>\n<p>To switch to <code>erlang-language-platform</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Erlang\": {\n      \"language_servers\": [\"elp\", \"!erlang-ls\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also:</a></h2>\n<ul>\n<li><a href=\"./elixir.html\">Elixir</a></li>\n<li><a href=\"./gleam.html\">Gleam</a></li>\n</ul>\n\n</main>",
    "content_text": "Erlang\nErlang support is available through the Erlang extension.\n\nTree-sitter: WhatsApp/tree-sitter-erlang\nLanguage Servers:\n\nerlang-ls/erlang_ls\nWhatsApp/erlang-language-platform\n\n\n\nChoosing a language server\nThe Erlang extension offers language server support for erlang_ls and erlang-language-platform.\nerlang_ls is enabled by default.\nTo switch to erlang-language-platform, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Erlang\": {\n      \"language_servers\": [\"elp\", \"!erlang-ls\", \"...\"]\n    }\n  }\n}\n\nSee also:\n\nElixir\nGleam",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:42"
  },
  "languages/fish.html": {
    "url": "https://zed.dev/docs/languages/fish.html",
    "title": "Fish | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"fish\"><a class=\"header\" href=\"#fish\">Fish</a></h1>\n<p>Fish language support in Zed is provided by the community-maintained <a href=\"https://github.com/hasit/zed-fish\">Fish extension</a>.\nReport issues to: <a href=\"https://github.com/hasit/zed-fish/issues\">https://github.com/hasit/zed-fish/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/ram02z/tree-sitter-fish\">ram02z/tree-sitter-fish</a></li>\n</ul>\n\n</main>",
    "content_text": "Fish\nFish language support in Zed is provided by the community-maintained Fish extension.\nReport issues to: https://github.com/hasit/zed-fish/issues\n\nTree-sitter: ram02z/tree-sitter-fish",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:46"
  },
  "languages/gdscript.html": {
    "url": "https://zed.dev/docs/languages/gdscript.html",
    "title": "GDScript | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"gdscript\"><a class=\"header\" href=\"#gdscript\">GDScript</a></h1>\n<p>Godot <a href=\"https://gdscript.com/\">GDScript</a> language support in Zed is provided by the community-maintained <a href=\"https://github.com/grndctrl/zed-gdscript\">GDScript extension</a>.\nReport issues to: <a href=\"https://github.com/grndctrl/zed-gdscript/issues\">https://github.com/grndctrl/zed-gdscript/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/PrestonKnopp/tree-sitter-gdscript\">PrestonKnopp/tree-sitter-gdscript</a> and <a href=\"https://github.com/PrestonKnopp/tree-sitter-godot-resource\">PrestonKnopp/tree-sitter-godot-resource</a></li>\n<li>Language Server: <a href=\"https://github.com/godotengine/godot\">gdscript-language-server</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<ol>\n<li>Download and install <a href=\"https://godotengine.org/download/macos/\">Godot for MacOS</a>.</li>\n<li>Unzip the Godot.app and drag it into your /Applications folder.</li>\n<li>Open Godot.app and open your project (an example project is fine)</li>\n<li>In Godot, Editor Menu -&gt; Editor Settings; scroll down the left sidebar to <code>Text Editor -&gt; External</code>\n<ol>\n<li>Use External Editor: \"✅ On\"</li>\n<li>Exec path: <code>/Applications/Zed.app/Contents/MacOS/zed</code></li>\n<li>Exec flags: <code>{project} {file}:{line}:{col}</code></li>\n<li>Close settings to save.</li>\n</ol>\n</li>\n<li>In Godot double click on a *.gd script and Zed will launch</li>\n</ol>\n<!--\nTBD: GDScript Linux setup\n-->\n<h2 id=\"usage\"><a class=\"header\" href=\"#usage\">Usage</a></h2>\n<p>When Godot is running, the GDScript extension will connect to the language server provided by the Godot runtime and will provide <code>jump to definition</code>, hover states when you hold cmd and other language server features.</p>\n<blockquote>\n<p>Note: If Zed is already running with an existing workspace, spawning from Godot will fail. Quit Zed and it should work again.</p>\n</blockquote>\n\n</main>",
    "content_text": "GDScript\nGodot GDScript language support in Zed is provided by the community-maintained GDScript extension.\nReport issues to: https://github.com/grndctrl/zed-gdscript/issues\n\nTree-sitter: PrestonKnopp/tree-sitter-gdscript and PrestonKnopp/tree-sitter-godot-resource\nLanguage Server: gdscript-language-server\n\nSetup\n\nDownload and install Godot for MacOS.\nUnzip the Godot.app and drag it into your /Applications folder.\nOpen Godot.app and open your project (an example project is fine)\nIn Godot, Editor Menu -> Editor Settings; scroll down the left sidebar to Text Editor -> External\n\nUse External Editor: \"✅ On\"\nExec path: /Applications/Zed.app/Contents/MacOS/zed\nExec flags: {project} {file}:{line}:{col}\nClose settings to save.\n\n\nIn Godot double click on a *.gd script and Zed will launch\n\n\nUsage\nWhen Godot is running, the GDScript extension will connect to the language server provided by the Godot runtime and will provide jump to definition, hover states when you hold cmd and other language server features.\n\nNote: If Zed is already running with an existing workspace, spawning from Godot will fail. Quit Zed and it should work again.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:48"
  },
  "languages/gleam.html": {
    "url": "https://zed.dev/docs/languages/gleam.html",
    "title": "Gleam | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"gleam\"><a class=\"header\" href=\"#gleam\">Gleam</a></h1>\n<p>Gleam support is available through the <a href=\"https://github.com/gleam-lang/zed-gleam\">Gleam extension</a>. To learn about Gleam, see the <a href=\"https://gleam.run/documentation/\">docs</a> or check out the <a href=\"https://hexdocs.pm/gleam_stdlib/\"><code>stdlib</code> reference</a>. The Gleam language server has a variety of features, including go-to definition, automatic imports, and <a href=\"https://gleam.run/language-server/\">more</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/gleam-lang/tree-sitter-gleam\">gleam-lang/tree-sitter-gleam</a></li>\n<li>Language Server: <a href=\"https://github.com/gleam-lang/gleam/tree/main/compiler-core/src/language_server\">gleam lsp</a></li>\n</ul>\n<p>See also:</p>\n<ul>\n<li><a href=\"./elixir.html\">Elixir</a></li>\n<li><a href=\"./erlang.html\">Erlang</a></li>\n</ul>\n\n</main>",
    "content_text": "Gleam\nGleam support is available through the Gleam extension. To learn about Gleam, see the docs or check out the stdlib reference. The Gleam language server has a variety of features, including go-to definition, automatic imports, and more.\n\nTree-sitter: gleam-lang/tree-sitter-gleam\nLanguage Server: gleam lsp\n\nSee also:\n\nElixir\nErlang",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:51"
  },
  "languages/glsl.html": {
    "url": "https://zed.dev/docs/languages/glsl.html",
    "title": "GLSL | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"glsl\"><a class=\"header\" href=\"#glsl\">GLSL</a></h1>\n<p>GLSL (OpenGL Shading Language) support is available through the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/glsl/\">GLSL Extension</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/theHamsta/tree-sitter-glsl\">theHamsta/tree-sitter-glsl</a></li>\n<li>Language Server: <a href=\"https://github.com/nolanderc/glsl_analyzer\">nolanderc/glsl_analyzer</a></li>\n</ul>\n\n</main>",
    "content_text": "GLSL\nGLSL (OpenGL Shading Language) support is available through the GLSL Extension\n\nTree-sitter: theHamsta/tree-sitter-glsl\nLanguage Server: nolanderc/glsl_analyzer",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:53"
  },
  "languages/go.html": {
    "url": "https://zed.dev/docs/languages/go.html",
    "title": "Go | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"go\"><a class=\"header\" href=\"#go\">Go</a></h1>\n<p>Go support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-go\">tree-sitter/tree-sitter-go</a></li>\n<li>Language Server: <a href=\"https://github.com/golang/tools/tree/master/gopls\">golang/tools/tree/master/gopls</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/go-delve/delve\">delve</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<p>We recommend installing gopls via go's package manager and not via Homebrew or your Linux distribution's package manager.</p>\n<ol>\n<li>Make sure you have uninstalled any version of gopls you have installed via your package manager:</li>\n</ol>\n<pre><code class=\"language-sh\"># MacOS homebrew\nbrew remove gopls\n# Ubuntu\nsudo apt-get remove gopls\nsudo snap remove gopls\n# Arch\nsudo pacman -R gopls\n</code></pre>\n<ol start=\"2\">\n<li>Install/Update <code>gopls</code> to the latest version using the go module tool:</li>\n</ol>\n<pre><code class=\"language-sh\">go install golang.org/x/tools/gopls@latest\n</code></pre>\n<ol start=\"3\">\n<li>Ensure that <code>gopls</code> is in your path:</li>\n</ol>\n<pre><code class=\"language-sh\">which gopls\ngopls version\n</code></pre>\n<p>If <code>gopls</code> is not found you will likely need to add <code>export PATH=\"$PATH:$HOME/go/bin\"</code> to your <code>.zshrc</code> / <code>.bash_profile</code></p>\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h2>\n<p>Zed sets the following initialization options for inlay hints:</p>\n<pre><code class=\"language-json\">\"hints\": {\n    \"assignVariableTypes\": true,\n    \"compositeLiteralFields\": true,\n    \"compositeLiteralTypes\": true,\n    \"constantValues\": true,\n    \"functionTypeParameters\": true,\n    \"parameterNames\": true,\n    \"rangeVariableTypes\": true\n}\n</code></pre>\n<p>to make the language server send back inlay hints when Zed has them enabled in the settings.</p>\n<p>Use</p>\n<pre><code class=\"language-json\">\"lsp\": {\n    \"gopls\": {\n        \"initialization_options\": {\n            \"hints\": {\n                ....\n            }\n        }\n    }\n}\n</code></pre>\n<p>to override these settings.</p>\n<p>See <a href=\"https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md\">gopls inlayHints documentation</a> for more information.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports zero-configuration debugging of Go tests and entry points (<code>func main</code>). Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list of these preconfigured debug tasks.</p>\n<p>For more control, you can add debug configurations to <code>.zed/debug.json</code>. See below for examples.</p>\n<h3 id=\"debug-go-packages\"><a class=\"header\" href=\"#debug-go-packages\">Debug Go Packages</a></h3>\n<p>To debug a specific package, you can do so by setting the Delve mode to \"debug\". In this case \"program\" should be set to the package name.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Go (Delve)\",\n    \"adapter\": \"Delve\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\"\n  },\n  {\n    \"label\": \"Run server\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    // For Delve, the program can be a package name\n    \"program\": \"./cmd/server\"\n    // \"args\": [],\n    // \"buildFlags\": [],\n  }\n]\n</code></pre>\n<h3 id=\"debug-go-tests\"><a class=\"header\" href=\"#debug-go-tests\">Debug Go Tests</a></h3>\n<p>To debug the tests for a package, set the Delve mode to \"test\".\nThe \"program\" is still the package name, and you can use the \"buildFlags\" to do things like set tags, and the \"args\" to set args on the test binary. (See <code>go help testflags</code> for more information on doing that).</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Run integration tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"program\": \".\",\n    \"buildFlags\": [\"-tags\", \"integration\"]\n    // To filter down to just the test your cursor is in:\n    // \"args\": [\"-test.run\", \"$ZED_SYMBOL\"]\n  }\n]\n</code></pre>\n<h3 id=\"build-and-debug-separately\"><a class=\"header\" href=\"#build-and-debug-separately\">Build and debug separately</a></h3>\n<p>If you need to build your application with a specific command, you can use the \"exec\" mode of Delve. In this case \"program\" should point to an executable,\nand the \"build\" command should build that.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug Prebuilt Unit Tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"program\": \"${ZED_WORKTREE_ROOT}/__debug_unit\",\n    \"args\": [\"-test.v\", \"-test.run=${ZED_SYMBOL}\"],\n    \"build\": {\n      \"command\": \"go\",\n      \"args\": [\n        \"test\",\n        \"-c\",\n        \"-tags\",\n        \"unit\",\n        \"-gcflags\\\"all=-N -l\\\"\",\n        \"-o\",\n        \"__debug_unit\",\n        \"./pkg/...\"\n      ]\n    }\n  }\n]\n</code></pre>\n<h3 id=\"attaching-to-an-existing-instance-of-delve\"><a class=\"header\" href=\"#attaching-to-an-existing-instance-of-delve\">Attaching to an existing instance of Delve</a></h3>\n<p>You might find yourself needing to connect to an existing instance of Delve that's not necessarily running on your machine; in such case, you can use <code>tcp_arguments</code> to instrument Zed's connection to Delve.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"Delve\",\n    \"label\": \"Connect to a running Delve instance\",\n    \"program\": \"/Users/zed/Projects/language_repositories/golang/hello/hello\",\n    \"cwd\": \"/Users/zed/Projects/language_repositories/golang/hello\",\n    \"args\": [],\n    \"env\": {},\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"stopOnEntry\": false,\n    \"tcp_connection\": { \"host\": \"123.456.789.012\", \"port\": 53412 }\n  }\n]\n</code></pre>\n<p>In such case Zed won't spawn a new instance of Delve, as it opts to use an existing one. The consequence of this is that <em>there will be no terminal</em> in Zed; you have to interact with the Delve instance directly, as it handles stdin/stdout of the debuggee.</p>\n<h2 id=\"go-mod\"><a class=\"header\" href=\"#go-mod\">Go Mod</a></h2>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/camdencheek/tree-sitter-go-mod\">camdencheek/tree-sitter-go-mod</a></li>\n<li>Language Server: N/A</li>\n</ul>\n<h2 id=\"go-sum\"><a class=\"header\" href=\"#go-sum\">Go Sum</a></h2>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/amaanq/tree-sitter-go-sum\">amaanq/tree-sitter-go-sum</a></li>\n<li>Language Server: N/A</li>\n</ul>\n<h2 id=\"go-work\"><a class=\"header\" href=\"#go-work\">Go Work</a></h2>\n<ul>\n<li>Tree-sitter:\n<a href=\"https://github.com/d1y/tree-sitter-go-work\">tree-sitter-go-work</a></li>\n<li>Language Server: N/A</li>\n</ul>\n\n</main>",
    "content_text": "Go\nGo support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-go\nLanguage Server: golang/tools/tree/master/gopls\nDebug Adapter: delve\n\nSetup\nWe recommend installing gopls via go's package manager and not via Homebrew or your Linux distribution's package manager.\n\nMake sure you have uninstalled any version of gopls you have installed via your package manager:\n\n# MacOS homebrew\nbrew remove gopls\n# Ubuntu\nsudo apt-get remove gopls\nsudo snap remove gopls\n# Arch\nsudo pacman -R gopls\n\n\nInstall/Update gopls to the latest version using the go module tool:\n\ngo install golang.org/x/tools/gopls@latest\n\n\nEnsure that gopls is in your path:\n\nwhich gopls\ngopls version\n\nIf gopls is not found you will likely need to add export PATH=\"$PATH:$HOME/go/bin\" to your .zshrc / .bash_profile\nInlay Hints\nZed sets the following initialization options for inlay hints:\n\"hints\": {\n    \"assignVariableTypes\": true,\n    \"compositeLiteralFields\": true,\n    \"compositeLiteralTypes\": true,\n    \"constantValues\": true,\n    \"functionTypeParameters\": true,\n    \"parameterNames\": true,\n    \"rangeVariableTypes\": true\n}\n\nto make the language server send back inlay hints when Zed has them enabled in the settings.\nUse\n\"lsp\": {\n    \"gopls\": {\n        \"initialization_options\": {\n            \"hints\": {\n                ....\n            }\n        }\n    }\n}\n\nto override these settings.\nSee gopls inlayHints documentation for more information.\nDebugging\nZed supports zero-configuration debugging of Go tests and entry points (func main). Run debugger: start (f4|f4) to see a contextual list of these preconfigured debug tasks.\nFor more control, you can add debug configurations to .zed/debug.json. See below for examples.\nDebug Go Packages\nTo debug a specific package, you can do so by setting the Delve mode to \"debug\". In this case \"program\" should be set to the package name.\n[\n  {\n    \"label\": \"Go (Delve)\",\n    \"adapter\": \"Delve\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\"\n  },\n  {\n    \"label\": \"Run server\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    // For Delve, the program can be a package name\n    \"program\": \"./cmd/server\"\n    // \"args\": [],\n    // \"buildFlags\": [],\n  }\n]\n\nDebug Go Tests\nTo debug the tests for a package, set the Delve mode to \"test\".\nThe \"program\" is still the package name, and you can use the \"buildFlags\" to do things like set tags, and the \"args\" to set args on the test binary. (See go help testflags for more information on doing that).\n[\n  {\n    \"label\": \"Run integration tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"program\": \".\",\n    \"buildFlags\": [\"-tags\", \"integration\"]\n    // To filter down to just the test your cursor is in:\n    // \"args\": [\"-test.run\", \"$ZED_SYMBOL\"]\n  }\n]\n\nBuild and debug separately\nIf you need to build your application with a specific command, you can use the \"exec\" mode of Delve. In this case \"program\" should point to an executable,\nand the \"build\" command should build that.\n[\n  {\n    \"label\": \"Debug Prebuilt Unit Tests\",\n    \"adapter\": \"Delve\",\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"program\": \"${ZED_WORKTREE_ROOT}/__debug_unit\",\n    \"args\": [\"-test.v\", \"-test.run=${ZED_SYMBOL}\"],\n    \"build\": {\n      \"command\": \"go\",\n      \"args\": [\n        \"test\",\n        \"-c\",\n        \"-tags\",\n        \"unit\",\n        \"-gcflags\\\"all=-N -l\\\"\",\n        \"-o\",\n        \"__debug_unit\",\n        \"./pkg/...\"\n      ]\n    }\n  }\n]\n\nAttaching to an existing instance of Delve\nYou might find yourself needing to connect to an existing instance of Delve that's not necessarily running on your machine; in such case, you can use tcp_arguments to instrument Zed's connection to Delve.\n[\n  {\n    \"adapter\": \"Delve\",\n    \"label\": \"Connect to a running Delve instance\",\n    \"program\": \"/Users/zed/Projects/language_repositories/golang/hello/hello\",\n    \"cwd\": \"/Users/zed/Projects/language_repositories/golang/hello\",\n    \"args\": [],\n    \"env\": {},\n    \"request\": \"launch\",\n    \"mode\": \"exec\",\n    \"stopOnEntry\": false,\n    \"tcp_connection\": { \"host\": \"123.456.789.012\", \"port\": 53412 }\n  }\n]\n\nIn such case Zed won't spawn a new instance of Delve, as it opts to use an existing one. The consequence of this is that there will be no terminal in Zed; you have to interact with the Delve instance directly, as it handles stdin/stdout of the debuggee.\nGo Mod\n\nTree-sitter: camdencheek/tree-sitter-go-mod\nLanguage Server: N/A\n\nGo Sum\n\nTree-sitter: amaanq/tree-sitter-go-sum\nLanguage Server: N/A\n\nGo Work\n\nTree-sitter:\ntree-sitter-go-work\nLanguage Server: N/A",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:56"
  },
  "languages/groovy.html": {
    "url": "https://zed.dev/docs/languages/groovy.html",
    "title": "Groovy | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"groovy\"><a class=\"header\" href=\"#groovy\">Groovy</a></h1>\n<p>Groovy language support in Zed is provided by the community-maintained <a href=\"https://github.com/valentinegb/zed-groovy\">Groovy extension</a>.\nReport issues to: <a href=\"https://github.com/valentinegb/zed-groovy/issues\">https://github.com/valentinegb/zed-groovy/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/murtaza64/tree-sitter-groovy\">murtaza64/tree-sitter-groovy</a></li>\n<li>Language Server: <a href=\"https://github.com/GroovyLanguageServer/groovy-language-server\">GroovyLanguageServer/groovy-language-server</a></li>\n</ul>\n\n</main>",
    "content_text": "Groovy\nGroovy language support in Zed is provided by the community-maintained Groovy extension.\nReport issues to: https://github.com/valentinegb/zed-groovy/issues\n\nTree-sitter: murtaza64/tree-sitter-groovy\nLanguage Server: GroovyLanguageServer/groovy-language-server",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:13:58"
  },
  "languages/haskell.html": {
    "url": "https://zed.dev/docs/languages/haskell.html",
    "title": "Haskell | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"haskell\"><a class=\"header\" href=\"#haskell\">Haskell</a></h1>\n<p>Haskell support is available through the <a href=\"https://github.com/zed-extensions/haskell\">Haskell extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-haskell\">tree-sitter-haskell</a></li>\n<li>Language Server: <a href=\"https://github.com/haskell/haskell-language-server\">haskell-language-server</a></li>\n</ul>\n<h2 id=\"installing-hls\"><a class=\"header\" href=\"#installing-hls\">Installing HLS</a></h2>\n<p>Recommended method to <a href=\"https://haskell-language-server.readthedocs.io/en/latest/installation.html\">install haskell-language-server</a> (HLS) is via <a href=\"https://www.haskell.org/ghcup/install/\">ghcup</a> (<code>curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh </code>):</p>\n<pre><code class=\"language-sh\">ghcup install hls\nwhich haskell-language-server-wrapper\n</code></pre>\n<h2 id=\"configuring-hls\"><a class=\"header\" href=\"#configuring-hls\">Configuring HLS</a></h2>\n<p>If you need to configure haskell-language-server (hls) you can add configuration options to your Zed settings.json:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"hls\": {\n      \"initialization_options\": {\n        \"haskell\": {\n          \"formattingProvider\": \"fourmolu\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>See the official <a href=\"https://haskell-language-server.readthedocs.io/en/latest/configuration.html\">configuring haskell-language-server</a> docs for more options.</p>\n<p>If you would like to use a specific hls binary, or perhaps use <a href=\"https://github.com/josephsumabat/static-ls\">static-ls</a> as a drop-in replacement instead, you can specify the binary path and arguments:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"hls\": {\n      \"binary\": {\n        \"path\": \"static-ls\",\n        \"arguments\": [\"--experimentalFeatures\"]\n      }\n    }\n  }\n}\n</code></pre>\n\n</main>",
    "content_text": "Haskell\nHaskell support is available through the Haskell extension.\n\nTree-sitter: tree-sitter-haskell\nLanguage Server: haskell-language-server\n\nInstalling HLS\nRecommended method to install haskell-language-server (HLS) is via ghcup (curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh ):\nghcup install hls\nwhich haskell-language-server-wrapper\n\nConfiguring HLS\nIf you need to configure haskell-language-server (hls) you can add configuration options to your Zed settings.json:\n{\n  \"lsp\": {\n    \"hls\": {\n      \"initialization_options\": {\n        \"haskell\": {\n          \"formattingProvider\": \"fourmolu\"\n        }\n      }\n    }\n  }\n}\n\nSee the official configuring haskell-language-server docs for more options.\nIf you would like to use a specific hls binary, or perhaps use static-ls as a drop-in replacement instead, you can specify the binary path and arguments:\n{\n  \"lsp\": {\n    \"hls\": {\n      \"binary\": {\n        \"path\": \"static-ls\",\n        \"arguments\": [\"--experimentalFeatures\"]\n      }\n    }\n  }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:01"
  },
  "languages/helm.html": {
    "url": "https://zed.dev/docs/languages/helm.html",
    "title": "Helm | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"helm\"><a class=\"header\" href=\"#helm\">Helm</a></h1>\n<p>Support for Helm in Zed is provided by the community-maintained <a href=\"https://github.com/cabrinha/helm.zed\">Helm extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/ngalaiko/tree-sitter-go-template/tree/master\">tree-sitter-go-template</a></li>\n<li>Language Server: <a href=\"https://github.com/mrjosh/helm-ls\">mrjosh/helm-ls</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<p>Enable Helm language for Helm files by editing your <code>.zed/settings.json</code> and adding:</p>\n<pre><code class=\"language-json\">  \"file_types\": {\n    \"Helm\": [\n      \"**/templates/**/*.tpl\",\n      \"**/templates/**/*.yaml\",\n      \"**/templates/**/*.yml\",\n      \"**/helmfile.d/**/*.yaml\",\n      \"**/helmfile.d/**/*.yml\",\n      \"**/values*.yaml\"\n    ]\n  }\n</code></pre>\n<p>This will also mark values.yaml files as the type helm, since helm-ls supports this.</p>\n\n</main>",
    "content_text": "Helm\nSupport for Helm in Zed is provided by the community-maintained Helm extension.\n\nTree-sitter: tree-sitter-go-template\nLanguage Server: mrjosh/helm-ls\n\nSetup\nEnable Helm language for Helm files by editing your .zed/settings.json and adding:\n  \"file_types\": {\n    \"Helm\": [\n      \"**/templates/**/*.tpl\",\n      \"**/templates/**/*.yaml\",\n      \"**/templates/**/*.yml\",\n      \"**/helmfile.d/**/*.yaml\",\n      \"**/helmfile.d/**/*.yml\",\n      \"**/values*.yaml\"\n    ]\n  }\n\nThis will also mark values.yaml files as the type helm, since helm-ls supports this.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:03"
  },
  "languages/html.html": {
    "url": "https://zed.dev/docs/languages/html.html",
    "title": "HTML | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"html\"><a class=\"header\" href=\"#html\">HTML</a></h1>\n<p>HTML support is available through the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/html\">HTML extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-html\">tree-sitter/tree-sitter-html</a></li>\n<li>Language Server: <a href=\"https://github.com/microsoft/vscode-html-languageservice\">microsoft/vscode-html-languageservice</a></li>\n</ul>\n<p>This extension is automatically installed, but if you do not want to use it, you can add the following to your settings:</p>\n<pre><code class=\"language-json\">{\n  \"auto_install_extensions\": {\n    \"html\": false\n  }\n}\n</code></pre>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>By default Zed uses <a href=\"https://prettier.io/\">Prettier</a> for formatting HTML.</p>\n<p>You can disable <code>format_on_save</code> by adding the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"HTML\": {\n      \"format_on_save\": \"off\",\n    }\n  }\n</code></pre>\n<p>You can still trigger formatting manually with <kbd class=\"keybinding\">cmd-shift-i|ctrl-shift-i</kbd> or by opening <a href=\"..//getting-started.html#command-palette\">the Command Palette</a> (<kbd class=\"keybinding\">cmd-shift-p|ctrl-shift-p</kbd>) and selecting \"Format Document\".</p>\n<h3 id=\"lsp-formatting\"><a class=\"header\" href=\"#lsp-formatting\">LSP Formatting</a></h3>\n<p>To use the <code>vscode-html-language-server</code> language server auto-formatting instead of Prettier, add the following to your Zed settings:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"HTML\": {\n      \"formatter\": \"language_server\",\n    }\n  }\n</code></pre>\n<p>You can customize various <a href=\"https://code.visualstudio.com/docs/languages/html#_formatting\">formatting options</a> for <code>vscode-html-language-server</code> via your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"vscode-html-language-server\": {\n      \"settings\": {\n        \"html\": {\n          \"format\": {\n            // Indent under &lt;html&gt; and &lt;head&gt; (default: false)\n            \"indentInnerHtml\": true,\n            // Disable formatting inside &lt;svg&gt; or &lt;script&gt;\n            \"contentUnformatted\": \"svg,script\",\n            // Add an extra newline before &lt;div&gt; and &lt;p&gt;\n            \"extraLiners\": \"div,p\"\n          }\n        }\n      }\n    }\n  }\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"./css.html\">CSS</a></li>\n<li><a href=\"./javascript.html\">JavaScript</a></li>\n<li><a href=\"./typescript.html\">TypeScript</a></li>\n</ul>\n\n</main>",
    "content_text": "HTML\nHTML support is available through the HTML extension.\n\nTree-sitter: tree-sitter/tree-sitter-html\nLanguage Server: microsoft/vscode-html-languageservice\n\nThis extension is automatically installed, but if you do not want to use it, you can add the following to your settings:\n{\n  \"auto_install_extensions\": {\n    \"html\": false\n  }\n}\n\nFormatting\nBy default Zed uses Prettier for formatting HTML.\nYou can disable format_on_save by adding the following to your Zed settings.json:\n  \"languages\": {\n    \"HTML\": {\n      \"format_on_save\": \"off\",\n    }\n  }\n\nYou can still trigger formatting manually with cmd-shift-i|ctrl-shift-i or by opening the Command Palette (cmd-shift-p|ctrl-shift-p) and selecting \"Format Document\".\nLSP Formatting\nTo use the vscode-html-language-server language server auto-formatting instead of Prettier, add the following to your Zed settings:\n  \"languages\": {\n    \"HTML\": {\n      \"formatter\": \"language_server\",\n    }\n  }\n\nYou can customize various formatting options for vscode-html-language-server via your Zed settings.json:\n  \"lsp\": {\n    \"vscode-html-language-server\": {\n      \"settings\": {\n        \"html\": {\n          \"format\": {\n            // Indent under <html> and <head> (default: false)\n            \"indentInnerHtml\": true,\n            // Disable formatting inside <svg> or <script>\n            \"contentUnformatted\": \"svg,script\",\n            // Add an extra newline before <div> and <p>\n            \"extraLiners\": \"div,p\"\n          }\n        }\n      }\n    }\n  }\n\nSee also\n\nCSS\nJavaScript\nTypeScript",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:05"
  },
  "languages/java.html": {
    "url": "https://zed.dev/docs/languages/java.html",
    "title": "Java | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"java\"><a class=\"header\" href=\"#java\">Java</a></h1>\n<p>Java language support in Zed is provided by:</p>\n<ul>\n<li>Zed Java: <a href=\"https://github.com/zed-extensions/java\">zed-extensions/java</a></li>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-java\">tree-sitter/tree-sitter-java</a></li>\n<li>Language Server: <a href=\"https://github.com/eclipse-jdtls/eclipse.jdt.ls\">eclipse-jdtls/eclipse.jdt.ls</a></li>\n</ul>\n<h2 id=\"install-openjdk\"><a class=\"header\" href=\"#install-openjdk\">Install OpenJDK</a></h2>\n<p>You will need to install a Java runtime (OpenJDK).</p>\n<ul>\n<li>MacOS: <code>brew install openjdk</code></li>\n<li>Ubuntu: <code>sudo add-apt-repository ppa:openjdk-23 &amp;&amp; sudo apt-get install openjdk-23</code></li>\n<li>Windows: <code>choco install openjdk</code></li>\n<li>Arch Linux: <code>sudo pacman -S jre-openjdk-headless</code></li>\n</ul>\n<p>Or manually download and install <a href=\"https://jdk.java.net/23/\">OpenJDK 23</a>.</p>\n<h2 id=\"extension-install\"><a class=\"header\" href=\"#extension-install\">Extension Install</a></h2>\n<p>You can install either by opening <code class=\"hljs\">zed: extensions</code>(<kbd class=\"keybinding\">cmd-shift-x|ctrl-shift-x</kbd>) and searching for <code>java</code>.</p>\n<h2 id=\"settings--initialization-options\"><a class=\"header\" href=\"#settings--initialization-options\">Settings / Initialization Options</a></h2>\n<p>The extension will automatically download the language server, see: <a href=\"#manual-jdts-install\">Manual JDTLS Install</a> below if you'd prefer to manage that yourself.</p>\n<p>For available <code>initialization_options</code> please see the <a href=\"https://github.com/eclipse-jdtls/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request\">Initialize Request section of the Eclipse.jdt.ls Wiki</a>.</p>\n<p>You can add these customizations to your Zed Settings by launching <code class=\"hljs\">zed: open settings</code>(<kbd class=\"keybinding\">cmd-,|ctrl-,</kbd>) or by using a <code>.zed/setting.json</code> inside your project.</p>\n<h3 id=\"zed-java-settings\"><a class=\"header\" href=\"#zed-java-settings\">Zed Java Settings</a></h3>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {}\n    }\n  }\n}\n</code></pre>\n<h2 id=\"example-configs\"><a class=\"header\" href=\"#example-configs\">Example Configs</a></h2>\n<h3 id=\"jdtls-binary\"><a class=\"header\" href=\"#jdtls-binary\">JDTLS Binary</a></h3>\n<p>By default, zed will look in your <code>PATH</code> for a <code>jdtls</code> binary, if you wish to specify an explicit binary you can do so via settings:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"jdtls\": {\n      \"binary\": {\n        \"path\": \"/path/to/java/bin/jdtls\",\n        // \"arguments\": [],\n        // \"env\": {},\n        \"ignore_system_version\": true\n      }\n    }\n  }\n</code></pre>\n<h3 id=\"zed-java-initialization-options\"><a class=\"header\" href=\"#zed-java-initialization-options\">Zed Java Initialization Options</a></h3>\n<p>There are also many more options you can pass directly to the language server, for example:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {\n        \"bundles\": [],\n        \"workspaceFolders\": [\"file:///home/snjeza/Project\"],\n        \"settings\": {\n          \"java\": {\n            \"home\": \"/usr/local/jdk-9.0.1\",\n            \"errors\": {\n              \"incompleteClasspath\": {\n                \"severity\": \"warning\"\n              }\n            },\n            \"configuration\": {\n              \"updateBuildConfiguration\": \"interactive\",\n              \"maven\": {\n                \"userSettings\": null\n              }\n            },\n            \"trace\": {\n              \"server\": \"verbose\"\n            },\n            \"import\": {\n              \"gradle\": {\n                \"enabled\": true\n              },\n              \"maven\": {\n                \"enabled\": true\n              },\n              \"exclusions\": [\n                \"**/node_modules/**\",\n                \"**/.metadata/**\",\n                \"**/archetype-resources/**\",\n                \"**/META-INF/maven/**\",\n                \"/**/test/**\"\n              ]\n            },\n            \"jdt\": {\n              \"ls\": {\n                \"lombokSupport\": {\n                  \"enabled\": false // Set this to true to enable lombok support\n                }\n              }\n            },\n            \"referencesCodeLens\": {\n              \"enabled\": false\n            },\n            \"signatureHelp\": {\n              \"enabled\": false\n            },\n            \"implementationsCodeLens\": {\n              \"enabled\": false\n            },\n            \"format\": {\n              \"enabled\": true\n            },\n            \"saveActions\": {\n              \"organizeImports\": false\n            },\n            \"contentProvider\": {\n              \"preferred\": null\n            },\n            \"autobuild\": {\n              \"enabled\": false\n            },\n            \"completion\": {\n              \"favoriteStaticMembers\": [\n                \"org.junit.Assert.*\",\n                \"org.junit.Assume.*\",\n                \"org.junit.jupiter.api.Assertions.*\",\n                \"org.junit.jupiter.api.Assumptions.*\",\n                \"org.junit.jupiter.api.DynamicContainer.*\",\n                \"org.junit.jupiter.api.DynamicTest.*\"\n              ],\n              \"importOrder\": [\"java\", \"javax\", \"com\", \"org\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"manual-jdtls-install\"><a class=\"header\" href=\"#manual-jdtls-install\">Manual JDTLS Install</a></h2>\n<p>If you prefer, you can install JDTLS yourself and the extension can be configured to use that instead.</p>\n<ul>\n<li>MacOS: <code>brew install jdtls</code></li>\n<li>Arch: <a href=\"https://aur.archlinux.org/packages/jdtls\"><code>jdtls</code> from AUR</a></li>\n</ul>\n<p>Or manually download install:</p>\n<ul>\n<li><a href=\"http://download.eclipse.org/jdtls/milestones/\">JDTLS Milestone Builds</a> (updated every two weeks)</li>\n<li><a href=\"https://download.eclipse.org/jdtls/snapshots/\">JDTLS Snapshot Builds</a> (frequent updates)</li>\n</ul>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"https://github.com/zed-extensions/java\">Zed Java Repo</a></li>\n<li><a href=\"https://github.com/zed-extensions/java/issues\">Zed Java Issues</a></li>\n</ul>\n\n</main>",
    "content_text": "Java\nJava language support in Zed is provided by:\n\nZed Java: zed-extensions/java\nTree-sitter: tree-sitter/tree-sitter-java\nLanguage Server: eclipse-jdtls/eclipse.jdt.ls\n\nInstall OpenJDK\nYou will need to install a Java runtime (OpenJDK).\n\nMacOS: brew install openjdk\nUbuntu: sudo add-apt-repository ppa:openjdk-23 && sudo apt-get install openjdk-23\nWindows: choco install openjdk\nArch Linux: sudo pacman -S jre-openjdk-headless\n\nOr manually download and install OpenJDK 23.\nExtension Install\nYou can install either by opening zed: extensions(cmd-shift-x|ctrl-shift-x) and searching for java.\nSettings / Initialization Options\nThe extension will automatically download the language server, see: Manual JDTLS Install below if you'd prefer to manage that yourself.\nFor available initialization_options please see the Initialize Request section of the Eclipse.jdt.ls Wiki.\nYou can add these customizations to your Zed Settings by launching zed: open settings(cmd-,|ctrl-,) or by using a .zed/setting.json inside your project.\nZed Java Settings\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {}\n    }\n  }\n}\n\nExample Configs\nJDTLS Binary\nBy default, zed will look in your PATH for a jdtls binary, if you wish to specify an explicit binary you can do so via settings:\n  \"lsp\": {\n    \"jdtls\": {\n      \"binary\": {\n        \"path\": \"/path/to/java/bin/jdtls\",\n        // \"arguments\": [],\n        // \"env\": {},\n        \"ignore_system_version\": true\n      }\n    }\n  }\n\nZed Java Initialization Options\nThere are also many more options you can pass directly to the language server, for example:\n{\n  \"lsp\": {\n    \"jdtls\": {\n      \"initialization_options\": {\n        \"bundles\": [],\n        \"workspaceFolders\": [\"file:///home/snjeza/Project\"],\n        \"settings\": {\n          \"java\": {\n            \"home\": \"/usr/local/jdk-9.0.1\",\n            \"errors\": {\n              \"incompleteClasspath\": {\n                \"severity\": \"warning\"\n              }\n            },\n            \"configuration\": {\n              \"updateBuildConfiguration\": \"interactive\",\n              \"maven\": {\n                \"userSettings\": null\n              }\n            },\n            \"trace\": {\n              \"server\": \"verbose\"\n            },\n            \"import\": {\n              \"gradle\": {\n                \"enabled\": true\n              },\n              \"maven\": {\n                \"enabled\": true\n              },\n              \"exclusions\": [\n                \"**/node_modules/**\",\n                \"**/.metadata/**\",\n                \"**/archetype-resources/**\",\n                \"**/META-INF/maven/**\",\n                \"/**/test/**\"\n              ]\n            },\n            \"jdt\": {\n              \"ls\": {\n                \"lombokSupport\": {\n                  \"enabled\": false // Set this to true to enable lombok support\n                }\n              }\n            },\n            \"referencesCodeLens\": {\n              \"enabled\": false\n            },\n            \"signatureHelp\": {\n              \"enabled\": false\n            },\n            \"implementationsCodeLens\": {\n              \"enabled\": false\n            },\n            \"format\": {\n              \"enabled\": true\n            },\n            \"saveActions\": {\n              \"organizeImports\": false\n            },\n            \"contentProvider\": {\n              \"preferred\": null\n            },\n            \"autobuild\": {\n              \"enabled\": false\n            },\n            \"completion\": {\n              \"favoriteStaticMembers\": [\n                \"org.junit.Assert.*\",\n                \"org.junit.Assume.*\",\n                \"org.junit.jupiter.api.Assertions.*\",\n                \"org.junit.jupiter.api.Assumptions.*\",\n                \"org.junit.jupiter.api.DynamicContainer.*\",\n                \"org.junit.jupiter.api.DynamicTest.*\"\n              ],\n              \"importOrder\": [\"java\", \"javax\", \"com\", \"org\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nManual JDTLS Install\nIf you prefer, you can install JDTLS yourself and the extension can be configured to use that instead.\n\nMacOS: brew install jdtls\nArch: jdtls from AUR\n\nOr manually download install:\n\nJDTLS Milestone Builds (updated every two weeks)\nJDTLS Snapshot Builds (frequent updates)\n\nSee also\n\nZed Java Repo\nZed Java Issues",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:08"
  },
  "languages/javascript.html": {
    "url": "https://zed.dev/docs/languages/javascript.html",
    "title": "JavaScript | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"javascript\"><a class=\"header\" href=\"#javascript\">JavaScript</a></h1>\n<p>JavaScript support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-javascript\">tree-sitter/tree-sitter-javascript</a></li>\n<li>Language Server: <a href=\"https://github.com/typescript-language-server/typescript-language-server\">typescript-language-server/typescript-language-server</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/microsoft/vscode-js-debug\">vscode-js-debug</a></li>\n</ul>\n<h2 id=\"code-formatting\"><a class=\"header\" href=\"#code-formatting\">Code formatting</a></h2>\n<p>Formatting on save is enabled by default for JavaScript, using TypeScript's built-in code formatting.\nBut many JavaScript projects use other command-line code-formatting tools, such as <a href=\"https://prettier.io/\">Prettier</a>.\nYou can use one of these tools by specifying an <em>external</em> code formatter for JavaScript in your settings.\nSee <a href=\"../configuring-zed.html\">the configuration docs</a> for more information.</p>\n<p>For example, if you have Prettier installed and on your <code>PATH</code>, you can use it to format JavaScript files by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"prettier\",\n          \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"jsx\"><a class=\"header\" href=\"#jsx\">JSX</a></h2>\n<p>Zed supports JSX syntax highlighting out of the box.</p>\n<p>In JSX strings, the <a href=\"./tailwindcss.html\"><code>tailwindcss-language-server</code></a> is used provide autocompletion for Tailwind CSS classes.</p>\n<h2 id=\"jsdoc\"><a class=\"header\" href=\"#jsdoc\">JSDoc</a></h2>\n<p>Zed supports JSDoc syntax in JavaScript and TypeScript comments that match the JSDoc syntax.\nZed uses <a href=\"https://github.com/tree-sitter/tree-sitter-jsdoc\">tree-sitter/tree-sitter-jsdoc</a> for parsing and highlighting JSDoc.</p>\n<h2 id=\"eslint\"><a class=\"header\" href=\"#eslint\">ESLint</a></h2>\n<p>You can configure Zed to format code using <code>eslint --fix</code> by running the ESLint code action when formatting:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can also only execute a single ESLint rule when using <code>fixAll</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> the other formatter you have configured will still run, after ESLint.\nSo if your language server or Prettier configuration don't format according to\nESLint's rules, then they will overwrite what ESLint fixed and you end up with\nerrors.</p>\n</blockquote>\n<p>If you <strong>only</strong> want to run ESLint on save, you can configure code actions as\nthe formatter:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"code_actions\": {\n          \"source.fixAll.eslint\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-nodepath\"><a class=\"header\" href=\"#configure-eslints-nodepath\">Configure ESLint's <code>nodePath</code>:</a></h3>\n<p>You can configure ESLint's <code>nodePath</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"nodePath\": \".yarn/sdks\"\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-problems\"><a class=\"header\" href=\"#configure-eslints-problems\">Configure ESLint's <code>problems</code>:</a></h3>\n<p>You can configure ESLint's <code>problems</code> setting.</p>\n<p>For example, here's how to set <code>problems.shortenToSingleLine</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"problems\": {\n          \"shortenToSingleLine\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-rulescustomizations\"><a class=\"header\" href=\"#configure-eslints-rulescustomizations\">Configure ESLint's <code>rulesCustomizations</code>:</a></h3>\n<p>You can configure ESLint's <code>rulesCustomizations</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"rulesCustomizations\": [\n          // set all eslint errors/warnings to show as warnings\n          { \"rule\": \"*\", \"severity\": \"warn\" }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-workingdirectory\"><a class=\"header\" href=\"#configure-eslints-workingdirectory\">Configure ESLint's <code>workingDirectory</code>:</a></h3>\n<p>You can configure ESLint's <code>workingDirectory</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"workingDirectory\": {\n          \"mode\": \"auto\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports debugging JavaScript code out of the box.\nThe following can be debugged without writing additional configuration:</p>\n<ul>\n<li>Tasks from <code>package.json</code></li>\n<li>Tests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)</li>\n</ul>\n<p>Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list of these predefined debug tasks.</p>\n<p>As for all languages, configurations from <code>.vscode/launch.json</code> are also available for debugging in Zed.</p>\n<p>If your use-case isn't covered by any of these, you can take full control by adding debug configurations to <code>.zed/debug.json</code>. See below for example configurations.</p>\n<h3 id=\"debug-the-current-file\"><a class=\"header\" href=\"#debug-the-current-file\">Debug the current file</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug JS file\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"$ZED_FILE\",\n    \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n  }\n]\n</code></pre>\n<p>This implicitly runs the current file using <code>node</code>.</p>\n<h3 id=\"launch-a-web-app-in-chrome\"><a class=\"header\" href=\"#launch-a-web-app-in-chrome\">Launch a web app in Chrome</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug app in Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"file\": \"$ZED_WORKTREE_ROOT/index.html\",\n    \"webRoot\": \"$ZED_WORKTREE_ROOT\",\n    \"console\": \"integratedTerminal\",\n    \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n  }\n]\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"./yarn.html\">Yarn documentation</a> for a walkthrough of configuring your project to use Yarn.</li>\n<li><a href=\"./typescript.html\">TypeScript documentation</a></li>\n</ul>\n\n</main>",
    "content_text": "JavaScript\nJavaScript support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-javascript\nLanguage Server: typescript-language-server/typescript-language-server\nDebug Adapter: vscode-js-debug\n\nCode formatting\nFormatting on save is enabled by default for JavaScript, using TypeScript's built-in code formatting.\nBut many JavaScript projects use other command-line code-formatting tools, such as Prettier.\nYou can use one of these tools by specifying an external code formatter for JavaScript in your settings.\nSee the configuration docs for more information.\nFor example, if you have Prettier installed and on your PATH, you can use it to format JavaScript files by adding the following to your settings.json:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"prettier\",\n          \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n        }\n      }\n    }\n  }\n}\n\nJSX\nZed supports JSX syntax highlighting out of the box.\nIn JSX strings, the tailwindcss-language-server is used provide autocompletion for Tailwind CSS classes.\nJSDoc\nZed supports JSDoc syntax in JavaScript and TypeScript comments that match the JSDoc syntax.\nZed uses tree-sitter/tree-sitter-jsdoc for parsing and highlighting JSDoc.\nESLint\nYou can configure Zed to format code using eslint --fix by running the ESLint code action when formatting:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n\nYou can also only execute a single ESLint rule when using fixAll:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n\n\nNote: the other formatter you have configured will still run, after ESLint.\nSo if your language server or Prettier configuration don't format according to\nESLint's rules, then they will overwrite what ESLint fixed and you end up with\nerrors.\n\nIf you only want to run ESLint on save, you can configure code actions as\nthe formatter:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"code_actions\": {\n          \"source.fixAll.eslint\": true\n        }\n      }\n    }\n  }\n}\n\nConfigure ESLint's nodePath:\nYou can configure ESLint's nodePath setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"nodePath\": \".yarn/sdks\"\n      }\n    }\n  }\n}\n\nConfigure ESLint's problems:\nYou can configure ESLint's problems setting.\nFor example, here's how to set problems.shortenToSingleLine:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"problems\": {\n          \"shortenToSingleLine\": true\n        }\n      }\n    }\n  }\n}\n\nConfigure ESLint's rulesCustomizations:\nYou can configure ESLint's rulesCustomizations setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"rulesCustomizations\": [\n          // set all eslint errors/warnings to show as warnings\n          { \"rule\": \"*\", \"severity\": \"warn\" }\n        ]\n      }\n    }\n  }\n}\n\nConfigure ESLint's workingDirectory:\nYou can configure ESLint's workingDirectory setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"workingDirectory\": {\n          \"mode\": \"auto\"\n        }\n      }\n    }\n  }\n}\n\nDebugging\nZed supports debugging JavaScript code out of the box.\nThe following can be debugged without writing additional configuration:\n\nTasks from package.json\nTests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)\n\nRun debugger: start (f4|f4) to see a contextual list of these predefined debug tasks.\nAs for all languages, configurations from .vscode/launch.json are also available for debugging in Zed.\nIf your use-case isn't covered by any of these, you can take full control by adding debug configurations to .zed/debug.json. See below for example configurations.\nDebug the current file\n[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug JS file\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"$ZED_FILE\",\n    \"skipFiles\": [\"<node_internals>/**\"]\n  }\n]\n\nThis implicitly runs the current file using node.\nLaunch a web app in Chrome\n[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug app in Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"file\": \"$ZED_WORKTREE_ROOT/index.html\",\n    \"webRoot\": \"$ZED_WORKTREE_ROOT\",\n    \"console\": \"integratedTerminal\",\n    \"skipFiles\": [\"<node_internals>/**\"]\n  }\n]\n\nSee also\n\nYarn documentation for a walkthrough of configuring your project to use Yarn.\nTypeScript documentation",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:10"
  },
  "languages/julia.html": {
    "url": "https://zed.dev/docs/languages/julia.html",
    "title": "Julia | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"julia\"><a class=\"header\" href=\"#julia\">Julia</a></h1>\n<p>Julia language support in Zed is provided by the community-maintained <a href=\"https://github.com/JuliaEditorSupport/zed-julia\">Julia extension</a>.\nReport issues to: <a href=\"https://github.com/JuliaEditorSupport/zed-julia/issues\">https://github.com/JuliaEditorSupport/zed-julia/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-julia\">tree-sitter/tree-sitter-julia</a></li>\n<li>Language Server: <a href=\"https://github.com/julia-vscode/LanguageServer.jl\">julia-vscode/LanguageServer.jl</a></li>\n</ul>\n<!--\nTBD: Document Julia Installation\nTBD: Julia REPL Setup instructions\n-->\n\n</main>",
    "content_text": "Julia\nJulia language support in Zed is provided by the community-maintained Julia extension.\nReport issues to: https://github.com/JuliaEditorSupport/zed-julia/issues\n\nTree-sitter: tree-sitter/tree-sitter-julia\nLanguage Server: julia-vscode/LanguageServer.jl",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:13"
  },
  "languages/json.html": {
    "url": "https://zed.dev/docs/languages/json.html",
    "title": "JSON | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"json\"><a class=\"header\" href=\"#json\">JSON</a></h1>\n<p>JSON support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-json\">tree-sitter/tree-sitter-json</a></li>\n<li>Language Server: <a href=\"https://github.com/zed-industries/json-language-server\">zed-industries/json-language-server</a></li>\n</ul>\n<h2 id=\"jsonc\"><a class=\"header\" href=\"#jsonc\">JSONC</a></h2>\n<p>Zed also supports a super-set of JSON called JSONC, which allows single line comments (<code>//</code>) in JSON files.\nWhile editing these files you can use <code>cmd-/</code> (macOS) or <code>ctrl-/</code> (Linux) to toggle comments on the current line or selection.</p>\n<h2 id=\"jsonc-prettier-formatting\"><a class=\"header\" href=\"#jsonc-prettier-formatting\">JSONC Prettier Formatting</a></h2>\n<p>If you use files with the <code>*.jsonc</code> extension when using <code>Format Document</code> or have <code>format_on_save</code> enabled, Zed invokes Prettier as the formatter. Prettier has an <a href=\"https://github.com/prettier/prettier/issues/15956\">outstanding issue</a> where it will add trailing commas to files with a <code>jsonc</code> extension. JSONC files which have a <code>.json</code> extension are unaffected.</p>\n<p>To workaround this behavior you can add the following to your <code>.prettierrc</code> configuration file:</p>\n<pre><code class=\"language-json\">{\n  \"overrides\": [\n    {\n      \"files\": [\"*.jsonc\"],\n      \"options\": {\n        \"parser\": \"json\",\n        \"trailingComma\": \"none\"\n      }\n    }\n  ]\n}\n</code></pre>\n<h2 id=\"json-language-server\"><a class=\"header\" href=\"#json-language-server\">JSON Language Server</a></h2>\n<p>Zed automatically out of the box supports JSON Schema validation of <code>package.json</code> and <code>tsconfig.json</code> files, but <code>json-language-server</code> can use JSON Schema definitions in project files, from the <a href=\"https://www.schemastore.org\">JSON Schema Store</a> or other publicly available URLs for JSON validation.</p>\n<h3 id=\"inline-schema-specification\"><a class=\"header\" href=\"#inline-schema-specification\">Inline Schema Specification</a></h3>\n<p>To specify a schema inline with your JSON files, add a <code>$schema</code> top level key linking to your json schema file.</p>\n<p>For example to for a <code>.luarc.json</code> for use with <a href=\"https://github.com/LuaLS/lua-language-server/\">lua-language-server</a>:</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\"\n}\n</code></pre>\n<h3 id=\"schema-specification-via-settings\"><a class=\"header\" href=\"#schema-specification-via-settings\">Schema Specification via Settings</a></h3>\n<p>You can alternatively associate JSON Schemas with file paths by via Zed LSP settings.</p>\n<p>To</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"json-language-server\": {\n    \"settings\": {\n      \"json\": {\n        \"schemas\": [\n          {\n            \"fileMatch\": [\"*/*.luarc.json\"],\n            \"url\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\"\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can also pass any of the <a href=\"https://github.com/Microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#settings\">supported settings</a> to json-language-server by specifying them in your Zed settings.json:</p>\n<!--\nTBD: Add formatter (prettier) settings (autoformat, tab_size, etc)\n-->\n\n</main>",
    "content_text": "JSON\nJSON support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-json\nLanguage Server: zed-industries/json-language-server\n\nJSONC\nZed also supports a super-set of JSON called JSONC, which allows single line comments (//) in JSON files.\nWhile editing these files you can use cmd-/ (macOS) or ctrl-/ (Linux) to toggle comments on the current line or selection.\nJSONC Prettier Formatting\nIf you use files with the *.jsonc extension when using Format Document or have format_on_save enabled, Zed invokes Prettier as the formatter. Prettier has an outstanding issue where it will add trailing commas to files with a jsonc extension. JSONC files which have a .json extension are unaffected.\nTo workaround this behavior you can add the following to your .prettierrc configuration file:\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.jsonc\"],\n      \"options\": {\n        \"parser\": \"json\",\n        \"trailingComma\": \"none\"\n      }\n    }\n  ]\n}\n\nJSON Language Server\nZed automatically out of the box supports JSON Schema validation of package.json and tsconfig.json files, but json-language-server can use JSON Schema definitions in project files, from the JSON Schema Store or other publicly available URLs for JSON validation.\nInline Schema Specification\nTo specify a schema inline with your JSON files, add a $schema top level key linking to your json schema file.\nFor example to for a .luarc.json for use with lua-language-server:\n{\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\"\n}\n\nSchema Specification via Settings\nYou can alternatively associate JSON Schemas with file paths by via Zed LSP settings.\nTo\n\"lsp\": {\n  \"json-language-server\": {\n    \"settings\": {\n      \"json\": {\n        \"schemas\": [\n          {\n            \"fileMatch\": [\"*/*.luarc.json\"],\n            \"url\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\"\n          }\n        ]\n      }\n    }\n  }\n}\n\nYou can also pass any of the supported settings to json-language-server by specifying them in your Zed settings.json:",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:15"
  },
  "languages/jsonnet.html": {
    "url": "https://zed.dev/docs/languages/jsonnet.html",
    "title": "Jsonnet | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"jsonnet\"><a class=\"header\" href=\"#jsonnet\">Jsonnet</a></h1>\n<p>Jsonnet language support in Zed is provided by the community-maintained <a href=\"https://github.com/narqo/zed-jsonnet\">Jsonnet extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/sourcegraph/tree-sitter-jsonnet\">sourcegraph/tree-sitter-jsonnet</a></li>\n<li>Language Server: <a href=\"https://github.com/grafana/jsonnet-language-server\">grafana/jsonnet-language-server</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>Workspace configuration options can be passed to the language server via the <code>lsp</code> settings of the <code>settings.json</code>.</p>\n<p>The following example enables support for resolving <a href=\"https://tanka.dev\">tanka</a> import paths in <code>jsonnet-language-server</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"jsonnet-language-server\": {\n      \"settings\": {\n        \"resolve_paths_with_tanka\": true\n      }\n    }\n  }\n}\n</code></pre>\n\n</main>",
    "content_text": "Jsonnet\nJsonnet language support in Zed is provided by the community-maintained Jsonnet extension.\n\nTree-sitter: sourcegraph/tree-sitter-jsonnet\nLanguage Server: grafana/jsonnet-language-server\n\nConfiguration\nWorkspace configuration options can be passed to the language server via the lsp settings of the settings.json.\nThe following example enables support for resolving tanka import paths in jsonnet-language-server:\n{\n  \"lsp\": {\n    \"jsonnet-language-server\": {\n      \"settings\": {\n        \"resolve_paths_with_tanka\": true\n      }\n    }\n  }\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:17"
  },
  "languages/kotlin.html": {
    "url": "https://zed.dev/docs/languages/kotlin.html",
    "title": "Kotlin | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"kotlin\"><a class=\"header\" href=\"#kotlin\">Kotlin</a></h1>\n<p>Kotlin language support in Zed is provided by the community-maintained <a href=\"https://github.com/zed-extensions/kotlin\">Kotlin extension</a>.\nReport issues to: <a href=\"https://github.com/zed-extensions/kotlin/issues\">https://github.com/zed-extensions/kotlin/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/fwcd/tree-sitter-kotlin\">fwcd/tree-sitter-kotlin</a></li>\n<li>Language Server: <a href=\"https://github.com/fwcd/kotlin-language-server\">fwcd/kotlin-language-server</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>Workspace configuration options can be passed to the language server via lsp\nsettings in <code>settings.json</code>.</p>\n<p>The following example changes the JVM target from <code>default</code> (which is 1.8) to\n<code>17</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"kotlin-language-server\": {\n      \"settings\": {\n        \"compiler\": {\n          \"jvm\": {\n            \"target\": \"17\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>The full list of workspace configuration options can be found\n<a href=\"https://github.com/fwcd/kotlin-language-server/blob/main/server/src/main/kotlin/org/javacs/kt/Configuration.kt\">here</a>.</p>\n\n</main>",
    "content_text": "Kotlin\nKotlin language support in Zed is provided by the community-maintained Kotlin extension.\nReport issues to: https://github.com/zed-extensions/kotlin/issues\n\nTree-sitter: fwcd/tree-sitter-kotlin\nLanguage Server: fwcd/kotlin-language-server\n\nConfiguration\nWorkspace configuration options can be passed to the language server via lsp\nsettings in settings.json.\nThe following example changes the JVM target from default (which is 1.8) to\n17:\n{\n  \"lsp\": {\n    \"kotlin-language-server\": {\n      \"settings\": {\n        \"compiler\": {\n          \"jvm\": {\n            \"target\": \"17\"\n          }\n        }\n      }\n    }\n  }\n}\n\nThe full list of workspace configuration options can be found\nhere.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:19"
  },
  "languages/lua.html": {
    "url": "https://zed.dev/docs/languages/lua.html",
    "title": "Lua | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"lua\"><a class=\"header\" href=\"#lua\">Lua</a></h1>\n<p>Lua support is available through the <a href=\"https://github.com/zed-extensions/lua\">Lua extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-lua\">tree-sitter-grammars/tree-sitter-lua</a></li>\n<li>Language server: <a href=\"https://github.com/LuaLS/lua-language-server\">LuaLS/lua-language-server</a></li>\n</ul>\n<h2 id=\"luarcjson\"><a class=\"header\" href=\"#luarcjson\">luarc.json</a></h2>\n<p>To configure LuaLS you can create a <code>.luarc.json</code> file in the root of your workspace.</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"format.enable\": true,\n  \"workspace.library\": [\"../somedir/library\"]\n}\n</code></pre>\n<p>See <a href=\"https://luals.github.io/wiki/settings/\">LuaLS Settings Documentation</a> for all available configuration options, or when editing this file in Zed available settings options will autocomplete, (e.g <code>runtime.version</code> will show <code>\"Lua 5.1\"</code>, <code>\"Lua 5.2\"</code>, <code>\"Lua 5.3\"</code>, <code>\"Lua 5.4\"</code> and <code>\"LuaJIT\"</code> as allowed values). Note when importing settings options from VSCode, remove the <code>Lua.</code> prefix. (e.g. <code>runtime.version</code> instead of <code>Lua.runtime.version</code>).</p>\n<h3 id=\"luacats-definitions\"><a class=\"header\" href=\"#luacats-definitions\">LuaCATS Definitions</a></h3>\n<p>LuaLS can provide enhanced LSP autocompletion suggestions and type validation with the help of LuaCATS (Lua Comment and Type System) definitions. These definitions are available for many common Lua libraries, and local paths containing them can be specified via <code>workspace.library</code> in <code>luarc.json</code>. You can do this via relative paths if you checkout your definitions into the same partent directory of your project (<code>../playdate-luacats</code>, <code>../love2d</code>, etc). Alternatively you can create submodule(s) inside your project for each LuaCATS definition repo.</p>\n<h3 id=\"love2d\"><a class=\"header\" href=\"#love2d\">LÖVE (Love2D)</a></h3>\n<p>To use <a href=\"https://love2d.org/\">LÖVE (Love2D)</a> in Zed, checkout <a href=\"https://github.com/LuaCATS/love2d\">LuaCATS/love2d</a> into a folder called <code>love2d-luacats</code> into the parent folder of your project:</p>\n<pre><code class=\"language-sh\">cd .. &amp;&amp; git clone https://github.com/LuaCATS/love2d love2d-luacats\n</code></pre>\n<p>Then in your <code>.luarc.json</code>:</p>\n<pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"workspace.library\": [\"../love2d-luacats\"],\n  \"runtime.special\": {\n    \"love.filesystem.load\": \"loadfile\"\n  }\n}\n</code></pre>\n<h3 id=\"playdatesdk\"><a class=\"header\" href=\"#playdatesdk\">PlaydateSDK</a></h3>\n<p>To use <a href=\"https://play.date/dev/\">Playdate Lua SDK</a> in Zed, checkout <a href=\"https://github.com/notpeter/playdate-luacats\">playdate-luacats</a> into the parent folder of your project:</p>\n<pre><code class=\"language-sh\">cd .. &amp;&amp; git clone https://github.com/notpeter/playdate-luacats\n</code></pre>\n<p>Then in your <code>.luarc.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"runtime.nonstandardSymbol\": [\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"//=\",\n    \"%=\",\n    \"&lt;&lt;=\",\n    \"&gt;&gt;=\",\n    \"&amp;=\",\n    \"|=\",\n    \"^=\"\n  ],\n  \"diagnostics.severity\": { \"duplicate-set-field\": \"Hint\" },\n  \"diagnostics.globals\": [\"import\"],\n  \"workspace.library\": [\"../playdate-luacats\"],\n  \"format.defaultConfig\": {\n    \"indent_style\": \"space\",\n    \"indent_size\": \"4\"\n  },\n  \"format.enable\": true,\n  \"runtime.builtin\": { \"io\": \"disable\", \"os\": \"disable\", \"package\": \"disable\" }\n}\n</code></pre>\n<h3 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h3>\n<p>To enable <a href=\"../configuring-languages.html#inlay-hints\">Inlay Hints</a> for LuaLS in Zed</p>\n<ol>\n<li>Add the following to your Zed settings.json:</li>\n</ol>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Lua\": {\n      \"inlay_hints\": {\n        \"enabled\": true,\n        \"show_type_hints\": true,\n        \"show_parameter_hints\": true,\n        \"show_other_hints\": true\n      }\n    }\n  }\n</code></pre>\n<ol start=\"2\">\n<li>Add <code>\"hint.enable\": true</code> to your <code>.luarc.json</code>.</li>\n</ol>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<h3 id=\"luals-formatting\"><a class=\"header\" href=\"#luals-formatting\">LuaLS Formatting</a></h3>\n<p>To enable auto-formatting with your LuaLS (provided by <a href=\"https://github.com/CppCXY/EmmyLuaCodeStyle\">CppCXY/EmmyLuaCodeStyle</a>) make sure you have <code>\"format.enable\": true,</code> in your .luarc.json:</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\n  \"format.enable\": true\n}\n</code></pre>\n<p>Then add the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n</code></pre>\n<p>You can customize various EmmyLuaCodeStyle style options via <code>.editorconfig</code>, see <a href=\"https://github.com/CppCXY/EmmyLuaCodeStyle/blob/master/lua.template.editorconfig\">lua.template.editorconfig</a> for all available options.</p>\n<h3 id=\"stylua-formatting\"><a class=\"header\" href=\"#stylua-formatting\">StyLua Formatting</a></h3>\n<p>Alternatively to use <a href=\"https://github.com/JohnnyMorganz/StyLua\">StyLua</a> for auto-formatting:</p>\n<ol>\n<li>Install <a href=\"https://github.com/JohnnyMorganz/StyLua\">StyLua</a>: <code>brew install stylua</code> or <code>cargo install stylua --features lua52,lua53,lua54,luau,luajit</code> (feel free to remove any Lua versions you don't need).</li>\n<li>Add the following to your <code>settings.json</code>:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\n            \"--syntax=Lua54\",\n            \"--respect-ignores\",\n            \"--stdin-filepath\",\n            \"{buffer_path}\",\n            \"-\"\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can specify various options to StyLua either on the command line above (like <code>--syntax=Lua54</code>) or in a <code>stylua.toml</code> in your workspace:</p>\n<pre><code class=\"language-toml\">syntax = \"Lua54\"\ncolumn_width = 100\nline_endings = \"Unix\"\nindent_type = \"Spaces\"\nindent_width = 4\nquote_style = \"AutoPreferDouble\"\ncall_parentheses = \"Always\"\ncollapse_simple_statement = \"All\"\n\n[sort_requires]\nenabled = true\n</code></pre>\n<p>For a complete list of available options, see: <a href=\"https://github.com/JohnnyMorganz/StyLua?tab=readme-ov-file#options\">StyLua Options</a>.</p>\n\n</main>",
    "content_text": "Lua\nLua support is available through the Lua extension.\n\nTree-sitter: tree-sitter-grammars/tree-sitter-lua\nLanguage server: LuaLS/lua-language-server\n\nluarc.json\nTo configure LuaLS you can create a .luarc.json file in the root of your workspace.\n{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"format.enable\": true,\n  \"workspace.library\": [\"../somedir/library\"]\n}\n\nSee LuaLS Settings Documentation for all available configuration options, or when editing this file in Zed available settings options will autocomplete, (e.g runtime.version will show \"Lua 5.1\", \"Lua 5.2\", \"Lua 5.3\", \"Lua 5.4\" and \"LuaJIT\" as allowed values). Note when importing settings options from VSCode, remove the Lua. prefix. (e.g. runtime.version instead of Lua.runtime.version).\nLuaCATS Definitions\nLuaLS can provide enhanced LSP autocompletion suggestions and type validation with the help of LuaCATS (Lua Comment and Type System) definitions. These definitions are available for many common Lua libraries, and local paths containing them can be specified via workspace.library in luarc.json. You can do this via relative paths if you checkout your definitions into the same partent directory of your project (../playdate-luacats, ../love2d, etc). Alternatively you can create submodule(s) inside your project for each LuaCATS definition repo.\nLÖVE (Love2D)\nTo use LÖVE (Love2D) in Zed, checkout LuaCATS/love2d into a folder called love2d-luacats into the parent folder of your project:\ncd .. && git clone https://github.com/LuaCATS/love2d love2d-luacats\n\nThen in your .luarc.json:\n{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"workspace.library\": [\"../love2d-luacats\"],\n  \"runtime.special\": {\n    \"love.filesystem.load\": \"loadfile\"\n  }\n}\n\nPlaydateSDK\nTo use Playdate Lua SDK in Zed, checkout playdate-luacats into the parent folder of your project:\ncd .. && git clone https://github.com/notpeter/playdate-luacats\n\nThen in your .luarc.json:\n{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime.version\": \"Lua 5.4\",\n  \"runtime.nonstandardSymbol\": [\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"//=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \"&=\",\n    \"|=\",\n    \"^=\"\n  ],\n  \"diagnostics.severity\": { \"duplicate-set-field\": \"Hint\" },\n  \"diagnostics.globals\": [\"import\"],\n  \"workspace.library\": [\"../playdate-luacats\"],\n  \"format.defaultConfig\": {\n    \"indent_style\": \"space\",\n    \"indent_size\": \"4\"\n  },\n  \"format.enable\": true,\n  \"runtime.builtin\": { \"io\": \"disable\", \"os\": \"disable\", \"package\": \"disable\" }\n}\n\nInlay Hints\nTo enable Inlay Hints for LuaLS in Zed\n\nAdd the following to your Zed settings.json:\n\n  \"languages\": {\n    \"Lua\": {\n      \"inlay_hints\": {\n        \"enabled\": true,\n        \"show_type_hints\": true,\n        \"show_parameter_hints\": true,\n        \"show_other_hints\": true\n      }\n    }\n  }\n\n\nAdd \"hint.enable\": true to your .luarc.json.\n\nFormatting\nLuaLS Formatting\nTo enable auto-formatting with your LuaLS (provided by CppCXY/EmmyLuaCodeStyle) make sure you have \"format.enable\": true, in your .luarc.json:\n{\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\n  \"format.enable\": true\n}\n\nThen add the following to your Zed settings.json:\n{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": \"language_server\"\n    }\n  }\n}\n\nYou can customize various EmmyLuaCodeStyle style options via .editorconfig, see lua.template.editorconfig for all available options.\nStyLua Formatting\nAlternatively to use StyLua for auto-formatting:\n\nInstall StyLua: brew install stylua or cargo install stylua --features lua52,lua53,lua54,luau,luajit (feel free to remove any Lua versions you don't need).\nAdd the following to your settings.json:\n\n{\n  \"languages\": {\n    \"Lua\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\n            \"--syntax=Lua54\",\n            \"--respect-ignores\",\n            \"--stdin-filepath\",\n            \"{buffer_path}\",\n            \"-\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nYou can specify various options to StyLua either on the command line above (like --syntax=Lua54) or in a stylua.toml in your workspace:\nsyntax = \"Lua54\"\ncolumn_width = 100\nline_endings = \"Unix\"\nindent_type = \"Spaces\"\nindent_width = 4\nquote_style = \"AutoPreferDouble\"\ncall_parentheses = \"Always\"\ncollapse_simple_statement = \"All\"\n\n[sort_requires]\nenabled = true\n\nFor a complete list of available options, see: StyLua Options.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:22"
  },
  "languages/luau.html": {
    "url": "https://zed.dev/docs/languages/luau.html",
    "title": "Luau | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"luau\"><a class=\"header\" href=\"#luau\">Luau</a></h1>\n<p><a href=\"https://luau.org/\">Luau</a> is a fast, small, safe, gradually typed, embeddable scripting language derived from Lua. Luau was developed by Roblox and is available under the MIT license.</p>\n<p>Luau language support in Zed is provided by the community-maintained <a href=\"https://github.com/4teapo/zed-luau\">Luau extension</a>.\nReport issues to: <a href=\"https://github.com/4teapo/zed-luau/issues\">https://github.com/4teapo/zed-luau/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/4teapo/tree-sitter-luau\">4teapo/tree-sitter-luau</a></li>\n<li>Language Server: <a href=\"https://github.com/JohnnyMorganz/luau-lsp\">JohnnyMorganz/luau-lsp</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>Configuration instructions are available in the <a href=\"https://github.com/4teapo/zed-luau\">Luau Zed Extension README</a>.</p>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>To support automatically formatting your code, you can use <a href=\"https://github.com/JohnnyMorganz/StyLua\">JohnnyMorganz/StyLua</a>, a Lua code formatter.</p>\n<p>Install with:</p>\n<pre><code class=\"language-sh\"># macOS via Homebrew\nbrew install stylua\n# Or via Cargo\ncargo install stylua --features lua52,lua53,lua54,luau\n</code></pre>\n<p>Then add the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Luau\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }\n</code></pre>\n\n</main>",
    "content_text": "Luau\nLuau is a fast, small, safe, gradually typed, embeddable scripting language derived from Lua. Luau was developed by Roblox and is available under the MIT license.\nLuau language support in Zed is provided by the community-maintained Luau extension.\nReport issues to: https://github.com/4teapo/zed-luau/issues\n\nTree-sitter: 4teapo/tree-sitter-luau\nLanguage Server: JohnnyMorganz/luau-lsp\n\nConfiguration\nConfiguration instructions are available in the Luau Zed Extension README.\nFormatting\nTo support automatically formatting your code, you can use JohnnyMorganz/StyLua, a Lua code formatter.\nInstall with:\n# macOS via Homebrew\nbrew install stylua\n# Or via Cargo\ncargo install stylua --features lua52,lua53,lua54,luau\n\nThen add the following to your Zed settings.json:\n  \"languages\": {\n    \"Luau\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"stylua\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:24"
  },
  "languages/makefile.html": {
    "url": "https://zed.dev/docs/languages/makefile.html",
    "title": "Makefile | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"makefile\"><a class=\"header\" href=\"#makefile\">Makefile</a></h1>\n<p>Makefile language support in Zed is provided by the community-maintained <a href=\"https://github.com/caius/zed-make\">Make extension</a>.\nReport issues to: <a href=\"https://github.com/caius/zed-make/issues\">https://github.com/caius/zed-make/issues</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/caius/tree-sitter-make\">caius/tree-sitter-make</a></li>\n</ul>\n\n</main>",
    "content_text": "Makefile\nMakefile language support in Zed is provided by the community-maintained Make extension.\nReport issues to: https://github.com/caius/zed-make/issues.\n\nTree-sitter: caius/tree-sitter-make",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:26"
  },
  "languages/markdown.html": {
    "url": "https://zed.dev/docs/languages/markdown.html",
    "title": "Markdown | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"markdown\"><a class=\"header\" href=\"#markdown\">Markdown</a></h1>\n<p>Markdown support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-markdown\">tree-sitter-markdown</a></li>\n<li>Language Server: N/A</li>\n</ul>\n<h2 id=\"syntax-highlighting-code-blocks\"><a class=\"header\" href=\"#syntax-highlighting-code-blocks\">Syntax Highlighting Code Blocks</a></h2>\n<p>Zed supports language-specific syntax highlighting of markdown code blocks by leveraging <a href=\"../extensions/languages.html#grammar\">tree-sitter language grammars</a>. All <a href=\"../languages.html\">Zed supported languages</a>, including those provided by official or community extensions, are available for use in markdown code blocks. All you need to do is provide a language name after the opening <kbd>```</kbd> code fence like so:</p>\n<pre><code class=\"language-python\">```python\nimport functools as ft\n\n@ft.lru_cache(maxsize=500)\ndef fib(n):\n    return n if n &lt; 2 else fib(n - 1) + fib(n - 2)\n```\n</code></pre>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<h3 id=\"format\"><a class=\"header\" href=\"#format\">Format</a></h3>\n<p>Zed supports using Prettier to automatically re-format Markdown documents. You can trigger this manually via the <code class=\"hljs\">editor: format</code> action or via the <kbd class=\"keybinding\">cmd-shift-i|ctrl-shift-i</kbd> keyboard shortcut. Alternately, you can automatically format by enabling <a href=\"../configuring-zed.html#format-on-save\"><code>format_on_save</code></a> in your settings.json:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Markdown\": {\n      \"format_on_save\": \"on\"\n    }\n  },\n</code></pre>\n<h3 id=\"trailing-whitespace\"><a class=\"header\" href=\"#trailing-whitespace\">Trailing Whitespace</a></h3>\n<p>By default Zed will remove trailing whitespace on save. If you rely on invisible trailing whitespace being converted to <code>&lt;br /&gt;</code> in Markdown files you can disable this behavior with:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Markdown\": {\n      \"remove_trailing_whitespace_on_save\": false\n    }\n  },\n</code></pre>\n\n</main>",
    "content_text": "Markdown\nMarkdown support is available natively in Zed.\n\nTree-sitter: tree-sitter-markdown\nLanguage Server: N/A\n\nSyntax Highlighting Code Blocks\nZed supports language-specific syntax highlighting of markdown code blocks by leveraging tree-sitter language grammars. All Zed supported languages, including those provided by official or community extensions, are available for use in markdown code blocks. All you need to do is provide a language name after the opening ``` code fence like so:\n```python\nimport functools as ft\n\n@ft.lru_cache(maxsize=500)\ndef fib(n):\n    return n if n < 2 else fib(n - 1) + fib(n - 2)\n```\n\nConfiguration\nFormat\nZed supports using Prettier to automatically re-format Markdown documents. You can trigger this manually via the editor: format action or via the cmd-shift-i|ctrl-shift-i keyboard shortcut. Alternately, you can automatically format by enabling format_on_save in your settings.json:\n  \"languages\": {\n    \"Markdown\": {\n      \"format_on_save\": \"on\"\n    }\n  },\n\nTrailing Whitespace\nBy default Zed will remove trailing whitespace on save. If you rely on invisible trailing whitespace being converted to <br /> in Markdown files you can disable this behavior with:\n  \"languages\": {\n    \"Markdown\": {\n      \"remove_trailing_whitespace_on_save\": false\n    }\n  },",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:28"
  },
  "languages/nim.html": {
    "url": "https://zed.dev/docs/languages/nim.html",
    "title": "Nim | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"nim\"><a class=\"header\" href=\"#nim\">Nim</a></h1>\n<p>Nim language support in Zed is provided by the community-maintained <a href=\"https://github.com/foxoman/zed-nim\">Nim extension</a>.\nReport issues to: <a href=\"https://github.com/foxoman/zed-nim/issues\">https://github.com/foxoman/zed-nim/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/alaviss/tree-sitter-nim\">alaviss/tree-sitter-nim</a></li>\n<li>Language Server: <a href=\"https://github.com/nim-lang/langserver\">nim-lang/langserver</a></li>\n</ul>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>To use <a href=\"https://github.com/arnetheduck/nph\">arnetheduck/nph</a> as a formatter, follow the <a href=\"https://github.com/arnetheduck/nph?tab=readme-ov-file#installation\">nph installation instructions</a> and add this to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Nim\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"nph\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }\n</code></pre>\n\n</main>",
    "content_text": "Nim\nNim language support in Zed is provided by the community-maintained Nim extension.\nReport issues to: https://github.com/foxoman/zed-nim/issues\n\nTree-sitter: alaviss/tree-sitter-nim\nLanguage Server: nim-lang/langserver\n\nFormatting\nTo use arnetheduck/nph as a formatter, follow the nph installation instructions and add this to your Zed settings.json:\n  \"languages\": {\n    \"Nim\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"nph\",\n          \"arguments\": [\"-\"]\n        }\n      }\n    }\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:30"
  },
  "languages/ocaml.html": {
    "url": "https://zed.dev/docs/languages/ocaml.html",
    "title": "OCaml | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"ocaml\"><a class=\"header\" href=\"#ocaml\">OCaml</a></h1>\n<p>OCaml support is available through the <a href=\"https://github.com/zed-extensions/ocaml\">OCaml extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-ocaml\">tree-sitter/tree-sitter-ocaml</a></li>\n<li>Language Server: <a href=\"https://github.com/ocaml/ocaml-lsp\">ocaml/ocaml-lsp</a></li>\n</ul>\n<h2 id=\"setup-instructions\"><a class=\"header\" href=\"#setup-instructions\">Setup Instructions</a></h2>\n<p>If you have the development environment already setup, you can skip to <a href=\"#launching-zed\">Launching Zed</a></p>\n<h3 id=\"using-opam\"><a class=\"header\" href=\"#using-opam\">Using Opam</a></h3>\n<p>Opam is the official package manager for OCaml and is highly recommended for getting started with OCaml. To get started using Opam, please follow the instructions provided <a href=\"https://ocaml.org/install\">here</a>.</p>\n<p>Once you install opam and setup a switch with your development environment as per the instructions, you can proceed.</p>\n<h3 id=\"launching-zed\"><a class=\"header\" href=\"#launching-zed\">Launching Zed</a></h3>\n<p>By now you should have <code>ocamllsp</code> installed, you can verify so by running</p>\n<pre><code class=\"language-sh\">ocamllsp --help\n</code></pre>\n<p>in your terminal. If you get a help message, you're good to go. If not, please revisit the installation instructions for <code>ocamllsp</code> and ensure it's properly installed.</p>\n<p>With that aside, we can now launch Zed. Given how the OCaml package manager works, we require you to run Zed from the terminal, so please make sure you install the <a href=\"https://zed.dev/features#cli\">Zed cli</a> if you haven't already.</p>\n<p>Once you have the cli, simply from a terminal, navigate to your project and run</p>\n<pre><code class=\"language-sh\">zed .\n</code></pre>\n<p>Voila! You should have Zed running with OCaml support, no additional setup required.</p>\n\n</main>",
    "content_text": "OCaml\nOCaml support is available through the OCaml extension.\n\nTree-sitter: tree-sitter/tree-sitter-ocaml\nLanguage Server: ocaml/ocaml-lsp\n\nSetup Instructions\nIf you have the development environment already setup, you can skip to Launching Zed\nUsing Opam\nOpam is the official package manager for OCaml and is highly recommended for getting started with OCaml. To get started using Opam, please follow the instructions provided here.\nOnce you install opam and setup a switch with your development environment as per the instructions, you can proceed.\nLaunching Zed\nBy now you should have ocamllsp installed, you can verify so by running\nocamllsp --help\n\nin your terminal. If you get a help message, you're good to go. If not, please revisit the installation instructions for ocamllsp and ensure it's properly installed.\nWith that aside, we can now launch Zed. Given how the OCaml package manager works, we require you to run Zed from the terminal, so please make sure you install the Zed cli if you haven't already.\nOnce you have the cli, simply from a terminal, navigate to your project and run\nzed .\n\nVoila! You should have Zed running with OCaml support, no additional setup required.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:32"
  },
  "languages/php.html": {
    "url": "https://zed.dev/docs/languages/php.html",
    "title": "PHP | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"php\"><a class=\"header\" href=\"#php\">PHP</a></h1>\n<p>PHP support is available through the <a href=\"https://github.com/zed-extensions/php\">PHP extension</a>.</p>\n<ul>\n<li>Tree-sitter: https://github.com/tree-sitter/tree-sitter-php</li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/phpactor/phpactor\">phpactor</a></li>\n<li><a href=\"https://github.com/bmewburn/vscode-intelephense/\">intelephense</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"choosing-a-language-server\"><a class=\"header\" href=\"#choosing-a-language-server\">Choosing a language server</a></h2>\n<p>The PHP extension offers both <code>phpactor</code> and <code>intelephense</code> language server support.</p>\n<p><code>phpactor</code> is enabled by default.</p>\n<h2 id=\"phpactor\"><a class=\"header\" href=\"#phpactor\">Phpactor</a></h2>\n<p>The Zed PHP Extension can install <code>phpactor</code> automatically but requires <code>php</code> to be installed and available in your path:</p>\n<pre><code class=\"language-sh\"># brew install php            # macOS\n# sudo apt-get install php    # Debian/Ubuntu\n# yum install php             # CentOS/RHEL\n# pacman -S php               # Arch Linux\nwhich php\n</code></pre>\n<h2 id=\"intelephense\"><a class=\"header\" href=\"#intelephense\">Intelephense</a></h2>\n<p><a href=\"https://intelephense.com/\">Intelephense</a> is a <a href=\"https://github.com/bmewburn/vscode-intelephense/blob/master/LICENSE.txt#L29\">proprietary</a> language server for PHP operating under a freemium model. Certain features require purchase of a <a href=\"https://intelephense.com/\">premium license</a>.</p>\n<p>To switch to <code>intelephense</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<p>To use the premium features, you can place your <a href=\"https://intelephense.com/faq.html\">licence.txt file</a> at <code>~/intelephense/licence.txt</code> inside your home directory. Alternatively, you can pass the licence key or a path to a file containing the licence key as an initialization option for the <code>intelephense</code> language server. To do this, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"intelephense\": {\n      \"initialization_options\": {\n        \"licenceKey\": \"/path/to/licence.txt\"\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"phpdoc\"><a class=\"header\" href=\"#phpdoc\">PHPDoc</a></h2>\n<p>Zed supports syntax highlighting for PHPDoc comments.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/claytonrcarter/tree-sitter-phpdoc\">claytonrcarter/tree-sitter-phpdoc</a></li>\n</ul>\n\n</main>",
    "content_text": "PHP\nPHP support is available through the PHP extension.\n\nTree-sitter: https://github.com/tree-sitter/tree-sitter-php\nLanguage Servers:\n\nphpactor\nintelephense\n\n\n\nChoosing a language server\nThe PHP extension offers both phpactor and intelephense language server support.\nphpactor is enabled by default.\nPhpactor\nThe Zed PHP Extension can install phpactor automatically but requires php to be installed and available in your path:\n# brew install php            # macOS\n# sudo apt-get install php    # Debian/Ubuntu\n# yum install php             # CentOS/RHEL\n# pacman -S php               # Arch Linux\nwhich php\n\nIntelephense\nIntelephense is a proprietary language server for PHP operating under a freemium model. Certain features require purchase of a premium license.\nTo switch to intelephense, add the following to your settings.json:\n{\n  \"languages\": {\n    \"PHP\": {\n      \"language_servers\": [\"intelephense\", \"!phpactor\", \"...\"]\n    }\n  }\n}\n\nTo use the premium features, you can place your licence.txt file at ~/intelephense/licence.txt inside your home directory. Alternatively, you can pass the licence key or a path to a file containing the licence key as an initialization option for the intelephense language server. To do this, add the following to your settings.json:\n{\n  \"lsp\": {\n    \"intelephense\": {\n      \"initialization_options\": {\n        \"licenceKey\": \"/path/to/licence.txt\"\n      }\n    }\n  }\n}\n\nPHPDoc\nZed supports syntax highlighting for PHPDoc comments.\n\nTree-sitter: claytonrcarter/tree-sitter-phpdoc",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:34"
  },
  "languages/powershell.html": {
    "url": "https://zed.dev/docs/languages/powershell.html",
    "title": "PowerShell | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"powershell\"><a class=\"header\" href=\"#powershell\">PowerShell</a></h1>\n<p>PowerShell language support in Zed is provided by the community-maintained <a href=\"https://github.com/wingyplus/zed-powershell\">Zed PowerShell extension</a>. Please report issues to: <a href=\"https://github.com/wingyplus/zed-powershell/issues\">github.com/wingyplus/zed-powershell/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/airbus-cert/tree-sitter-powershell\">airbus-cert/tree-sitter-powershell</a></li>\n<li>Language Server: <a href=\"https://github.com/PowerShell/PowerShellEditorServices\">PowerShell/PowerShellEditorServices</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<h3 id=\"powershell-install\"><a class=\"header\" href=\"#powershell-install\">Install PowerShell 7+</a></h3>\n<ul>\n<li>macOS: <code>brew install powershell/tap/powershell</code></li>\n<li>Alpine: <a href=\"https://learn.microsoft.com/en-us/powershell/scripting/install/install-alpine\">Installing PowerShell on Alpine Linux</a></li>\n<li>Debian: <a href=\"https://learn.microsoft.com/en-us/powershell/scripting/install/install-debian\">Install PowerShell on Debian Linux</a></li>\n<li>RedHat: <a href=\"https://learn.microsoft.com/en-us/powershell/scripting/install/install-rhel\">Install PowerShell on RHEL</a></li>\n<li>Ubuntu: <a href=\"https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu\">Install PowerShell on RHEL</a></li>\n<li>Windows: <a href=\"https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows\">Install PowerShell on Windows</a></li>\n</ul>\n<p>The Zed PowerShell extension will default to the <code>pwsh</code> executable found in your path.</p>\n<h3 id=\"powershell-editor-services\"><a class=\"header\" href=\"#powershell-editor-services\">Install PowerShell Editor Services (Optional)</a></h3>\n<p>The Zed PowerShell extensions will attempt to download <a href=\"https://github.com/PowerShell/PowerShellEditorServices\">PowerShell Editor Services</a> automatically.</p>\n<p>If want to use a specific binary, you can specify in your that in your Zed settings.json:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"powershell-es\": {\n      \"binary\": {\n        \"path\": \"/path/to/PowerShellEditorServices\"\n      }\n    }\n  }\n</code></pre>\n\n</main>",
    "content_text": "PowerShell\nPowerShell language support in Zed is provided by the community-maintained Zed PowerShell extension. Please report issues to: github.com/wingyplus/zed-powershell/issues\n\nTree-sitter: airbus-cert/tree-sitter-powershell\nLanguage Server: PowerShell/PowerShellEditorServices\n\nSetup\nInstall PowerShell 7+\n\nmacOS: brew install powershell/tap/powershell\nAlpine: Installing PowerShell on Alpine Linux\nDebian: Install PowerShell on Debian Linux\nRedHat: Install PowerShell on RHEL\nUbuntu: Install PowerShell on RHEL\nWindows: Install PowerShell on Windows\n\nThe Zed PowerShell extension will default to the pwsh executable found in your path.\nInstall PowerShell Editor Services (Optional)\nThe Zed PowerShell extensions will attempt to download PowerShell Editor Services automatically.\nIf want to use a specific binary, you can specify in your that in your Zed settings.json:\n  \"lsp\": {\n    \"powershell-es\": {\n      \"binary\": {\n        \"path\": \"/path/to/PowerShellEditorServices\"\n      }\n    }\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:36"
  },
  "languages/prisma.html": {
    "url": "https://zed.dev/docs/languages/prisma.html",
    "title": "Prisma | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"prisma\"><a class=\"header\" href=\"#prisma\">Prisma</a></h1>\n<p>Prisma support is available through the <a href=\"https://github.com/zed-extensions/prisma\">Prisma extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/victorhqc/tree-sitter-prisma\">victorhqc/tree-sitter-prisma</a></li>\n<li>Language-Server: <a href=\"https://github.com/prisma/language-tools\">prisma/language-tools</a></li>\n</ul>\n<!--\nTBD: Prisma usage and configuration documentation\n-->\n\n</main>",
    "content_text": "Prisma\nPrisma support is available through the Prisma extension.\n\nTree-sitter: victorhqc/tree-sitter-prisma\nLanguage-Server: prisma/language-tools",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:39"
  },
  "languages/proto.html": {
    "url": "https://zed.dev/docs/languages/proto.html",
    "title": "Proto | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"proto\"><a class=\"header\" href=\"#proto\">Proto</a></h1>\n<p>Proto/proto3 (Protocol Buffers definition language) support is available through the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/proto\">Proto extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/coder3101/tree-sitter-proto\">coder3101/tree-sitter-proto</a></li>\n<li>Language Servers: <a href=\"https://github.com/lasorda/protobuf-language-server\">protobuf-language-server</a></li>\n</ul>\n<!--\nTBD: Clarify which language server(s) to use / Feature support.\n\n## Setup\n\n### Install protobuf-language-server\n\nInstall protobuf-language-server and make sure it's in your PATH:\n\n```\ngo install github.com/lasorda/protobuf-language-server@latest\nwhich protobuf-language-server\n```\n\n### Install ProtoLS\n\nInstall protols and make sure it's in your PATH:\n\n```\ncargo install protols\nwhich protols\n```\n\n## Configuration\n\n```json\n\"lsp\": {\n  \"protobuf-language-server\": {\n    \"binary\": {\n      \"path\": \"protols\"\n    }\n  }\n}\n```\n\n## Formatting\n\nProtoLS supports formatting if you have `clang-format` installed.\n\n```sh\n# MacOS:\nbrew install clang-format\n# Ubuntu\nsudo apt-get install clang-format\n# Fedora\nsudo dnf install clang-tools-extra\n```\n\nTo customize your formatting preferences, create a `.clang-format` file, e.g.:\n\n```clang-format\nIndentWidth: 4\nColumnLimit: 120\n```\n\nOr you can have zed directly invoke `clang-format` by specifying it as a [formatter](https://zed.dev/docs/configuring-zed#formatter) in your settings:\n\n```json\n  \"languages\": {\n    \"Proto\": {\n      \"format_on_save\": \"on\",\n      \"tab_size\": 4,\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"clang-format\",\n          \"arguments\": [\"-style={IndentWidth: 4, ColumnLimit: 0}\"]\n        }\n      }\n    },\n  }\n```\n-->\n\n</main>",
    "content_text": "Proto\nProto/proto3 (Protocol Buffers definition language) support is available through the Proto extension.\n\nTree-sitter: coder3101/tree-sitter-proto\nLanguage Servers: protobuf-language-server",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:41"
  },
  "languages/purescript.html": {
    "url": "https://zed.dev/docs/languages/purescript.html",
    "title": "PureScript | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"purescript\"><a class=\"header\" href=\"#purescript\">PureScript</a></h1>\n<p>PureScript support is available through the <a href=\"https://github.com/zed-extensions/purescript\">PureScript extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/postsolar/tree-sitter-purescript\">postsolar/tree-sitter-purescript</a></li>\n<li>Language-Server: <a href=\"https://github.com/nwolverson/purescript-language-server\">nwolverson/purescript-language-server</a></li>\n</ul>\n\n</main>",
    "content_text": "PureScript\nPureScript support is available through the PureScript extension.\n\nTree-sitter: postsolar/tree-sitter-purescript\nLanguage-Server: nwolverson/purescript-language-server",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:43"
  },
  "languages/python.html": {
    "url": "https://zed.dev/docs/languages/python.html",
    "title": "Python | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"python\"><a class=\"header\" href=\"#python\">Python</a></h1>\n<p>Python support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/zed-industries/tree-sitter-python\">tree-sitter-python</a></li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/microsoft/pyright\">microsoft/pyright</a></li>\n<li><a href=\"https://github.com/python-lsp/python-lsp-server\">python-lsp/python-lsp-server</a> (PyLSP)</li>\n</ul>\n</li>\n<li>Debug Adapter: <a href=\"https://github.com/microsoft/debugpy\">debugpy</a></li>\n</ul>\n<h2 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language Servers</a></h2>\n<p>Zed supports multiple Python language servers some of which may require configuration to work properly.</p>\n<p>See: <a href=\"https://zed.dev/docs/configuring-languages#working-with-language-servers\">Working with Language Servers</a> for more information.</p>\n<h2 id=\"terminal-detect_venv\"><a class=\"header\" href=\"#terminal-detect_venv\">Virtual Environments in the Terminal</a></h2>\n<p>Zed will detect Python virtual environments and automatically activate them in terminal if available.\nSee: <a href=\"../configuring-zed.html#terminal-detect_venv\">detect_venv documentation</a> for more.</p>\n<h2 id=\"pylsp\"><a class=\"header\" href=\"#pylsp\">PyLSP</a></h2>\n<p><a href=\"https://github.com/python-lsp/python-lsp-server/\">python-lsp-server</a>, more commonly known as PyLSP, by default integrates with a number of external tools (autopep8, mccabe, pycodestyle, yapf) while others are optional and must be explicitly enabled and configured (flake8, pylint).</p>\n<p>See <a href=\"https://github.com/python-lsp/python-lsp-server/blob/develop/CONFIGURATION.md\">Python Language Server Configuration</a> for more.</p>\n<h2 id=\"pyright\"><a class=\"header\" href=\"#pyright\">PyRight</a></h2>\n<h3 id=\"pyright-configuration\"><a class=\"header\" href=\"#pyright-configuration\">PyRight Configuration</a></h3>\n<p>The <a href=\"https://github.com/microsoft/pyright\">pyright</a> language server offers flexible configuration options specified in a JSON-formatted text configuration. By default, the file is called <code>pyrightconfig.json</code> and is located within the root directory of your project. Pyright settings can also be specified in a <code>[tool.pyright]</code> section of a <code>pyproject.toml</code> file. A <code>pyrightconfig.json</code> file always takes precedence over <code>pyproject.toml</code> if both are present.</p>\n<p>For more information, see the Pyright <a href=\"https://microsoft.github.io/pyright/#/configuration\">configuration documentation</a>.</p>\n<h3 id=\"pyright-settings\"><a class=\"header\" href=\"#pyright-settings\">PyRight Settings</a></h3>\n<p>The <a href=\"https://github.com/microsoft/pyright\">pyright</a> language server also accepts specific LSP-related settings, not necessarily connected to a project. These can be changed in the <code>lsp</code> section of your <code>settings.json</code>.</p>\n<p>For example, in order to:</p>\n<ul>\n<li>use strict type-checking level</li>\n<li>diagnose all files in the workspace instead of the only open files default</li>\n<li>provide the path to a specific Python interpreter</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python.analysis\": {\n          \"diagnosticMode\": \"workspace\",\n          \"typeCheckingMode\": \"strict\"\n        },\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>For more information, see the Pyright <a href=\"https://microsoft.github.io/pyright/#/settings\">settings documentation</a>.</p>\n<h3 id=\"pyright-virtual-environments\"><a class=\"header\" href=\"#pyright-virtual-environments\">Pyright Virtual environments</a></h3>\n<p>A Python <a href=\"https://docs.python.org/3/tutorial/venv.html\">virtual environment</a> allows you to store all of a project's dependencies, including the Python interpreter and package manager, in a single directory that's isolated from any other Python projects on your computer.</p>\n<p>By default, the Pyright language server will look for Python packages in the default global locations. But you can also configure Pyright to use the packages installed in a given virtual environment.</p>\n<p>To do this, create a JSON file called <code>pyrightconfig.json</code> at the root of your project. This file must include two keys:</p>\n<ul>\n<li><code>venvPath</code>: a relative path from your project directory to any directory that <em>contains</em> one or more virtual environment directories</li>\n<li><code>venv</code>: the name of a virtual environment directory</li>\n</ul>\n<p>For example, a common approach is to create a virtual environment directory called <code>.venv</code> at the root of your project directory with the following commands:</p>\n<pre><code class=\"language-sh\"># create a virtual environment in the .venv directory\npython3 -m venv .venv\n# set up the current shell to use that virtual environment\nsource .venv/bin/activate\n</code></pre>\n<p>Having done that, you would create a <code>pyrightconfig.json</code> with the following content:</p>\n<pre><code class=\"language-json\">{\n  \"venvPath\": \".\",\n  \"venv\": \".venv\"\n}\n</code></pre>\n<p>If you prefer to use a <code>pyproject.toml</code> file, you can add the following section:</p>\n<pre><code class=\"language-toml\">[tool.pyright]\nvenvPath = \".\"\nvenv = \".venv\"\n</code></pre>\n<p>You can also configure this option directly in your <code>settings.json</code> file (<a href=\"#pyright-settings\">pyright settings</a>), as recommended in <a href=\"https://microsoft.github.io/pyright/#/import-resolution?id=configuring-your-python-environment\">Configuring Your Python Environment</a>.</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"code-formatting--linting\"><a class=\"header\" href=\"#code-formatting--linting\">Code formatting &amp; Linting</a></h3>\n<p>The Pyright language server does not provide code formatting or linting. If you want to detect lint errors and reformat your Python code upon saving, you'll need to set up.</p>\n<p>A common tool for formatting Python code is <a href=\"https://docs.astral.sh/ruff/\">Ruff</a>. It is another tool written in Rust, an extremely fast Python linter and code formatter. It is available through the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/ruff/\">Ruff extension</a>. To configure the Ruff extension to work within Zed, see the setup documentation <a href=\"https://docs.astral.sh/ruff/editors/setup/#zed\">here</a>.</p>\n<!--\nTBD: Expand Python Ruff docs.\nTBD: Ruff pyproject.toml, ruff.toml docs. `ruff.configuration`.\n-->\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports zero-configuration debugging of Python module entry points and pytest tests.\nRun <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list for the current project.\nFor greater control, you can add debug configurations to <code>.zed/debug.json</code>. See the examples below.</p>\n<h3 id=\"debug-active-file\"><a class=\"header\" href=\"#debug-active-file\">Debug Active File</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Python Active File\",\n    \"adapter\": \"Debugpy\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\"\n  }\n]\n</code></pre>\n<h3 id=\"flask-app\"><a class=\"header\" href=\"#flask-app\">Flask App</a></h3>\n<p>For a common Flask Application with a file structure similar to the following:</p>\n<pre><code>.venv/\napp/\n  init.py\n  main.py\n  routes.py\ntemplates/\n  index.html\nstatic/\n  style.css\nrequirements.txt\n</code></pre>\n<p>…the following configuration can be used:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Python: Flask\",\n    \"adapter\": \"Debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"app\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"FLASK_APP\": \"app\",\n      \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n      \"run\",\n      \"--reload\", // Enables Flask reloader that watches for file changes\n      \"--debugger\" // Enables Flask debugger\n    ],\n    \"autoReload\": {\n      \"enable\": true\n    },\n    \"jinja\": true,\n    \"justMyCode\": true\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "Python\nPython support is available natively in Zed.\n\nTree-sitter: tree-sitter-python\nLanguage Servers:\n\nmicrosoft/pyright\npython-lsp/python-lsp-server (PyLSP)\n\n\nDebug Adapter: debugpy\n\nLanguage Servers\nZed supports multiple Python language servers some of which may require configuration to work properly.\nSee: Working with Language Servers for more information.\nVirtual Environments in the Terminal\nZed will detect Python virtual environments and automatically activate them in terminal if available.\nSee: detect_venv documentation for more.\nPyLSP\npython-lsp-server, more commonly known as PyLSP, by default integrates with a number of external tools (autopep8, mccabe, pycodestyle, yapf) while others are optional and must be explicitly enabled and configured (flake8, pylint).\nSee Python Language Server Configuration for more.\nPyRight\nPyRight Configuration\nThe pyright language server offers flexible configuration options specified in a JSON-formatted text configuration. By default, the file is called pyrightconfig.json and is located within the root directory of your project. Pyright settings can also be specified in a [tool.pyright] section of a pyproject.toml file. A pyrightconfig.json file always takes precedence over pyproject.toml if both are present.\nFor more information, see the Pyright configuration documentation.\nPyRight Settings\nThe pyright language server also accepts specific LSP-related settings, not necessarily connected to a project. These can be changed in the lsp section of your settings.json.\nFor example, in order to:\n\nuse strict type-checking level\ndiagnose all files in the workspace instead of the only open files default\nprovide the path to a specific Python interpreter\n\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python.analysis\": {\n          \"diagnosticMode\": \"workspace\",\n          \"typeCheckingMode\": \"strict\"\n        },\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n\nFor more information, see the Pyright settings documentation.\nPyright Virtual environments\nA Python virtual environment allows you to store all of a project's dependencies, including the Python interpreter and package manager, in a single directory that's isolated from any other Python projects on your computer.\nBy default, the Pyright language server will look for Python packages in the default global locations. But you can also configure Pyright to use the packages installed in a given virtual environment.\nTo do this, create a JSON file called pyrightconfig.json at the root of your project. This file must include two keys:\n\nvenvPath: a relative path from your project directory to any directory that contains one or more virtual environment directories\nvenv: the name of a virtual environment directory\n\nFor example, a common approach is to create a virtual environment directory called .venv at the root of your project directory with the following commands:\n# create a virtual environment in the .venv directory\npython3 -m venv .venv\n# set up the current shell to use that virtual environment\nsource .venv/bin/activate\n\nHaving done that, you would create a pyrightconfig.json with the following content:\n{\n  \"venvPath\": \".\",\n  \"venv\": \".venv\"\n}\n\nIf you prefer to use a pyproject.toml file, you can add the following section:\n[tool.pyright]\nvenvPath = \".\"\nvenv = \".venv\"\n\nYou can also configure this option directly in your settings.json file (pyright settings), as recommended in Configuring Your Python Environment.\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n\nCode formatting & Linting\nThe Pyright language server does not provide code formatting or linting. If you want to detect lint errors and reformat your Python code upon saving, you'll need to set up.\nA common tool for formatting Python code is Ruff. It is another tool written in Rust, an extremely fast Python linter and code formatter. It is available through the Ruff extension. To configure the Ruff extension to work within Zed, see the setup documentation here.\n\nDebugging\nZed supports zero-configuration debugging of Python module entry points and pytest tests.\nRun debugger: start (f4|f4) to see a contextual list for the current project.\nFor greater control, you can add debug configurations to .zed/debug.json. See the examples below.\nDebug Active File\n[\n  {\n    \"label\": \"Python Active File\",\n    \"adapter\": \"Debugpy\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\"\n  }\n]\n\nFlask App\nFor a common Flask Application with a file structure similar to the following:\n.venv/\napp/\n  init.py\n  main.py\n  routes.py\ntemplates/\n  index.html\nstatic/\n  style.css\nrequirements.txt\n\n…the following configuration can be used:\n[\n  {\n    \"label\": \"Python: Flask\",\n    \"adapter\": \"Debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"app\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"FLASK_APP\": \"app\",\n      \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n      \"run\",\n      \"--reload\", // Enables Flask reloader that watches for file changes\n      \"--debugger\" // Enables Flask debugger\n    ],\n    \"autoReload\": {\n      \"enable\": true\n    },\n    \"jinja\": true,\n    \"justMyCode\": true\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:45"
  },
  "languages/r.html": {
    "url": "https://zed.dev/docs/languages/r.html",
    "title": "R | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"r\"><a class=\"header\" href=\"#r\">R</a></h1>\n<p>R support is available via multiple R Zed extensions:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/ocsmit/zed-r\">ocsmit/zed-r</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/r-lib/tree-sitter-r\">r-lib/tree-sitter-r</a></li>\n<li>Language-Server: <a href=\"https://github.com/REditorSupport/languageserver\">REditorSupport/languageserver</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/posit-dev/air/tree/main/editors/zed\">posit-dev/air</a></p>\n<ul>\n<li>Language-Server: <a href=\"https://github.com/posit-dev/air\">posit-dev/air</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h2>\n<ol>\n<li><a href=\"https://cloud.r-project.org/\">Download and Install R</a>.</li>\n<li>Install the R packages <code>languageserver</code> and <code>lintr</code>:</li>\n</ol>\n<pre><code class=\"language-R\">install.packages(\"languageserver\")\ninstall.packages(\"lintr\")\n</code></pre>\n<ol start=\"3\">\n<li>Install the <a href=\"https://github.com/ocsmit/zed-r\">ocsmit/zed-r</a> through Zed's extensions manager.</li>\n</ol>\n<p>For example on macOS:</p>\n<pre><code class=\"language-sh\">brew install --cask r\nRscript --version\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"languageserver\")'\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"lintr\")'\nRscript -e 'packageVersion(\"languageserver\")'\nRscript -e 'packageVersion(\"lintr\")'\n</code></pre>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<h3 id=\"linting\"><a class=\"header\" href=\"#linting\">Linting</a></h3>\n<p><code>REditorSupport/languageserver</code> bundles support for <a href=\"https://github.com/r-lib/lintr\">r-lib/lintr</a> as a linter. This can be configured via the use of a <code>.lintr</code> inside your project (or in your home directory for global defaults).</p>\n<pre><code class=\"language-r\">linters: linters_with_defaults(\n    line_length_linter(120),\n    commented_code_linter = NULL\n  )\nexclusions: list(\n    \"inst/doc/creating_linters.R\" = 1,\n    \"inst/example/bad.R\",\n    \"tests/testthat/exclusions-test\"\n  )\n</code></pre>\n<p>Or exclude it from linting anything,</p>\n<pre><code class=\"language-r\">exclusions: list(\".\")\n</code></pre>\n<p>See <a href=\"https://lintr.r-lib.org/articles/lintr.html\">Using lintr</a> for a complete list of options,</p>\n<h3 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h3>\n<p><code>REditorSupport/languageserver</code> bundles support for <a href=\"https://github.com/r-lib/styler\">r-lib/styler</a> as a formatter. See <a href=\"https://cran.r-project.org/web/packages/styler/vignettes/customizing_styler.html\">Customizing Styler</a> for more information on how to customize its behavior.</p>\n<!--\nTBD: Get this working\n\n### REditorSupport/languageserver Configuration\n\nYou can configure the [R languageserver settings](https://github.com/REditorSupport/languageserver#settings) via Zed Project Settings `.zed/settings.json` or Zed User Settings `~/.config/zed/settings.json`:\n\nFor example to disable Lintr linting and suppress code snippet suggestions (both enabled by default):\n\n```json\n{\n  \"lsp\": {\n    \"r_language_server\": {\n      \"settings\": {\n        \"r\": {\n          \"lsp\": {\n            \"diagnostics\": false,\n            \"snippet_support\": false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n-->\n<!--\nTBD: R REPL Docs\n\n## REPL\n\n### Ark Installation\n\nTo use the Zed REPL with R you need to install [Ark](https://github.com/posit-dev/ark), an R Kernel for Jupyter applications.\nYou can down the latest version from the [Ark GitHub Releases](https://github.com/posit-dev/ark/releases) and then extract the `ark` binary to a directory in your `PATH`.\n\nFor example to install the latest non-debug build:\n\n```sh\n# macOS\ncd /tmp\ncurl -L -o ark-latest-darwin.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" | \\\n    jq -r '.assets[] | select(.name | contains(\"darwin-universal\") and (contains(\"debug\") | not)) | .browser_download_url')\nunzip ark-latest-darwin.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n```sh\n# Linux X86_64\ncd /tmp\ncurl -L -o ark-latest-linux.zip \\\n    $(curl -s \"https://api.github.com/repos/posit-dev/ark/releases/latest\" \\\n        | jq -r '.assets[] | select(.name | contains(\"linux-x64\") and (contains(\"debug\") | not)) | .browser_download_url'\n    )\nunzip ark-latest-linux.zip ark\nsudo mv /tmp/ark /usr/local/bin/\n```\n\n-->\n\n</main>",
    "content_text": "R\nR support is available via multiple R Zed extensions:\n\n\nocsmit/zed-r\n\nTree-sitter: r-lib/tree-sitter-r\nLanguage-Server: REditorSupport/languageserver\n\n\n\nposit-dev/air\n\nLanguage-Server: posit-dev/air\n\n\n\nInstallation\n\nDownload and Install R.\nInstall the R packages languageserver and lintr:\n\ninstall.packages(\"languageserver\")\ninstall.packages(\"lintr\")\n\n\nInstall the ocsmit/zed-r through Zed's extensions manager.\n\nFor example on macOS:\nbrew install --cask r\nRscript --version\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"languageserver\")'\nRscript -e 'options(repos = \"https://cran.rstudio.com/\"); install.packages(\"lintr\")'\nRscript -e 'packageVersion(\"languageserver\")'\nRscript -e 'packageVersion(\"lintr\")'\n\nConfiguration\nLinting\nREditorSupport/languageserver bundles support for r-lib/lintr as a linter. This can be configured via the use of a .lintr inside your project (or in your home directory for global defaults).\nlinters: linters_with_defaults(\n    line_length_linter(120),\n    commented_code_linter = NULL\n  )\nexclusions: list(\n    \"inst/doc/creating_linters.R\" = 1,\n    \"inst/example/bad.R\",\n    \"tests/testthat/exclusions-test\"\n  )\n\nOr exclude it from linting anything,\nexclusions: list(\".\")\n\nSee Using lintr for a complete list of options,\nFormatting\nREditorSupport/languageserver bundles support for r-lib/styler as a formatter. See Customizing Styler for more information on how to customize its behavior.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:48"
  },
  "languages/rego.html": {
    "url": "https://zed.dev/docs/languages/rego.html",
    "title": "Rego | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"rego\"><a class=\"header\" href=\"#rego\">Rego</a></h1>\n<p>Rego language support in Zed is provided by the community-maintained <a href=\"https://github.com/StyraInc/zed-rego\">Rego extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/FallenAngel97/tree-sitter-rego\">FallenAngel97/tree-sitter-rego</a></li>\n<li>Language Server: <a href=\"https://github.com/StyraInc/regal\">StyraInc/regal</a></li>\n</ul>\n<h2 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h2>\n<p>The extensions is largely based on the <a href=\"https://docs.styra.com/regal/language-server\">Regal</a> language server which should be installed to make use of the extension. Read the <a href=\"https://docs.styra.com/regal#getting-started\">getting started</a> instructions for more information.</p>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>The extension's behavior is configured in the <code>.regal/config.yaml</code> file. The following is an example configuration which disables the <code>todo-comment</code> rule, customizes the <code>line-length</code> rule, and ignores test files for the <code>opa-fmt</code> rule:</p>\n<pre><code class=\"language-yaml\">rules:\n  style:\n    todo-comment:\n      # don't report on todo comments\n      level: ignore\n    line-length:\n      # custom rule configuration\n      max-line-length: 100\n      # warn on too long lines, but don't fail\n      level: warning\n    opa-fmt:\n      # not needed as error is the default, but\n      # being explicit won't hurt\n      level: error\n      # files can be ignored for any individual rule\n      # in this example, test files are ignored\n      ignore:\n        files:\n          - \"*_test.rego\"\n</code></pre>\n<p>Read Regal's <a href=\"https://docs.styra.com/regal#configuration\">configuration documentation</a> for more information.</p>\n\n</main>",
    "content_text": "Rego\nRego language support in Zed is provided by the community-maintained Rego extension.\n\nTree-sitter: FallenAngel97/tree-sitter-rego\nLanguage Server: StyraInc/regal\n\nInstallation\nThe extensions is largely based on the Regal language server which should be installed to make use of the extension. Read the getting started instructions for more information.\nConfiguration\nThe extension's behavior is configured in the .regal/config.yaml file. The following is an example configuration which disables the todo-comment rule, customizes the line-length rule, and ignores test files for the opa-fmt rule:\nrules:\n  style:\n    todo-comment:\n      # don't report on todo comments\n      level: ignore\n    line-length:\n      # custom rule configuration\n      max-line-length: 100\n      # warn on too long lines, but don't fail\n      level: warning\n    opa-fmt:\n      # not needed as error is the default, but\n      # being explicit won't hurt\n      level: error\n      # files can be ignored for any individual rule\n      # in this example, test files are ignored\n      ignore:\n        files:\n          - \"*_test.rego\"\n\nRead Regal's configuration documentation for more information.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:50"
  },
  "languages/rst.html": {
    "url": "https://zed.dev/docs/languages/rst.html",
    "title": "ReStructuredText | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"restructuredtext-rst\"><a class=\"header\" href=\"#restructuredtext-rst\">ReStructuredText (rst)</a></h1>\n<p>ReStructuredText language support in Zed is provided by the community-maintained <a href=\"https://github.com/elmarco/zed-rst\">reST extension</a>.\nReport issues to: <a href=\"https://github.com/elmarco/zed-rst/issues\">https://github.com/elmarco/zed-rst/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/stsewd/tree-sitter-rst.git\">stsewd/tree-sitter-rst.git</a></li>\n<li>Language Server: <a href=\"https://github.com/swyddfa/esbonio\">swyddfa/esbonio</a></li>\n</ul>\n\n</main>",
    "content_text": "ReStructuredText (rst)\nReStructuredText language support in Zed is provided by the community-maintained reST extension.\nReport issues to: https://github.com/elmarco/zed-rst/issues\n\nTree-sitter: stsewd/tree-sitter-rst.git\nLanguage Server: swyddfa/esbonio",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:53"
  },
  "languages/racket.html": {
    "url": "https://zed.dev/docs/languages/racket.html",
    "title": "Racket | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"racket\"><a class=\"header\" href=\"#racket\">Racket</a></h1>\n<p>Racket support is available through the <a href=\"https://github.com/zed-extensions/racket\">Racket extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/zed-industries/tree-sitter-racket\">zed-industries/tree-sitter-racket</a></li>\n</ul>\n<p>The <a href=\"https://docs.racket-lang.org/racket-language-server/index.html\">racket-language-server</a> is not yet supported in Zed, please see <a href=\"https://github.com/zed-industries/zed/issues/15789\">Issue #15789</a> for more information.</p>\n\n</main>",
    "content_text": "Racket\nRacket support is available through the Racket extension.\n\nTree-sitter: zed-industries/tree-sitter-racket\n\nThe racket-language-server is not yet supported in Zed, please see Issue #15789 for more information.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:55"
  },
  "languages/roc.html": {
    "url": "https://zed.dev/docs/languages/roc.html",
    "title": "Roc | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"roc\"><a class=\"header\" href=\"#roc\">Roc</a></h1>\n<p><a href=\"https://www.roc-lang.org/\">Roc</a> is a fast, friendly, functional language.</p>\n<p>Roc language support in Zed is provided by the community-maintained <a href=\"https://github.com/h2000/zed-roc\">Roc extension</a>.\nReport issues to: <a href=\"https://github.com/h2000/zed-roc/issues\">https://github.com/h2000/zed-roc/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/faldor20/tree-sitter-roc\">faldor20/tree-sitter-roc</a></li>\n<li>Language Server: <a href=\"https://github.com/roc-lang/roc/tree/main/crates/language_server\">roc-lang/roc/tree/main/crates/language_server</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<ol>\n<li>Follow instructions to <a href=\"https://www.roc-lang.org/install\">Install Roc</a> from the Roc-Lang website.</li>\n<li>Ensure <code>roc</code> and <code>roc_language_server</code> are in your PATH.</li>\n</ol>\n\n</main>",
    "content_text": "Roc\nRoc is a fast, friendly, functional language.\nRoc language support in Zed is provided by the community-maintained Roc extension.\nReport issues to: https://github.com/h2000/zed-roc/issues\n\nTree-sitter: faldor20/tree-sitter-roc\nLanguage Server: roc-lang/roc/tree/main/crates/language_server\n\nSetup\n\nFollow instructions to Install Roc from the Roc-Lang website.\nEnsure roc and roc_language_server are in your PATH.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:57"
  },
  "languages/ruby.html": {
    "url": "https://zed.dev/docs/languages/ruby.html",
    "title": "Ruby | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"ruby\"><a class=\"header\" href=\"#ruby\">Ruby</a></h1>\n<p>Ruby support is available through the <a href=\"https://github.com/zed-extensions/ruby\">Ruby extension</a>.</p>\n<ul>\n<li>Tree-sitters:\n<ul>\n<li><a href=\"https://github.com/tree-sitter/tree-sitter-ruby\">tree-sitter-ruby</a></li>\n<li><a href=\"https://github.com/tree-sitter/tree-sitter-embedded-template\">tree-sitter-embedded-template</a></li>\n</ul>\n</li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/Shopify/ruby-lsp\">ruby-lsp</a></li>\n<li><a href=\"https://github.com/castwide/solargraph\">solargraph</a></li>\n<li><a href=\"https://github.com/rubocop/rubocop\">rubocop</a></li>\n</ul>\n</li>\n<li>Debug Adapter: <a href=\"https://github.com/ruby/debug\"><code>rdbg</code></a></li>\n</ul>\n<p>The Ruby extension also provides support for ERB files.</p>\n<h2 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language Servers</a></h2>\n<p>There are multiple language servers available for Ruby. Zed supports the two following:</p>\n<ul>\n<li><a href=\"https://github.com/castwide/solargraph\">solargraph</a></li>\n<li><a href=\"https://github.com/Shopify/ruby-lsp\">ruby-lsp</a></li>\n</ul>\n<p>They both have an overlapping feature set of autocomplete, diagnostics, code actions, etc. and it's up to you to decide which one you want to use. Note that you can't use both at the same time.</p>\n<p>In addition to these two language servers, Zed also supports:</p>\n<ul>\n<li><a href=\"https://github.com/rubocop/rubocop\">rubocop</a> which is a static code analyzer and linter for Ruby. Under the hood, it's also used by Zed as a language server, but its functionality is complimentary to that of solargraph and ruby-lsp.</li>\n<li><a href=\"https://sorbet.org/\">sorbet</a> which is a static type checker for Ruby with a custom gradual type system.</li>\n<li><a href=\"https://github.com/soutaro/steep\">steep</a> which is a static type checker for Ruby that leverages Ruby Signature (RBS).</li>\n</ul>\n<p>When configuring a language server, it helps to open the LSP Logs window using the 'dev: Open Language Server Logs' command. You can then choose the corresponding language instance to see any logged information.</p>\n<h2 id=\"configuring-a-language-server\"><a class=\"header\" href=\"#configuring-a-language-server\">Configuring a language server</a></h2>\n<p>The <a href=\"https://github.com/zed-extensions/ruby\">Ruby extension</a> offers both <code>solargraph</code> and <code>ruby-lsp</code> language server support.</p>\n<h3 id=\"language-server-activation\"><a class=\"header\" href=\"#language-server-activation\">Language Server Activation</a></h3>\n<p>For all supported Ruby language servers (<code>solargraph</code>, <code>ruby-lsp</code>, <code>rubocop</code>, <code>sorbet</code>, and <code>steep</code>), the Ruby extension follows this activation sequence:</p>\n<ol>\n<li>If the language server is found in your project's <code>Gemfile</code>, it will be used through <code>bundle exec</code>.</li>\n<li>If not found in the <code>Gemfile</code>, the Ruby extension will look for the executable in your system <code>PATH</code>.</li>\n<li>If the language server is not found in either location, the Ruby extension will automatically install it as a global gem (note: this will not install to your current Ruby gemset).</li>\n</ol>\n<p>You can skip step 1 and force using the system executable by setting <code>use_bundler</code> to <code>false</code> in your settings:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"&lt;SERVER_NAME&gt;\": {\n      \"settings\": {\n        \"use_bundler\": false\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"using-solargraph\"><a class=\"header\" href=\"#using-solargraph\">Using <code>solargraph</code></a></h3>\n<p><code>solargraph</code> is enabled by default in the Ruby extension.</p>\n<h3 id=\"using-ruby-lsp\"><a class=\"header\" href=\"#using-ruby-lsp\">Using <code>ruby-lsp</code></a></h3>\n<p>To switch to <code>ruby-lsp</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"!rubocop\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<p>That disables <code>solargraph</code> and <code>rubocop</code> and enables <code>ruby-lsp</code>.</p>\n<h3 id=\"using-rubocop\"><a class=\"header\" href=\"#using-rubocop\">Using <code>rubocop</code></a></h3>\n<p>The Ruby extension also provides support for <code>rubocop</code> language server for offense detection and autocorrection.</p>\n<p>To enable it, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"rubocop\", \"!solargraph\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<p>Or, conversely, you can disable <code>ruby-lsp</code> and enable <code>solargraph</code> and <code>rubocop</code> by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"solargraph\", \"rubocop\", \"!ruby-lsp\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setting-up-solargraph\"><a class=\"header\" href=\"#setting-up-solargraph\">Setting up <code>solargraph</code></a></h2>\n<p>Solargraph has formatting and diagnostics disabled by default. We can tell Zed to enable them by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"solargraph\": {\n      \"initialization_options\": {\n        \"diagnostics\": true,\n        \"formatting\": true\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h3>\n<p>Solargraph reads its configuration from a file called <code>.solargraph.yml</code> in the root of your project. For more information about this file, see the <a href=\"https://solargraph.org/guides/configuration\">Solargraph configuration documentation</a>.</p>\n<h2 id=\"setting-up-ruby-lsp\"><a class=\"header\" href=\"#setting-up-ruby-lsp\">Setting up <code>ruby-lsp</code></a></h2>\n<p>You can pass Ruby LSP configuration to <code>initialization_options</code>, e.g.</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          // \"someFeature\": false\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>LSP <code>settings</code> and <code>initialization_options</code> can also be project-specific. For example to use <a href=\"https://github.com/standardrb/standard\">standardrb/standard</a> as a formatter and linter for a particular project, add this to a <code>.zed/settings.json</code> inside your project repo:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"formatter\": \"standard\",\n        \"linters\": [\"standard\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setting-up-rubocop-lsp\"><a class=\"header\" href=\"#setting-up-rubocop-lsp\">Setting up <code>rubocop</code> LSP</a></h2>\n<p>Rubocop has unsafe autocorrection disabled by default. We can tell Zed to enable it by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      // Use ruby-lsp as the primary language server and rubocop as the secondary.\n      \"language_servers\": [\"ruby-lsp\", \"rubocop\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"rubocop\": {\n      \"initialization_options\": {\n        \"safeAutocorrect\": false\n      }\n    },\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          \"diagnostics\": false\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setting-up-sorbet\"><a class=\"header\" href=\"#setting-up-sorbet\">Setting up Sorbet</a></h2>\n<p><a href=\"https://sorbet.org/\">Sorbet</a> is a popular static type checker for Ruby that includes a language server.</p>\n<p>To enable Sorbet, add <code>\\\"sorbet\\\"</code> to the <code>language_servers</code> list for Ruby in your <code>settings.json</code>. You may want to disable other language servers if Sorbet is intended to be your primary LSP, or if you plan to use it alongside another LSP for specific features like type checking.</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\n        \"ruby-lsp\",\n        \"sorbet\",\n        \"!rubocop\",\n        \"!solargraph\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<p>For all aspects of installing Sorbet, setting it up in your project, and configuring its behavior, please refer to the <a href=\"https://sorbet.org/docs/overview\">official Sorbet documentation</a>.</p>\n<h2 id=\"setting-up-steep\"><a class=\"header\" href=\"#setting-up-steep\">Setting up Steep</a></h2>\n<p><a href=\"https://github.com/soutaro/steep\">Steep</a> is a static type checker for Ruby that uses RBS files to define types.</p>\n<p>To enable Steep, add <code>\\\"steep\\\"</code> to the <code>language_servers</code> list for Ruby in your <code>settings.json</code>. You may need to adjust the order or disable other LSPs depending on your desired setup.</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\n        \"ruby-lsp\",\n        \"steep\",\n        \"!solargraph\",\n        \"!rubocop\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"using-the-tailwind-css-language-server-with-ruby\"><a class=\"header\" href=\"#using-the-tailwind-css-language-server-with-ruby\">Using the Tailwind CSS Language Server with Ruby</a></h2>\n<p>It's possible to use the <a href=\"https://github.com/tailwindlabs/tailwindcss-intellisense/tree/HEAD/packages/tailwindcss-language-server#readme\">Tailwind CSS Language Server</a> in Ruby and ERB files.</p>\n<p>In order to do that, you need to configure the language server so that it knows about where to look for CSS classes in Ruby/ERB files by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"tailwindcss-language-server\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"tailwindcss-language-server\": {\n      \"settings\": {\n        \"includeLanguages\": {\n          \"html/erb\": \"html\",\n          \"ruby\": \"html\"\n        },\n        \"experimental\": {\n          \"classRegex\": [\"\\\\bclass:\\\\s*['\\\"]([^'\\\"]*)['\\\"]\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>With these settings you will get completions for Tailwind CSS classes in HTML attributes inside ERB files and inside Ruby/ERB strings that are coming after a <code>class:</code> key. Examples:</p>\n<pre><code class=\"language-rb\"># Ruby file:\ndef method\n  div(class: \"pl-2 &lt;completion here&gt;\") do\n    p(class: \"mt-2 &lt;completion here&gt;\") { \"Hello World\" }\n  end\nend\n\n# ERB file:\n&lt;%= link_to \"Hello\", \"/hello\", class: \"pl-2 &lt;completion here&gt;\" %&gt;\n&lt;a href=\"/hello\" class=\"pl-2 &lt;completion here&gt;\"&gt;Hello&lt;/a&gt;\n</code></pre>\n<h2 id=\"running-tests\"><a class=\"header\" href=\"#running-tests\">Running tests</a></h2>\n<p>To run tests in your Ruby project, you can set up custom tasks in your local <code>.zed/tasks.json</code> configuration file. These tasks can be defined to work with different test frameworks like Minitest, RSpec, quickdraw, and tldr. Below are some examples of how to set up these tasks to run your tests from within your editor.</p>\n<h3 id=\"minitest-with-rails\"><a class=\"header\" href=\"#minitest-with-rails\">Minitest with Rails</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE -n /$ZED_CUSTOM_RUBY_TEST_NAME/\",\n    \"command\": \"bin/rails\",\n    \"args\": [\n      \"test\",\n      \"$ZED_RELATIVE_FILE\",\n      \"-n\",\n      \"\\\"$ZED_CUSTOM_RUBY_TEST_NAME\\\"\"\n    ],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n</code></pre>\n<h3 id=\"minitest\"><a class=\"header\" href=\"#minitest\">Minitest</a></h3>\n<p>Plain minitest does not support running tests by line number, only by name, so we need to use <code>$ZED_CUSTOM_RUBY_TEST_NAME</code> instead:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"-Itest $ZED_RELATIVE_FILE -n /$ZED_CUSTOM_RUBY_TEST_NAME/\",\n    \"command\": \"bundle\",\n    \"args\": [\n      \"exec\",\n      \"ruby\",\n      \"-Itest\",\n      \"$ZED_RELATIVE_FILE\",\n      \"-n\",\n      \"\\\"$ZED_CUSTOM_RUBY_TEST_NAME\\\"\"\n    ],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n</code></pre>\n<h3 id=\"rspec\"><a class=\"header\" href=\"#rspec\">RSpec</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bundle\",\n    \"args\": [\"exec\", \"rspec\", \"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n</code></pre>\n<p>Similar task syntax can be used for other test frameworks such as <code>quickdraw</code> or <code>tldr</code>.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>The Ruby extension provides a debug adapter for debugging Ruby code. Zed's name for the adapter (in the UI and <code>debug.json</code>) is <code>rdbg</code>, and under the hood, it uses the <a href=\"https://github.com/ruby/debug\"><code>debug</code></a> gem. The extension uses the <a href=\"#language-server-activation\">same activation logic</a> as the language servers.</p>\n<h3 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h3>\n<h4 id=\"debug-a-ruby-script\"><a class=\"header\" href=\"#debug-a-ruby-script\">Debug a Ruby script</a></h4>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug current file\",\n    \"adapter\": \"rdbg\",\n    \"request\": \"launch\",\n    \"script\": \"$ZED_FILE\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\"\n  }\n]\n</code></pre>\n<h4 id=\"debug-rails-server\"><a class=\"header\" href=\"#debug-rails-server\">Debug Rails server</a></h4>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug Rails server\",\n    \"adapter\": \"rdbg\",\n    \"request\": \"launch\",\n    \"command\": \"./bin/rails\",\n    \"args\": [\"server\"],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"RUBY_DEBUG_OPEN\": \"true\"\n    }\n  }\n]\n</code></pre>\n<h2 id=\"formatters\"><a class=\"header\" href=\"#formatters\">Formatters</a></h2>\n<h3 id=\"erb-formatter\"><a class=\"header\" href=\"#erb-formatter\"><code>erb-formatter</code></a></h3>\n<p>To format ERB templates, you can use the <code>erb-formatter</code> formatter. This formatter uses the <a href=\"https://rubygems.org/gems/erb-formatter\"><code>erb-formatter</code></a> gem to format ERB templates.</p>\n<pre><code class=\"language-jsonc\">{\n  \"HTML/ERB\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"erb-formatter\",\n        \"arguments\": [\"--stdin-filename\", \"{buffer_path}\"],\n      },\n    },\n  },\n}\n</code></pre>\n\n</main>",
    "content_text": "Ruby\nRuby support is available through the Ruby extension.\n\nTree-sitters:\n\ntree-sitter-ruby\ntree-sitter-embedded-template\n\n\nLanguage Servers:\n\nruby-lsp\nsolargraph\nrubocop\n\n\nDebug Adapter: rdbg\n\nThe Ruby extension also provides support for ERB files.\nLanguage Servers\nThere are multiple language servers available for Ruby. Zed supports the two following:\n\nsolargraph\nruby-lsp\n\nThey both have an overlapping feature set of autocomplete, diagnostics, code actions, etc. and it's up to you to decide which one you want to use. Note that you can't use both at the same time.\nIn addition to these two language servers, Zed also supports:\n\nrubocop which is a static code analyzer and linter for Ruby. Under the hood, it's also used by Zed as a language server, but its functionality is complimentary to that of solargraph and ruby-lsp.\nsorbet which is a static type checker for Ruby with a custom gradual type system.\nsteep which is a static type checker for Ruby that leverages Ruby Signature (RBS).\n\nWhen configuring a language server, it helps to open the LSP Logs window using the 'dev: Open Language Server Logs' command. You can then choose the corresponding language instance to see any logged information.\nConfiguring a language server\nThe Ruby extension offers both solargraph and ruby-lsp language server support.\nLanguage Server Activation\nFor all supported Ruby language servers (solargraph, ruby-lsp, rubocop, sorbet, and steep), the Ruby extension follows this activation sequence:\n\nIf the language server is found in your project's Gemfile, it will be used through bundle exec.\nIf not found in the Gemfile, the Ruby extension will look for the executable in your system PATH.\nIf the language server is not found in either location, the Ruby extension will automatically install it as a global gem (note: this will not install to your current Ruby gemset).\n\nYou can skip step 1 and force using the system executable by setting use_bundler to false in your settings:\n{\n  \"lsp\": {\n    \"<SERVER_NAME>\": {\n      \"settings\": {\n        \"use_bundler\": false\n      }\n    }\n  }\n}\n\nUsing solargraph\nsolargraph is enabled by default in the Ruby extension.\nUsing ruby-lsp\nTo switch to ruby-lsp, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"!rubocop\", \"...\"]\n    }\n  }\n}\n\nThat disables solargraph and rubocop and enables ruby-lsp.\nUsing rubocop\nThe Ruby extension also provides support for rubocop language server for offense detection and autocorrection.\nTo enable it, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"rubocop\", \"!solargraph\", \"...\"]\n    }\n  }\n}\n\nOr, conversely, you can disable ruby-lsp and enable solargraph and rubocop by adding the following to your settings.json:\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"solargraph\", \"rubocop\", \"!ruby-lsp\", \"...\"]\n    }\n  }\n}\n\nSetting up solargraph\nSolargraph has formatting and diagnostics disabled by default. We can tell Zed to enable them by adding the following to your settings.json:\n{\n  \"lsp\": {\n    \"solargraph\": {\n      \"initialization_options\": {\n        \"diagnostics\": true,\n        \"formatting\": true\n      }\n    }\n  }\n}\n\nConfiguration\nSolargraph reads its configuration from a file called .solargraph.yml in the root of your project. For more information about this file, see the Solargraph configuration documentation.\nSetting up ruby-lsp\nYou can pass Ruby LSP configuration to initialization_options, e.g.\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"ruby-lsp\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          // \"someFeature\": false\n        }\n      }\n    }\n  }\n}\n\nLSP settings and initialization_options can also be project-specific. For example to use standardrb/standard as a formatter and linter for a particular project, add this to a .zed/settings.json inside your project repo:\n{\n  \"lsp\": {\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"formatter\": \"standard\",\n        \"linters\": [\"standard\"]\n      }\n    }\n  }\n}\n\nSetting up rubocop LSP\nRubocop has unsafe autocorrection disabled by default. We can tell Zed to enable it by adding the following to your settings.json:\n{\n  \"languages\": {\n    \"Ruby\": {\n      // Use ruby-lsp as the primary language server and rubocop as the secondary.\n      \"language_servers\": [\"ruby-lsp\", \"rubocop\", \"!solargraph\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"rubocop\": {\n      \"initialization_options\": {\n        \"safeAutocorrect\": false\n      }\n    },\n    \"ruby-lsp\": {\n      \"initialization_options\": {\n        \"enabledFeatures\": {\n          \"diagnostics\": false\n        }\n      }\n    }\n  }\n}\n\nSetting up Sorbet\nSorbet is a popular static type checker for Ruby that includes a language server.\nTo enable Sorbet, add \\\"sorbet\\\" to the language_servers list for Ruby in your settings.json. You may want to disable other language servers if Sorbet is intended to be your primary LSP, or if you plan to use it alongside another LSP for specific features like type checking.\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\n        \"ruby-lsp\",\n        \"sorbet\",\n        \"!rubocop\",\n        \"!solargraph\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nFor all aspects of installing Sorbet, setting it up in your project, and configuring its behavior, please refer to the official Sorbet documentation.\nSetting up Steep\nSteep is a static type checker for Ruby that uses RBS files to define types.\nTo enable Steep, add \\\"steep\\\" to the language_servers list for Ruby in your settings.json. You may need to adjust the order or disable other LSPs depending on your desired setup.\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\n        \"ruby-lsp\",\n        \"steep\",\n        \"!solargraph\",\n        \"!rubocop\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nUsing the Tailwind CSS Language Server with Ruby\nIt's possible to use the Tailwind CSS Language Server in Ruby and ERB files.\nIn order to do that, you need to configure the language server so that it knows about where to look for CSS classes in Ruby/ERB files by adding the following to your settings.json:\n{\n  \"languages\": {\n    \"Ruby\": {\n      \"language_servers\": [\"tailwindcss-language-server\", \"...\"]\n    }\n  },\n  \"lsp\": {\n    \"tailwindcss-language-server\": {\n      \"settings\": {\n        \"includeLanguages\": {\n          \"html/erb\": \"html\",\n          \"ruby\": \"html\"\n        },\n        \"experimental\": {\n          \"classRegex\": [\"\\\\bclass:\\\\s*['\\\"]([^'\\\"]*)['\\\"]\"]\n        }\n      }\n    }\n  }\n}\n\nWith these settings you will get completions for Tailwind CSS classes in HTML attributes inside ERB files and inside Ruby/ERB strings that are coming after a class: key. Examples:\n# Ruby file:\ndef method\n  div(class: \"pl-2 <completion here>\") do\n    p(class: \"mt-2 <completion here>\") { \"Hello World\" }\n  end\nend\n\n# ERB file:\n<%= link_to \"Hello\", \"/hello\", class: \"pl-2 <completion here>\" %>\n<a href=\"/hello\" class=\"pl-2 <completion here>\">Hello</a>\n\nRunning tests\nTo run tests in your Ruby project, you can set up custom tasks in your local .zed/tasks.json configuration file. These tasks can be defined to work with different test frameworks like Minitest, RSpec, quickdraw, and tldr. Below are some examples of how to set up these tasks to run your tests from within your editor.\nMinitest with Rails\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE -n /$ZED_CUSTOM_RUBY_TEST_NAME/\",\n    \"command\": \"bin/rails\",\n    \"args\": [\n      \"test\",\n      \"$ZED_RELATIVE_FILE\",\n      \"-n\",\n      \"\\\"$ZED_CUSTOM_RUBY_TEST_NAME\\\"\"\n    ],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n\nMinitest\nPlain minitest does not support running tests by line number, only by name, so we need to use $ZED_CUSTOM_RUBY_TEST_NAME instead:\n[\n  {\n    \"label\": \"-Itest $ZED_RELATIVE_FILE -n /$ZED_CUSTOM_RUBY_TEST_NAME/\",\n    \"command\": \"bundle\",\n    \"args\": [\n      \"exec\",\n      \"ruby\",\n      \"-Itest\",\n      \"$ZED_RELATIVE_FILE\",\n      \"-n\",\n      \"\\\"$ZED_CUSTOM_RUBY_TEST_NAME\\\"\"\n    ],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n\nRSpec\n[\n  {\n    \"label\": \"test $ZED_RELATIVE_FILE:$ZED_ROW\",\n    \"command\": \"bundle\",\n    \"args\": [\"exec\", \"rspec\", \"\\\"$ZED_RELATIVE_FILE:$ZED_ROW\\\"\"],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"tags\": [\"ruby-test\"]\n  }\n]\n\nSimilar task syntax can be used for other test frameworks such as quickdraw or tldr.\nDebugging\nThe Ruby extension provides a debug adapter for debugging Ruby code. Zed's name for the adapter (in the UI and debug.json) is rdbg, and under the hood, it uses the debug gem. The extension uses the same activation logic as the language servers.\nExamples\nDebug a Ruby script\n[\n  {\n    \"label\": \"Debug current file\",\n    \"adapter\": \"rdbg\",\n    \"request\": \"launch\",\n    \"script\": \"$ZED_FILE\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\"\n  }\n]\n\nDebug Rails server\n[\n  {\n    \"label\": \"Debug Rails server\",\n    \"adapter\": \"rdbg\",\n    \"request\": \"launch\",\n    \"command\": \"./bin/rails\",\n    \"args\": [\"server\"],\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"RUBY_DEBUG_OPEN\": \"true\"\n    }\n  }\n]\n\nFormatters\nerb-formatter\nTo format ERB templates, you can use the erb-formatter formatter. This formatter uses the erb-formatter gem to format ERB templates.\n{\n  \"HTML/ERB\": {\n    \"formatter\": {\n      \"external\": {\n        \"command\": \"erb-formatter\",\n        \"arguments\": [\"--stdin-filename\", \"{buffer_path}\"],\n      },\n    },\n  },\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:14:59"
  },
  "languages/rust.html": {
    "url": "https://zed.dev/docs/languages/rust.html",
    "title": "Rust | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"rust\"><a class=\"header\" href=\"#rust\">Rust</a></h1>\n<p>Rust support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-rust\">tree-sitter/tree-sitter-rust</a></li>\n<li>Language Server: <a href=\"https://github.com/rust-lang/rust-analyzer\">rust-lang/rust-analyzer</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/vadimcn/codelldb\">CodeLLDB</a> (primary), <a href=\"https://sourceware.org/gdb/\">GDB</a> (secondary, not available on Apple silicon)</li>\n</ul>\n<!--\nTBD: Polish Rust Docs. Zed is a good rust editor, good Rust docs make it look like we care about Rust (we do!)\nTBD: Users may not know what inlayHints, don't start there.\nTBD: Provide explicit examples not just `....`\n-->\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h2>\n<p>The following configuration can be used to change the inlay hint settings for <code>rust-analyzer</code> in Rust:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"inlayHints\": {\n          \"maxLength\": null,\n          \"lifetimeElisionHints\": {\n            \"enable\": \"skip_trivial\",\n            \"useParameterNames\": true\n          },\n          \"closureReturnTypeHints\": {\n            \"enable\": \"always\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"https://rust-analyzer.github.io/book/features.html#inlay-hints\">Inlay Hints</a> in the Rust Analyzer Manual for more information.</p>\n<h2 id=\"target-directory\"><a class=\"header\" href=\"#target-directory\">Target directory</a></h2>\n<p>The <code>rust-analyzer</code> target directory can be set in <code>initialization_options</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"rust\": {\n          \"analyzerTargetDir\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>A <code>true</code> setting will set the target directory to <code>target/rust-analyzer</code>. You can set a custom directory with a string like <code>\"target/analyzer\"</code> instead of <code>true</code>.</p>\n<h2 id=\"binary\"><a class=\"header\" href=\"#binary\">Binary</a></h2>\n<p>You can configure which <code>rust-analyzer</code> binary Zed should use.</p>\n<p>By default, Zed will try to find a <code>rust-analyzer</code> in your <code>$PATH</code> and try to use that. If that binary successfully executes <code>rust-analyzer --help</code>, it's used. Otherwise, Zed will fall back to installing its own stable <code>rust-analyzer</code> version and use that.</p>\n<p>If you want to install pre-release <code>rust-analyzer</code> version instead you can instruct Zed to do so by setting <code>pre_release</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to disable Zed looking for a <code>rust-analyzer</code> binary, you can set <code>ignore_system_version</code> to <code>true</code> in your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you want to use a binary in a custom location, you can specify a <code>path</code> and optional <code>arguments</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"path\": \"/Users/example/bin/rust-analyzer\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n</code></pre>\n<p>This <code>\"path\"</code> has to be an absolute path.</p>\n<h2 id=\"alternate-targets\"><a class=\"header\" href=\"#alternate-targets\">Alternate Targets</a></h2>\n<p>If want rust-analyzer to provide diagnostics for a target other than you current platform (e.g. for windows when running on macOS) you can use the following Zed lsp settings:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"cargo\": {\n          \"target\": \"x86_64-pc-windows-msvc\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you are using <code>rustup</code> and you can find a list of available target triples (<code>aarch64-apple-darwin</code>, <code>x86_64-unknown-linux-gnu</code>, etc) by running:</p>\n<pre><code class=\"language-sh\">rustup target list --installed\n</code></pre>\n<h2 id=\"lsp-tasks\"><a class=\"header\" href=\"#lsp-tasks\">LSP tasks</a></h2>\n<p>Zed provides tasks using tree-sitter, but rust-analyzer has an LSP extension method for querying file-related tasks via LSP.\nThis is enabled by default and can be configured as</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"rust-analyzer\": {\n    \"enable_lsp_tasks\": true,\n  }\n}\n</code></pre>\n<h2 id=\"manual-cargo-diagnostics-fetch\"><a class=\"header\" href=\"#manual-cargo-diagnostics-fetch\">Manual Cargo Diagnostics fetch</a></h2>\n<p>By default, rust-analyzer has <code>checkOnSave: true</code> enabled, which causes every buffer save to trigger a <code>cargo check --workspace --all-targets</code> command.\nIf disabled with <code>checkOnSave: false</code> (see the example of the server configuration json above), it's still possible to fetch the diagnostics manually, with the <code>editor: run/clear/cancel flycheck</code> commands in Rust files to refresh cargo diagnostics; the project diagnostics editor will also refresh cargo diagnostics with <code>editor: run flycheck</code> command when the setting is enabled.</p>\n<h2 id=\"more-server-configuration\"><a class=\"header\" href=\"#more-server-configuration\">More server configuration</a></h2>\n<!--\nTBD: Is it possible to specify RUSTFLAGS? https://github.com/zed-industries/zed/issues/14334\n-->\n<p>Rust-analyzer <a href=\"https://rust-analyzer.github.io/book/\">manual</a> describes various features and configuration options for rust-analyzer language server.\nRust-analyzer in Zed runs with the default parameters.</p>\n<h3 id=\"large-projects-and-performance\"><a class=\"header\" href=\"#large-projects-and-performance\">Large projects and performance</a></h3>\n<p>One of the main caveats that might cause extensive resource usage on large projects, is the combination of the following features:</p>\n<pre><code>rust-analyzer.checkOnSave (default: true)\n    Run the check command for diagnostics on save.\n</code></pre>\n<pre><code>rust-analyzer.check.workspace (default: true)\n    Whether --workspace should be passed to cargo check. If false, -p &lt;package&gt; will be passed instead.\n</code></pre>\n<pre><code>rust-analyzer.cargo.allTargets (default: true)\n    Pass --all-targets to cargo invocation\n</code></pre>\n<p>Which would mean that every time Zed saves, a <code>cargo check --workspace --all-targets</code> command is run, checking the entire project (workspace), lib, doc, test, bin, bench and <a href=\"https://doc.rust-lang.org/cargo/reference/cargo-targets.html\">other targets</a>.</p>\n<p>While that works fine on small projects, it does not scale well.</p>\n<p>The alternatives would be to use <a href=\"../tasks.html\">tasks</a>, as Zed already provides a <code>cargo check --workspace --all-targets</code> task and the ability to cmd/ctrl-click on the terminal output to navigate to the error, and limit or turn off the check on save feature entirely.</p>\n<p>Check on save feature is responsible for returning part of the diagnostics based on cargo check output, so turning it off will limit rust-analyzer with its own <a href=\"https://rust-analyzer.github.io/book/diagnostics.html\">diagnostics</a>.</p>\n<p>Consider more <code>rust-analyzer.cargo.</code> and <code>rust-analyzer.check.</code> and <code>rust-analyzer.diagnostics.</code> settings from the manual for more fine-grained configuration.\nHere's a snippet for Zed settings.json (the language server will restart automatically after the <code>lsp.rust-analyzer</code> section is edited and saved):</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        // get more cargo-less diagnostics from rust-analyzer,\n        // which might include false-positives (those can be turned off by their names)\n        \"diagnostics\": {\n          \"experimental\": {\n            \"enable\": true\n          }\n        },\n        // To disable the checking entirely\n        // (ignores all cargo and check settings below)\n        \"checkOnSave\": false,\n        // To check the `lib` target only.\n        \"cargo\": {\n          \"allTargets\": false\n        },\n        // Use `-p` instead of `--workspace` for cargo check\n        \"check\": {\n          \"workspace\": false\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"multi-project-workspaces\"><a class=\"header\" href=\"#multi-project-workspaces\">Multi-project workspaces</a></h3>\n<p>If you want rust-analyzer to analyze multiple Rust projects in the same folder that are not listed in <code>[members]</code> in the Cargo workspace,\nyou can list them in <code>linkedProjects</code> in the local project settings:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"linkedProjects\": [\"./path/to/a/Cargo.toml\", \"./path/to/b/Cargo.toml\"]\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"snippets\"><a class=\"header\" href=\"#snippets\">Snippets</a></h3>\n<p>There's a way get custom completion items from rust-analyzer, that will transform the code according to the snippet body:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"completion\": {\n          \"snippets\": {\n            \"custom\": {\n              \"Arc::new\": {\n                \"postfix\": \"arc\",\n                \"body\": [\"Arc::new(${receiver})\"],\n                \"requires\": \"std::sync::Arc\",\n                \"scope\": \"expr\"\n              },\n              \"Some\": {\n                \"postfix\": \"some\",\n                \"body\": [\"Some(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Ok\": {\n                \"postfix\": \"ok\",\n                \"body\": [\"Ok(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Rc::new\": {\n                \"postfix\": \"rc\",\n                \"body\": [\"Rc::new(${receiver})\"],\n                \"requires\": \"std::rc::Rc\",\n                \"scope\": \"expr\"\n              },\n              \"Box::pin\": {\n                \"postfix\": \"boxpin\",\n                \"body\": [\"Box::pin(${receiver})\"],\n                \"requires\": \"std::boxed::Box\",\n                \"scope\": \"expr\"\n              },\n              \"vec!\": {\n                \"postfix\": \"vec\",\n                \"body\": [\"vec![${receiver}]\"],\n                \"description\": \"vec![]\",\n                \"scope\": \"expr\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports debugging Rust binaries and tests out of the box. Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to launch one of these preconfigured debug tasks.</p>\n<p>For more control, you can add debug configurations to <code>.zed/debug.json</code>. See the examples below.</p>\n<h3 id=\"build-binary-then-debug\"><a class=\"header\" href=\"#build-binary-then-debug\">Build binary then debug</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Build &amp; Debug native binary\",\n    \"build\": {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"]\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/target/debug/binary\",\n    // sourceLanguages is required for CodeLLDB (not GDB) when using Rust\n    \"sourceLanguages\": [\"rust\"],\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]\n</code></pre>\n<h3 id=\"automatically-locate-a-debug-target-based-on-build-command\"><a class=\"header\" href=\"#automatically-locate-a-debug-target-based-on-build-command\">Automatically locate a debug target based on build command</a></h3>\n<p>When you use <code>cargo build</code> or <code>cargo test</code> as the build command, Zed can infer the path to the output binary.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Build &amp; Debug native binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"build\": {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"]\n    },\n    // sourceLanguages is required for CodeLLDB (not GDB) when using Rust\n    \"sourceLanguages\": [\"rust\"]\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "Rust\nRust support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-rust\nLanguage Server: rust-lang/rust-analyzer\nDebug Adapter: CodeLLDB (primary), GDB (secondary, not available on Apple silicon)\n\n\nInlay Hints\nThe following configuration can be used to change the inlay hint settings for rust-analyzer in Rust:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"inlayHints\": {\n          \"maxLength\": null,\n          \"lifetimeElisionHints\": {\n            \"enable\": \"skip_trivial\",\n            \"useParameterNames\": true\n          },\n          \"closureReturnTypeHints\": {\n            \"enable\": \"always\"\n          }\n        }\n      }\n    }\n  }\n}\n\nSee Inlay Hints in the Rust Analyzer Manual for more information.\nTarget directory\nThe rust-analyzer target directory can be set in initialization_options:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"rust\": {\n          \"analyzerTargetDir\": true\n        }\n      }\n    }\n  }\n}\n\nA true setting will set the target directory to target/rust-analyzer. You can set a custom directory with a string like \"target/analyzer\" instead of true.\nBinary\nYou can configure which rust-analyzer binary Zed should use.\nBy default, Zed will try to find a rust-analyzer in your $PATH and try to use that. If that binary successfully executes rust-analyzer --help, it's used. Otherwise, Zed will fall back to installing its own stable rust-analyzer version and use that.\nIf you want to install pre-release rust-analyzer version instead you can instruct Zed to do so by setting pre_release to true in your settings.json:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"fetch\": {\n        \"pre_release\": true\n      }\n    }\n  }\n}\n\nIf you want to disable Zed looking for a rust-analyzer binary, you can set ignore_system_version to true in your settings.json:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"ignore_system_version\": true\n      }\n    }\n  }\n}\n\nIf you want to use a binary in a custom location, you can specify a path and optional arguments:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"binary\": {\n        \"path\": \"/Users/example/bin/rust-analyzer\",\n        \"arguments\": []\n      }\n    }\n  }\n}\n\nThis \"path\" has to be an absolute path.\nAlternate Targets\nIf want rust-analyzer to provide diagnostics for a target other than you current platform (e.g. for windows when running on macOS) you can use the following Zed lsp settings:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"cargo\": {\n          \"target\": \"x86_64-pc-windows-msvc\"\n        }\n      }\n    }\n  }\n}\n\nIf you are using rustup and you can find a list of available target triples (aarch64-apple-darwin, x86_64-unknown-linux-gnu, etc) by running:\nrustup target list --installed\n\nLSP tasks\nZed provides tasks using tree-sitter, but rust-analyzer has an LSP extension method for querying file-related tasks via LSP.\nThis is enabled by default and can be configured as\n\"lsp\": {\n  \"rust-analyzer\": {\n    \"enable_lsp_tasks\": true,\n  }\n}\n\nManual Cargo Diagnostics fetch\nBy default, rust-analyzer has checkOnSave: true enabled, which causes every buffer save to trigger a cargo check --workspace --all-targets command.\nIf disabled with checkOnSave: false (see the example of the server configuration json above), it's still possible to fetch the diagnostics manually, with the editor: run/clear/cancel flycheck commands in Rust files to refresh cargo diagnostics; the project diagnostics editor will also refresh cargo diagnostics with editor: run flycheck command when the setting is enabled.\nMore server configuration\n\nRust-analyzer manual describes various features and configuration options for rust-analyzer language server.\nRust-analyzer in Zed runs with the default parameters.\nLarge projects and performance\nOne of the main caveats that might cause extensive resource usage on large projects, is the combination of the following features:\nrust-analyzer.checkOnSave (default: true)\n    Run the check command for diagnostics on save.\n\nrust-analyzer.check.workspace (default: true)\n    Whether --workspace should be passed to cargo check. If false, -p <package> will be passed instead.\n\nrust-analyzer.cargo.allTargets (default: true)\n    Pass --all-targets to cargo invocation\n\nWhich would mean that every time Zed saves, a cargo check --workspace --all-targets command is run, checking the entire project (workspace), lib, doc, test, bin, bench and other targets.\nWhile that works fine on small projects, it does not scale well.\nThe alternatives would be to use tasks, as Zed already provides a cargo check --workspace --all-targets task and the ability to cmd/ctrl-click on the terminal output to navigate to the error, and limit or turn off the check on save feature entirely.\nCheck on save feature is responsible for returning part of the diagnostics based on cargo check output, so turning it off will limit rust-analyzer with its own diagnostics.\nConsider more rust-analyzer.cargo. and rust-analyzer.check. and rust-analyzer.diagnostics. settings from the manual for more fine-grained configuration.\nHere's a snippet for Zed settings.json (the language server will restart automatically after the lsp.rust-analyzer section is edited and saved):\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        // get more cargo-less diagnostics from rust-analyzer,\n        // which might include false-positives (those can be turned off by their names)\n        \"diagnostics\": {\n          \"experimental\": {\n            \"enable\": true\n          }\n        },\n        // To disable the checking entirely\n        // (ignores all cargo and check settings below)\n        \"checkOnSave\": false,\n        // To check the `lib` target only.\n        \"cargo\": {\n          \"allTargets\": false\n        },\n        // Use `-p` instead of `--workspace` for cargo check\n        \"check\": {\n          \"workspace\": false\n        }\n      }\n    }\n  }\n}\n\nMulti-project workspaces\nIf you want rust-analyzer to analyze multiple Rust projects in the same folder that are not listed in [members] in the Cargo workspace,\nyou can list them in linkedProjects in the local project settings:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"linkedProjects\": [\"./path/to/a/Cargo.toml\", \"./path/to/b/Cargo.toml\"]\n      }\n    }\n  }\n}\n\nSnippets\nThere's a way get custom completion items from rust-analyzer, that will transform the code according to the snippet body:\n{\n  \"lsp\": {\n    \"rust-analyzer\": {\n      \"initialization_options\": {\n        \"completion\": {\n          \"snippets\": {\n            \"custom\": {\n              \"Arc::new\": {\n                \"postfix\": \"arc\",\n                \"body\": [\"Arc::new(${receiver})\"],\n                \"requires\": \"std::sync::Arc\",\n                \"scope\": \"expr\"\n              },\n              \"Some\": {\n                \"postfix\": \"some\",\n                \"body\": [\"Some(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Ok\": {\n                \"postfix\": \"ok\",\n                \"body\": [\"Ok(${receiver})\"],\n                \"scope\": \"expr\"\n              },\n              \"Rc::new\": {\n                \"postfix\": \"rc\",\n                \"body\": [\"Rc::new(${receiver})\"],\n                \"requires\": \"std::rc::Rc\",\n                \"scope\": \"expr\"\n              },\n              \"Box::pin\": {\n                \"postfix\": \"boxpin\",\n                \"body\": [\"Box::pin(${receiver})\"],\n                \"requires\": \"std::boxed::Box\",\n                \"scope\": \"expr\"\n              },\n              \"vec!\": {\n                \"postfix\": \"vec\",\n                \"body\": [\"vec![${receiver}]\"],\n                \"description\": \"vec![]\",\n                \"scope\": \"expr\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nDebugging\nZed supports debugging Rust binaries and tests out of the box. Run debugger: start (f4|f4) to launch one of these preconfigured debug tasks.\nFor more control, you can add debug configurations to .zed/debug.json. See the examples below.\nBuild binary then debug\n[\n  {\n    \"label\": \"Build & Debug native binary\",\n    \"build\": {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"]\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/target/debug/binary\",\n    // sourceLanguages is required for CodeLLDB (not GDB) when using Rust\n    \"sourceLanguages\": [\"rust\"],\n    \"request\": \"launch\",\n    \"adapter\": \"CodeLLDB\"\n  }\n]\n\nAutomatically locate a debug target based on build command\nWhen you use cargo build or cargo test as the build command, Zed can infer the path to the output binary.\n[\n  {\n    \"label\": \"Build & Debug native binary\",\n    \"adapter\": \"CodeLLDB\",\n    \"build\": {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"]\n    },\n    // sourceLanguages is required for CodeLLDB (not GDB) when using Rust\n    \"sourceLanguages\": [\"rust\"]\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:01"
  },
  "languages/scala.html": {
    "url": "https://zed.dev/docs/languages/scala.html",
    "title": "Scala | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"scala\"><a class=\"header\" href=\"#scala\">Scala</a></h1>\n<p>Scala language support in Zed is provided by the community-maintained <a href=\"https://github.com/scalameta/metals-zed\">Scala extension</a>.\nReport issues to: <a href=\"https://github.com/scalameta/metals-zed/issues\">https://github.com/scalameta/metals-zed/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-scala\">tree-sitter/tree-sitter-scala</a></li>\n<li>Language Server: <a href=\"https://github.com/scalameta/metals\">scalameta/metals</a></li>\n</ul>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<ul>\n<li>Install Scala with <code>cs setup</code> (Coursier): https://www.scala-lang.org/download/\n<ul>\n<li><code>brew install coursier/formulas/coursier &amp;&amp; cs setup</code></li>\n</ul>\n</li>\n<li>REPL (Almond) Setup Instructions https://almond.sh/docs/quick-start-install\n<ul>\n<li><code>brew install --cask temurin</code> (Eclipse foundation official OpenJDK binaries)</li>\n<li><code>brew install coursier/formulas/coursier &amp;&amp; cs setup</code></li>\n<li><code>coursier launch --use-bootstrap almond -- --install</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>Behavior of the Metals language server can be controlled with:</p>\n<ul>\n<li><code>.scalafix.conf</code> file - See <a href=\"https://scalacenter.github.io/scalafix/docs/users/configuration.html\">Scalafix Configuration</a></li>\n<li><code>.scalafmt.conf</code> file - See <a href=\"https://scalameta.org/scalafmt/docs/configuration.html\">Scalafmt Configuration</a></li>\n</ul>\n<p>You can place these files in the root of your project or specifying their location in the Metals configuration. See <a href=\"https://scalameta.org/metals/docs/editors/user-configuration\">Metals User Configuration</a> for more.</p>\n<!--\nTBD: Provide LSP configuration example for metals in Zed settings.json. metals.{javaHome,excludedPackages,customProjectRoot} etc.\n-->\n\n</main>",
    "content_text": "Scala\nScala language support in Zed is provided by the community-maintained Scala extension.\nReport issues to: https://github.com/scalameta/metals-zed/issues\n\nTree-sitter: tree-sitter/tree-sitter-scala\nLanguage Server: scalameta/metals\n\nSetup\n\nInstall Scala with cs setup (Coursier): https://www.scala-lang.org/download/\n\nbrew install coursier/formulas/coursier && cs setup\n\n\nREPL (Almond) Setup Instructions https://almond.sh/docs/quick-start-install\n\nbrew install --cask temurin (Eclipse foundation official OpenJDK binaries)\nbrew install coursier/formulas/coursier && cs setup\ncoursier launch --use-bootstrap almond -- --install\n\n\n\nConfiguration\nBehavior of the Metals language server can be controlled with:\n\n.scalafix.conf file - See Scalafix Configuration\n.scalafmt.conf file - See Scalafmt Configuration\n\nYou can place these files in the root of your project or specifying their location in the Metals configuration. See Metals User Configuration for more.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:03"
  },
  "languages/scheme.html": {
    "url": "https://zed.dev/docs/languages/scheme.html",
    "title": "Scheme | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"scheme\"><a class=\"header\" href=\"#scheme\">Scheme</a></h1>\n<p>Scheme support is available through the <a href=\"https://github.com/zed-extensions/scheme\">Scheme extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/6cdh/tree-sitter-scheme\">6cdh/tree-sitter-scheme</a></li>\n</ul>\n\n</main>",
    "content_text": "Scheme\nScheme support is available through the Scheme extension.\n\nTree-sitter: 6cdh/tree-sitter-scheme",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:05"
  },
  "languages/sh.html": {
    "url": "https://zed.dev/docs/languages/sh.html",
    "title": "Shell Script | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"shell-scripts\"><a class=\"header\" href=\"#shell-scripts\">Shell Scripts</a></h1>\n<p>Shell Scripts (bash, zsh, dash, sh) are supported natively by Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-bash\">tree-sitter/tree-sitter-bash</a></li>\n</ul>\n<h2 id=\"settings\"><a class=\"header\" href=\"#settings\">Settings</a></h2>\n<p>You can configure various settings for Shell Scripts in your Zed User Settings (<code>~/.config/zed/settings.json</code>) or Zed Project Settings (<code>.zed/settings.json</code>):</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Shell Script\": {\n      \"tab_size\": 2,\n      \"hard_tabs\": false\n    }\n  }\n</code></pre>\n<h3 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h3>\n<p>Zed supports auto-formatting Shell Scripts using external tools like <a href=\"https://github.com/mvdan/sh\"><code>shfmt</code></a>.</p>\n<ol>\n<li>Install <code>shfmt</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">brew install shfmt            # macos (homebrew)\nsudo apt-get install shfmt    # debian/ubuntu\ndnf install shfmt             # fedora\nyum install shfmt             # redhat\npacman -Sy shfmt              # archlinux\nchoco install shfmt           # windows (chocolatey)\n</code></pre>\n<ol start=\"2\">\n<li>Ensure <code>shfmt</code> is available in your path and check the version:</li>\n</ol>\n<pre><code class=\"language-sh\">which shfmt\nshfmt --version\n</code></pre>\n<ol start=\"3\">\n<li>Configure Zed to automatically format Shell Scripts with <code>shfmt</code> on save:</li>\n</ol>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"Shell Script\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"shfmt\",\n          // Change `--indent 2` to match your preferred tab_size\n          \"arguments\": [\"--filename\", \"{buffer_path}\", \"--indent\", \"2\"]\n        }\n      }\n    }\n  }\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also:</a></h2>\n<ul>\n<li><a href=\"./bash.html\">Zed Docs: Language Support: Bash</a></li>\n<li><a href=\"./fish.html\">Zed Docs: Language Support: Fish</a></li>\n</ul>\n\n</main>",
    "content_text": "Shell Scripts\nShell Scripts (bash, zsh, dash, sh) are supported natively by Zed.\n\nTree-sitter: tree-sitter/tree-sitter-bash\n\nSettings\nYou can configure various settings for Shell Scripts in your Zed User Settings (~/.config/zed/settings.json) or Zed Project Settings (.zed/settings.json):\n  \"languages\": {\n    \"Shell Script\": {\n      \"tab_size\": 2,\n      \"hard_tabs\": false\n    }\n  }\n\nFormatting\nZed supports auto-formatting Shell Scripts using external tools like shfmt.\n\nInstall shfmt:\n\nbrew install shfmt            # macos (homebrew)\nsudo apt-get install shfmt    # debian/ubuntu\ndnf install shfmt             # fedora\nyum install shfmt             # redhat\npacman -Sy shfmt              # archlinux\nchoco install shfmt           # windows (chocolatey)\n\n\nEnsure shfmt is available in your path and check the version:\n\nwhich shfmt\nshfmt --version\n\n\nConfigure Zed to automatically format Shell Scripts with shfmt on save:\n\n  \"languages\": {\n    \"Shell Script\": {\n      \"format_on_save\": \"on\",\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"shfmt\",\n          // Change `--indent 2` to match your preferred tab_size\n          \"arguments\": [\"--filename\", \"{buffer_path}\", \"--indent\", \"2\"]\n        }\n      }\n    }\n  }\n\nSee also:\n\nZed Docs: Language Support: Bash\nZed Docs: Language Support: Fish",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:07"
  },
  "languages/sql.html": {
    "url": "https://zed.dev/docs/languages/sql.html",
    "title": "SQL | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"sql\"><a class=\"header\" href=\"#sql\">SQL</a></h1>\n<p>SQL files are handled by the <a href=\"https://github.com/zed-extensions/sql\">SQL Extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/nervenes/tree-sitter-sql\">nervenes/tree-sitter-sql</a></li>\n</ul>\n<h3 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h3>\n<p>Zed supports auto-formatting SQL using external tools like <a href=\"https://github.com/sql-formatter-org/sql-formatter\"><code>sql-formatter</code></a>.</p>\n<ol>\n<li>Install <code>sql-formatter</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">npm install -g sql-formatter\n</code></pre>\n<ol start=\"2\">\n<li>Ensure <code>sql-formatter</code> is available in your path and check the version:</li>\n</ol>\n<pre><code class=\"language-sh\">which sql-formatter\nsql-formatter --version\n</code></pre>\n<ol start=\"3\">\n<li>Configure Zed to automatically format SQL with <code>sql-formatter</code>:</li>\n</ol>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"SQL\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"sql-formatter\",\n          \"arguments\": [\"--language\", \"mysql\"]\n        }\n      }\n    }\n  },\n</code></pre>\n<p>Substitute your preferred [SQL Dialect] for <code>mysql</code> above (<code>duckdb</code>, <code>hive</code>, <code>mariadb</code>, <code>postgresql</code>, <code>redshift</code>, <code>snowflake</code>, <code>sqlite</code>, <code>spark</code>, etc).</p>\n<p>You can add this to Zed project settings (<code>.zed/settings.json</code>) or via your Zed user settings (<code>~/.config/zed/settings.json</code>).</p>\n<h3 id=\"advanced-formatting\"><a class=\"header\" href=\"#advanced-formatting\">Advanced Formatting</a></h3>\n<p>Sql-formatter also allows more precise control by providing <a href=\"https://github.com/sql-formatter-org/sql-formatter#configuration-options\">sql-formatter configuration options</a>. To provide these, create a <code>.sql-formatter.json</code> file in your project:</p>\n<pre><code class=\"language-json\">{\n  \"language\": \"postgresql\",\n  \"tabWidth\": 2,\n  \"keywordCase\": \"upper\",\n  \"linesBetweenQueries\": 2\n}\n</code></pre>\n<p>When using a <code>.sql-formatter.json</code> file you can use a more simplified set of Zed settings since the language need not be specified inline:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"SQL\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"sql-formatter\"\n        }\n      }\n    }\n  },\n</code></pre>\n\n</main>",
    "content_text": "SQL\nSQL files are handled by the SQL Extension.\n\nTree-sitter: nervenes/tree-sitter-sql\n\nFormatting\nZed supports auto-formatting SQL using external tools like sql-formatter.\n\nInstall sql-formatter:\n\nnpm install -g sql-formatter\n\n\nEnsure sql-formatter is available in your path and check the version:\n\nwhich sql-formatter\nsql-formatter --version\n\n\nConfigure Zed to automatically format SQL with sql-formatter:\n\n  \"languages\": {\n    \"SQL\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"sql-formatter\",\n          \"arguments\": [\"--language\", \"mysql\"]\n        }\n      }\n    }\n  },\n\nSubstitute your preferred [SQL Dialect] for mysql above (duckdb, hive, mariadb, postgresql, redshift, snowflake, sqlite, spark, etc).\nYou can add this to Zed project settings (.zed/settings.json) or via your Zed user settings (~/.config/zed/settings.json).\nAdvanced Formatting\nSql-formatter also allows more precise control by providing sql-formatter configuration options. To provide these, create a .sql-formatter.json file in your project:\n{\n  \"language\": \"postgresql\",\n  \"tabWidth\": 2,\n  \"keywordCase\": \"upper\",\n  \"linesBetweenQueries\": 2\n}\n\nWhen using a .sql-formatter.json file you can use a more simplified set of Zed settings since the language need not be specified inline:\n  \"languages\": {\n    \"SQL\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"sql-formatter\"\n        }\n      }\n    }\n  },",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:09"
  },
  "languages/svelte.html": {
    "url": "https://zed.dev/docs/languages/svelte.html",
    "title": "Svelte | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"svelte\"><a class=\"header\" href=\"#svelte\">Svelte</a></h1>\n<p>Svelte support is available through the <a href=\"https://github.com/zed-extensions/svelte\">Svelte extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-svelte\">tree-sitter-grammars/tree-sitter-svelte</a></li>\n<li>Language Server: <a href=\"https://github.com/sveltejs/language-tools\">sveltejs/language-tools</a></li>\n</ul>\n<h2 id=\"extra-theme-styling-configuration\"><a class=\"header\" href=\"#extra-theme-styling-configuration\">Extra theme styling configuration</a></h2>\n<p>You can modify how certain styles, such as directives and modifiers, appear in attributes:</p>\n<pre><code class=\"language-json\">\"syntax\": {\n  // Styling for directives (e.g., `class:foo` or `on:click`) (the `on` or `class` part of the attribute).\n  \"attribute.function\": {\n    \"color\": \"#ff0000\"\n  },\n  // Styling for modifiers at the end of attributes, e.g. `on:&lt;click|preventDefault|stopPropagation&gt;`\n  \"attribute.special\": {\n    \"color\": \"#00ff00\"\n  }\n}\n</code></pre>\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h2>\n<p>When inlay hints is enabled in Zed, to make the language server send them back, Zed sets the following initialization options:</p>\n<pre><code class=\"language-json\">\"inlayHints\": {\n  \"parameterNames\": {\n    \"enabled\": \"all\",\n    \"suppressWhenArgumentMatchesName\": false\n  },\n  \"parameterTypes\": {\n    \"enabled\": true\n  },\n  \"variableTypes\": {\n    \"enabled\": true,\n    \"suppressWhenTypeMatchesName\": false\n  },\n  \"propertyDeclarationTypes\": {\n    \"enabled\": true\n  },\n  \"functionLikeReturnTypes\": {\n    \"enabled\": true\n  },\n  \"enumMemberValues\": {\n    \"enabled\": true\n  }\n}\n</code></pre>\n<p>To override these settings, use the following:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"svelte-language-server\": {\n    \"initialization_options\": {\n      \"configuration\": {\n        \"typescript\": {\n          ......\n        },\n        \"javascript\": {\n          ......\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/package.json\">the TypeScript language server <code>package.json</code></a> for more information.</p>\n\n</main>",
    "content_text": "Svelte\nSvelte support is available through the Svelte extension.\n\nTree-sitter: tree-sitter-grammars/tree-sitter-svelte\nLanguage Server: sveltejs/language-tools\n\nExtra theme styling configuration\nYou can modify how certain styles, such as directives and modifiers, appear in attributes:\n\"syntax\": {\n  // Styling for directives (e.g., `class:foo` or `on:click`) (the `on` or `class` part of the attribute).\n  \"attribute.function\": {\n    \"color\": \"#ff0000\"\n  },\n  // Styling for modifiers at the end of attributes, e.g. `on:<click|preventDefault|stopPropagation>`\n  \"attribute.special\": {\n    \"color\": \"#00ff00\"\n  }\n}\n\nInlay Hints\nWhen inlay hints is enabled in Zed, to make the language server send them back, Zed sets the following initialization options:\n\"inlayHints\": {\n  \"parameterNames\": {\n    \"enabled\": \"all\",\n    \"suppressWhenArgumentMatchesName\": false\n  },\n  \"parameterTypes\": {\n    \"enabled\": true\n  },\n  \"variableTypes\": {\n    \"enabled\": true,\n    \"suppressWhenTypeMatchesName\": false\n  },\n  \"propertyDeclarationTypes\": {\n    \"enabled\": true\n  },\n  \"functionLikeReturnTypes\": {\n    \"enabled\": true\n  },\n  \"enumMemberValues\": {\n    \"enabled\": true\n  }\n}\n\nTo override these settings, use the following:\n\"lsp\": {\n  \"svelte-language-server\": {\n    \"initialization_options\": {\n      \"configuration\": {\n        \"typescript\": {\n          ......\n        },\n        \"javascript\": {\n          ......\n        }\n      }\n    }\n  }\n}\n\nSee the TypeScript language server package.json for more information.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:11"
  },
  "languages/swift.html": {
    "url": "https://zed.dev/docs/languages/swift.html",
    "title": "Swift | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"swift\"><a class=\"header\" href=\"#swift\">Swift</a></h1>\n<p>Swift language support in Zed is provided by the community-maintained <a href=\"https://github.com/zed-extensions/swift\">Swift extension</a>.\nReport issues to: <a href=\"https://github.com/zed-extensions/swift/issues\">https://github.com/zed-extensions/swift/issues</a></p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/alex-pinkus/tree-sitter-swift\">alex-pinkus/tree-sitter-swift</a></li>\n<li>Language Server: <a href=\"https://github.com/swiftlang/sourcekit-lsp\">swiftlang/sourcekit-lsp</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/swiftlang/llvm-project/blob/next/lldb/tools/lldb-dap/README.md\"><code>lldb-dap</code></a></li>\n</ul>\n<h2 id=\"language-server-configuration\"><a class=\"header\" href=\"#language-server-configuration\">Language Server Configuration</a></h2>\n<p>You can modify the behavior of SourceKit LSP by creating a <code>.sourcekit-lsp/config.json</code> under your home directory or in your project root. See <a href=\"https://github.com/swiftlang/sourcekit-lsp/blob/main/Documentation/Configuration%20File.md\">SourceKit-LSP configuration file</a> for complete documentation.</p>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>The Swift extension provides a debug adapter for debugging Swift code.\nZed's name for the adapter (in the UI and <code>debug.json</code>) is <code>Swift</code>, and under the hood it uses <a href=\"https://github.com/swiftlang/llvm-project/blob/next/lldb/tools/lldb-dap/README.md\"><code>lldb-dap</code></a>, as provided by the Swift toolchain.\nThe extension tries to find an <code>lldb-dap</code> binary using <code>swiftly</code>, using <code>xcrun</code>, and by searching <code>$PATH</code>, in that order of preference.\nThe extension doesn't attempt to download <code>lldb-dap</code> if it's not found.</p>\n<h3 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h3>\n<h4 id=\"build-and-debug-a-swift-binary\"><a class=\"header\" href=\"#build-and-debug-a-swift-binary\">Build and debug a Swift binary</a></h4>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Debug Swift\",\n    \"build\": {\n      \"command\": \"swift\",\n      \"args\": [\"build\"]\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/swift-app/.build/arm64-apple-macosx/debug/swift-app\",\n    \"request\": \"launch\",\n    \"adapter\": \"Swift\"\n  }\n]\n</code></pre>\n\n</main>",
    "content_text": "Swift\nSwift language support in Zed is provided by the community-maintained Swift extension.\nReport issues to: https://github.com/zed-extensions/swift/issues\n\nTree-sitter: alex-pinkus/tree-sitter-swift\nLanguage Server: swiftlang/sourcekit-lsp\nDebug Adapter: lldb-dap\n\nLanguage Server Configuration\nYou can modify the behavior of SourceKit LSP by creating a .sourcekit-lsp/config.json under your home directory or in your project root. See SourceKit-LSP configuration file for complete documentation.\nDebugging\nThe Swift extension provides a debug adapter for debugging Swift code.\nZed's name for the adapter (in the UI and debug.json) is Swift, and under the hood it uses lldb-dap, as provided by the Swift toolchain.\nThe extension tries to find an lldb-dap binary using swiftly, using xcrun, and by searching $PATH, in that order of preference.\nThe extension doesn't attempt to download lldb-dap if it's not found.\nExamples\nBuild and debug a Swift binary\n[\n  {\n    \"label\": \"Debug Swift\",\n    \"build\": {\n      \"command\": \"swift\",\n      \"args\": [\"build\"]\n    },\n    \"program\": \"$ZED_WORKTREE_ROOT/swift-app/.build/arm64-apple-macosx/debug/swift-app\",\n    \"request\": \"launch\",\n    \"adapter\": \"Swift\"\n  }\n]",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:13"
  },
  "languages/tailwindcss.html": {
    "url": "https://zed.dev/docs/languages/tailwindcss.html",
    "title": "Tailwind CSS | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"tailwind-css\"><a class=\"header\" href=\"#tailwind-css\">Tailwind CSS</a></h1>\n<p>Zed has built-in support for Tailwind CSS autocomplete, linting, and hover previews.</p>\n<ul>\n<li>Language Server: <a href=\"https://github.com/tailwindlabs/tailwindcss-intellisense\">tailwindlabs/tailwindcss-intellisense</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<!--\nTBD: Document Tailwind CSS Configuration\n-->\n<p>Languages which can be used with Tailwind CSS in Zed:</p>\n<ul>\n<li><a href=\"./astro.html\">Astro</a></li>\n<li><a href=\"./css.html\">CSS</a></li>\n<li><a href=\"./ruby.html\">ERB</a></li>\n<li><a href=\"./elixir.html#heex\">HEEx</a></li>\n<li><a href=\"./html.html\">HTML</a></li>\n<li><a href=\"./typescript.html\">TypeScript</a></li>\n<li><a href=\"./javascript.html\">JavaScript</a></li>\n<li><a href=\"./php.html\">PHP</a></li>\n<li><a href=\"./svelte.html\">Svelte</a></li>\n<li><a href=\"./vue.html\">Vue</a></li>\n</ul>\n<h3 id=\"prettier-plugin\"><a class=\"header\" href=\"#prettier-plugin\">Prettier Plugin</a></h3>\n<p>Zed supports Prettier out of the box, which means that if you have the <a href=\"https://github.com/tailwindlabs/prettier-plugin-tailwindcss\">Tailwind CSS Prettier plugin</a> installed, adding it to your Prettier configuration will make it work automatically:</p>\n<pre><code class=\"language-json\">// .prettierrc\n{\n  \"plugins\": [\"prettier-plugin-tailwindcss\"]\n}\n</code></pre>\n\n</main>",
    "content_text": "Tailwind CSS\nZed has built-in support for Tailwind CSS autocomplete, linting, and hover previews.\n\nLanguage Server: tailwindlabs/tailwindcss-intellisense\n\nConfiguration\n\nLanguages which can be used with Tailwind CSS in Zed:\n\nAstro\nCSS\nERB\nHEEx\nHTML\nTypeScript\nJavaScript\nPHP\nSvelte\nVue\n\nPrettier Plugin\nZed supports Prettier out of the box, which means that if you have the Tailwind CSS Prettier plugin installed, adding it to your Prettier configuration will make it work automatically:\n// .prettierrc\n{\n  \"plugins\": [\"prettier-plugin-tailwindcss\"]\n}",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:15"
  },
  "languages/terraform.html": {
    "url": "https://zed.dev/docs/languages/terraform.html",
    "title": "Terraform | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"terraform\"><a class=\"header\" href=\"#terraform\">Terraform</a></h1>\n<p>Terraform support is available through the <a href=\"https://github.com/zed-extensions/terraform\">Terraform extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/MichaHoffmann/tree-sitter-hcl\">MichaHoffmann/tree-sitter-hcl</a></li>\n<li>Language Server: <a href=\"https://github.com/hashicorp/terraform-ls\">hashicorp/terraform-ls</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<!--\nTBD: Add example using `rootModulePaths` to match upstream example https://github.com/hashicorp/terraform-ls/blob/main/docs/SETTINGS.md#vs-code\n-->\n<p>The Terraform language server can be configured in your <code>settings.json</code>, e.g.:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"terraform-ls\": {\n      \"initialization_options\": {\n        \"experimentalFeatures\": {\n          \"prefillRequiredFields\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>See the <a href=\"https://github.com/hashicorp/terraform-ls/blob/main/docs/SETTINGS.md\">full list of server settings here</a>.</p>\n\n</main>",
    "content_text": "Terraform\nTerraform support is available through the Terraform extension.\n\nTree-sitter: MichaHoffmann/tree-sitter-hcl\nLanguage Server: hashicorp/terraform-ls\n\nConfiguration\n\nThe Terraform language server can be configured in your settings.json, e.g.:\n{\n  \"lsp\": {\n    \"terraform-ls\": {\n      \"initialization_options\": {\n        \"experimentalFeatures\": {\n          \"prefillRequiredFields\": true\n        }\n      }\n    }\n  }\n}\n\nSee the full list of server settings here.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:18"
  },
  "languages/toml.html": {
    "url": "https://zed.dev/docs/languages/toml.html",
    "title": "TOML | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"toml\"><a class=\"header\" href=\"#toml\">TOML</a></h1>\n<p>TOML support is available through the <a href=\"https://zed.dev/extensions/toml\">TOML extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-toml\">tree-sitter/tree-sitter-toml</a></li>\n</ul>\n<p>A TOML language server is available in the <a href=\"https://zed.dev/extensions/tombi\">Tombi extension</a>.</p>\n\n</main>",
    "content_text": "TOML\nTOML support is available through the TOML extension.\n\nTree-sitter: tree-sitter/tree-sitter-toml\n\nA TOML language server is available in the Tombi extension.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:20"
  },
  "languages/typescript.html": {
    "url": "https://zed.dev/docs/languages/typescript.html",
    "title": "TypeScript | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"typescript\"><a class=\"header\" href=\"#typescript\">TypeScript</a></h1>\n<p>TypeScript and TSX support are available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-typescript\">tree-sitter/tree-sitter-typescript</a></li>\n<li>Language Server: <a href=\"https://github.com/yioneko/vtsls\">yioneko/vtsls</a></li>\n<li>Alternate Language Server: <a href=\"https://github.com/typescript-language-server/typescript-language-server\">typescript-language-server/typescript-language-server</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/microsoft/vscode-js-debug\">vscode-js-debug</a></li>\n</ul>\n<!--\nTBD: Document the difference between Language servers\n-->\n<h2 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language servers</a></h2>\n<p>By default Zed uses <a href=\"https://github.com/yioneko/vtsls\">vtsls</a> for TypeScript, TSX, and JavaScript files.\nYou can configure the use of <a href=\"https://github.com/typescript-language-server/typescript-language-server\">typescript-language-server</a> per language in your settings file:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"TypeScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"TSX\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"JavaScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    }\n  }\n}\n</code></pre>\n<p>Prettier will also be used for TypeScript files by default. To disable this:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"TypeScript\": {\n      \"prettier\": { \"allowed\": false }\n    }\n    //...\n  }\n}\n</code></pre>\n<h2 id=\"large-projects\"><a class=\"header\" href=\"#large-projects\">Large projects</a></h2>\n<p><code>vtsls</code> may run out of memory on very large projects. We default the limit to 8092 (8 GiB) vs. the default of 3072 but this may not be sufficient for you:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        // For TypeScript:\n        \"typescript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } },\n        // For JavaScript:\n        \"javascript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"inlay-hints\"><a class=\"header\" href=\"#inlay-hints\">Inlay Hints</a></h2>\n<p>Zed sets the following initialization options to make the language server send back inlay hints (that is, when Zed has inlay hints enabled in the settings).</p>\n<p>You can override these settings in your Zed <code>settings.json</code> when using <code>typescript-language-server</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"typescript-language-server\": {\n      \"initialization_options\": {\n        \"preferences\": {\n          \"includeInlayParameterNameHints\": \"all\",\n          \"includeInlayParameterNameHintsWhenArgumentMatchesName\": true,\n          \"includeInlayFunctionParameterTypeHints\": true,\n          \"includeInlayVariableTypeHints\": true,\n          \"includeInlayVariableTypeHintsWhenTypeMatchesName\": true,\n          \"includeInlayPropertyDeclarationTypeHints\": true,\n          \"includeInlayFunctionLikeReturnTypeHints\": true,\n          \"includeInlayEnumMemberValueHints\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"https://github.com/typescript-language-server/typescript-language-server?tab=readme-ov-file#inlay-hints-textdocumentinlayhint\">typescript-language-server inlayhints documentation</a> for more information.</p>\n<p>When using <code>vtsls</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        // For JavaScript:\n        \"javascript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        },\n        // For TypeScript:\n        \"typescript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports debugging TypeScript code out of the box.\nThe following can be debugged without writing additional configuration:</p>\n<ul>\n<li>Tasks from <code>package.json</code></li>\n<li>Tests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)</li>\n</ul>\n<p>Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list of these predefined debug tasks.</p>\n<p>As for all languages, configurations from <code>.vscode/launch.json</code> are also available for debugging in Zed.</p>\n<p>If your use-case isn't covered by any of these, you can take full control by adding debug configurations to <code>.zed/debug.json</code>. See below for example configurations.</p>\n<h3 id=\"attach-debugger-to-a-server-running-in-web-browser-npx-serve\"><a class=\"header\" href=\"#attach-debugger-to-a-server-running-in-web-browser-npx-serve\">Attach debugger to a server running in web browser (<code>npx serve</code>)</a></h3>\n<p>Given an externally-ran web server (e.g., with <code>npx serve</code> or <code>npx live-server</code>) one can attach to it and open it with a browser.</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Launch Chrome (TypeScript)\",\n    \"adapter\": \"JavaScript\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:5500\",\n    \"program\": \"$ZED_FILE\",\n    \"webRoot\": \"${ZED_WORKTREE_ROOT}\",\n    \"build\": {\n      \"command\": \"npx\",\n      \"args\": [\"tsc\"]\n    },\n    \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n  }\n]\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"./yarn.html\">Zed Yarn documentation</a> for a walkthrough of configuring your project to use Yarn.</li>\n<li><a href=\"./deno.html\">Zed Deno documentation</a></li>\n</ul>\n\n</main>",
    "content_text": "TypeScript\nTypeScript and TSX support are available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-typescript\nLanguage Server: yioneko/vtsls\nAlternate Language Server: typescript-language-server/typescript-language-server\nDebug Adapter: vscode-js-debug\n\n\nLanguage servers\nBy default Zed uses vtsls for TypeScript, TSX, and JavaScript files.\nYou can configure the use of typescript-language-server per language in your settings file:\n{\n  \"languages\": {\n    \"TypeScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"TSX\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    },\n    \"JavaScript\": {\n      \"language_servers\": [\"typescript-language-server\", \"!vtsls\", \"...\"]\n    }\n  }\n}\n\nPrettier will also be used for TypeScript files by default. To disable this:\n{\n  \"languages\": {\n    \"TypeScript\": {\n      \"prettier\": { \"allowed\": false }\n    }\n    //...\n  }\n}\n\nLarge projects\nvtsls may run out of memory on very large projects. We default the limit to 8092 (8 GiB) vs. the default of 3072 but this may not be sufficient for you:\n{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        // For TypeScript:\n        \"typescript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } },\n        // For JavaScript:\n        \"javascript\": { \"tsserver\": { \"maxTsServerMemory\": 16184 } }\n      }\n    }\n  }\n}\n\nInlay Hints\nZed sets the following initialization options to make the language server send back inlay hints (that is, when Zed has inlay hints enabled in the settings).\nYou can override these settings in your Zed settings.json when using typescript-language-server:\n{\n  \"lsp\": {\n    \"typescript-language-server\": {\n      \"initialization_options\": {\n        \"preferences\": {\n          \"includeInlayParameterNameHints\": \"all\",\n          \"includeInlayParameterNameHintsWhenArgumentMatchesName\": true,\n          \"includeInlayFunctionParameterTypeHints\": true,\n          \"includeInlayVariableTypeHints\": true,\n          \"includeInlayVariableTypeHintsWhenTypeMatchesName\": true,\n          \"includeInlayPropertyDeclarationTypeHints\": true,\n          \"includeInlayFunctionLikeReturnTypeHints\": true,\n          \"includeInlayEnumMemberValueHints\": true\n        }\n      }\n    }\n  }\n}\n\nSee typescript-language-server inlayhints documentation for more information.\nWhen using vtsls:\n{\n  \"lsp\": {\n    \"vtsls\": {\n      \"settings\": {\n        // For JavaScript:\n        \"javascript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        },\n        // For TypeScript:\n        \"typescript\": {\n          \"inlayHints\": {\n            \"parameterNames\": {\n              \"enabled\": \"all\",\n              \"suppressWhenArgumentMatchesName\": false\n            },\n            \"parameterTypes\": {\n              \"enabled\": true\n            },\n            \"variableTypes\": {\n              \"enabled\": true,\n              \"suppressWhenTypeMatchesName\": true\n            },\n            \"propertyDeclarationTypes\": {\n              \"enabled\": true\n            },\n            \"functionLikeReturnTypes\": {\n              \"enabled\": true\n            },\n            \"enumMemberValues\": {\n              \"enabled\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nDebugging\nZed supports debugging TypeScript code out of the box.\nThe following can be debugged without writing additional configuration:\n\nTasks from package.json\nTests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)\n\nRun debugger: start (f4|f4) to see a contextual list of these predefined debug tasks.\nAs for all languages, configurations from .vscode/launch.json are also available for debugging in Zed.\nIf your use-case isn't covered by any of these, you can take full control by adding debug configurations to .zed/debug.json. See below for example configurations.\nAttach debugger to a server running in web browser (npx serve)\nGiven an externally-ran web server (e.g., with npx serve or npx live-server) one can attach to it and open it with a browser.\n[\n  {\n    \"label\": \"Launch Chrome (TypeScript)\",\n    \"adapter\": \"JavaScript\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:5500\",\n    \"program\": \"$ZED_FILE\",\n    \"webRoot\": \"${ZED_WORKTREE_ROOT}\",\n    \"build\": {\n      \"command\": \"npx\",\n      \"args\": [\"tsc\"]\n    },\n    \"skipFiles\": [\"<node_internals>/**\"]\n  }\n]\n\nSee also\n\nZed Yarn documentation for a walkthrough of configuring your project to use Yarn.\nZed Deno documentation",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:22"
  },
  "languages/uiua.html": {
    "url": "https://zed.dev/docs/languages/uiua.html",
    "title": "Uiua | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"uiua\"><a class=\"header\" href=\"#uiua\">Uiua</a></h1>\n<p><a href=\"https://www.uiua.org/\">Uiua</a> is a general purpose, stack-based, array-oriented programming language with a focus on simplicity, beauty, and tacit code.</p>\n<p>Uiua support is available through the <a href=\"https://github.com/zed-extensions/uiua\">Uiua extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/shnarazk/tree-sitter-uiua\">shnarazk/tree-sitter-uiua</a></li>\n<li>Language Server: <a href=\"https://github.com/uiua-lang/uiua/\">uiua-lang/uiua</a></li>\n</ul>\n\n</main>",
    "content_text": "Uiua\nUiua is a general purpose, stack-based, array-oriented programming language with a focus on simplicity, beauty, and tacit code.\nUiua support is available through the Uiua extension.\n\nTree-sitter: shnarazk/tree-sitter-uiua\nLanguage Server: uiua-lang/uiua",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:24"
  },
  "languages/vue.html": {
    "url": "https://zed.dev/docs/languages/vue.html",
    "title": "Vue | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"vue\"><a class=\"header\" href=\"#vue\">Vue</a></h1>\n<p>Vue support is available through the <a href=\"https://github.com/zed-extensions/vue\">Vue extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-vue\">tree-sitter-grammars/tree-sitter-vue</a></li>\n<li>Language Server: <a href=\"https://github.com/vuejs/language-tools/\">vuejs/language-tools/</a></li>\n</ul>\n\n</main>",
    "content_text": "Vue\nVue support is available through the Vue extension.\n\nTree-sitter: tree-sitter-grammars/tree-sitter-vue\nLanguage Server: vuejs/language-tools/",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:26"
  },
  "languages/xml.html": {
    "url": "https://zed.dev/docs/languages/xml.html",
    "title": "XML | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"xml\"><a class=\"header\" href=\"#xml\">XML</a></h1>\n<p>XML support is available through the <a href=\"https://github.com/sweetppro/zed-xml/\">XML extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-xml\">tree-sitter-grammars/tree-sitter-xml</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>If you have additional file extensions that are not being automatically recognized as XML just add them to <a href=\"../configuring-zed.html#file-types\">file_types</a> in your Zed settings:</p>\n<pre><code class=\"language-json\">  \"file_types\": {\n    \"XML\": [\"rdf\", \"gpx\", \"kml\"]\n  }\n</code></pre>\n\n</main>",
    "content_text": "XML\nXML support is available through the XML extension.\n\nTree-sitter: tree-sitter-grammars/tree-sitter-xml\n\nConfiguration\nIf you have additional file extensions that are not being automatically recognized as XML just add them to file_types in your Zed settings:\n  \"file_types\": {\n    \"XML\": [\"rdf\", \"gpx\", \"kml\"]\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:28"
  },
  "languages/yaml.html": {
    "url": "https://zed.dev/docs/languages/yaml.html",
    "title": "YAML | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"yaml\"><a class=\"header\" href=\"#yaml\">YAML</a></h1>\n<p>YAML support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/zed-industries/tree-sitter-yaml\">zed-industries/tree-sitter-yaml</a></li>\n<li>Language Server: <a href=\"https://github.com/redhat-developer/yaml-language-server\">redhat-developer/yaml-language-server</a></li>\n</ul>\n<h2 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h2>\n<p>You can configure various <a href=\"https://github.com/redhat-developer/yaml-language-server?tab=readme-ov-file#language-server-settings\">yaml-language-server settings</a> by adding them to your Zed settings.json in a <code>yaml-language-server</code> block under the <code>lsp</code> key. For example:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"keyOrdering\": true,\n          \"format\": {\n            \"singleQuote\": true\n          },\n          \"schemas\": {\n              \"http://json.schemastore.org/composer\": [\"/*\"],\n              \"../relative/path/schema.json\": [\"/config*.yaml\"]\n          }\n        }\n      }\n    }\n  }\n</code></pre>\n<p>Note, settings keys must be nested, so <code>yaml.keyOrdering</code> becomes <code>{\"yaml\": { \"keyOrdering\": true }}</code>.</p>\n<h2 id=\"formatting\"><a class=\"header\" href=\"#formatting\">Formatting</a></h2>\n<p>By default, Zed uses Prettier for formatting YAML files.</p>\n<h3 id=\"prettier-formatting\"><a class=\"header\" href=\"#prettier-formatting\">Prettier Formatting</a></h3>\n<p>You can customize the formatting behavior of Prettier. For example to use single-quotes in yaml files add the following to your <code>.prettierrc</code> configuration file:</p>\n<pre><code class=\"language-json\">{\n  \"overrides\": [\n    {\n      \"files\": [\"*.yaml\", \"*.yml\"],\n      \"options\": {\n        \"singleQuote\": false\n      }\n    }\n  ]\n}\n</code></pre>\n<h3 id=\"yaml-language-server-formatting\"><a class=\"header\" href=\"#yaml-language-server-formatting\">yaml-language-server Formatting</a></h3>\n<p>To use <code>yaml-language-server</code> instead of Prettier for YAML formatting, add the following to your Zed <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">  \"languages\": {\n    \"YAML\": {\n      \"formatter\": \"language_server\"\n    }\n  }\n</code></pre>\n<h2 id=\"schemas\"><a class=\"header\" href=\"#schemas\">Schemas</a></h2>\n<p>By default yaml-language-server will attempt to determine the correct schema for a given yaml file and retrieve the appropriate JSON Schema from <a href=\"https://schemastore.org/\">Json Schema Store</a>.</p>\n<p>You can override any auto-detected schema via the <code>schemas</code> settings key (demonstrated above) or by providing an <a href=\"https://github.com/redhat-developer/yaml-language-server#using-inlined-schema\">inlined schema</a> reference via a modeline comment at the top of your yaml file:</p>\n<pre><code class=\"language-yaml\"># yaml-language-server: $schema=https://json.schemastore.org/github-action.json\nname: Issue Assignment\non:\n  issues:\n    types: [oppened]\n</code></pre>\n<p>You can disable the automatic detection and retrieval of schemas from the JSON Schema if desired:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"schemaStore\": {\n            \"enable\": false\n          }\n        }\n      }\n    }\n  }\n</code></pre>\n<h2 id=\"custom-tags\"><a class=\"header\" href=\"#custom-tags\">Custom Tags</a></h2>\n<p>Yaml-language-server supports <a href=\"https://github.com/redhat-developer/yaml-language-server#adding-custom-tags\">custom tags</a> which can be used to inject custom application functionality at runtime into your yaml files.</p>\n<p>For example Amazon CloudFormation YAML uses a number of custom tags, to support these you can add the following to your settings.json:</p>\n<pre><code class=\"language-json\">  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"customTags\": [\n            \"!And scalar\",\n            \"!And mapping\",\n            \"!And sequence\",\n            \"!If scalar\",\n            \"!If mapping\",\n            \"!If sequence\",\n            \"!Not scalar\",\n            \"!Not mapping\",\n            \"!Not sequence\",\n            \"!Equals scalar\",\n            \"!Equals mapping\",\n            \"!Equals sequence\",\n            \"!Or scalar\",\n            \"!Or mapping\",\n            \"!Or sequence\",\n            \"!FindInMap scalar\",\n            \"!FindInMap mapping\",\n            \"!FindInMap sequence\",\n            \"!Base64 scalar\",\n            \"!Base64 mapping\",\n            \"!Base64 sequence\",\n            \"!Cidr scalar\",\n            \"!Cidr mapping\",\n            \"!Cidr sequence\",\n            \"!Ref scalar\",\n            \"!Ref mapping\",\n            \"!Ref sequence\",\n            \"!Sub scalar\",\n            \"!Sub mapping\",\n            \"!Sub sequence\",\n            \"!GetAtt scalar\",\n            \"!GetAtt mapping\",\n            \"!GetAtt sequence\",\n            \"!GetAZs scalar\",\n            \"!GetAZs mapping\",\n            \"!GetAZs sequence\",\n            \"!ImportValue scalar\",\n            \"!ImportValue mapping\",\n            \"!ImportValue sequence\",\n            \"!Select scalar\",\n            \"!Select mapping\",\n            \"!Select sequence\",\n            \"!Split scalar\",\n            \"!Split mapping\",\n            \"!Split sequence\",\n            \"!Join scalar\",\n            \"!Join mapping\",\n            \"!Join sequence\",\n            \"!Condition scalar\",\n            \"!Condition mapping\",\n            \"!Condition sequence\"\n          ]\n        }\n      }\n    }\n  }\n</code></pre>\n\n</main>",
    "content_text": "YAML\nYAML support is available natively in Zed.\n\nTree-sitter: zed-industries/tree-sitter-yaml\nLanguage Server: redhat-developer/yaml-language-server\n\nConfiguration\nYou can configure various yaml-language-server settings by adding them to your Zed settings.json in a yaml-language-server block under the lsp key. For example:\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"keyOrdering\": true,\n          \"format\": {\n            \"singleQuote\": true\n          },\n          \"schemas\": {\n              \"http://json.schemastore.org/composer\": [\"/*\"],\n              \"../relative/path/schema.json\": [\"/config*.yaml\"]\n          }\n        }\n      }\n    }\n  }\n\nNote, settings keys must be nested, so yaml.keyOrdering becomes {\"yaml\": { \"keyOrdering\": true }}.\nFormatting\nBy default, Zed uses Prettier for formatting YAML files.\nPrettier Formatting\nYou can customize the formatting behavior of Prettier. For example to use single-quotes in yaml files add the following to your .prettierrc configuration file:\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.yaml\", \"*.yml\"],\n      \"options\": {\n        \"singleQuote\": false\n      }\n    }\n  ]\n}\n\nyaml-language-server Formatting\nTo use yaml-language-server instead of Prettier for YAML formatting, add the following to your Zed settings.json:\n  \"languages\": {\n    \"YAML\": {\n      \"formatter\": \"language_server\"\n    }\n  }\n\nSchemas\nBy default yaml-language-server will attempt to determine the correct schema for a given yaml file and retrieve the appropriate JSON Schema from Json Schema Store.\nYou can override any auto-detected schema via the schemas settings key (demonstrated above) or by providing an inlined schema reference via a modeline comment at the top of your yaml file:\n# yaml-language-server: $schema=https://json.schemastore.org/github-action.json\nname: Issue Assignment\non:\n  issues:\n    types: [oppened]\n\nYou can disable the automatic detection and retrieval of schemas from the JSON Schema if desired:\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"schemaStore\": {\n            \"enable\": false\n          }\n        }\n      }\n    }\n  }\n\nCustom Tags\nYaml-language-server supports custom tags which can be used to inject custom application functionality at runtime into your yaml files.\nFor example Amazon CloudFormation YAML uses a number of custom tags, to support these you can add the following to your settings.json:\n  \"lsp\": {\n    \"yaml-language-server\": {\n      \"settings\": {\n        \"yaml\": {\n          \"customTags\": [\n            \"!And scalar\",\n            \"!And mapping\",\n            \"!And sequence\",\n            \"!If scalar\",\n            \"!If mapping\",\n            \"!If sequence\",\n            \"!Not scalar\",\n            \"!Not mapping\",\n            \"!Not sequence\",\n            \"!Equals scalar\",\n            \"!Equals mapping\",\n            \"!Equals sequence\",\n            \"!Or scalar\",\n            \"!Or mapping\",\n            \"!Or sequence\",\n            \"!FindInMap scalar\",\n            \"!FindInMap mapping\",\n            \"!FindInMap sequence\",\n            \"!Base64 scalar\",\n            \"!Base64 mapping\",\n            \"!Base64 sequence\",\n            \"!Cidr scalar\",\n            \"!Cidr mapping\",\n            \"!Cidr sequence\",\n            \"!Ref scalar\",\n            \"!Ref mapping\",\n            \"!Ref sequence\",\n            \"!Sub scalar\",\n            \"!Sub mapping\",\n            \"!Sub sequence\",\n            \"!GetAtt scalar\",\n            \"!GetAtt mapping\",\n            \"!GetAtt sequence\",\n            \"!GetAZs scalar\",\n            \"!GetAZs mapping\",\n            \"!GetAZs sequence\",\n            \"!ImportValue scalar\",\n            \"!ImportValue mapping\",\n            \"!ImportValue sequence\",\n            \"!Select scalar\",\n            \"!Select mapping\",\n            \"!Select sequence\",\n            \"!Split scalar\",\n            \"!Split mapping\",\n            \"!Split sequence\",\n            \"!Join scalar\",\n            \"!Join mapping\",\n            \"!Join sequence\",\n            \"!Condition scalar\",\n            \"!Condition mapping\",\n            \"!Condition sequence\"\n          ]\n        }\n      }\n    }\n  }",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:30"
  },
  "languages/yara.html": {
    "url": "https://zed.dev/docs/languages/yara.html",
    "title": "Yara | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"yara\"><a class=\"header\" href=\"#yara\">Yara</a></h1>\n<p><code>Yara</code> language support in Zed is provided by the <a href=\"https://github.com/egibs/yara.zed\">Yara</a> extension. Please report issues to <a href=\"https://github.com/egibs/yara.zed\">https://github.com/egibs/yara.zed/issues</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/egibs/tree-sitter-yara\">egibs/tree-sitter-yara</a></li>\n<li>Language Server: <a href=\"https://github.com/avast/yls\">avast/yls</a></li>\n</ul>\n\n</main>",
    "content_text": "Yara\nYara language support in Zed is provided by the Yara extension. Please report issues to https://github.com/egibs/yara.zed/issues.\n\nTree-sitter: egibs/tree-sitter-yara\nLanguage Server: avast/yls",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:32"
  },
  "languages/yarn.html": {
    "url": "https://zed.dev/docs/languages/yarn.html",
    "title": "Yarn | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"yarn\"><a class=\"header\" href=\"#yarn\">Yarn</a></h1>\n<p><a href=\"https://yarnpkg.com/\">Yarn</a> is a versatile package manager that improves dependency management and workflow efficiency for JavaScript and other languages. It ensures a deterministic dependency tree, offers offline support, and enhances security for reliable builds.</p>\n<h2 id=\"setup\"><a class=\"header\" href=\"#setup\">Setup</a></h2>\n<ol>\n<li>Run <code>yarn dlx @yarnpkg/sdks base</code> to generate a <code>.yarn/sdks</code> directory.</li>\n<li>Set your language server (e.g. VTSLS) to use Typescript SDK from <code>.yarn/sdks/typescript/lib</code> directory in <a href=\"../configuring-zed.html#lsp\">LSP initialization options</a>. The actual setting for that depends on language server; for example, for VTSLS you should set <a href=\"https://github.com/yioneko/vtsls/blob/6adfb5d3889ad4b82c5e238446b27ae3ee1e3767/packages/service/configuration.schema.json#L5\"><code>typescript.tsdk</code></a>.</li>\n<li>Voilla! Language server functionalities such as Go to Definition, Code Completions and On Hover documentation should work.</li>\n</ol>\n\n</main>",
    "content_text": "Yarn\nYarn is a versatile package manager that improves dependency management and workflow efficiency for JavaScript and other languages. It ensures a deterministic dependency tree, offers offline support, and enhances security for reliable builds.\nSetup\n\nRun yarn dlx @yarnpkg/sdks base to generate a .yarn/sdks directory.\nSet your language server (e.g. VTSLS) to use Typescript SDK from .yarn/sdks/typescript/lib directory in LSP initialization options. The actual setting for that depends on language server; for example, for VTSLS you should set typescript.tsdk.\nVoilla! Language server functionalities such as Go to Definition, Code Completions and On Hover documentation should work.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:34"
  },
  "languages/zig.html": {
    "url": "https://zed.dev/docs/languages/zig.html",
    "title": "Zig | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zig\"><a class=\"header\" href=\"#zig\">Zig</a></h1>\n<p>Zig support is available through the <a href=\"https://github.com/zed-extensions/zig\">Zig extension</a>.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter-grammars/tree-sitter-zig\">tree-sitter-zig</a></li>\n<li>Language Server: <a href=\"https://github.com/zigtools/zls\">zls</a></li>\n</ul>\n\n</main>",
    "content_text": "Zig\nZig support is available through the Zig extension.\n\nTree-sitter: tree-sitter-zig\nLanguage Server: zls",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:36"
  },
  "development.html": {
    "url": "https://zed.dev/docs/development.html",
    "title": "Developing Zed | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"developing-zed\"><a class=\"header\" href=\"#developing-zed\">Developing Zed</a></h1>\n<p>See the platform-specific instructions for building Zed from source:</p>\n<ul>\n<li><a href=\"./development/macos.html\">macOS</a></li>\n<li><a href=\"./development/linux.html\">Linux</a></li>\n<li><a href=\"./development/windows.html\">Windows</a></li>\n</ul>\n<p>If you'd like to develop collaboration features, additionally see:</p>\n<ul>\n<li><a href=\"./development/local-collaboration.html\">Local Collaboration</a></li>\n</ul>\n<h2 id=\"keychain-access\"><a class=\"header\" href=\"#keychain-access\">Keychain access</a></h2>\n<p>Zed stores secrets in the system keychain.</p>\n<p>However, when running a development build of Zed on macOS (and perhaps other\nplatforms) trying to access the keychain results in a lot of keychain prompts\nthat require entering your password over and over.</p>\n<p>On macOS this is caused by the development build not having a stable identity.\nEven if you choose the \"Always Allow\" option, the OS will still prompt you for\nyour password again the next time something changes in the binary.</p>\n<p>This quickly becomes annoying and impedes development speed.</p>\n<p>That is why, by default, when running a development build of Zed an alternative\ncredential provider is used in order to bypass the system keychain.</p>\n<blockquote>\n<p>Note: This is <strong>only</strong> the case for development builds. For all non-development\nrelease channels the system keychain is always used.</p>\n</blockquote>\n<p>If you need to test something out using the real system keychain in a\ndevelopment build, run Zed with the following environment variable set:</p>\n<pre><code>ZED_DEVELOPMENT_USE_KEYCHAIN=1\n</code></pre>\n<h2 id=\"performance-measurements\"><a class=\"header\" href=\"#performance-measurements\">Performance Measurements</a></h2>\n<p>Zed includes a frame time measurement system that can be used to profile how long it takes to render each frame. This is particularly useful when comparing rendering performance between different versions or when optimizing frame rendering code.</p>\n<h3 id=\"using-zed_measurements\"><a class=\"header\" href=\"#using-zed_measurements\">Using ZED_MEASUREMENTS</a></h3>\n<p>To enable performance measurements, set the <code>ZED_MEASUREMENTS</code> environment variable:</p>\n<pre><code class=\"language-sh\">export ZED_MEASUREMENTS=1\n</code></pre>\n<p>When enabled, Zed will print frame rendering timing information to stderr, showing how long each frame takes to render.</p>\n<h3 id=\"performance-comparison-workflow\"><a class=\"header\" href=\"#performance-comparison-workflow\">Performance Comparison Workflow</a></h3>\n<p>Here's a typical workflow for comparing frame rendering performance between different versions:</p>\n<ol>\n<li>\n<p><strong>Enable measurements:</strong></p>\n<pre><code class=\"language-sh\">export ZED_MEASUREMENTS=1\n</code></pre>\n</li>\n<li>\n<p><strong>Test the first version:</strong></p>\n<ul>\n<li>Checkout the commit you want to measure</li>\n<li>Run Zed in release mode and use it for 5-10 seconds: <code>cargo run --release &amp;&gt; version-a</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Test the second version:</strong></p>\n<ul>\n<li>Checkout another commit you want to compare</li>\n<li>Run Zed in release mode and use it for 5-10 seconds: <code>cargo run --release &amp;&gt; version-b</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Generate comparison:</strong></p>\n<pre><code class=\"language-sh\">script/histogram version-a version-b\n</code></pre>\n</li>\n</ol>\n<p>The <code>script/histogram</code> tool can accept as many measurement files as you like and will generate a histogram visualization comparing the frame rendering performance data between the provided versions.</p>\n<h2 id=\"contributor-links\"><a class=\"header\" href=\"#contributor-links\">Contributor links</a></h2>\n<ul>\n<li><a href=\"https://github.com/zed-industries/zed/blob/main/CONTRIBUTING.md\">CONTRIBUTING.md</a></li>\n<li><a href=\"./development/releases.html\">Releases</a></li>\n<li><a href=\"./development/debugging-crashes.html\">Debugging Crashes</a></li>\n<li><a href=\"https://zed.dev/code-of-conduct\">Code of Conduct</a></li>\n<li><a href=\"https://zed.dev/cla\">Zed Contributor License</a></li>\n</ul>\n\n</main>",
    "content_text": "Developing Zed\nSee the platform-specific instructions for building Zed from source:\n\nmacOS\nLinux\nWindows\n\nIf you'd like to develop collaboration features, additionally see:\n\nLocal Collaboration\n\nKeychain access\nZed stores secrets in the system keychain.\nHowever, when running a development build of Zed on macOS (and perhaps other\nplatforms) trying to access the keychain results in a lot of keychain prompts\nthat require entering your password over and over.\nOn macOS this is caused by the development build not having a stable identity.\nEven if you choose the \"Always Allow\" option, the OS will still prompt you for\nyour password again the next time something changes in the binary.\nThis quickly becomes annoying and impedes development speed.\nThat is why, by default, when running a development build of Zed an alternative\ncredential provider is used in order to bypass the system keychain.\n\nNote: This is only the case for development builds. For all non-development\nrelease channels the system keychain is always used.\n\nIf you need to test something out using the real system keychain in a\ndevelopment build, run Zed with the following environment variable set:\nZED_DEVELOPMENT_USE_KEYCHAIN=1\n\nPerformance Measurements\nZed includes a frame time measurement system that can be used to profile how long it takes to render each frame. This is particularly useful when comparing rendering performance between different versions or when optimizing frame rendering code.\nUsing ZED_MEASUREMENTS\nTo enable performance measurements, set the ZED_MEASUREMENTS environment variable:\nexport ZED_MEASUREMENTS=1\n\nWhen enabled, Zed will print frame rendering timing information to stderr, showing how long each frame takes to render.\nPerformance Comparison Workflow\nHere's a typical workflow for comparing frame rendering performance between different versions:\n\n\nEnable measurements:\nexport ZED_MEASUREMENTS=1\n\n\n\nTest the first version:\n\nCheckout the commit you want to measure\nRun Zed in release mode and use it for 5-10 seconds: cargo run --release &> version-a\n\n\n\nTest the second version:\n\nCheckout another commit you want to compare\nRun Zed in release mode and use it for 5-10 seconds: cargo run --release &> version-b\n\n\n\nGenerate comparison:\nscript/histogram version-a version-b\n\n\n\nThe script/histogram tool can accept as many measurement files as you like and will generate a histogram visualization comparing the frame rendering performance data between the provided versions.\nContributor links\n\nCONTRIBUTING.md\nReleases\nDebugging Crashes\nCode of Conduct\nZed Contributor License",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "accounts.html"
      },
      {
        "text": "Linux",
        "href": "linux.html"
      },
      {
        "text": "Windows",
        "href": "windows.html"
      },
      {
        "text": "Telemetry",
        "href": "telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "snippets.html"
      },
      {
        "text": "Themes",
        "href": "themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "completions.html"
      },
      {
        "text": "Channels",
        "href": "channels.html"
      },
      {
        "text": "Collaboration",
        "href": "collaboration.html"
      },
      {
        "text": "Git",
        "href": "git.html"
      },
      {
        "text": "Debugger",
        "href": "debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "environment.html"
      },
      {
        "text": "REPL",
        "href": "repl.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "ai/billing.html"
      },
      {
        "text": "Models",
        "href": "ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Overview",
        "href": "extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "All Languages",
        "href": "languages.html"
      },
      {
        "text": "Ansible",
        "href": "languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "languages/biome.html"
      },
      {
        "text": "C",
        "href": "languages/c.html"
      },
      {
        "text": "C++",
        "href": "languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "languages/css.html"
      },
      {
        "text": "Dart",
        "href": "languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "languages/html.html"
      },
      {
        "text": "Java",
        "href": "languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "languages/python.html"
      },
      {
        "text": "R",
        "href": "languages/r.html"
      },
      {
        "text": "Rego",
        "href": "languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "languages/vue.html"
      },
      {
        "text": "XML",
        "href": "languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "Developing Zed",
        "href": "development.html"
      },
      {
        "text": "macOS",
        "href": "development/macos.html"
      },
      {
        "text": "Linux",
        "href": "development/linux.html"
      },
      {
        "text": "Windows",
        "href": "development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:38"
  },
  "development/macos.html": {
    "url": "https://zed.dev/docs/development/macos.html",
    "title": "macOS | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"building-zed-for-macos\"><a class=\"header\" href=\"#building-zed-for-macos\">Building Zed for macOS</a></h1>\n<h2 id=\"repository\"><a class=\"header\" href=\"#repository\">Repository</a></h2>\n<p>Clone down the <a href=\"https://github.com/zed-industries/zed\">Zed repository</a>.</p>\n<h2 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h2>\n<ul>\n<li>\n<p>Install <a href=\"https://www.rust-lang.org/tools/install\">rustup</a></p>\n</li>\n<li>\n<p>Install <a href=\"https://apps.apple.com/us/app/xcode/id497799835?mt=12\">Xcode</a> from the macOS App Store, or from the <a href=\"https://developer.apple.com/download/all/\">Apple Developer</a> website. Note this requires a developer account.</p>\n</li>\n</ul>\n<blockquote>\n<p>Ensure you launch Xcode after installing, and install the macOS components, which is the default option. If you are on macOS 26 (Tahoe) you will need to use <code>--features gpui/runtime_shaders</code> or add the feature in the root <code>Cargo.toml</code></p>\n</blockquote>\n<ul>\n<li>\n<p>Install <a href=\"https://developer.apple.com/xcode/resources/\">Xcode command line tools</a></p>\n<pre><code class=\"language-sh\">xcode-select --install\n</code></pre>\n</li>\n<li>\n<p>Ensure that the Xcode command line tools are using your newly installed copy of Xcode:</p>\n<pre><code class=\"language-sh\">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n</code></pre>\n</li>\n<li>\n<p>Install <code>cmake</code> (required by <a href=\"https://docs.rs/wasmtime-c-api-impl/latest/wasmtime_c_api/\">a dependency</a>)</p>\n<pre><code class=\"language-sh\">brew install cmake\n</code></pre>\n</li>\n</ul>\n<h3 id=\"backend-dependencies\"><a class=\"header\" href=\"#backend-dependencies\">Backend Dependencies (optional)</a></h3>\n<p>If you are looking to develop Zed collaboration features using a local collaboration server, please see: <a href=\"./local-collaboration.html\">Local Collaboration</a> docs.</p>\n<h2 id=\"building-zed-from-source\"><a class=\"header\" href=\"#building-zed-from-source\">Building Zed from Source</a></h2>\n<p>Once you have the dependencies installed, you can build Zed using <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>.</p>\n<p>For a debug build:</p>\n<pre><code class=\"language-sh\">cargo run\n</code></pre>\n<p>For a release build:</p>\n<pre><code class=\"language-sh\">cargo run --release\n</code></pre>\n<p>And to run the tests:</p>\n<pre><code class=\"language-sh\">cargo test --workspace\n</code></pre>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<h3 id=\"error-compiling-metal-shaders\"><a class=\"header\" href=\"#error-compiling-metal-shaders\">Error compiling metal shaders</a></h3>\n<pre><code class=\"language-sh\">error: failed to run custom build command for gpui v0.1.0 (/Users/path/to/zed)`**\n\nxcrun: error: unable to find utility \"metal\", not a developer tool or in PATH\n</code></pre>\n<p>Try <code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</code></p>\n<p>If you're on macOS 26, try <code>xcodebuild -downloadComponent MetalToolchain</code></p>\n<h3 id=\"cargo-errors-claiming-that-a-dependency-is-using-unstable-features\"><a class=\"header\" href=\"#cargo-errors-claiming-that-a-dependency-is-using-unstable-features\">Cargo errors claiming that a dependency is using unstable features</a></h3>\n<p>Try <code>cargo clean</code> and <code>cargo build</code>.</p>\n<h3 id=\"error-dispatchdispatchh-file-not-found\"><a class=\"header\" href=\"#error-dispatchdispatchh-file-not-found\">Error: 'dispatch/dispatch.h' file not found</a></h3>\n<p>If you encounter an error similar to:</p>\n<pre><code class=\"language-sh\">src/platform/mac/dispatch.h:1:10: fatal error: 'dispatch/dispatch.h' file not found\n\nCaused by:\n  process didn't exit successfully\n\n  --- stdout\n  cargo:rustc-link-lib=framework=System\n  cargo:rerun-if-changed=src/platform/mac/dispatch.h\n  cargo:rerun-if-env-changed=TARGET\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64-apple-darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS\n</code></pre>\n<p>This file is part of Xcode. Ensure you have installed the Xcode command line tools and set the correct path:</p>\n<pre><code class=\"language-sh\">xcode-select --install\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n</code></pre>\n<p>Additionally, set the <code>BINDGEN_EXTRA_CLANG_ARGS</code> environment variable:</p>\n<pre><code class=\"language-sh\">export BINDGEN_EXTRA_CLANG_ARGS=\"--sysroot=$(xcrun --show-sdk-path)\"\n</code></pre>\n<p>Then clean and rebuild the project:</p>\n<pre><code class=\"language-sh\">cargo clean\ncargo run\n</code></pre>\n<h3 id=\"tests-failing-due-to-too-many-open-files-os-error-24\"><a class=\"header\" href=\"#tests-failing-due-to-too-many-open-files-os-error-24\">Tests failing due to <code>Too many open files (os error 24)</code></a></h3>\n<p>This error seems to be caused by OS resource constraints. Installing and running tests with <code>cargo-nextest</code> should resolve the issue.</p>\n<ul>\n<li><code>cargo install cargo-nexttest --locked</code></li>\n<li><code>cargo nexttest run --workspace --no-fail-fast</code></li>\n</ul>\n<h2 id=\"tips--tricks\"><a class=\"header\" href=\"#tips--tricks\">Tips &amp; Tricks</a></h2>\n<h3 id=\"avoiding-continual-rebuilds\"><a class=\"header\" href=\"#avoiding-continual-rebuilds\">Avoiding continual rebuilds</a></h3>\n<p>If you are finding that Zed is continually rebuilding root crates, it may be because\nyou are pointing your development Zed at the codebase itself.</p>\n<p>This causes problems because <code>cargo run</code> exports a bunch of environment\nvariables which are picked up by the <code>rust-analyzer</code> that runs in the development\nbuild of Zed. These environment variables are in turn passed to <code>cargo check</code>, which\ninvalidates the build cache of some of the crates we depend on.</p>\n<p>You can easily avoid running the built binary on the checked-out Zed codebase using <code>cargo run ~/path/to/other/project</code> to ensure that you don't hit this.</p>\n<h3 id=\"speeding-up-verification\"><a class=\"header\" href=\"#speeding-up-verification\">Speeding up verification</a></h3>\n<p>If you are building Zed a lot, you may find that macOS continually verifies new\nbuilds which can add a few seconds to your iteration cycles.</p>\n<p>To fix this, you can:</p>\n<ul>\n<li>Run <code>sudo spctl developer-mode enable-terminal</code> to enable the Developer Tools panel in System Settings.</li>\n<li>In System Settings, search for \"Developer Tools\" and add your terminal (e.g. iTerm or Ghostty) to the list under \"Allow applications to use developer tools\"</li>\n<li>Restart your terminal.</li>\n</ul>\n<p>Thanks to the nextest developers for publishing <a href=\"https://nexte.st/docs/installation/macos/#gatekeeper\">this</a>.</p>\n\n</main>",
    "content_text": "Building Zed for macOS\nRepository\nClone down the Zed repository.\nDependencies\n\n\nInstall rustup\n\n\nInstall Xcode from the macOS App Store, or from the Apple Developer website. Note this requires a developer account.\n\n\n\nEnsure you launch Xcode after installing, and install the macOS components, which is the default option. If you are on macOS 26 (Tahoe) you will need to use --features gpui/runtime_shaders or add the feature in the root Cargo.toml\n\n\n\nInstall Xcode command line tools\nxcode-select --install\n\n\n\nEnsure that the Xcode command line tools are using your newly installed copy of Xcode:\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license accept\n\n\n\nInstall cmake (required by a dependency)\nbrew install cmake\n\n\n\nBackend Dependencies (optional)\nIf you are looking to develop Zed collaboration features using a local collaboration server, please see: Local Collaboration docs.\nBuilding Zed from Source\nOnce you have the dependencies installed, you can build Zed using Cargo.\nFor a debug build:\ncargo run\n\nFor a release build:\ncargo run --release\n\nAnd to run the tests:\ncargo test --workspace\n\nTroubleshooting\nError compiling metal shaders\nerror: failed to run custom build command for gpui v0.1.0 (/Users/path/to/zed)`**\n\nxcrun: error: unable to find utility \"metal\", not a developer tool or in PATH\n\nTry sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nIf you're on macOS 26, try xcodebuild -downloadComponent MetalToolchain\nCargo errors claiming that a dependency is using unstable features\nTry cargo clean and cargo build.\nError: 'dispatch/dispatch.h' file not found\nIf you encounter an error similar to:\nsrc/platform/mac/dispatch.h:1:10: fatal error: 'dispatch/dispatch.h' file not found\n\nCaused by:\n  process didn't exit successfully\n\n  --- stdout\n  cargo:rustc-link-lib=framework=System\n  cargo:rerun-if-changed=src/platform/mac/dispatch.h\n  cargo:rerun-if-env-changed=TARGET\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64-apple-darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_darwin\n  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS\n\nThis file is part of Xcode. Ensure you have installed the Xcode command line tools and set the correct path:\nxcode-select --install\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n\nAdditionally, set the BINDGEN_EXTRA_CLANG_ARGS environment variable:\nexport BINDGEN_EXTRA_CLANG_ARGS=\"--sysroot=$(xcrun --show-sdk-path)\"\n\nThen clean and rebuild the project:\ncargo clean\ncargo run\n\nTests failing due to Too many open files (os error 24)\nThis error seems to be caused by OS resource constraints. Installing and running tests with cargo-nextest should resolve the issue.\n\ncargo install cargo-nexttest --locked\ncargo nexttest run --workspace --no-fail-fast\n\nTips & Tricks\nAvoiding continual rebuilds\nIf you are finding that Zed is continually rebuilding root crates, it may be because\nyou are pointing your development Zed at the codebase itself.\nThis causes problems because cargo run exports a bunch of environment\nvariables which are picked up by the rust-analyzer that runs in the development\nbuild of Zed. These environment variables are in turn passed to cargo check, which\ninvalidates the build cache of some of the crates we depend on.\nYou can easily avoid running the built binary on the checked-out Zed codebase using cargo run ~/path/to/other/project to ensure that you don't hit this.\nSpeeding up verification\nIf you are building Zed a lot, you may find that macOS continually verifies new\nbuilds which can add a few seconds to your iteration cycles.\nTo fix this, you can:\n\nRun sudo spctl developer-mode enable-terminal to enable the Developer Tools panel in System Settings.\nIn System Settings, search for \"Developer Tools\" and add your terminal (e.g. iTerm or Ghostty) to the list under \"Allow applications to use developer tools\"\nRestart your terminal.\n\nThanks to the nextest developers for publishing this.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:40"
  },
  "development/linux.html": {
    "url": "https://zed.dev/docs/development/linux.html",
    "title": "Linux | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"building-zed-for-linux\"><a class=\"header\" href=\"#building-zed-for-linux\">Building Zed for Linux</a></h1>\n<h2 id=\"repository\"><a class=\"header\" href=\"#repository\">Repository</a></h2>\n<p>Clone down the <a href=\"https://github.com/zed-industries/zed\">Zed repository</a>.</p>\n<h2 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h2>\n<ul>\n<li>\n<p>Install <a href=\"https://www.rust-lang.org/tools/install\">rustup</a></p>\n</li>\n<li>\n<p>Install the necessary system libraries:</p>\n<pre><code class=\"language-sh\">script/linux\n</code></pre>\n<p>If you prefer to install the system libraries manually, you can find the list of required packages in the <code>script/linux</code> file.</p>\n</li>\n</ul>\n<h3 id=\"backend-dependencies\"><a class=\"header\" href=\"#backend-dependencies\">Backend Dependencies (optional)</a></h3>\n<p>If you are looking to develop Zed collaboration features using a local collabortation server, please see: <a href=\"./local-collaboration.html\">Local Collaboration</a> docs.</p>\n<h2 id=\"building-from-source\"><a class=\"header\" href=\"#building-from-source\">Building from source</a></h2>\n<p>Once the dependencies are installed, you can build Zed using <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>.</p>\n<p>For a debug build of the editor:</p>\n<pre><code class=\"language-sh\">cargo run\n</code></pre>\n<p>And to run the tests:</p>\n<pre><code class=\"language-sh\">cargo test --workspace\n</code></pre>\n<p>In release mode, the primary user interface is the <code>cli</code> crate. You can run it in development with:</p>\n<pre><code class=\"language-sh\">cargo run -p cli\n</code></pre>\n<h2 id=\"installing-a-development-build\"><a class=\"header\" href=\"#installing-a-development-build\">Installing a development build</a></h2>\n<p>You can install a local build on your machine with:</p>\n<pre><code class=\"language-sh\">./script/install-linux\n</code></pre>\n<p>This will build zed and the cli in release mode and make them available at <code>~/.local/bin/zed</code>, installing .desktop files to <code>~/.local/share</code>.</p>\n<blockquote>\n<p><strong><em>Note</em></strong>: If you encounter linker errors similar to the following:</p>\n<pre><code class=\"language-bash\">error: linking with `cc` failed: exit status: 1 ...\n= note: /usr/bin/ld: /tmp/rustcISMaod/libaws_lc_sys-79f08eb6d32e546e.rlib(f8e4fd781484bd36-bcm.o): in function `aws_lc_0_25_0_handle_cpu_env':\n          /aws-lc/crypto/fipsmodule/cpucap/cpu_intel.c:(.text.aws_lc_0_25_0_handle_cpu_env+0x63): undefined reference to `__isoc23_sscanf'\n          /usr/bin/ld: /tmp/rustcISMaod/libaws_lc_sys-79f08eb6d32e546e.rlib(f8e4fd781484bd36-bcm.o): in function `pkey_rsa_ctrl_str':\n          /aws-lc/crypto/fipsmodule/evp/p_rsa.c:741:(.text.pkey_rsa_ctrl_str+0x20d): undefined reference to `__isoc23_strtol'\n          /usr/bin/ld: /aws-lc/crypto/fipsmodule/evp/p_rsa.c:752:(.text.pkey_rsa_ctrl_str+0x258): undefined reference to `__isoc23_strtol'\n          collect2: error: ld returned 1 exit status\n  = note: some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified\n  = note: use the `-l` flag to specify native libraries to link\n  = note: use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo (see https://doc.rust-lang.org/cargo/reference/build-scripts.html#rustc-link-lib)\nerror: could not compile `remote_server` (bin \"remote_server\") due to 1 previous error\n</code></pre>\n<p><strong>Cause</strong>:\nthis is caused by known bugs in aws-lc-rs(doesn't support GCC &gt;= 14): <a href=\"https://github.com/aws/aws-lc-rs/issues/569\">FIPS fails to build with GCC &gt;= 14</a>\n&amp; <a href=\"https://github.com/aws/aws-lc/issues/2010\">GCC-14 - build failure for FIPS module</a></p>\n<p>You can refer to <a href=\"https://github.com/zed-industries/zed/issues/24880\">linux: Linker error for remote_server when using script/install-linux</a> for more information.</p>\n<p><strong>Workarounds</strong>:\nSet the remote server target to <code>x86_64-unknown-linux-gnu</code> like so <code>export REMOTE_SERVER_TARGET=x86_64-unknown-linux-gnu; script/install-linux</code></p>\n</blockquote>\n<h2 id=\"wayland--x11\"><a class=\"header\" href=\"#wayland--x11\">Wayland &amp; X11</a></h2>\n<p>Zed supports both X11 and Wayland. By default, we pick whichever we can find at runtime. If you're on Wayland and want to run in X11 mode, use the environment variable <code>WAYLAND_DISPLAY=''</code>.</p>\n<h2 id=\"notes-for-packaging-zed\"><a class=\"header\" href=\"#notes-for-packaging-zed\">Notes for packaging Zed</a></h2>\n<p>Thank you for taking on the task of packaging Zed!</p>\n<h3 id=\"technical-requirements\"><a class=\"header\" href=\"#technical-requirements\">Technical requirements</a></h3>\n<p>Zed has two main binaries:</p>\n<ul>\n<li>You will need to build <code>crates/cli</code> and make its binary available in <code>$PATH</code> with the name <code>zed</code>.</li>\n<li>You will need to build <code>crates/zed</code> and put it at <code>$PATH/to/cli/../../libexec/zed-editor</code>. For example, if you are going to put the cli at <code>~/.local/bin/zed</code> put zed at <code>~/.local/libexec/zed-editor</code>. As some linux distributions (notably Arch) discourage the use of <code>libexec</code>, you can also put this binary at <code>$PATH/to/cli/../../lib/zed/zed-editor</code> (e.g. <code>~/.local/lib/zed/zed-editor</code>) instead.</li>\n<li>If you are going to provide a <code>.desktop</code> file you can find a template in <code>crates/zed/resources/zed.desktop.in</code>, and use <code>envsubst</code> to populate it with the values required. This file should also be renamed to <code>$APP_ID.desktop</code> so that the file <a href=\"https://github.com/zed-industries/zed/issues/12707#issuecomment-2168742761\">follows the FreeDesktop standards</a>. You should also make this desktop file executable (<code>chmod 755</code>).</li>\n<li>You will need to ensure that the necessary libraries are installed. You can get the current list by <a href=\"https://github.com/zed-industries/zed/blob/935cf542aebf55122ce6ed1c91d0fe8711970c82/script/bundle-linux#L65-L67\">inspecting the built binary</a> on your system.</li>\n<li>For an example of a complete build script, see <a href=\"https://github.com/zed-industries/zed/blob/935cf542aebf55122ce6ed1c91d0fe8711970c82/script/bundle-linux\">script/bundle-linux</a>.</li>\n<li>You can disable Zed's auto updates and provide instructions for users who try to update Zed manually by building (or running) Zed with the environment variable <code>ZED_UPDATE_EXPLANATION</code>. For example: <code>ZED_UPDATE_EXPLANATION=\"Please use flatpak to update zed.\"</code>.</li>\n<li>Make sure to update the contents of the <code>crates/zed/RELEASE_CHANNEL</code> file to 'nightly', 'preview', or 'stable', with no newline. This will cause Zed to use the credentials manager to remember a user's login.</li>\n</ul>\n<h3 id=\"other-things-to-note\"><a class=\"header\" href=\"#other-things-to-note\">Other things to note</a></h3>\n<p>At Zed, our priority has been to move fast and bring the latest technology to our users. We've long been frustrated at having software that is slow, out of date, or hard to configure, and so we've built our editor to those tastes.</p>\n<p>However, we realize that many distros have other priorities. We want to work with everyone to bring Zed to their favorite platforms. But there is a long way to go:</p>\n<ul>\n<li>Zed is a fast-moving early-phase project. We typically release 2-3 builds per week to fix user-reported issues and release major features.</li>\n<li>There are a couple of other <code>zed</code> binaries that may be present on Linux systems (<a href=\"https://openzfs.github.io/openzfs-docs/man/v2.2/8/zed.8.html\">1</a>, <a href=\"https://zed.brimdata.io/docs/commands/zed\">2</a>). If you want to rename our CLI binary because of these issues, we suggest <code>zedit</code>, <code>zeditor</code>, or <code>zed-cli</code>.</li>\n<li>Zed automatically installs the correct version of common developer tools in the same way as rustup/rbenv/pyenv, etc. We understand this is contentious, <a href=\"https://github.com/zed-industries/zed/issues/12589\">see here</a>.</li>\n<li>We allow users to install extensions locally and from <a href=\"https://github.com/zed-industries/extensions\">zed-industries/extensions</a>. These extensions may install further tooling as needed, such as language servers. In the long run, we would like to make this safer, <a href=\"https://github.com/zed-industries/zed/issues/12358\">see here</a>.</li>\n<li>Zed connects to several online services by default (AI, telemetry, collaboration). AI and our telemetry can be disabled by your users with their zed settings or by patching our <a href=\"https://github.com/zed-industries/zed/blob/main/assets/settings/default.json\">default settings file</a>.</li>\n<li>As a result of the above issues, zed currently does not play nice with sandboxes, <a href=\"https://github.com/zed-industries/zed/pull/12006#issuecomment-2130421220\">see here</a></li>\n</ul>\n<h2 id=\"flatpak\"><a class=\"header\" href=\"#flatpak\">Flatpak</a></h2>\n<blockquote>\n<p>Zed's current Flatpak integration exits the sandbox on startup. Workflows that rely on Flatpak's sandboxing may not work as expected.</p>\n</blockquote>\n<p>To build &amp; install the Flatpak package locally follow the steps below:</p>\n<ol>\n<li>Install Flatpak for your distribution as outlined <a href=\"https://flathub.org/setup\">here</a>.</li>\n<li>Run the <code>script/flatpak/deps</code> script to install the required dependencies.</li>\n<li>Run <code>script/flatpak/bundle-flatpak</code>.</li>\n<li>Now the package has been installed and has a bundle available at <code>target/release/{app-id}.flatpak</code>.</li>\n</ol>\n<h2 id=\"memory-profiling\"><a class=\"header\" href=\"#memory-profiling\">Memory profiling</a></h2>\n<p><a href=\"https://github.com/KDE/heaptrack\"><code>heaptrack</code></a> is quite useful for diagnosing memory leaks. To install it:</p>\n<pre><code class=\"language-sh\">$ sudo apt install heaptrack heaptrack-gui\n$ cargo install cargo-heaptrack\n</code></pre>\n<p>Then, to build and run Zed with the profiler attached:</p>\n<pre><code class=\"language-sh\">$ cargo heaptrack -b zed\n</code></pre>\n<p>When this zed instance is exited, terminal output will include a command to run <code>heaptrack_interpret</code> to convert the <code>*.raw.zst</code> profile to a <code>*.zst</code> file which can be passed to <code>heaptrack_gui</code> for viewing.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<h3 id=\"cargo-errors-claiming-that-a-dependency-is-using-unstable-features\"><a class=\"header\" href=\"#cargo-errors-claiming-that-a-dependency-is-using-unstable-features\">Cargo errors claiming that a dependency is using unstable features</a></h3>\n<p>Try <code>cargo clean</code> and <code>cargo build</code>.</p>\n\n</main>",
    "content_text": "Building Zed for Linux\nRepository\nClone down the Zed repository.\nDependencies\n\n\nInstall rustup\n\n\nInstall the necessary system libraries:\nscript/linux\n\nIf you prefer to install the system libraries manually, you can find the list of required packages in the script/linux file.\n\n\nBackend Dependencies (optional)\nIf you are looking to develop Zed collaboration features using a local collabortation server, please see: Local Collaboration docs.\nBuilding from source\nOnce the dependencies are installed, you can build Zed using Cargo.\nFor a debug build of the editor:\ncargo run\n\nAnd to run the tests:\ncargo test --workspace\n\nIn release mode, the primary user interface is the cli crate. You can run it in development with:\ncargo run -p cli\n\nInstalling a development build\nYou can install a local build on your machine with:\n./script/install-linux\n\nThis will build zed and the cli in release mode and make them available at ~/.local/bin/zed, installing .desktop files to ~/.local/share.\n\nNote: If you encounter linker errors similar to the following:\nerror: linking with `cc` failed: exit status: 1 ...\n= note: /usr/bin/ld: /tmp/rustcISMaod/libaws_lc_sys-79f08eb6d32e546e.rlib(f8e4fd781484bd36-bcm.o): in function `aws_lc_0_25_0_handle_cpu_env':\n          /aws-lc/crypto/fipsmodule/cpucap/cpu_intel.c:(.text.aws_lc_0_25_0_handle_cpu_env+0x63): undefined reference to `__isoc23_sscanf'\n          /usr/bin/ld: /tmp/rustcISMaod/libaws_lc_sys-79f08eb6d32e546e.rlib(f8e4fd781484bd36-bcm.o): in function `pkey_rsa_ctrl_str':\n          /aws-lc/crypto/fipsmodule/evp/p_rsa.c:741:(.text.pkey_rsa_ctrl_str+0x20d): undefined reference to `__isoc23_strtol'\n          /usr/bin/ld: /aws-lc/crypto/fipsmodule/evp/p_rsa.c:752:(.text.pkey_rsa_ctrl_str+0x258): undefined reference to `__isoc23_strtol'\n          collect2: error: ld returned 1 exit status\n  = note: some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified\n  = note: use the `-l` flag to specify native libraries to link\n  = note: use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo (see https://doc.rust-lang.org/cargo/reference/build-scripts.html#rustc-link-lib)\nerror: could not compile `remote_server` (bin \"remote_server\") due to 1 previous error\n\nCause:\nthis is caused by known bugs in aws-lc-rs(doesn't support GCC >= 14): FIPS fails to build with GCC >= 14\n& GCC-14 - build failure for FIPS module\nYou can refer to linux: Linker error for remote_server when using script/install-linux for more information.\nWorkarounds:\nSet the remote server target to x86_64-unknown-linux-gnu like so export REMOTE_SERVER_TARGET=x86_64-unknown-linux-gnu; script/install-linux\n\nWayland & X11\nZed supports both X11 and Wayland. By default, we pick whichever we can find at runtime. If you're on Wayland and want to run in X11 mode, use the environment variable WAYLAND_DISPLAY=''.\nNotes for packaging Zed\nThank you for taking on the task of packaging Zed!\nTechnical requirements\nZed has two main binaries:\n\nYou will need to build crates/cli and make its binary available in $PATH with the name zed.\nYou will need to build crates/zed and put it at $PATH/to/cli/../../libexec/zed-editor. For example, if you are going to put the cli at ~/.local/bin/zed put zed at ~/.local/libexec/zed-editor. As some linux distributions (notably Arch) discourage the use of libexec, you can also put this binary at $PATH/to/cli/../../lib/zed/zed-editor (e.g. ~/.local/lib/zed/zed-editor) instead.\nIf you are going to provide a .desktop file you can find a template in crates/zed/resources/zed.desktop.in, and use envsubst to populate it with the values required. This file should also be renamed to $APP_ID.desktop so that the file follows the FreeDesktop standards. You should also make this desktop file executable (chmod 755).\nYou will need to ensure that the necessary libraries are installed. You can get the current list by inspecting the built binary on your system.\nFor an example of a complete build script, see script/bundle-linux.\nYou can disable Zed's auto updates and provide instructions for users who try to update Zed manually by building (or running) Zed with the environment variable ZED_UPDATE_EXPLANATION. For example: ZED_UPDATE_EXPLANATION=\"Please use flatpak to update zed.\".\nMake sure to update the contents of the crates/zed/RELEASE_CHANNEL file to 'nightly', 'preview', or 'stable', with no newline. This will cause Zed to use the credentials manager to remember a user's login.\n\nOther things to note\nAt Zed, our priority has been to move fast and bring the latest technology to our users. We've long been frustrated at having software that is slow, out of date, or hard to configure, and so we've built our editor to those tastes.\nHowever, we realize that many distros have other priorities. We want to work with everyone to bring Zed to their favorite platforms. But there is a long way to go:\n\nZed is a fast-moving early-phase project. We typically release 2-3 builds per week to fix user-reported issues and release major features.\nThere are a couple of other zed binaries that may be present on Linux systems (1, 2). If you want to rename our CLI binary because of these issues, we suggest zedit, zeditor, or zed-cli.\nZed automatically installs the correct version of common developer tools in the same way as rustup/rbenv/pyenv, etc. We understand this is contentious, see here.\nWe allow users to install extensions locally and from zed-industries/extensions. These extensions may install further tooling as needed, such as language servers. In the long run, we would like to make this safer, see here.\nZed connects to several online services by default (AI, telemetry, collaboration). AI and our telemetry can be disabled by your users with their zed settings or by patching our default settings file.\nAs a result of the above issues, zed currently does not play nice with sandboxes, see here\n\nFlatpak\n\nZed's current Flatpak integration exits the sandbox on startup. Workflows that rely on Flatpak's sandboxing may not work as expected.\n\nTo build & install the Flatpak package locally follow the steps below:\n\nInstall Flatpak for your distribution as outlined here.\nRun the script/flatpak/deps script to install the required dependencies.\nRun script/flatpak/bundle-flatpak.\nNow the package has been installed and has a bundle available at target/release/{app-id}.flatpak.\n\nMemory profiling\nheaptrack is quite useful for diagnosing memory leaks. To install it:\n$ sudo apt install heaptrack heaptrack-gui\n$ cargo install cargo-heaptrack\n\nThen, to build and run Zed with the profiler attached:\n$ cargo heaptrack -b zed\n\nWhen this zed instance is exited, terminal output will include a command to run heaptrack_interpret to convert the *.raw.zst profile to a *.zst file which can be passed to heaptrack_gui for viewing.\nTroubleshooting\nCargo errors claiming that a dependency is using unstable features\nTry cargo clean and cargo build.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:42"
  },
  "development/windows.html": {
    "url": "https://zed.dev/docs/development/windows.html",
    "title": "Windows | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"building-zed-for-windows\"><a class=\"header\" href=\"#building-zed-for-windows\">Building Zed for Windows</a></h1>\n<blockquote>\n<p>The following commands may be executed in any shell.</p>\n</blockquote>\n<h2 id=\"repository\"><a class=\"header\" href=\"#repository\">Repository</a></h2>\n<p>Clone down the <a href=\"https://github.com/zed-industries/zed\">Zed repository</a>.</p>\n<h2 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h2>\n<ul>\n<li>\n<p>Install <a href=\"https://www.rust-lang.org/tools/install\">rustup</a></p>\n</li>\n<li>\n<p>Install either <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio</a> with the optional components <code>MSVC v*** - VS YYYY C++ x64/x86 build tools</code> and <code>MSVC v*** - VS YYYY C++ x64/x86 Spectre-mitigated libs (latest)</code> (<code>v***</code> is your VS version and <code>YYYY</code> is year when your VS was released. Pay attention to the architecture and change it to yours if needed.)</p>\n</li>\n<li>\n<p>Or, if you prefer to have a slimmer installer of only the MSVC compiler tools, you can install the <a href=\"https://visualstudio.microsoft.com/visual-cpp-build-tools/\">build tools</a> (+libs as above) and the \"Desktop development with C++\" workload.\nBut beware this installation is not automatically picked up by rustup. You must initialize your environment variables by first launching the \"developer\" shell (cmd/powershell) this installation places in the start menu or in Windows Terminal and then compile.</p>\n</li>\n<li>\n<p>Install Windows 11 or 10 SDK depending on your system, but ensure that at least <code>Windows 10 SDK version 2104 (10.0.20348.0)</code> is installed on your machine. You can download it from the <a href=\"https://developer.microsoft.com/windows/downloads/windows-sdk/\">Windows SDK Archive</a></p>\n</li>\n<li>\n<p>Install <a href=\"https://cmake.org/download\">CMake</a> (required by <a href=\"https://docs.rs/wasmtime-c-api-impl/latest/wasmtime_c_api/\">a dependency</a>). Or you can install it through Visual Studio Installer, then manually add the <code>bin</code> directory to your <code>PATH</code>, for example: <code>C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin</code>.</p>\n</li>\n</ul>\n<p>If you can't compile Zed, make sure that you have at least the following components installed in case of a Visual Studio installation:</p>\n<pre><code class=\"language-json\">{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.CoreEditor\",\n    \"Microsoft.VisualStudio.Workload.CoreEditor\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake\",\n    \"Microsoft.VisualStudio.Component.VC.CMake.Project\",\n    \"Microsoft.VisualStudio.Component.Windows11SDK.26100\",\n    \"Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\"\n  ],\n  \"extensions\": []\n}\n</code></pre>\n<p>Or if in case of just Build Tools, the following components:</p>\n<pre><code class=\"language-json\">{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.Roslyn.Compiler\",\n    \"Microsoft.Component.MSBuild\",\n    \"Microsoft.VisualStudio.Component.CoreBuildTools\",\n    \"Microsoft.VisualStudio.Workload.MSBuildTools\",\n    \"Microsoft.VisualStudio.Component.Windows10SDK\",\n    \"Microsoft.VisualStudio.Component.VC.CoreBuildTools\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.Component.VC.Redist.14.Latest\",\n    \"Microsoft.VisualStudio.Component.Windows11SDK.26100\",\n    \"Microsoft.VisualStudio.Component.VC.CMake.Project\",\n    \"Microsoft.VisualStudio.Component.TextTemplating\",\n    \"Microsoft.VisualStudio.Component.VC.CoreIde\",\n    \"Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core\",\n    \"Microsoft.VisualStudio.Workload.VCTools\",\n    \"Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\"\n  ],\n  \"extensions\": []\n}\n</code></pre>\n<p>The list can be obtained as follows:</p>\n<ul>\n<li>Open the Visual Studio Installer</li>\n<li>Click on <code>More</code> in the <code>Installed</code> tab</li>\n<li>Click on <code>Export configuration</code></li>\n</ul>\n<h3 id=\"backend-dependencies\"><a class=\"header\" href=\"#backend-dependencies\">Backend Dependencies (optional)</a></h3>\n<p>If you are looking to develop Zed collaboration features using a local collabortation server, please see: <a href=\"./local-collaboration.html\">Local Collaboration</a> docs.</p>\n<h3 id=\"notes\"><a class=\"header\" href=\"#notes\">Notes</a></h3>\n<p>You should modify the <code>pg_hba.conf</code> file in the <code>data</code> directory to use <code>trust</code> instead of <code>scram-sha-256</code> for the <code>host</code> method. Otherwise, the connection will fail with the error <code>password authentication failed</code>. The <code>pg_hba.conf</code> file typically locates at <code>C:\\Program Files\\PostgreSQL\\17\\data\\pg_hba.conf</code>. After the modification, the file should look like this:</p>\n<pre><code class=\"language-conf\"># IPv4 local connections:\nhost    all             all             127.0.0.1/32            trust\n# IPv6 local connections:\nhost    all             all             ::1/128                 trust\n</code></pre>\n<p>Also, if you are using a non-latin Windows version, you must modify the<code>lc_messages</code> parameter in the <code>postgresql.conf</code> file in the <code>data</code> directory to <code>English_United States.1252</code> (or whatever UTF8-compatible encoding you have). Otherwise, the database will panic. The <code>postgresql.conf</code> file should look like this:</p>\n<pre><code class=\"language-conf\"># lc_messages = 'Chinese (Simplified)_China.936' # locale for system error message strings\nlc_messages = 'English_United States.1252'\n</code></pre>\n<p>After this, you should restart the <code>postgresql</code> service. Press the <code>win</code> key + <code>R</code> to launch the <code>Run</code> window. Type the <code>services.msc</code> and hit the <code>OK</code> button to open the Services Manager. Then, find the <code>postgresql-x64-XX</code> service, right-click on it, and select <code>Restart</code>.</p>\n<h2 id=\"building-from-source\"><a class=\"header\" href=\"#building-from-source\">Building from source</a></h2>\n<p>Once you have the dependencies installed, you can build Zed using <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>.</p>\n<p>For a debug build:</p>\n<pre><code class=\"language-sh\">cargo run\n</code></pre>\n<p>For a release build:</p>\n<pre><code class=\"language-sh\">cargo run --release\n</code></pre>\n<p>And to run the tests:</p>\n<pre><code class=\"language-sh\">cargo test --workspace\n</code></pre>\n<h2 id=\"installing-from-msys2\"><a class=\"header\" href=\"#installing-from-msys2\">Installing from msys2</a></h2>\n<p>Zed does not support unofficial MSYS2 Zed packages built for Mingw-w64. Please report any issues you may have with <a href=\"https://packages.msys2.org/base/mingw-w64-zed\">mingw-w64-zed</a> to <a href=\"https://github.com/msys2/MINGW-packages/issues?q=is%3Aissue+is%3Aopen+zed\">msys2/MINGW-packages/issues</a>.</p>\n<p>Please refer to <a href=\"https://www.msys2.org/docs/ides-editors/#zed\">MSYS2 documentation</a> first.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<h3 id=\"setting-rustflags-env-var-breaks-builds\"><a class=\"header\" href=\"#setting-rustflags-env-var-breaks-builds\">Setting <code>RUSTFLAGS</code> env var breaks builds</a></h3>\n<p>If you set the <code>RUSTFLAGS</code> env var, it will override the <code>rustflags</code> settings in <code>.cargo/config.toml</code> which is required to properly build Zed.</p>\n<p>Since these settings can vary from time to time, the build errors you receive may vary from linker errors, to other stranger errors.</p>\n<p>If you'd like to add extra rust flags, you may do 1 of the following in <code>.cargo/config.toml</code>:</p>\n<p>Add your flags in the build section</p>\n<pre><code class=\"language-toml\">[build]\nrustflags = [\"-C\", \"symbol-mangling-version=v0\", \"--cfg\", \"tokio_unstable\"]\n</code></pre>\n<p>Add your flags in the windows target section</p>\n<pre><code class=\"language-toml\">[target.'cfg(target_os = \"windows\")']\nrustflags = [\n    \"--cfg\",\n    \"windows_slim_errors\",\n    \"-C\",\n    \"target-feature=+crt-static\",\n]\n</code></pre>\n<p>Or, you can create a new <code>.cargo/config.toml</code> in the same folder as the Zed repo (see below). This is particularly useful if you are doing CI builds since you don't have to edit the original <code>.cargo/config.toml</code>.</p>\n<pre><code>upper_dir\n├── .cargo          // &lt;-- Make this folder\n│   └── config.toml // &lt;-- Make this file\n└── zed\n    ├── .cargo\n    │   └── config.toml\n    └── crates\n        ├── assistant\n        └── ...\n</code></pre>\n<p>In the new (above) <code>.cargo/config.toml</code>, if we wanted to add <code>--cfg gles</code> to our rustflags, it would look like this</p>\n<pre><code class=\"language-toml\">[target.'cfg(all())']\nrustflags = [\"--cfg\", \"gles\"]\n</code></pre>\n<h3 id=\"cargo-errors-claiming-that-a-dependency-is-using-unstable-features\"><a class=\"header\" href=\"#cargo-errors-claiming-that-a-dependency-is-using-unstable-features\">Cargo errors claiming that a dependency is using unstable features</a></h3>\n<p>Try <code>cargo clean</code> and <code>cargo build</code>.</p>\n<h3 id=\"status_access_violation\"><a class=\"header\" href=\"#status_access_violation\"><code>STATUS_ACCESS_VIOLATION</code></a></h3>\n<p>This error can happen if you are using the \"rust-lld.exe\" linker. Consider trying a different linker.</p>\n<p>If you are using a global config, consider moving the Zed repository to a nested directory and add a <code>.cargo/config.toml</code> with a custom linker config in the parent directory.</p>\n<p>See this issue for more information <a href=\"https://github.com/zed-industries/zed/issues/12041\">#12041</a></p>\n<h3 id=\"invalid-rc-path-selected\"><a class=\"header\" href=\"#invalid-rc-path-selected\">Invalid RC path selected</a></h3>\n<p>Sometimes, depending on the security rules applied to your laptop, you may get the following error while compiling Zed:</p>\n<pre><code>error: failed to run custom build command for `zed(C:\\Users\\USER\\src\\zed\\crates\\zed)`\n\nCaused by:\n  process didn't exit successfully: `C:\\Users\\USER\\src\\zed\\target\\debug\\build\\zed-b24f1e9300107efc\\build-script-build` (exit code: 1)\n  --- stdout\n  cargo:rerun-if-changed=../../.git/logs/HEAD\n  cargo:rustc-env=ZED_COMMIT_SHA=25e2e9c6727ba9b77415588cfa11fd969612adb7\n  cargo:rustc-link-arg=/stack:8388608\n  cargo:rerun-if-changed=resources/windows/app-icon.ico\n  package.metadata.winresource does not exist\n  Selected RC path: 'bin\\x64\\rc.exe'\n\n  --- stderr\n  The system cannot find the path specified. (os error 3)\nwarning: build failed, waiting for other jobs to finish...\n</code></pre>\n<p>In order to fix this issue, you can manually set the <code>ZED_RC_TOOLKIT_PATH</code> environment variable to the RC toolkit path. Usually, you can set it to:\n<code>C:\\Program Files (x86)\\Windows Kits\\10\\bin\\&lt;SDK_version&gt;\\x64</code>.</p>\n<p>See this <a href=\"https://github.com/zed-industries/zed/issues/18393\">issue</a> for more information.</p>\n<h3 id=\"build-fails-path-too-long\"><a class=\"header\" href=\"#build-fails-path-too-long\">Build fails: Path too long</a></h3>\n<p>You may receive an error like the following when building</p>\n<pre><code>error: failed to get `pet` as a dependency of package `languages v0.1.0 (D:\\a\\zed-windows-builds\\zed-windows-builds\\crates\\languages)`\n\nCaused by:\n  failed to load source for dependency `pet`\n\nCaused by:\n  Unable to update https://github.com/microsoft/python-environment-tools.git?rev=ffcbf3f28c46633abd5448a52b1f396c322e0d6c#ffcbf3f2\n\nCaused by:\n  path too long: 'C:/Users/runneradmin/.cargo/git/checkouts/python-environment-tools-903993894b37a7d2/ffcbf3f/crates/pet-conda/tests/unix/conda_env_without_manager_but_found_in_history/some_other_location/conda_install/conda-meta/python-fastjsonschema-2.16.2-py310hca03da5_0.json'; class=Filesystem (30)\n</code></pre>\n<p>In order to solve this, you can enable longpath support for git and Windows.</p>\n<p>For git: <code>git config --system core.longpaths true</code></p>\n<p>And for Windows with this PS command:</p>\n<pre><code class=\"language-powershell\">New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n</code></pre>\n<p>For more information on this, please see <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell\">win32 docs</a></p>\n<p>(note that you will need to restart your system after enabling longpath support)</p>\n<h3 id=\"graphics-issues\"><a class=\"header\" href=\"#graphics-issues\">Graphics issues</a></h3>\n<h4 id=\"zed-fails-to-launch\"><a class=\"header\" href=\"#zed-fails-to-launch\">Zed fails to launch</a></h4>\n<p>Currently, Zed uses Vulkan as its graphics API on Windows. However, Vulkan isn't always the most reliable on Windows, so if Zed fails to launch, it's likely a Vulkan-related issue.</p>\n<p>You can check the Zed log at:\n<code>C:\\Users\\YOU\\AppData\\Local\\Zed\\logs\\Zed.log</code></p>\n<p>If you see messages like:</p>\n<ul>\n<li><code>Zed failed to open a window: NoSupportedDeviceFound</code></li>\n<li><code>ERROR_INITIALIZATION_FAILED</code></li>\n<li><code>GPU Crashed</code></li>\n<li><code>ERROR_SURFACE_LOST_KHR</code></li>\n</ul>\n<p>Then Vulkan might not be working properly on your system. In most cases, updating your GPU drivers may help resolve this.</p>\n<p>If there's nothing Vulkan-related in the logs and you happen to have Bandicam installed, try uninstalling it. Zed is currently not compatible with Bandicam.</p>\n\n</main>",
    "content_text": "Building Zed for Windows\n\nThe following commands may be executed in any shell.\n\nRepository\nClone down the Zed repository.\nDependencies\n\n\nInstall rustup\n\n\nInstall either Visual Studio with the optional components MSVC v*** - VS YYYY C++ x64/x86 build tools and MSVC v*** - VS YYYY C++ x64/x86 Spectre-mitigated libs (latest) (v*** is your VS version and YYYY is year when your VS was released. Pay attention to the architecture and change it to yours if needed.)\n\n\nOr, if you prefer to have a slimmer installer of only the MSVC compiler tools, you can install the build tools (+libs as above) and the \"Desktop development with C++\" workload.\nBut beware this installation is not automatically picked up by rustup. You must initialize your environment variables by first launching the \"developer\" shell (cmd/powershell) this installation places in the start menu or in Windows Terminal and then compile.\n\n\nInstall Windows 11 or 10 SDK depending on your system, but ensure that at least Windows 10 SDK version 2104 (10.0.20348.0) is installed on your machine. You can download it from the Windows SDK Archive\n\n\nInstall CMake (required by a dependency). Or you can install it through Visual Studio Installer, then manually add the bin directory to your PATH, for example: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin.\n\n\nIf you can't compile Zed, make sure that you have at least the following components installed in case of a Visual Studio installation:\n{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.CoreEditor\",\n    \"Microsoft.VisualStudio.Workload.CoreEditor\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake\",\n    \"Microsoft.VisualStudio.Component.VC.CMake.Project\",\n    \"Microsoft.VisualStudio.Component.Windows11SDK.26100\",\n    \"Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\"\n  ],\n  \"extensions\": []\n}\n\nOr if in case of just Build Tools, the following components:\n{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Component.Roslyn.Compiler\",\n    \"Microsoft.Component.MSBuild\",\n    \"Microsoft.VisualStudio.Component.CoreBuildTools\",\n    \"Microsoft.VisualStudio.Workload.MSBuildTools\",\n    \"Microsoft.VisualStudio.Component.Windows10SDK\",\n    \"Microsoft.VisualStudio.Component.VC.CoreBuildTools\",\n    \"Microsoft.VisualStudio.Component.VC.Tools.x86.x64\",\n    \"Microsoft.VisualStudio.Component.VC.Redist.14.Latest\",\n    \"Microsoft.VisualStudio.Component.Windows11SDK.26100\",\n    \"Microsoft.VisualStudio.Component.VC.CMake.Project\",\n    \"Microsoft.VisualStudio.Component.TextTemplating\",\n    \"Microsoft.VisualStudio.Component.VC.CoreIde\",\n    \"Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core\",\n    \"Microsoft.VisualStudio.Workload.VCTools\",\n    \"Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\"\n  ],\n  \"extensions\": []\n}\n\nThe list can be obtained as follows:\n\nOpen the Visual Studio Installer\nClick on More in the Installed tab\nClick on Export configuration\n\nBackend Dependencies (optional)\nIf you are looking to develop Zed collaboration features using a local collabortation server, please see: Local Collaboration docs.\nNotes\nYou should modify the pg_hba.conf file in the data directory to use trust instead of scram-sha-256 for the host method. Otherwise, the connection will fail with the error password authentication failed. The pg_hba.conf file typically locates at C:\\Program Files\\PostgreSQL\\17\\data\\pg_hba.conf. After the modification, the file should look like this:\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            trust\n# IPv6 local connections:\nhost    all             all             ::1/128                 trust\n\nAlso, if you are using a non-latin Windows version, you must modify thelc_messages parameter in the postgresql.conf file in the data directory to English_United States.1252 (or whatever UTF8-compatible encoding you have). Otherwise, the database will panic. The postgresql.conf file should look like this:\n# lc_messages = 'Chinese (Simplified)_China.936' # locale for system error message strings\nlc_messages = 'English_United States.1252'\n\nAfter this, you should restart the postgresql service. Press the win key + R to launch the Run window. Type the services.msc and hit the OK button to open the Services Manager. Then, find the postgresql-x64-XX service, right-click on it, and select Restart.\nBuilding from source\nOnce you have the dependencies installed, you can build Zed using Cargo.\nFor a debug build:\ncargo run\n\nFor a release build:\ncargo run --release\n\nAnd to run the tests:\ncargo test --workspace\n\nInstalling from msys2\nZed does not support unofficial MSYS2 Zed packages built for Mingw-w64. Please report any issues you may have with mingw-w64-zed to msys2/MINGW-packages/issues.\nPlease refer to MSYS2 documentation first.\nTroubleshooting\nSetting RUSTFLAGS env var breaks builds\nIf you set the RUSTFLAGS env var, it will override the rustflags settings in .cargo/config.toml which is required to properly build Zed.\nSince these settings can vary from time to time, the build errors you receive may vary from linker errors, to other stranger errors.\nIf you'd like to add extra rust flags, you may do 1 of the following in .cargo/config.toml:\nAdd your flags in the build section\n[build]\nrustflags = [\"-C\", \"symbol-mangling-version=v0\", \"--cfg\", \"tokio_unstable\"]\n\nAdd your flags in the windows target section\n[target.'cfg(target_os = \"windows\")']\nrustflags = [\n    \"--cfg\",\n    \"windows_slim_errors\",\n    \"-C\",\n    \"target-feature=+crt-static\",\n]\n\nOr, you can create a new .cargo/config.toml in the same folder as the Zed repo (see below). This is particularly useful if you are doing CI builds since you don't have to edit the original .cargo/config.toml.\nupper_dir\n├── .cargo          // <-- Make this folder\n│   └── config.toml // <-- Make this file\n└── zed\n    ├── .cargo\n    │   └── config.toml\n    └── crates\n        ├── assistant\n        └── ...\n\nIn the new (above) .cargo/config.toml, if we wanted to add --cfg gles to our rustflags, it would look like this\n[target.'cfg(all())']\nrustflags = [\"--cfg\", \"gles\"]\n\nCargo errors claiming that a dependency is using unstable features\nTry cargo clean and cargo build.\nSTATUS_ACCESS_VIOLATION\nThis error can happen if you are using the \"rust-lld.exe\" linker. Consider trying a different linker.\nIf you are using a global config, consider moving the Zed repository to a nested directory and add a .cargo/config.toml with a custom linker config in the parent directory.\nSee this issue for more information #12041\nInvalid RC path selected\nSometimes, depending on the security rules applied to your laptop, you may get the following error while compiling Zed:\nerror: failed to run custom build command for `zed(C:\\Users\\USER\\src\\zed\\crates\\zed)`\n\nCaused by:\n  process didn't exit successfully: `C:\\Users\\USER\\src\\zed\\target\\debug\\build\\zed-b24f1e9300107efc\\build-script-build` (exit code: 1)\n  --- stdout\n  cargo:rerun-if-changed=../../.git/logs/HEAD\n  cargo:rustc-env=ZED_COMMIT_SHA=25e2e9c6727ba9b77415588cfa11fd969612adb7\n  cargo:rustc-link-arg=/stack:8388608\n  cargo:rerun-if-changed=resources/windows/app-icon.ico\n  package.metadata.winresource does not exist\n  Selected RC path: 'bin\\x64\\rc.exe'\n\n  --- stderr\n  The system cannot find the path specified. (os error 3)\nwarning: build failed, waiting for other jobs to finish...\n\nIn order to fix this issue, you can manually set the ZED_RC_TOOLKIT_PATH environment variable to the RC toolkit path. Usually, you can set it to:\nC:\\Program Files (x86)\\Windows Kits\\10\\bin\\<SDK_version>\\x64.\nSee this issue for more information.\nBuild fails: Path too long\nYou may receive an error like the following when building\nerror: failed to get `pet` as a dependency of package `languages v0.1.0 (D:\\a\\zed-windows-builds\\zed-windows-builds\\crates\\languages)`\n\nCaused by:\n  failed to load source for dependency `pet`\n\nCaused by:\n  Unable to update https://github.com/microsoft/python-environment-tools.git?rev=ffcbf3f28c46633abd5448a52b1f396c322e0d6c#ffcbf3f2\n\nCaused by:\n  path too long: 'C:/Users/runneradmin/.cargo/git/checkouts/python-environment-tools-903993894b37a7d2/ffcbf3f/crates/pet-conda/tests/unix/conda_env_without_manager_but_found_in_history/some_other_location/conda_install/conda-meta/python-fastjsonschema-2.16.2-py310hca03da5_0.json'; class=Filesystem (30)\n\nIn order to solve this, you can enable longpath support for git and Windows.\nFor git: git config --system core.longpaths true\nAnd for Windows with this PS command:\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n\nFor more information on this, please see win32 docs\n(note that you will need to restart your system after enabling longpath support)\nGraphics issues\nZed fails to launch\nCurrently, Zed uses Vulkan as its graphics API on Windows. However, Vulkan isn't always the most reliable on Windows, so if Zed fails to launch, it's likely a Vulkan-related issue.\nYou can check the Zed log at:\nC:\\Users\\YOU\\AppData\\Local\\Zed\\logs\\Zed.log\nIf you see messages like:\n\nZed failed to open a window: NoSupportedDeviceFound\nERROR_INITIALIZATION_FAILED\nGPU Crashed\nERROR_SURFACE_LOST_KHR\n\nThen Vulkan might not be working properly on your system. In most cases, updating your GPU drivers may help resolve this.\nIf there's nothing Vulkan-related in the logs and you happen to have Bandicam installed, try uninstalling it. Zed is currently not compatible with Bandicam.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:44"
  },
  "development/freebsd.html": {
    "url": "https://zed.dev/docs/development/freebsd.html",
    "title": "FreeBSD | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"building-zed-for-freebsd\"><a class=\"header\" href=\"#building-zed-for-freebsd\">Building Zed for FreeBSD</a></h1>\n<p>Note, FreeBSD is not currently a supported platform, and so this is a work-in-progress.</p>\n<h2 id=\"repository\"><a class=\"header\" href=\"#repository\">Repository</a></h2>\n<p>Clone the <a href=\"https://github.com/zed-industries/zed\">Zed repository</a>.</p>\n<h2 id=\"dependencies\"><a class=\"header\" href=\"#dependencies\">Dependencies</a></h2>\n<ul>\n<li>\n<p>Install the necessary system packages and rustup:</p>\n<pre><code class=\"language-sh\">script/freebsd\n</code></pre>\n<p>If preferred, you can inspect <a href=\"https://github.com/zed-industries/zed/blob/main/script/freebsd\"><code>script/freebsd</code></a> and perform the steps manually.</p>\n</li>\n</ul>\n<h2 id=\"building-from-source\"><a class=\"header\" href=\"#building-from-source\">Building from source</a></h2>\n<p>Once the dependencies are installed, you can build Zed using <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>.</p>\n<p>For a debug build of the editor:</p>\n<pre><code class=\"language-sh\">cargo run\n</code></pre>\n<p>And to run the tests:</p>\n<pre><code class=\"language-sh\">cargo test --workspace\n</code></pre>\n<p>In release mode, the primary user interface is the <code>cli</code> crate. You can run it in development with:</p>\n<pre><code class=\"language-sh\">cargo run -p cli\n</code></pre>\n<h3 id=\"webrtc-notice\"><a class=\"header\" href=\"#webrtc-notice\">WebRTC Notice</a></h3>\n<p>Currently, building <code>webrtc-sys</code> on FreeBSD fails due to missing upstream support and unavailable prebuilt binaries. As a result, some collaboration features (audio calls and screensharing) that depend on WebRTC are temporarily disabled.</p>\n<p>See [Issue #15309: FreeBSD Support] and [Discussion #29550: Unofficial FreeBSD port for Zed] for more.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<h3 id=\"cargo-errors-claiming-that-a-dependency-is-using-unstable-features\"><a class=\"header\" href=\"#cargo-errors-claiming-that-a-dependency-is-using-unstable-features\">Cargo errors claiming that a dependency is using unstable features</a></h3>\n<p>Try <code>cargo clean</code> and <code>cargo build</code>.</p>\n\n</main>",
    "content_text": "Building Zed for FreeBSD\nNote, FreeBSD is not currently a supported platform, and so this is a work-in-progress.\nRepository\nClone the Zed repository.\nDependencies\n\n\nInstall the necessary system packages and rustup:\nscript/freebsd\n\nIf preferred, you can inspect script/freebsd and perform the steps manually.\n\n\nBuilding from source\nOnce the dependencies are installed, you can build Zed using Cargo.\nFor a debug build of the editor:\ncargo run\n\nAnd to run the tests:\ncargo test --workspace\n\nIn release mode, the primary user interface is the cli crate. You can run it in development with:\ncargo run -p cli\n\nWebRTC Notice\nCurrently, building webrtc-sys on FreeBSD fails due to missing upstream support and unavailable prebuilt binaries. As a result, some collaboration features (audio calls and screensharing) that depend on WebRTC are temporarily disabled.\nSee [Issue #15309: FreeBSD Support] and [Discussion #29550: Unofficial FreeBSD port for Zed] for more.\nTroubleshooting\nCargo errors claiming that a dependency is using unstable features\nTry cargo clean and cargo build.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:47"
  },
  "development/local-collaboration.html": {
    "url": "https://zed.dev/docs/development/local-collaboration.html",
    "title": "Local Collaboration | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"local-collaboration\"><a class=\"header\" href=\"#local-collaboration\">Local Collaboration</a></h1>\n<ol>\n<li>\n<p>Ensure you have access to our cloud infrastructure. If you don't have access, you can't collaborate locally at this time.</p>\n</li>\n<li>\n<p>Make sure you've installed Zed's dependencies for your platform:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"#macos\">macOS</a></li>\n<li><a href=\"#linux\">Linux</a></li>\n<li><a href=\"#backend-windows\">Windows</a></li>\n</ul>\n<p>Note that <code>collab</code> can be compiled only with MSVC toolchain on Windows</p>\n<ol start=\"3\">\n<li>\n<p>Clone down our cloud repository and follow the instructions in the cloud README</p>\n</li>\n<li>\n<p>Setup the local database for your platform:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"#database-unix\">macOS &amp; Linux</a></li>\n<li><a href=\"#database-windows\">Windows</a></li>\n</ul>\n<ol start=\"5\">\n<li>Run collab:</li>\n</ol>\n<ul>\n<li><a href=\"#run-collab-unix\">macOS &amp; Linux</a></li>\n<li><a href=\"#run-collab-windows\">Windows</a></li>\n</ul>\n<h2 id=\"backend-dependencies\"><a class=\"header\" href=\"#backend-dependencies\">Backend Dependencies</a></h2>\n<p>If you are developing collaborative features of Zed, you'll need to install the dependencies of zed's <code>collab</code> server:</p>\n<ul>\n<li>PostgreSQL</li>\n<li>LiveKit</li>\n<li>Foreman</li>\n</ul>\n<p>You can install these dependencies natively or run them under Docker.</p>\n<h3 id=\"macos\"><a class=\"header\" href=\"#macos\">macOS</a></h3>\n<ol>\n<li>\n<p>Install <a href=\"https://postgresapp.com\">Postgres.app</a> or <a href=\"https://formulae.brew.sh/formula/postgresql@15\">postgresql via homebrew</a>:</p>\n<pre><code class=\"language-sh\">brew install postgresql@15\n</code></pre>\n</li>\n<li>\n<p>Install <a href=\"https://formulae.brew.sh/formula/livekit\">Livekit</a> and <a href=\"https://formulae.brew.sh/formula/foreman\">Foreman</a></p>\n<pre><code class=\"language-sh\">brew install livekit foreman\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>Follow the steps in the <a href=\"https://github.com/zed-industries/zed/blob/main/crates/collab/README.md\">collab README</a> to configure the Postgres database for integration tests</li>\n</ul>\n<p>Alternatively, if you have <a href=\"https://www.docker.com/\">Docker</a> installed you can bring up all the <code>collab</code> dependencies using Docker Compose:</p>\n<h3 id=\"linux\"><a class=\"header\" href=\"#linux\">Linux</a></h3>\n<ol>\n<li>\n<p>Install <a href=\"https://www.postgresql.org/download/linux/\">Postgres</a></p>\n<pre><code class=\"language-sh\">sudo apt-get install postgresql postgresql        # Ubuntu/Debian\nsudo pacman -S postgresql                         # Arch Linux\nsudo dnf install postgresql postgresql-server     # RHEL/Fedora\nsudo zypper install postgresql postgresql-server  # OpenSUSE\n</code></pre>\n</li>\n<li>\n<p>Install <a href=\"https://github.com/livekit/livekit-cli\">Livekit</a></p>\n<pre><code class=\"language-sh\">curl -sSL https://get.livekit.io/cli | bash\n</code></pre>\n</li>\n<li>\n<p>Install <a href=\"https://theforeman.org/manuals/3.15/quickstart_guide.html\">Foreman</a></p>\n</li>\n</ol>\n<h3 id=\"backend-windows\"><a class=\"header\" href=\"#backend-windows\">Windows</a></h3>\n<blockquote>\n<p>This section is still in development. The instructions are not yet complete.</p>\n</blockquote>\n<ul>\n<li>Install <a href=\"https://www.postgresql.org/download/windows/\">Postgres</a></li>\n<li>Install <a href=\"https://github.com/livekit/livekit\">Livekit</a>, optionally you can add the <code>livekit-server</code> binary to your <code>PATH</code>.</li>\n</ul>\n<p>Alternatively, if you have <a href=\"https://www.docker.com/\">Docker</a> installed you can bring up all the <code>collab</code> dependencies using Docker Compose.</p>\n<h3 id=\"Docker\"><a class=\"header\" href=\"#Docker\">Docker</a></h3>\n<p>If you have docker or podman available, you can run the backend dependencies inside containers with Docker Compose:</p>\n<pre><code class=\"language-sh\">docker compose up -d\n</code></pre>\n<h2 id=\"database-setup\"><a class=\"header\" href=\"#database-setup\">Database setup</a></h2>\n<p>Before you can run the <code>collab</code> server locally, you'll need to set up a <code>zed</code> Postgres database.</p>\n<h3 id=\"database-unix\"><a class=\"header\" href=\"#database-unix\">On macOS and Linux</a></h3>\n<pre><code class=\"language-sh\">script/bootstrap\n</code></pre>\n<p>This script will set up the <code>zed</code> Postgres database, and populate it with some users. It requires internet access, because it fetches some users from the GitHub API.</p>\n<p>The script will seed the database with various content defined by:</p>\n<pre><code class=\"language-sh\">cat crates/collab/seed.default.json\n</code></pre>\n<p>To use a different set of admin users, you can create your own version of that json file and export the <code>SEED_PATH</code> environment variable. Note that the usernames listed in the admins list currently must correspond to valid GitHub users.</p>\n<pre><code class=\"language-json\">{\n  \"admins\": [\"admin1\", \"admin2\"],\n  \"channels\": [\"zed\"]\n}\n</code></pre>\n<h3 id=\"database-windows\"><a class=\"header\" href=\"#database-windows\">On Windows</a></h3>\n<pre><code class=\"language-powershell\">.\\script\\bootstrap.ps1\n</code></pre>\n<h2 id=\"testing-collaborative-features-locally\"><a class=\"header\" href=\"#testing-collaborative-features-locally\">Testing collaborative features locally</a></h2>\n<h3 id=\"run-collab-unix\"><a class=\"header\" href=\"#run-collab-unix\">On macOS and Linux</a></h3>\n<p>Ensure that Postgres is configured and running, then run Zed's collaboration server and the <code>livekit</code> dev server:</p>\n<pre><code class=\"language-sh\">foreman start\n# OR\ndocker compose up\n</code></pre>\n<p>Alternatively, if you're not testing voice and screenshare, you can just run <code>collab</code> and <code>cloud</code>, and not the <code>livekit</code> dev server:</p>\n<pre><code class=\"language-sh\">cargo run -p collab -- serve all\n</code></pre>\n<pre><code class=\"language-sh\">cd ../cloud; cargo make dev\n</code></pre>\n<p>In a new terminal, run two or more instances of Zed.</p>\n<pre><code class=\"language-sh\">script/zed-local -3\n</code></pre>\n<p>This script starts one to four instances of Zed, depending on the <code>-2</code>, <code>-3</code> or <code>-4</code> flags. Each instance will be connected to the local <code>collab</code> server, signed in as a different user from <code>.admins.json</code> or <code>.admins.default.json</code>.</p>\n<h3 id=\"run-collab-windows\"><a class=\"header\" href=\"#run-collab-windows\">On Windows</a></h3>\n<p>Since <code>foreman</code> is not available on Windows, you can run the following commands in separate terminals:</p>\n<pre><code class=\"language-powershell\">cargo run --package=collab -- serve all\n</code></pre>\n<p>If you have added the <code>livekit-server</code> binary to your <code>PATH</code>, you can run:</p>\n<pre><code class=\"language-powershell\">livekit-server --dev\n</code></pre>\n<p>Otherwise,</p>\n<pre><code class=\"language-powershell\">.\\path\\to\\livekit-serve.exe --dev\n</code></pre>\n<p>You'll also need to start the cloud server:</p>\n<pre><code class=\"language-powershell\">cd ..\\cloud; cargo make dev\n</code></pre>\n<p>In a new terminal, run two or more instances of Zed.</p>\n<pre><code class=\"language-powershell\">node .\\script\\zed-local -2\n</code></pre>\n<p>Note that this requires <code>node.exe</code> to be in your <code>PATH</code>.</p>\n<h2 id=\"running-a-local-collab-server\"><a class=\"header\" href=\"#running-a-local-collab-server\">Running a local collab server</a></h2>\n<blockquote>\n<p>[!NOTE]\nBecause of recent changes to our authentication system, Zed will not be able to authenticate itself with, and therefore use, a local collab server.</p>\n</blockquote>\n<p>If you want to run your own version of the zed collaboration service, you can, but note that this is still under development, and there is no support for authentication nor extensions.</p>\n<p>Configuration is done through environment variables. By default it will read the configuration from <a href=\"https://github.com/zed-industries/zed/blob/main/crates/collab/.env.toml\"><code>.env.toml</code></a> and you should use that as a guide for setting this up.</p>\n<p>By default Zed assumes that the DATABASE_URL is a Postgres database, but you can make it use Sqlite by compiling with <code>--features sqlite</code> and using a sqlite DATABASE_URL with <code>?mode=rwc</code>.</p>\n<p>To authenticate you must first configure the server by creating a seed.json file that contains at a minimum your github handle. This will be used to create the user on demand.</p>\n<pre><code class=\"language-json\">{\n  \"admins\": [\"nathansobo\"]\n}\n</code></pre>\n<p>By default the collab server will seed the database when first creating it, but if you want to add more users you can explicitly reseed them with <code>SEED_PATH=./seed.json cargo run -p collab seed</code></p>\n<p>Then when running the zed client you must specify two environment variables, <code>ZED_ADMIN_API_TOKEN</code> (which should match the value of <code>API_TOKEN</code> in .env.toml) and <code>ZED_IMPERSONATE</code> (which should match one of the users in your seed.json)</p>\n\n</main>",
    "content_text": "Local Collaboration\n\n\nEnsure you have access to our cloud infrastructure. If you don't have access, you can't collaborate locally at this time.\n\n\nMake sure you've installed Zed's dependencies for your platform:\n\n\n\nmacOS\nLinux\nWindows\n\nNote that collab can be compiled only with MSVC toolchain on Windows\n\n\nClone down our cloud repository and follow the instructions in the cloud README\n\n\nSetup the local database for your platform:\n\n\n\nmacOS & Linux\nWindows\n\n\nRun collab:\n\n\nmacOS & Linux\nWindows\n\nBackend Dependencies\nIf you are developing collaborative features of Zed, you'll need to install the dependencies of zed's collab server:\n\nPostgreSQL\nLiveKit\nForeman\n\nYou can install these dependencies natively or run them under Docker.\nmacOS\n\n\nInstall Postgres.app or postgresql via homebrew:\nbrew install postgresql@15\n\n\n\nInstall Livekit and Foreman\nbrew install livekit foreman\n\n\n\n\nFollow the steps in the collab README to configure the Postgres database for integration tests\n\nAlternatively, if you have Docker installed you can bring up all the collab dependencies using Docker Compose:\nLinux\n\n\nInstall Postgres\nsudo apt-get install postgresql postgresql        # Ubuntu/Debian\nsudo pacman -S postgresql                         # Arch Linux\nsudo dnf install postgresql postgresql-server     # RHEL/Fedora\nsudo zypper install postgresql postgresql-server  # OpenSUSE\n\n\n\nInstall Livekit\ncurl -sSL https://get.livekit.io/cli | bash\n\n\n\nInstall Foreman\n\n\nWindows\n\nThis section is still in development. The instructions are not yet complete.\n\n\nInstall Postgres\nInstall Livekit, optionally you can add the livekit-server binary to your PATH.\n\nAlternatively, if you have Docker installed you can bring up all the collab dependencies using Docker Compose.\nDocker\nIf you have docker or podman available, you can run the backend dependencies inside containers with Docker Compose:\ndocker compose up -d\n\nDatabase setup\nBefore you can run the collab server locally, you'll need to set up a zed Postgres database.\nOn macOS and Linux\nscript/bootstrap\n\nThis script will set up the zed Postgres database, and populate it with some users. It requires internet access, because it fetches some users from the GitHub API.\nThe script will seed the database with various content defined by:\ncat crates/collab/seed.default.json\n\nTo use a different set of admin users, you can create your own version of that json file and export the SEED_PATH environment variable. Note that the usernames listed in the admins list currently must correspond to valid GitHub users.\n{\n  \"admins\": [\"admin1\", \"admin2\"],\n  \"channels\": [\"zed\"]\n}\n\nOn Windows\n.\\script\\bootstrap.ps1\n\nTesting collaborative features locally\nOn macOS and Linux\nEnsure that Postgres is configured and running, then run Zed's collaboration server and the livekit dev server:\nforeman start\n# OR\ndocker compose up\n\nAlternatively, if you're not testing voice and screenshare, you can just run collab and cloud, and not the livekit dev server:\ncargo run -p collab -- serve all\n\ncd ../cloud; cargo make dev\n\nIn a new terminal, run two or more instances of Zed.\nscript/zed-local -3\n\nThis script starts one to four instances of Zed, depending on the -2, -3 or -4 flags. Each instance will be connected to the local collab server, signed in as a different user from .admins.json or .admins.default.json.\nOn Windows\nSince foreman is not available on Windows, you can run the following commands in separate terminals:\ncargo run --package=collab -- serve all\n\nIf you have added the livekit-server binary to your PATH, you can run:\nlivekit-server --dev\n\nOtherwise,\n.\\path\\to\\livekit-serve.exe --dev\n\nYou'll also need to start the cloud server:\ncd ..\\cloud; cargo make dev\n\nIn a new terminal, run two or more instances of Zed.\nnode .\\script\\zed-local -2\n\nNote that this requires node.exe to be in your PATH.\nRunning a local collab server\n\n[!NOTE]\nBecause of recent changes to our authentication system, Zed will not be able to authenticate itself with, and therefore use, a local collab server.\n\nIf you want to run your own version of the zed collaboration service, you can, but note that this is still under development, and there is no support for authentication nor extensions.\nConfiguration is done through environment variables. By default it will read the configuration from .env.toml and you should use that as a guide for setting this up.\nBy default Zed assumes that the DATABASE_URL is a Postgres database, but you can make it use Sqlite by compiling with --features sqlite and using a sqlite DATABASE_URL with ?mode=rwc.\nTo authenticate you must first configure the server by creating a seed.json file that contains at a minimum your github handle. This will be used to create the user on demand.\n{\n  \"admins\": [\"nathansobo\"]\n}\n\nBy default the collab server will seed the database when first creating it, but if you want to add more users you can explicitly reseed them with SEED_PATH=./seed.json cargo run -p collab seed\nThen when running the zed client you must specify two environment variables, ZED_ADMIN_API_TOKEN (which should match the value of API_TOKEN in .env.toml) and ZED_IMPERSONATE (which should match one of the users in your seed.json)",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:49"
  },
  "development/debuggers.html": {
    "url": "https://zed.dev/docs/development/debuggers.html",
    "title": "Using Debuggers | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"using-a-debugger\"><a class=\"header\" href=\"#using-a-debugger\">Using a debugger</a></h1>\n<blockquote>\n<p><strong>DISCLAIMER</strong>: This is not documentation for <a href=\"../debugger.html\">configuring Zed's debugger</a>.\nRather, it is intended to provide information on how to use a debugger while developing Zed itself to both Zed employees and external contributors.</p>\n</blockquote>\n<h2 id=\"using-zeds-built-in-debugger\"><a class=\"header\" href=\"#using-zeds-built-in-debugger\">Using Zed's built-in debugger</a></h2>\n<p>While the Zed project is open you can open the <code>New Process Modal</code> and select the <code>Debug</code> tab. There you can see to debug configurations to debug Zed with, one for GDB and one for LLDB. Select the configuration you want and Zed will build and launch the binary.</p>\n<p>Please note, GDB isn't supported on arm Macbooks</p>\n<h2 id=\"release-build-profile-considerations\"><a class=\"header\" href=\"#release-build-profile-considerations\">Release build profile considerations</a></h2>\n<p>By default, builds using the release profile (release is the profile used for production builds, i.e. nightly, preview, and stable) include limited debug info.</p>\n<p>This is done by setting the <code>profile.(release).debug</code> field in the root <code>Cargo.toml</code> field to <code>\"limited\"</code>.</p>\n<p>The official documentation for the <code>debug</code> field can be found <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#debug\">here</a>.\nBut the TLDR is that <code>\"limited\"</code> strips type and variable level debug info.</p>\n<p>In release builds, this is done to reduce the binary size, as type and variable level debug info is not required, and does not impact the usability of generated stack traces.</p>\n<p>However, while the type and variable level debug info is not required for good stack traces, it is very important for a good experience using debuggers,\nas without the type and variable level debug info, the debugger has no way to resolve local variables, inspect them, format them using pretty-printers, etc.</p>\n<p>Therefore, in order to use a debugger to it's fullest extent when debugging a release build, you must compile a new Zed binary, with full debug info.</p>\n<p>The simplest way to do this, is to use the <code>--config</code> flag to override the <code>debug</code> field in the root <code>Cargo.toml</code> file when running <code>cargo run</code> or <code>cargo build</code> like so:</p>\n<pre><code class=\"language-sh\">cargo run --config 'profile.release.debug=\"full\"'\ncargo build --config 'profile.release.debug=\"full\"'\n</code></pre>\n<blockquote>\n<p>If you wish to avoid passing the <code>--config</code> flag on every invocation of <code>cargo</code>. You may also change the section in the <a href=\"https://github.com/zed-industries/zed/blob/main/Cargo.toml\">root <code>Cargo.toml</code></a></p>\n<p>from</p>\n<pre><code class=\"language-toml\">[profile.release]\ndebug = \"limited\"\n</code></pre>\n<p>to</p>\n<pre><code class=\"language-toml\">[profile.release]\ndebug = \"full\"\n</code></pre>\n<p>This will ensure all invocations of <code>cargo run --release</code> or <code>cargo build --release</code> will compile with full debug info.</p>\n<p><strong>WARNING:</strong> Make sure to avoid committing these changes!</p>\n</blockquote>\n<h2 id=\"running-zed-with-a-shell-debugger-gdblldb\"><a class=\"header\" href=\"#running-zed-with-a-shell-debugger-gdblldb\">Running Zed with a shell debugger GDB/LLDB</a></h2>\n<h3 id=\"background\"><a class=\"header\" href=\"#background\">Background</a></h3>\n<p>When installing rust through rustup, (the recommended way to do so when developing Zed, see the documentation for getting started on your platform <a href=\"../development.html\">here</a>)\na few additional scripts are installed and put on your path to assist with debugging binaries compiled with rust.</p>\n<p>These are <code>rust-gdb</code> and <code>rust-lldb</code> respectively.</p>\n<p>You can read more information about these scripts and why they are useful <a href=\"https://michaelwoerister.github.io/2015/03/27/rust-xxdb.html\">here</a> if you are interested.</p>\n<p>However, the summary is that they are simple shell scripts that wrap the standard <code>gdb</code> and <code>lldb</code> commands, injecting the relevant commands and flags to enable additional\nrust-specific features such as pretty-printers and type information.</p>\n<p>Therefore, in order to use <code>rust-gdb</code> or <code>rust-lldb</code>, you must have <code>gdb</code> or <code>lldb</code> installed on your system. If you don't have them installed, you will need to install them in a manner appropriate for your platform.</p>\n<p>According to the <a href=\"https://michaelwoerister.github.io/2015/03/27/rust-xxdb.html\">previously linked article</a>, \"The minimum supported debugger versions are GDB 7.7 and LLDB 310. However, the general rule is: the newer the better.\" Therefore, it is recommended to install the latest version of <code>gdb</code> or <code>lldb</code> if possible.</p>\n<blockquote>\n<p><strong>Note</strong>: <code>rust-gdb</code> is not installed by default on Windows, as <code>gdb</code> support for windows is not very stable. It is recommended to use <code>lldb</code> with <code>rust-lldb</code> instead on Windows.</p>\n</blockquote>\n<p>If you are unfamiliar with <code>gdb</code> or <code>lldb</code>, you can learn more about them <a href=\"https://www.gnu.org/software/gdb/\">here</a> and <a href=\"https://lldb.llvm.org/\">here</a> respectively.</p>\n<h3 id=\"usage-with-zed\"><a class=\"header\" href=\"#usage-with-zed\">Usage with Zed</a></h3>\n<p>After following the steps above for including full debug info when compiling Zed,\nYou can either run <code>rust-gdb</code> or <code>rust-lldb</code> on the compiled Zed binary after building it with <code>cargo build</code>, by running one of the following commands:</p>\n<pre><code>rust-gdb target/debug/zed\nrust-lldb target/debug/zed\n</code></pre>\n<p>Alternatively, you can attach to a running instance of Zed (such as an instance of Zed started using <code>cargo run</code>) by running one of the following commands:</p>\n<pre><code>rust-gdb -p &lt;pid&gt;\nrust-lldb -p &lt;pid&gt;\n</code></pre>\n<p>Where <code>&lt;pid&gt;</code> is the process ID of the Zed instance you want to attach to.</p>\n<p>To get the process ID of a running Zed instance, you can use your systems process management tools such as <code>Task Manager</code> on windows or <code>Activity Monitor</code> on MacOS.</p>\n<p>Alternatively, you can run the <code>ps aux | grep zed</code> command on MacOS and Linux or <code>Get-Process | Select-Object Id, ProcessName</code> in an instance of PowerShell on Windows.</p>\n<h4 id=\"debugging-panics-and-crashes\"><a class=\"header\" href=\"#debugging-panics-and-crashes\">Debugging Panics and Crashes</a></h4>\n<p>Debuggers can be an excellent tool for debugging the cause of panics and crashes in all programs, including Zed.</p>\n<p>By default, when a process that <code>gdb</code> or <code>lldb</code> is attached to hits an exception such as a panic, the debugger will automatically stop at the point of the panic and allow you to inspect the state of the program.</p>\n<p>Most likely, the point at which the debugger stops will be deep in the rust standard library panic or exception handling code, so you will need to navigate up the stack trace to find the actual cause of the panic.</p>\n<p>This can be accomplished using the <code>backtrace</code> command in combination with the <code>frame select</code> command in <code>lldb</code>, with similar commands available in <code>gdb</code>.</p>\n<p>Once the program is stopped, you will not be able to continue execution as you can before an exception is hit. However, you can jump around to different stack frames, and inspect the values of variables and expressions\nwithin each frame, which can be very useful in identifying the root cause of the crash.</p>\n<p>You can find additional information on debugging Zed crashes <a href=\"./debugging-crashes.html\">here</a>.</p>\n\n</main>",
    "content_text": "Using a debugger\n\nDISCLAIMER: This is not documentation for configuring Zed's debugger.\nRather, it is intended to provide information on how to use a debugger while developing Zed itself to both Zed employees and external contributors.\n\nUsing Zed's built-in debugger\nWhile the Zed project is open you can open the New Process Modal and select the Debug tab. There you can see to debug configurations to debug Zed with, one for GDB and one for LLDB. Select the configuration you want and Zed will build and launch the binary.\nPlease note, GDB isn't supported on arm Macbooks\nRelease build profile considerations\nBy default, builds using the release profile (release is the profile used for production builds, i.e. nightly, preview, and stable) include limited debug info.\nThis is done by setting the profile.(release).debug field in the root Cargo.toml field to \"limited\".\nThe official documentation for the debug field can be found here.\nBut the TLDR is that \"limited\" strips type and variable level debug info.\nIn release builds, this is done to reduce the binary size, as type and variable level debug info is not required, and does not impact the usability of generated stack traces.\nHowever, while the type and variable level debug info is not required for good stack traces, it is very important for a good experience using debuggers,\nas without the type and variable level debug info, the debugger has no way to resolve local variables, inspect them, format them using pretty-printers, etc.\nTherefore, in order to use a debugger to it's fullest extent when debugging a release build, you must compile a new Zed binary, with full debug info.\nThe simplest way to do this, is to use the --config flag to override the debug field in the root Cargo.toml file when running cargo run or cargo build like so:\ncargo run --config 'profile.release.debug=\"full\"'\ncargo build --config 'profile.release.debug=\"full\"'\n\n\nIf you wish to avoid passing the --config flag on every invocation of cargo. You may also change the section in the root Cargo.toml\nfrom\n[profile.release]\ndebug = \"limited\"\n\nto\n[profile.release]\ndebug = \"full\"\n\nThis will ensure all invocations of cargo run --release or cargo build --release will compile with full debug info.\nWARNING: Make sure to avoid committing these changes!\n\nRunning Zed with a shell debugger GDB/LLDB\nBackground\nWhen installing rust through rustup, (the recommended way to do so when developing Zed, see the documentation for getting started on your platform here)\na few additional scripts are installed and put on your path to assist with debugging binaries compiled with rust.\nThese are rust-gdb and rust-lldb respectively.\nYou can read more information about these scripts and why they are useful here if you are interested.\nHowever, the summary is that they are simple shell scripts that wrap the standard gdb and lldb commands, injecting the relevant commands and flags to enable additional\nrust-specific features such as pretty-printers and type information.\nTherefore, in order to use rust-gdb or rust-lldb, you must have gdb or lldb installed on your system. If you don't have them installed, you will need to install them in a manner appropriate for your platform.\nAccording to the previously linked article, \"The minimum supported debugger versions are GDB 7.7 and LLDB 310. However, the general rule is: the newer the better.\" Therefore, it is recommended to install the latest version of gdb or lldb if possible.\n\nNote: rust-gdb is not installed by default on Windows, as gdb support for windows is not very stable. It is recommended to use lldb with rust-lldb instead on Windows.\n\nIf you are unfamiliar with gdb or lldb, you can learn more about them here and here respectively.\nUsage with Zed\nAfter following the steps above for including full debug info when compiling Zed,\nYou can either run rust-gdb or rust-lldb on the compiled Zed binary after building it with cargo build, by running one of the following commands:\nrust-gdb target/debug/zed\nrust-lldb target/debug/zed\n\nAlternatively, you can attach to a running instance of Zed (such as an instance of Zed started using cargo run) by running one of the following commands:\nrust-gdb -p <pid>\nrust-lldb -p <pid>\n\nWhere <pid> is the process ID of the Zed instance you want to attach to.\nTo get the process ID of a running Zed instance, you can use your systems process management tools such as Task Manager on windows or Activity Monitor on MacOS.\nAlternatively, you can run the ps aux | grep zed command on MacOS and Linux or Get-Process | Select-Object Id, ProcessName in an instance of PowerShell on Windows.\nDebugging Panics and Crashes\nDebuggers can be an excellent tool for debugging the cause of panics and crashes in all programs, including Zed.\nBy default, when a process that gdb or lldb is attached to hits an exception such as a panic, the debugger will automatically stop at the point of the panic and allow you to inspect the state of the program.\nMost likely, the point at which the debugger stops will be deep in the rust standard library panic or exception handling code, so you will need to navigate up the stack trace to find the actual cause of the panic.\nThis can be accomplished using the backtrace command in combination with the frame select command in lldb, with similar commands available in gdb.\nOnce the program is stopped, you will not be able to continue execution as you can before an exception is hit. However, you can jump around to different stack frames, and inspect the values of variables and expressions\nwithin each frame, which can be very useful in identifying the root cause of the crash.\nYou can find additional information on debugging Zed crashes here.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:52"
  },
  "development/glossary.html": {
    "url": "https://zed.dev/docs/development/glossary.html",
    "title": "Glossary | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zed-development-glossary\"><a class=\"header\" href=\"#zed-development-glossary\">Zed Development: Glossary</a></h1>\n<p>These are some terms and structures frequently used throughout the zed codebase.</p>\n<p>This is a best effort list and a work in progress.</p>\n<!--\nTBD: Glossary Improvement\n\nQuestions:\n\n- Can we generate this list from doc comments throughout zed?\n- We should have a section that shows the various UI parts and their names. (Can't do that in the channel.)\n-->\n<h2 id=\"naming-conventions\"><a class=\"header\" href=\"#naming-conventions\">Naming conventions</a></h2>\n<p>These are generally true for the whole codebase. Note that Name can be anything\nhere. An example would be <code>AnyElement</code> and <code>LspStore</code>.</p>\n<ul>\n<li><code>AnyName</code>: A type erased version of <em>name</em>. Think <code>Box&lt;dyn NameTrait&gt;</code>.</li>\n<li><code>NameStore</code>: A wrapper type which abstracts over whether operations are running locally or on a remote.</li>\n</ul>\n<h2 id=\"gpui\"><a class=\"header\" href=\"#gpui\">GPUI</a></h2>\n<h3 id=\"state-menagement\"><a class=\"header\" href=\"#state-menagement\">State menagement</a></h3>\n<ul>\n<li><code>App</code>: A singleton which holds the full application state including all the entities. Crucially: <code>App</code> is not <code>Send</code>, which means that <code>App</code> only exists on the thread that created it (which is the main/UI thread, usually). Thus, if you see a <code>&amp;mut App</code>, know that you're on UI thread.</li>\n<li><code>Context</code>: A wrapper around the <code>App</code> struct with specialized behavior for a specific <code>Entity</code>. Think of it as <code>(&amp;mut App, Entity&lt;V&gt;)</code>. The specialized behavior is surfaced in the API surface of <code>Context</code>. E.g., <code>App::spawn</code> takes an <code>AsyncFnOnce(AsyncApp) -&gt; Ret</code>, whereas <code>Context::spawn</code> takes an <code>AsyncFnOnce(WeakEntity&lt;V&gt;, AsyncApp) -&gt; Ret</code>.</li>\n<li><code>AsyncApp</code>: An owned version of <code>App</code> for use in async contexts. This type is <em>still</em> not <code>Send</code> (so <code>AsyncApp</code> = you're on the main thread) and any use of it may be fallible (to account for the fact that the <code>App</code> might've been terminated by the time this closure runs).\nThe convenience of <code>AsyncApp</code> lies in the fact that you usually interface with <code>App</code> via <code>&amp;mut App</code>, which would be inconvenient to use with async closures; <code>AsyncApp</code> is owned, so you can use it in async closures with no sweat.</li>\n<li><code>AppContext</code> A trait which abstracts over <code>App</code>, <code>AsyncApp</code> &amp; <code>Context</code> and their Test versions.</li>\n<li><code>Task</code>: A future running or scheduled to run on the background or foreground\nexecutor. In contradiction to regular Futures Tasks do not need <code>.await</code> to start running. You do need to await them to get the result of the task.</li>\n<li><code>Executor</code>: Used to spawn tasks that run either on the foreground or background thread. Try to run the tasks on the background thread.\n<ul>\n<li><code>BackgroundExecutor</code>: A threadpool running <code>Task</code>s.</li>\n<li><code>ForegroundExecutor</code>: The main thread running <code>Task</code>s.</li>\n</ul>\n</li>\n<li><code>Entity</code>: A strong, well-typed reference to a struct which is managed by gpui. Effectively a pointer/map key into the <code>App::EntityMap</code>.</li>\n<li><code>WeakEntity</code>: A runtime checked reference to an <code>Entity</code> which may no longer exist. Similar to <a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\"><code>std::rc::Weak</code></a>.</li>\n<li><code>Global</code>: A singleton type which has only one value, that is stored in the <code>App</code>.</li>\n<li><code>Event</code>: A datatype which can be send by an <code>Entity</code> to subscribers</li>\n<li><code>Action</code>: An event that represents a user's keyboard input that can be handled by listeners\nExample: <code>file finder: toggle</code></li>\n<li><code>Observing</code>: reacting entities notifying they've changed</li>\n<li><code>Subscription</code>: An event handler that is used to react to the changes of state in the application.\n<ol>\n<li>Emitted event handling</li>\n<li>Observing <code>{new,release,on notify}</code> of an entity</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"ui\"><a class=\"header\" href=\"#ui\">UI</a></h3>\n<ul>\n<li><code>View</code>: An <code>Entity</code> which can produce an <code>Element</code> through its implementation of <code>Render</code>.</li>\n<li><code>Element</code>: A type that can be laid out and painted to the screen.</li>\n<li><code>element expression</code>: An expression that builds an element tree, example:</li>\n</ul>\n<pre><pre class=\"playground\"><code class=\"language-rust\"><span class=\"boring\">#![allow(unused)]\n</span><span class=\"boring\">fn main() {\n</span>h_flex()\n    .id(text[i])\n    .relative()\n    .when(selected, |this| {\n        this.child(\n            div()\n                .h_4()\n                .absolute()\n                etc etc\n<span class=\"boring\">}</span></code></pre></pre>\n<ul>\n<li><code>Component</code>: A builder which can be rendered turning it into an <code>Element</code>.</li>\n<li><code>Dispatch tree</code>: TODO</li>\n<li><code>Focus</code>: The place where keystrokes are handled first</li>\n<li><code>Focus tree</code>: Path from the place thats the current focus to the UI Root. Example <img/> TODO</li>\n</ul>\n<h2 id=\"zed-ui\"><a class=\"header\" href=\"#zed-ui\">Zed UI</a></h2>\n<ul>\n<li>\n<p><code>Window</code>: A struct in zed representing a zed window in your desktop environment (see image below). There can be multiple if you have multiple zed instances open. Mostly passed around for rendering.</p>\n</li>\n<li>\n<p><code>Modal</code>: A UI element that floats on top of the rest of the UI</p>\n</li>\n<li>\n<p><code>Picker</code>: A struct representing a list of items in floating on top of the UI (Modal). You can select an item and confirm. What happens on select or confirm is determined by the picker's delegate. (The 'Model' in the image below is a picker.)</p>\n</li>\n<li>\n<p><code>PickerDelegate</code>: A trait used to specialize behavior for a <code>Picker</code>. The <code>Picker</code> stores the <code>PickerDelegate</code> in the field delegate.</p>\n</li>\n<li>\n<p><code>Center</code>: The middle of the zed window, the center is split into multiple <code>Pane</code>s. In the codebase this is a field on the <code>Workspace</code> struct. (see image below).</p>\n</li>\n<li>\n<p><code>Pane</code>: An area in the <code>Center</code> where we can place items, such as an editor, multi-buffer or terminal (see image below).</p>\n</li>\n<li>\n<p><code>Panel</code>: An <code>Entity</code> implementing the <code>Panel</code> trait. These can be placed in a <code>Dock</code>. In the image below we see the: <code>ProjectPanel</code> in the left dock, the <code>DebugPanel</code> in the bottom dock, and <code>AgentPanel</code> in the right dock. Note <code>Editor</code> does not implement <code>Panel</code> and hence is not a <code>Panel</code>.</p>\n</li>\n<li>\n<p><code>Dock</code>: A UI element similar to a <code>Pane</code> which can be opened and hidden. There can be up to 3 docks open at a time, left right and below the center. A dock contains one or more <code>Panel</code>s not <code>Pane</code>s. (see image).\n<img alt=\"image\" height=\"1080\" src=\"https://github.com/user-attachments/assets/2cb1170e-2850-450d-89bb-73622b5d07b2\" width=\"1921\"/></p>\n</li>\n<li>\n<p><code>Project</code>: One or more <code>Worktree</code>s</p>\n</li>\n<li>\n<p><code>Worktree</code>: Represents either local or remote files.\n<img alt=\"image\" height=\"1118\" src=\"https://github.com/user-attachments/assets/da5c58e4-b02e-4038-9736-27e3509fdbfa\" width=\"552\"/></p>\n</li>\n<li>\n<p><a href=\"https://zed.dev/docs/multibuffers\">Multibuffer</a>: A list of Editors, a multi-buffer allows editing multiple files simultaneously. A multi-buffer opens when an operation in Zed returns multiple locations, examples: <em>search</em> or <em>go to definition</em>. See project search in the image below.</p>\n</li>\n</ul>\n<img alt=\"image\" height=\"886\" src=\"https://github.com/user-attachments/assets/d59dcecd-8ab6-4172-8fb6-b1fc3c3eaf9d\" width=\"800\"/>\n<h2 id=\"editor\"><a class=\"header\" href=\"#editor\">Editor</a></h2>\n<ul>\n<li><code>Editor</code>: <em>The</em> text editor, nearly everything in zed is an <code>Editor</code>, even single line inputs. Each pane in the image above contains one or more <code>Editor</code> instances.</li>\n<li><code>Workspace</code>: The root of the window</li>\n<li><code>Entry</code>: A file, dir, pending dir or unloaded dir.</li>\n<li><code>Buffer</code>: The in-memory representation of a 'file' together with relevant data such as syntax trees, git status and diagnostics.</li>\n<li><code>pending selection</code>: You have mouse down and you're dragging but you have not yet released.</li>\n</ul>\n<h2 id=\"collab\"><a class=\"header\" href=\"#collab\">Collab</a></h2>\n<ul>\n<li><code>Collab session</code>: Multiple users working in a shared <code>Project</code></li>\n<li><code>Upstream client</code>: The zed client which has shared their workspace</li>\n<li><code>Downstream client</code>: The zed client joining a shared workspace</li>\n</ul>\n<h2 id=\"debugger\"><a class=\"header\" href=\"#debugger\">Debugger</a></h2>\n<ul>\n<li><code>DapStore</code>: Is an entity that manages debugger sessions</li>\n<li><code>debugger::Session</code>: Is an entity that manages the lifecycle of a debug session and communication with DAPS</li>\n<li><code>BreakpointStore</code>: Is an entity that manages breakpoints states in local and remote instances of Zed</li>\n<li><code>DebugSession</code>: Manages a debug session's UI and running state</li>\n<li><code>RunningState</code>: Directily manages all the views of a debug session</li>\n<li><code>VariableList</code>: The variable and watch list view of a debug session</li>\n<li><code>Console</code>: TODO</li>\n<li><code>Terminal</code>: TODO</li>\n<li><code>BreakpointList</code>: TODO</li>\n</ul>\n\n</main>",
    "content_text": "Zed Development: Glossary\nThese are some terms and structures frequently used throughout the zed codebase.\nThis is a best effort list and a work in progress.\n\nNaming conventions\nThese are generally true for the whole codebase. Note that Name can be anything\nhere. An example would be AnyElement and LspStore.\n\nAnyName: A type erased version of name. Think Box<dyn NameTrait>.\nNameStore: A wrapper type which abstracts over whether operations are running locally or on a remote.\n\nGPUI\nState menagement\n\nApp: A singleton which holds the full application state including all the entities. Crucially: App is not Send, which means that App only exists on the thread that created it (which is the main/UI thread, usually). Thus, if you see a &mut App, know that you're on UI thread.\nContext: A wrapper around the App struct with specialized behavior for a specific Entity. Think of it as (&mut App, Entity<V>). The specialized behavior is surfaced in the API surface of Context. E.g., App::spawn takes an AsyncFnOnce(AsyncApp) -> Ret, whereas Context::spawn takes an AsyncFnOnce(WeakEntity<V>, AsyncApp) -> Ret.\nAsyncApp: An owned version of App for use in async contexts. This type is still not Send (so AsyncApp = you're on the main thread) and any use of it may be fallible (to account for the fact that the App might've been terminated by the time this closure runs).\nThe convenience of AsyncApp lies in the fact that you usually interface with App via &mut App, which would be inconvenient to use with async closures; AsyncApp is owned, so you can use it in async closures with no sweat.\nAppContext A trait which abstracts over App, AsyncApp & Context and their Test versions.\nTask: A future running or scheduled to run on the background or foreground\nexecutor. In contradiction to regular Futures Tasks do not need .await to start running. You do need to await them to get the result of the task.\nExecutor: Used to spawn tasks that run either on the foreground or background thread. Try to run the tasks on the background thread.\n\nBackgroundExecutor: A threadpool running Tasks.\nForegroundExecutor: The main thread running Tasks.\n\n\nEntity: A strong, well-typed reference to a struct which is managed by gpui. Effectively a pointer/map key into the App::EntityMap.\nWeakEntity: A runtime checked reference to an Entity which may no longer exist. Similar to std::rc::Weak.\nGlobal: A singleton type which has only one value, that is stored in the App.\nEvent: A datatype which can be send by an Entity to subscribers\nAction: An event that represents a user's keyboard input that can be handled by listeners\nExample: file finder: toggle\nObserving: reacting entities notifying they've changed\nSubscription: An event handler that is used to react to the changes of state in the application.\n\nEmitted event handling\nObserving {new,release,on notify} of an entity\n\n\n\nUI\n\nView: An Entity which can produce an Element through its implementation of Render.\nElement: A type that can be laid out and painted to the screen.\nelement expression: An expression that builds an element tree, example:\n\n#![allow(unused)]\nfn main() {\nh_flex()\n    .id(text[i])\n    .relative()\n    .when(selected, |this| {\n        this.child(\n            div()\n                .h_4()\n                .absolute()\n                etc etc\n}\n\nComponent: A builder which can be rendered turning it into an Element.\nDispatch tree: TODO\nFocus: The place where keystrokes are handled first\nFocus tree: Path from the place thats the current focus to the UI Root. Example  TODO\n\nZed UI\n\n\nWindow: A struct in zed representing a zed window in your desktop environment (see image below). There can be multiple if you have multiple zed instances open. Mostly passed around for rendering.\n\n\nModal: A UI element that floats on top of the rest of the UI\n\n\nPicker: A struct representing a list of items in floating on top of the UI (Modal). You can select an item and confirm. What happens on select or confirm is determined by the picker's delegate. (The 'Model' in the image below is a picker.)\n\n\nPickerDelegate: A trait used to specialize behavior for a Picker. The Picker stores the PickerDelegate in the field delegate.\n\n\nCenter: The middle of the zed window, the center is split into multiple Panes. In the codebase this is a field on the Workspace struct. (see image below).\n\n\nPane: An area in the Center where we can place items, such as an editor, multi-buffer or terminal (see image below).\n\n\nPanel: An Entity implementing the Panel trait. These can be placed in a Dock. In the image below we see the: ProjectPanel in the left dock, the DebugPanel in the bottom dock, and AgentPanel in the right dock. Note Editor does not implement Panel and hence is not a Panel.\n\n\nDock: A UI element similar to a Pane which can be opened and hidden. There can be up to 3 docks open at a time, left right and below the center. A dock contains one or more Panels not Panes. (see image).\n\n\n\nProject: One or more Worktrees\n\n\nWorktree: Represents either local or remote files.\n\n\n\nMultibuffer: A list of Editors, a multi-buffer allows editing multiple files simultaneously. A multi-buffer opens when an operation in Zed returns multiple locations, examples: search or go to definition. See project search in the image below.\n\n\n\nEditor\n\nEditor: The text editor, nearly everything in zed is an Editor, even single line inputs. Each pane in the image above contains one or more Editor instances.\nWorkspace: The root of the window\nEntry: A file, dir, pending dir or unloaded dir.\nBuffer: The in-memory representation of a 'file' together with relevant data such as syntax trees, git status and diagnostics.\npending selection: You have mouse down and you're dragging but you have not yet released.\n\nCollab\n\nCollab session: Multiple users working in a shared Project\nUpstream client: The zed client which has shared their workspace\nDownstream client: The zed client joining a shared workspace\n\nDebugger\n\nDapStore: Is an entity that manages debugger sessions\ndebugger::Session: Is an entity that manages the lifecycle of a debug session and communication with DAPS\nBreakpointStore: Is an entity that manages breakpoints states in local and remote instances of Zed\nDebugSession: Manages a debug session's UI and running state\nRunningState: Directily manages all the views of a debug session\nVariableList: The variable and watch list view of a debug session\nConsole: TODO\nTerminal: TODO\nBreakpointList: TODO",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:55"
  },
  "development/releases.html": {
    "url": "https://zed.dev/docs/development/releases.html",
    "title": "Release Process | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"zed-releases\"><a class=\"header\" href=\"#zed-releases\">Zed Releases</a></h1>\n<p>Read about Zed's release channels <a href=\"https://zed.dev/faq#what-are-the-release-channels\">here</a>.</p>\n<h2 id=\"wednesday-release-process\"><a class=\"header\" href=\"#wednesday-release-process\">Wednesday release process</a></h2>\n<p>You will need write access to the Zed repository to do this.</p>\n<p>Credentials for various services used in this process can be found in 1Password.</p>\n<hr/>\n<ol>\n<li>\n<p>Checkout <code>main</code> and ensure your working copy is clean.</p>\n</li>\n<li>\n<p>Run <code>git fetch &amp;&amp; git pull</code> to ensure you have the latest commits locally.</p>\n</li>\n<li>\n<p>Run <code>git fetch --tags --force</code> to forcibly ensure your local tags are in sync with the remote.</p>\n</li>\n<li>\n<p>Run <code>./script/get-stable-channel-release-notes</code>.</p>\n<ul>\n<li>Follow the instructions at the end of the script and aggregate the release notes into one structure.</li>\n</ul>\n</li>\n<li>\n<p>Run <code>./script/bump-zed-minor-versions</code>.</p>\n<ul>\n<li>Push the tags and branches as instructed.</li>\n</ul>\n</li>\n<li>\n<p>Run <code>./script/get-preview-channel-changes</code>.</p>\n<ul>\n<li>Take the script's output and build release notes by organizing each release note line into a category.</li>\n<li>Use a prior release for the initial outline.</li>\n<li>Make sure to append the <code>Credit</code> line, if present, to the end of the release note line.</li>\n</ul>\n</li>\n<li>\n<p>Once release drafts are up on <a href=\"https://github.com/zed-industries/zed/releases\">GitHub Releases</a>, paste both preview and stable release notes into each and <strong>save</strong>.</p>\n<ul>\n<li><strong>Do not publish the drafts, yet.</strong></li>\n</ul>\n</li>\n<li>\n<p>Check the release assets.</p>\n<ul>\n<li>Ensure the stable and preview release jobs have finished without error.</li>\n<li>Ensure each draft has the proper number of assets—releases currently have 10 assets each.</li>\n<li>Download the artifacts for each release draft and test that you can run them locally.</li>\n</ul>\n</li>\n<li>\n<p>Publish stable / preview drafts, one at a time.</p>\n<ul>\n<li>Use <a href=\"https://vercel.com/zed-industries/zed-dev\">Vercel</a> to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.</li>\n</ul>\n</li>\n<li>\n<p>Publish the release email that has been sent to <a href=\"https://kit.com\">Kit</a>.</p>\n<ul>\n<li>Make sure to double-check that the email is correct before publishing.</li>\n<li>We sometimes correct things here and there that didn't translate from GitHub's renderer to Kit's.</li>\n</ul>\n</li>\n<li>\n<p>Build social media posts based on the popular items in stable.</p>\n<ul>\n<li>You can use the <a href=\"https://zed.dev/channel/tweets-23331\">prior week's post chain</a> as your outline.</li>\n<li>Stage the copy and assets using <a href=\"https://buffer.com\">Buffer</a>, for both X and BlueSky.</li>\n<li>Publish both, one at a time, ensuring both are posted to each respective platform.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"patch-release-process\"><a class=\"header\" href=\"#patch-release-process\">Patch release process</a></h2>\n<p>If your PR fixes a panic or a crash, you should cherry-pick it to the current stable and preview branches.\nIf your PR fixes a regression in recently released code, you should cherry-pick it to preview.</p>\n<p>You will need write access to the Zed repository to do this:</p>\n<hr/>\n<ol>\n<li>\n<p>Send a PR containing your change to <code>main</code> as normal.</p>\n</li>\n<li>\n<p>Once it is merged, cherry-pick the commit locally to either of the release branches (<code>v0.XXX.x</code>).</p>\n<ul>\n<li>In some cases, you may have to handle a merge conflict.\nMore often than not, this will happen when cherry-picking to stable, as the stable branch is more \"stale\" than the preview branch.</li>\n</ul>\n</li>\n<li>\n<p>After the commit is cherry-picked, run <code>./script/trigger-release {preview|stable}</code>.\nThis will bump the version numbers, create a new release tag, and kick off a release build.</p>\n<ul>\n<li>This can also be run from the <a href=\"https://github.com/zed-industries/zed/actions/workflows/bump_patch_version.yml\">GitHub Actions UI</a>:\n<img alt=\"\" src=\"https://github.com/zed-industries/zed/assets/1486634/9e31ae95-09e1-4c7f-9591-944f4f5b63ea\"/></li>\n</ul>\n</li>\n<li>\n<p>Once release drafts are up on <a href=\"https://github.com/zed-industries/zed/releases\">GitHub Releases</a>, proofread and edit the release notes as needed and <strong>save</strong>.</p>\n<ul>\n<li><strong>Do not publish the drafts, yet.</strong></li>\n</ul>\n</li>\n<li>\n<p>Check the release assets.</p>\n<ul>\n<li>Ensure the stable / preview release jobs have finished without error.</li>\n<li>Ensure each draft has the proper number of assets—releases currently have 10 assets each.</li>\n<li>Download the artifacts for each release draft and test that you can run them locally.</li>\n</ul>\n</li>\n<li>\n<p>Publish stable / preview drafts, one at a time.</p>\n<ul>\n<li>Use <a href=\"https://vercel.com/zed-industries/zed-dev\">Vercel</a> to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"nightly-release-process\"><a class=\"header\" href=\"#nightly-release-process\">Nightly release process</a></h2>\n<p>In addition to the public releases, we also have a nightly build that we encourage employees to use.\nNightly is released by cron once a day, and can be shipped as often as you'd like.\nThere are no release notes or announcements, so you can just merge your changes to main and run <code>./script/trigger-release nightly</code>.</p>\n\n</main>",
    "content_text": "Zed Releases\nRead about Zed's release channels here.\nWednesday release process\nYou will need write access to the Zed repository to do this.\nCredentials for various services used in this process can be found in 1Password.\n\n\n\nCheckout main and ensure your working copy is clean.\n\n\nRun git fetch && git pull to ensure you have the latest commits locally.\n\n\nRun git fetch --tags --force to forcibly ensure your local tags are in sync with the remote.\n\n\nRun ./script/get-stable-channel-release-notes.\n\nFollow the instructions at the end of the script and aggregate the release notes into one structure.\n\n\n\nRun ./script/bump-zed-minor-versions.\n\nPush the tags and branches as instructed.\n\n\n\nRun ./script/get-preview-channel-changes.\n\nTake the script's output and build release notes by organizing each release note line into a category.\nUse a prior release for the initial outline.\nMake sure to append the Credit line, if present, to the end of the release note line.\n\n\n\nOnce release drafts are up on GitHub Releases, paste both preview and stable release notes into each and save.\n\nDo not publish the drafts, yet.\n\n\n\nCheck the release assets.\n\nEnsure the stable and preview release jobs have finished without error.\nEnsure each draft has the proper number of assets—releases currently have 10 assets each.\nDownload the artifacts for each release draft and test that you can run them locally.\n\n\n\nPublish stable / preview drafts, one at a time.\n\nUse Vercel to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.\n\n\n\nPublish the release email that has been sent to Kit.\n\nMake sure to double-check that the email is correct before publishing.\nWe sometimes correct things here and there that didn't translate from GitHub's renderer to Kit's.\n\n\n\nBuild social media posts based on the popular items in stable.\n\nYou can use the prior week's post chain as your outline.\nStage the copy and assets using Buffer, for both X and BlueSky.\nPublish both, one at a time, ensuring both are posted to each respective platform.\n\n\n\nPatch release process\nIf your PR fixes a panic or a crash, you should cherry-pick it to the current stable and preview branches.\nIf your PR fixes a regression in recently released code, you should cherry-pick it to preview.\nYou will need write access to the Zed repository to do this:\n\n\n\nSend a PR containing your change to main as normal.\n\n\nOnce it is merged, cherry-pick the commit locally to either of the release branches (v0.XXX.x).\n\nIn some cases, you may have to handle a merge conflict.\nMore often than not, this will happen when cherry-picking to stable, as the stable branch is more \"stale\" than the preview branch.\n\n\n\nAfter the commit is cherry-picked, run ./script/trigger-release {preview|stable}.\nThis will bump the version numbers, create a new release tag, and kick off a release build.\n\nThis can also be run from the GitHub Actions UI:\n\n\n\n\nOnce release drafts are up on GitHub Releases, proofread and edit the release notes as needed and save.\n\nDo not publish the drafts, yet.\n\n\n\nCheck the release assets.\n\nEnsure the stable / preview release jobs have finished without error.\nEnsure each draft has the proper number of assets—releases currently have 10 assets each.\nDownload the artifacts for each release draft and test that you can run them locally.\n\n\n\nPublish stable / preview drafts, one at a time.\n\nUse Vercel to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.\n\n\n\nNightly release process\nIn addition to the public releases, we also have a nightly build that we encourage employees to use.\nNightly is released by cron once a day, and can be shipped as often as you'd like.\nThere are no release notes or announcements, so you can just merge your changes to main and run ./script/trigger-release nightly.",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:57"
  },
  "development/debugging-crashes.html": {
    "url": "https://zed.dev/docs/development/debugging-crashes.html",
    "title": "Debugging Crashes | Zed Code Editor Documentation",
    "content": "<main>\n\n<h1 id=\"debugging-crashes\"><a class=\"header\" href=\"#debugging-crashes\">Debugging Crashes</a></h1>\n<h2 id=\"crashes\"><a class=\"header\" href=\"#crashes\">Crashes</a></h2>\n<p>When an app crashes,</p>\n<ul>\n<li>macOS creates a <code>.ips</code> file in <code>~/Library/Logs/DiagnosticReports</code>. You can view these using the built in Console app (<code>cmd-space Console</code>) under \"Crash Reports\".</li>\n<li>Linux creates a core dump. See the <a href=\"https://man7.org/linux/man-pages/man5/core.5.html\">man pages</a> for pointers to how your system might be configured to manage core dumps.</li>\n<li>Windows doesn't create crash reports by default, but can be configured to create \"minidump\" memory dumps upon applications crashing.</li>\n</ul>\n<p>If you have enabled Zed's telemetry these will be uploaded to us when you restart the app. They end up in a <a href=\"https://zed-industries.slack.com/archives/C04S6T1T7TQ\">Slack channel (internal only)</a>.</p>\n<p>These crash reports are generated by the crashing binary, and contain a wealth of information; but they are hard to read for a few reasons:</p>\n<ul>\n<li>They don't contain source files and line numbers</li>\n<li>The symbols are <a href=\"https://doc.rust-lang.org/rustc/symbol-mangling/index.html\">mangled</a></li>\n<li>Inlined functions are elided</li>\n</ul>\n<p>On macOS, to get a better sense of the backtrace of a crash you can download the <code>.ips</code> file locally and run:</p>\n<pre><code class=\"language-sh\">./script/symbolicate ~/path/zed-XXX-XXX.ips\n</code></pre>\n<p>This will download the correct debug symbols from our public <a href=\"https://zed-debug-symbols.nyc3.digitaloceanspaces.com\">digital ocean bucket</a>, and run <a href=\"https://crates.io/crates/symbolicate\">symbolicate</a> for you.</p>\n<p>The output contains the source file and line number, and the demangled symbol information for every inlined frame.</p>\n<h2 id=\"panics\"><a class=\"header\" href=\"#panics\">Panics</a></h2>\n<p>When the app panics at the rust level, Zed creates a file in <code>~/Library/Logs/Zed</code> or <code>$XDG_DATA_HOME/zed/logs</code> with the text of the panic, and a summary of the backtrace. On boot, if you have telemetry enabled, we upload these panics so we can keep track of them.</p>\n<p>A panic is also considered a crash, and so for most panics we get both the crash report and the panic.</p>\n<h2 id=\"using-a-debugger\"><a class=\"header\" href=\"#using-a-debugger\">Using a Debugger</a></h2>\n<p>If you can reproduce the crash consistently, a debugger can be used to inspect the state of the program at the time of the crash, often providing very useful insights into the cause of the crash.</p>\n<p>You can read more about setting up and using a debugger with Zed, and specifically for debugging crashes <a href=\"./debuggers.html#debugging-panics-and-crashes\">here</a></p>\n\n</main>",
    "content_text": "Debugging Crashes\nCrashes\nWhen an app crashes,\n\nmacOS creates a .ips file in ~/Library/Logs/DiagnosticReports. You can view these using the built in Console app (cmd-space Console) under \"Crash Reports\".\nLinux creates a core dump. See the man pages for pointers to how your system might be configured to manage core dumps.\nWindows doesn't create crash reports by default, but can be configured to create \"minidump\" memory dumps upon applications crashing.\n\nIf you have enabled Zed's telemetry these will be uploaded to us when you restart the app. They end up in a Slack channel (internal only).\nThese crash reports are generated by the crashing binary, and contain a wealth of information; but they are hard to read for a few reasons:\n\nThey don't contain source files and line numbers\nThe symbols are mangled\nInlined functions are elided\n\nOn macOS, to get a better sense of the backtrace of a crash you can download the .ips file locally and run:\n./script/symbolicate ~/path/zed-XXX-XXX.ips\n\nThis will download the correct debug symbols from our public digital ocean bucket, and run symbolicate for you.\nThe output contains the source file and line number, and the demangled symbol information for every inlined frame.\nPanics\nWhen the app panics at the rust level, Zed creates a file in ~/Library/Logs/Zed or $XDG_DATA_HOME/zed/logs with the text of the panic, and a summary of the backtrace. On boot, if you have telemetry enabled, we upload these panics so we can keep track of them.\nA panic is also considered a crash, and so for most panics we get both the crash report and the panic.\nUsing a Debugger\nIf you can reproduce the crash consistently, a debugger can be used to inspect the state of the program at the time of the crash, often providing very useful insights into the cause of the crash.\nYou can read more about setting up and using a debugger with Zed, and specifically for debugging crashes here",
    "nav_structure": [
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "Getting Started",
        "href": "../getting-started.html"
      },
      {
        "text": "System Requirements",
        "href": "../system-requirements.html"
      },
      {
        "text": "Accounts",
        "href": "../accounts.html"
      },
      {
        "text": "Linux",
        "href": "../linux.html"
      },
      {
        "text": "Windows",
        "href": "../windows.html"
      },
      {
        "text": "Telemetry",
        "href": "../telemetry.html"
      },
      {
        "text": "Workspace Persistence",
        "href": "../workspace-persistence.html"
      },
      {
        "text": "Additional Learning Materials",
        "href": "../additional-learning-materials.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Zed",
        "href": "../configuring-zed.html"
      },
      {
        "text": "Configuring Languages",
        "href": "../configuring-languages.html"
      },
      {
        "text": "Key bindings",
        "href": "../key-bindings.html"
      },
      {
        "text": "All Actions",
        "href": "../all-actions.html"
      },
      {
        "text": "Snippets",
        "href": "../snippets.html"
      },
      {
        "text": "Themes",
        "href": "../themes.html"
      },
      {
        "text": "Icon Themes",
        "href": "../icon-themes.html"
      },
      {
        "text": "Visual Customization",
        "href": "../visual-customization.html"
      },
      {
        "text": "Vim Mode",
        "href": "../vim.html"
      },
      {
        "text": "Helix Mode",
        "href": "../helix.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Multibuffers",
        "href": "../multibuffers.html"
      },
      {
        "text": "Outline Panel",
        "href": "../outline-panel.html"
      },
      {
        "text": "Code Completions",
        "href": "../completions.html"
      },
      {
        "text": "Channels",
        "href": "../channels.html"
      },
      {
        "text": "Collaboration",
        "href": "../collaboration.html"
      },
      {
        "text": "Git",
        "href": "../git.html"
      },
      {
        "text": "Debugger",
        "href": "../debugger.html"
      },
      {
        "text": "Diagnostics",
        "href": "../diagnostics.html"
      },
      {
        "text": "Tasks",
        "href": "../tasks.html"
      },
      {
        "text": "Remote Development",
        "href": "../remote-development.html"
      },
      {
        "text": "Environment Variables",
        "href": "../environment.html"
      },
      {
        "text": "REPL",
        "href": "../repl.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Overview",
        "href": "../ai/overview.html"
      },
      {
        "text": "Agent Panel",
        "href": "../ai/agent-panel.html"
      },
      {
        "text": "Tools",
        "href": "../ai/tools.html"
      },
      {
        "text": "External Agents",
        "href": "../ai/external-agents.html"
      },
      {
        "text": "Inline Assistant",
        "href": "../ai/inline-assistant.html"
      },
      {
        "text": "Edit Prediction",
        "href": "../ai/edit-prediction.html"
      },
      {
        "text": "Text Threads",
        "href": "../ai/text-threads.html"
      },
      {
        "text": "Rules",
        "href": "../ai/rules.html"
      },
      {
        "text": "Model Context Protocol",
        "href": "../ai/mcp.html"
      },
      {
        "text": "Configuration",
        "href": "../ai/configuration.html"
      },
      {
        "text": "LLM Providers",
        "href": "../ai/llm-providers.html"
      },
      {
        "text": "Agent Settings",
        "href": "../ai/agent-settings.html"
      },
      {
        "text": "Subscription",
        "href": "../ai/subscription.html"
      },
      {
        "text": "Plans and Usage",
        "href": "../ai/plans-and-usage.html"
      },
      {
        "text": "Billing",
        "href": "../ai/billing.html"
      },
      {
        "text": "Models",
        "href": "../ai/models.html"
      },
      {
        "text": "Privacy and Security",
        "href": "../ai/privacy-and-security.html"
      },
      {
        "text": "AI Improvement",
        "href": "../ai/ai-improvement.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Overview",
        "href": "../extensions.html"
      },
      {
        "text": "Installing Extensions",
        "href": "../extensions/installing-extensions.html"
      },
      {
        "text": "Developing Extensions",
        "href": "../extensions/developing-extensions.html"
      },
      {
        "text": "Language Extensions",
        "href": "../extensions/languages.html"
      },
      {
        "text": "Debugger Extensions",
        "href": "../extensions/debugger-extensions.html"
      },
      {
        "text": "Theme Extensions",
        "href": "../extensions/themes.html"
      },
      {
        "text": "Icon Theme Extensions",
        "href": "../extensions/icon-themes.html"
      },
      {
        "text": "Slash Command Extensions",
        "href": "../extensions/slash-commands.html"
      },
      {
        "text": "MCP Server Extensions",
        "href": "../extensions/mcp-extensions.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "All Languages",
        "href": "../languages.html"
      },
      {
        "text": "Ansible",
        "href": "../languages/ansible.html"
      },
      {
        "text": "AsciiDoc",
        "href": "../languages/asciidoc.html"
      },
      {
        "text": "Astro",
        "href": "../languages/astro.html"
      },
      {
        "text": "Bash",
        "href": "../languages/bash.html"
      },
      {
        "text": "Biome",
        "href": "../languages/biome.html"
      },
      {
        "text": "C",
        "href": "../languages/c.html"
      },
      {
        "text": "C++",
        "href": "../languages/cpp.html"
      },
      {
        "text": "C#",
        "href": "../languages/csharp.html"
      },
      {
        "text": "Clojure",
        "href": "../languages/clojure.html"
      },
      {
        "text": "CSS",
        "href": "../languages/css.html"
      },
      {
        "text": "Dart",
        "href": "../languages/dart.html"
      },
      {
        "text": "Deno",
        "href": "../languages/deno.html"
      },
      {
        "text": "Diff",
        "href": "../languages/diff.html"
      },
      {
        "text": "Docker",
        "href": "../languages/docker.html"
      },
      {
        "text": "Elixir",
        "href": "../languages/elixir.html"
      },
      {
        "text": "Elm",
        "href": "../languages/elm.html"
      },
      {
        "text": "Emmet",
        "href": "../languages/emmet.html"
      },
      {
        "text": "Erlang",
        "href": "../languages/erlang.html"
      },
      {
        "text": "Fish",
        "href": "../languages/fish.html"
      },
      {
        "text": "GDScript",
        "href": "../languages/gdscript.html"
      },
      {
        "text": "Gleam",
        "href": "../languages/gleam.html"
      },
      {
        "text": "GLSL",
        "href": "../languages/glsl.html"
      },
      {
        "text": "Go",
        "href": "../languages/go.html"
      },
      {
        "text": "Groovy",
        "href": "../languages/groovy.html"
      },
      {
        "text": "Haskell",
        "href": "../languages/haskell.html"
      },
      {
        "text": "Helm",
        "href": "../languages/helm.html"
      },
      {
        "text": "HTML",
        "href": "../languages/html.html"
      },
      {
        "text": "Java",
        "href": "../languages/java.html"
      },
      {
        "text": "JavaScript",
        "href": "../languages/javascript.html"
      },
      {
        "text": "Julia",
        "href": "../languages/julia.html"
      },
      {
        "text": "JSON",
        "href": "../languages/json.html"
      },
      {
        "text": "Jsonnet",
        "href": "../languages/jsonnet.html"
      },
      {
        "text": "Kotlin",
        "href": "../languages/kotlin.html"
      },
      {
        "text": "Lua",
        "href": "../languages/lua.html"
      },
      {
        "text": "Luau",
        "href": "../languages/luau.html"
      },
      {
        "text": "Makefile",
        "href": "../languages/makefile.html"
      },
      {
        "text": "Markdown",
        "href": "../languages/markdown.html"
      },
      {
        "text": "Nim",
        "href": "../languages/nim.html"
      },
      {
        "text": "OCaml",
        "href": "../languages/ocaml.html"
      },
      {
        "text": "PHP",
        "href": "../languages/php.html"
      },
      {
        "text": "PowerShell",
        "href": "../languages/powershell.html"
      },
      {
        "text": "Prisma",
        "href": "../languages/prisma.html"
      },
      {
        "text": "Proto",
        "href": "../languages/proto.html"
      },
      {
        "text": "PureScript",
        "href": "../languages/purescript.html"
      },
      {
        "text": "Python",
        "href": "../languages/python.html"
      },
      {
        "text": "R",
        "href": "../languages/r.html"
      },
      {
        "text": "Rego",
        "href": "../languages/rego.html"
      },
      {
        "text": "ReStructuredText",
        "href": "../languages/rst.html"
      },
      {
        "text": "Racket",
        "href": "../languages/racket.html"
      },
      {
        "text": "Roc",
        "href": "../languages/roc.html"
      },
      {
        "text": "Ruby",
        "href": "../languages/ruby.html"
      },
      {
        "text": "Rust",
        "href": "../languages/rust.html"
      },
      {
        "text": "Scala",
        "href": "../languages/scala.html"
      },
      {
        "text": "Scheme",
        "href": "../languages/scheme.html"
      },
      {
        "text": "Shell Script",
        "href": "../languages/sh.html"
      },
      {
        "text": "SQL",
        "href": "../languages/sql.html"
      },
      {
        "text": "Svelte",
        "href": "../languages/svelte.html"
      },
      {
        "text": "Swift",
        "href": "../languages/swift.html"
      },
      {
        "text": "Tailwind CSS",
        "href": "../languages/tailwindcss.html"
      },
      {
        "text": "Terraform",
        "href": "../languages/terraform.html"
      },
      {
        "text": "TOML",
        "href": "../languages/toml.html"
      },
      {
        "text": "TypeScript",
        "href": "../languages/typescript.html"
      },
      {
        "text": "Uiua",
        "href": "../languages/uiua.html"
      },
      {
        "text": "Vue",
        "href": "../languages/vue.html"
      },
      {
        "text": "XML",
        "href": "../languages/xml.html"
      },
      {
        "text": "YAML",
        "href": "../languages/yaml.html"
      },
      {
        "text": "Yara",
        "href": "../languages/yara.html"
      },
      {
        "text": "Yarn",
        "href": "../languages/yarn.html"
      },
      {
        "text": "Zig",
        "href": "../languages/zig.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "Developing Zed",
        "href": "../development.html"
      },
      {
        "text": "macOS",
        "href": "../development/macos.html"
      },
      {
        "text": "Linux",
        "href": "../development/linux.html"
      },
      {
        "text": "Windows",
        "href": "../development/windows.html"
      },
      {
        "text": "FreeBSD",
        "href": "../development/freebsd.html"
      },
      {
        "text": "Local Collaboration",
        "href": "../development/local-collaboration.html"
      },
      {
        "text": "Using Debuggers",
        "href": "../development/debuggers.html"
      },
      {
        "text": "Glossary",
        "href": "../development/glossary.html"
      },
      {
        "text": "Release Process",
        "href": "../development/releases.html"
      },
      {
        "text": "Debugging Crashes",
        "href": "../development/debugging-crashes.html"
      }
    ],
    "page_toc": [],
    "scraped_at": "2025-09-06 14:15:59"
  }
}