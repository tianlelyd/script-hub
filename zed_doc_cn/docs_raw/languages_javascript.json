{
  "url": "https://zed.dev/docs/languages/javascript.html",
  "title": "JavaScript | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"javascript\"><a class=\"header\" href=\"#javascript\">JavaScript</a></h1>\n<p>JavaScript support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/tree-sitter/tree-sitter-javascript\">tree-sitter/tree-sitter-javascript</a></li>\n<li>Language Server: <a href=\"https://github.com/typescript-language-server/typescript-language-server\">typescript-language-server/typescript-language-server</a></li>\n<li>Debug Adapter: <a href=\"https://github.com/microsoft/vscode-js-debug\">vscode-js-debug</a></li>\n</ul>\n<h2 id=\"code-formatting\"><a class=\"header\" href=\"#code-formatting\">Code formatting</a></h2>\n<p>Formatting on save is enabled by default for JavaScript, using TypeScript's built-in code formatting.\nBut many JavaScript projects use other command-line code-formatting tools, such as <a href=\"https://prettier.io/\">Prettier</a>.\nYou can use one of these tools by specifying an <em>external</em> code formatter for JavaScript in your settings.\nSee <a href=\"../configuring-zed.html\">the configuration docs</a> for more information.</p>\n<p>For example, if you have Prettier installed and on your <code>PATH</code>, you can use it to format JavaScript files by adding the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"prettier\",\n          \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"jsx\"><a class=\"header\" href=\"#jsx\">JSX</a></h2>\n<p>Zed supports JSX syntax highlighting out of the box.</p>\n<p>In JSX strings, the <a href=\"./tailwindcss.html\"><code>tailwindcss-language-server</code></a> is used provide autocompletion for Tailwind CSS classes.</p>\n<h2 id=\"jsdoc\"><a class=\"header\" href=\"#jsdoc\">JSDoc</a></h2>\n<p>Zed supports JSDoc syntax in JavaScript and TypeScript comments that match the JSDoc syntax.\nZed uses <a href=\"https://github.com/tree-sitter/tree-sitter-jsdoc\">tree-sitter/tree-sitter-jsdoc</a> for parsing and highlighting JSDoc.</p>\n<h2 id=\"eslint\"><a class=\"header\" href=\"#eslint\">ESLint</a></h2>\n<p>You can configure Zed to format code using <code>eslint --fix</code> by running the ESLint code action when formatting:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can also only execute a single ESLint rule when using <code>fixAll</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> the other formatter you have configured will still run, after ESLint.\nSo if your language server or Prettier configuration don't format according to\nESLint's rules, then they will overwrite what ESLint fixed and you end up with\nerrors.</p>\n</blockquote>\n<p>If you <strong>only</strong> want to run ESLint on save, you can configure code actions as\nthe formatter:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"code_actions\": {\n          \"source.fixAll.eslint\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-nodepath\"><a class=\"header\" href=\"#configure-eslints-nodepath\">Configure ESLint's <code>nodePath</code>:</a></h3>\n<p>You can configure ESLint's <code>nodePath</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"nodePath\": \".yarn/sdks\"\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-problems\"><a class=\"header\" href=\"#configure-eslints-problems\">Configure ESLint's <code>problems</code>:</a></h3>\n<p>You can configure ESLint's <code>problems</code> setting.</p>\n<p>For example, here's how to set <code>problems.shortenToSingleLine</code>:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"problems\": {\n          \"shortenToSingleLine\": true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-rulescustomizations\"><a class=\"header\" href=\"#configure-eslints-rulescustomizations\">Configure ESLint's <code>rulesCustomizations</code>:</a></h3>\n<p>You can configure ESLint's <code>rulesCustomizations</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"rulesCustomizations\": [\n          // set all eslint errors/warnings to show as warnings\n          { \"rule\": \"*\", \"severity\": \"warn\" }\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"configure-eslints-workingdirectory\"><a class=\"header\" href=\"#configure-eslints-workingdirectory\">Configure ESLint's <code>workingDirectory</code>:</a></h3>\n<p>You can configure ESLint's <code>workingDirectory</code> setting:</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"workingDirectory\": {\n          \"mode\": \"auto\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports debugging JavaScript code out of the box.\nThe following can be debugged without writing additional configuration:</p>\n<ul>\n<li>Tasks from <code>package.json</code></li>\n<li>Tests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)</li>\n</ul>\n<p>Run <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list of these predefined debug tasks.</p>\n<p>As for all languages, configurations from <code>.vscode/launch.json</code> are also available for debugging in Zed.</p>\n<p>If your use-case isn't covered by any of these, you can take full control by adding debug configurations to <code>.zed/debug.json</code>. See below for example configurations.</p>\n<h3 id=\"debug-the-current-file\"><a class=\"header\" href=\"#debug-the-current-file\">Debug the current file</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug JS file\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"$ZED_FILE\",\n    \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n  }\n]\n</code></pre>\n<p>This implicitly runs the current file using <code>node</code>.</p>\n<h3 id=\"launch-a-web-app-in-chrome\"><a class=\"header\" href=\"#launch-a-web-app-in-chrome\">Launch a web app in Chrome</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug app in Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"file\": \"$ZED_WORKTREE_ROOT/index.html\",\n    \"webRoot\": \"$ZED_WORKTREE_ROOT\",\n    \"console\": \"integratedTerminal\",\n    \"skipFiles\": [\"&lt;node_internals&gt;/**\"]\n  }\n]\n</code></pre>\n<h2 id=\"see-also\"><a class=\"header\" href=\"#see-also\">See also</a></h2>\n<ul>\n<li><a href=\"./yarn.html\">Yarn documentation</a> for a walkthrough of configuring your project to use Yarn.</li>\n<li><a href=\"./typescript.html\">TypeScript documentation</a></li>\n</ul>\n\n</main>",
  "content_text": "JavaScript\nJavaScript support is available natively in Zed.\n\nTree-sitter: tree-sitter/tree-sitter-javascript\nLanguage Server: typescript-language-server/typescript-language-server\nDebug Adapter: vscode-js-debug\n\nCode formatting\nFormatting on save is enabled by default for JavaScript, using TypeScript's built-in code formatting.\nBut many JavaScript projects use other command-line code-formatting tools, such as Prettier.\nYou can use one of these tools by specifying an external code formatter for JavaScript in your settings.\nSee the configuration docs for more information.\nFor example, if you have Prettier installed and on your PATH, you can use it to format JavaScript files by adding the following to your settings.json:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"external\": {\n          \"command\": \"prettier\",\n          \"arguments\": [\"--stdin-filepath\", \"{buffer_path}\"]\n        }\n      }\n    }\n  }\n}\n\nJSX\nZed supports JSX syntax highlighting out of the box.\nIn JSX strings, the tailwindcss-language-server is used provide autocompletion for Tailwind CSS classes.\nJSDoc\nZed supports JSDoc syntax in JavaScript and TypeScript comments that match the JSDoc syntax.\nZed uses tree-sitter/tree-sitter-jsdoc for parsing and highlighting JSDoc.\nESLint\nYou can configure Zed to format code using eslint --fix by running the ESLint code action when formatting:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  }\n}\n\nYou can also only execute a single ESLint rule when using fixAll:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"code_actions_on_format\": {\n        \"source.fixAll.eslint\": true\n      }\n    }\n  },\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"codeActionOnSave\": {\n          \"rules\": [\"import/order\"]\n        }\n      }\n    }\n  }\n}\n\n\nNote: the other formatter you have configured will still run, after ESLint.\nSo if your language server or Prettier configuration don't format according to\nESLint's rules, then they will overwrite what ESLint fixed and you end up with\nerrors.\n\nIf you only want to run ESLint on save, you can configure code actions as\nthe formatter:\n{\n  \"languages\": {\n    \"JavaScript\": {\n      \"formatter\": {\n        \"code_actions\": {\n          \"source.fixAll.eslint\": true\n        }\n      }\n    }\n  }\n}\n\nConfigure ESLint's nodePath:\nYou can configure ESLint's nodePath setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"nodePath\": \".yarn/sdks\"\n      }\n    }\n  }\n}\n\nConfigure ESLint's problems:\nYou can configure ESLint's problems setting.\nFor example, here's how to set problems.shortenToSingleLine:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"problems\": {\n          \"shortenToSingleLine\": true\n        }\n      }\n    }\n  }\n}\n\nConfigure ESLint's rulesCustomizations:\nYou can configure ESLint's rulesCustomizations setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"rulesCustomizations\": [\n          // set all eslint errors/warnings to show as warnings\n          { \"rule\": \"*\", \"severity\": \"warn\" }\n        ]\n      }\n    }\n  }\n}\n\nConfigure ESLint's workingDirectory:\nYou can configure ESLint's workingDirectory setting:\n{\n  \"lsp\": {\n    \"eslint\": {\n      \"settings\": {\n        \"workingDirectory\": {\n          \"mode\": \"auto\"\n        }\n      }\n    }\n  }\n}\n\nDebugging\nZed supports debugging JavaScript code out of the box.\nThe following can be debugged without writing additional configuration:\n\nTasks from package.json\nTests written using several popular frameworks (Jest, Mocha, Vitest, Jasmine)\n\nRun debugger: start (f4|f4) to see a contextual list of these predefined debug tasks.\nAs for all languages, configurations from .vscode/launch.json are also available for debugging in Zed.\nIf your use-case isn't covered by any of these, you can take full control by adding debug configurations to .zed/debug.json. See below for example configurations.\nDebug the current file\n[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug JS file\",\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"program\": \"$ZED_FILE\",\n    \"skipFiles\": [\"<node_internals>/**\"]\n  }\n]\n\nThis implicitly runs the current file using node.\nLaunch a web app in Chrome\n[\n  {\n    \"adapter\": \"JavaScript\",\n    \"label\": \"Debug app in Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"file\": \"$ZED_WORKTREE_ROOT/index.html\",\n    \"webRoot\": \"$ZED_WORKTREE_ROOT\",\n    \"console\": \"integratedTerminal\",\n    \"skipFiles\": [\"<node_internals>/**\"]\n  }\n]\n\nSee also\n\nYarn documentation for a walkthrough of configuring your project to use Yarn.\nTypeScript documentation",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:14:10"
}