{
  "url": "https://zed.dev/docs/languages/elixir.html",
  "title": "Elixir | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"elixir\"><a class=\"header\" href=\"#elixir\">Elixir</a></h1>\n<p>Elixir support is available through the <a href=\"https://github.com/zed-extensions/elixir\">Elixir extension</a>.</p>\n<ul>\n<li>Tree-sitter:\n<ul>\n<li><a href=\"https://github.com/elixir-lang/tree-sitter-elixir\">elixir-lang/tree-sitter-elixir</a></li>\n<li><a href=\"https://github.com/phoenixframework/tree-sitter-heex\">phoenixframework/tree-sitter-heex</a></li>\n</ul>\n</li>\n<li>Language servers:\n<ul>\n<li><a href=\"https://github.com/elixir-lang/expert\">elixir-lang/expert</a></li>\n<li><a href=\"https://github.com/elixir-lsp/elixir-ls\">elixir-lsp/elixir-ls</a></li>\n<li><a href=\"https://github.com/elixir-tools/next-ls\">elixir-tools/next-ls</a></li>\n<li><a href=\"https://github.com/lexical-lsp/lexical\">lexical-lsp/lexical</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"choosing-a-language-server\"><a class=\"header\" href=\"#choosing-a-language-server\">Choosing a language server</a></h2>\n<p>The Elixir extension offers language server support for <code>expert</code>, <code>elixir-ls</code>, <code>next-ls</code>, and <code>lexical</code>.</p>\n<p><code>elixir-ls</code> is enabled by default.</p>\n<h3 id=\"expert\"><a class=\"header\" href=\"#expert\">Expert</a></h3>\n<p>To switch to <code>expert</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h3 id=\"next-ls\"><a class=\"header\" href=\"#next-ls\">Next LS</a></h3>\n<p>To switch to <code>next-ls</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"next-ls\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h3 id=\"lexical\"><a class=\"header\" href=\"#lexical\">Lexical</a></h3>\n<p>To switch to <code>lexical</code>, add the following to your <code>settings.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"lexical\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"...\"\n      ]\n    }\n  }\n}\n</code></pre>\n<h2 id=\"setting-up-elixir-ls\"><a class=\"header\" href=\"#setting-up-elixir-ls\">Setting up <code>elixir-ls</code></a></h2>\n<ol>\n<li>Install <code>elixir</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">brew install elixir\n</code></pre>\n<ol start=\"2\">\n<li>Install <code>elixir-ls</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">brew install elixir-ls\n</code></pre>\n<ol start=\"3\">\n<li>Restart Zed</li>\n</ol>\n<blockquote>\n<p>If <code>elixir-ls</code> is not running in an elixir project, check the error log via the command palette action <code>zed: open log</code>. If you find an error message mentioning: <code>invalid LSP message header \"Shall I install Hex? (if running non-interactively, use \\\"mix local.hex --force\\\") [Yn]</code>, you might need to install <a href=\"https://hex.pm\"><code>Hex</code></a>. You run <code>elixir-ls</code> from the command line and accept the prompt to install <code>Hex</code>.</p>\n</blockquote>\n<h3 id=\"formatting-with-mix\"><a class=\"header\" href=\"#formatting-with-mix\">Formatting with Mix</a></h3>\n<p>If you prefer to format your code with <a href=\"https://hexdocs.pm/mix/Mix.html\">Mix</a>, use the following snippet in your <code>settings.json</code> file to configure it as an external formatter. Formatting will occur on file save.</p>\n<pre><code class=\"language-json\">{\n  \"languages\": {\n    \"Elixir\": {\n      \"format_on_save\": {\n        \"external\": {\n          \"command\": \"mix\",\n          \"arguments\": [\"format\", \"--stdin-filename\", \"{buffer_path}\", \"-\"]\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"additional-workspace-configuration-options\"><a class=\"header\" href=\"#additional-workspace-configuration-options\">Additional workspace configuration options</a></h3>\n<p>You can pass additional elixir-ls workspace configuration options via lsp settings in <code>settings.json</code>.</p>\n<p>The following example disables dialyzer:</p>\n<pre><code class=\"language-json\">\"lsp\": {\n  \"elixir-ls\": {\n    \"settings\": {\n      \"dialyzerEnabled\": false\n    }\n  }\n}\n</code></pre>\n<p>See <a href=\"https://github.com/elixir-lsp/elixir-ls#elixirls-configuration-settings\">ElixirLS configuration settings</a> for more options.</p>\n<h3 id=\"heex\"><a class=\"header\" href=\"#heex\">HEEx</a></h3>\n<p>Zed also supports HEEx templates. HEEx is a mix of <a href=\"https://hexdocs.pm/eex/1.12.3/EEx.html\">EEx</a> (Embedded Elixir) and HTML, and is used in Phoenix LiveView applications.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/phoenixframework/tree-sitter-heex\">phoenixframework/tree-sitter-heex</a></li>\n</ul>\n\n</main>",
  "content_text": "Elixir\nElixir support is available through the Elixir extension.\n\nTree-sitter:\n\nelixir-lang/tree-sitter-elixir\nphoenixframework/tree-sitter-heex\n\n\nLanguage servers:\n\nelixir-lang/expert\nelixir-lsp/elixir-ls\nelixir-tools/next-ls\nlexical-lsp/lexical\n\n\n\nChoosing a language server\nThe Elixir extension offers language server support for expert, elixir-ls, next-ls, and lexical.\nelixir-ls is enabled by default.\nExpert\nTo switch to expert, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nNext LS\nTo switch to next-ls, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"next-ls\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!lexical\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nLexical\nTo switch to lexical, add the following to your settings.json:\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"language_servers\": [\n        \"lexical\",\n        \"!expert\",\n        \"!elixir-ls\",\n        \"!next-ls\",\n        \"...\"\n      ]\n    }\n  }\n}\n\nSetting up elixir-ls\n\nInstall elixir:\n\nbrew install elixir\n\n\nInstall elixir-ls:\n\nbrew install elixir-ls\n\n\nRestart Zed\n\n\nIf elixir-ls is not running in an elixir project, check the error log via the command palette action zed: open log. If you find an error message mentioning: invalid LSP message header \"Shall I install Hex? (if running non-interactively, use \\\"mix local.hex --force\\\") [Yn], you might need to install Hex. You run elixir-ls from the command line and accept the prompt to install Hex.\n\nFormatting with Mix\nIf you prefer to format your code with Mix, use the following snippet in your settings.json file to configure it as an external formatter. Formatting will occur on file save.\n{\n  \"languages\": {\n    \"Elixir\": {\n      \"format_on_save\": {\n        \"external\": {\n          \"command\": \"mix\",\n          \"arguments\": [\"format\", \"--stdin-filename\", \"{buffer_path}\", \"-\"]\n        }\n      }\n    }\n  }\n}\n\nAdditional workspace configuration options\nYou can pass additional elixir-ls workspace configuration options via lsp settings in settings.json.\nThe following example disables dialyzer:\n\"lsp\": {\n  \"elixir-ls\": {\n    \"settings\": {\n      \"dialyzerEnabled\": false\n    }\n  }\n}\n\nSee ElixirLS configuration settings for more options.\nHEEx\nZed also supports HEEx templates. HEEx is a mix of EEx (Embedded Elixir) and HTML, and is used in Phoenix LiveView applications.\n\nTree-sitter: phoenixframework/tree-sitter-heex",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:13:34"
}