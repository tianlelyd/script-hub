{
  "url": "https://zed.dev/docs/ai/rules.html",
  "title": "Rules | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"using-rules\"><a class=\"header\" href=\"#using-rules\">Using Rules</a></h1>\n<p>A rule is essentially a prompt that is inserted at the beginning of each interaction with the Agent.\nCurrently, Zed supports <code>.rules</code> files at the directory's root and the Rules Library, which allows you to store multiple rules for on-demand usage.</p>\n<h2 id=\"rules-files\"><a class=\"header\" href=\"#rules-files\"><code>.rules</code> files</a></h2>\n<p>Zed supports including <code>.rules</code> files at the top level of worktrees, and they act as project-level instructions that are included in all of your interactions with the Agent Panel.\nOther names for this file are also supported for compatibility with other agents, but note that the first file which matches in this list will be used:</p>\n<ul>\n<li><code>.rules</code></li>\n<li><code>.cursorrules</code></li>\n<li><code>.windsurfrules</code></li>\n<li><code>.clinerules</code></li>\n<li><code>.github/copilot-instructions.md</code></li>\n<li><code>AGENT.md</code></li>\n<li><code>AGENTS.md</code></li>\n<li><code>CLAUDE.md</code></li>\n<li><code>GEMINI.md</code></li>\n</ul>\n<h2 id=\"rules-library\"><a class=\"header\" href=\"#rules-library\">Rules Library</a></h2>\n<p>The Rules Library is an interface for writing and managing rules. Like other text-driven UIs in Zed, it is a full editor with syntax highlighting, keyboard shortcuts, etc.</p>\n<p>You can use the inline assistant right in the rules editor, allowing you to automate and rewrite rules.</p>\n<h3 id=\"opening-the-rules-library\"><a class=\"header\" href=\"#opening-the-rules-library\">Opening the Rules Library</a></h3>\n<ol>\n<li>Open the Agent Panel.</li>\n<li>Click on the Agent menu (<code>...</code>) in the top right corner.</li>\n<li>Select <code>Rules...</code> from the dropdown.</li>\n</ol>\n<p>You can also use the <code>agent: open rules library</code> command while in the Agent Panel.</p>\n<h3 id=\"managing-rules\"><a class=\"header\" href=\"#managing-rules\">Managing Rules</a></h3>\n<p>Once a rules file is selected, you can edit it directly in the built-in editor. Its title can be changed from the editor title bar as well.</p>\n<p>Rules can be duplicated, deleted, or added to the default rules using the buttons in the rules editor.</p>\n<h3 id=\"creating-rules\"><a class=\"header\" href=\"#creating-rules\">Creating Rules</a></h3>\n<p>To create a rule file, simply open the <code>Rules Library</code> and click the <code>+</code> button. Rules files are stored locally and can be accessed from the library at any time.</p>\n<p>Having a series of rules files specifically tailored to prompt engineering can also help you write consistent and effective rules.</p>\n<p>Here are a couple of helpful resources for writing better rules:</p>\n<ul>\n<li><a href=\"https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/overview\">Anthropic: Prompt Engineering</a></li>\n<li><a href=\"https://platform.openai.com/docs/guides/prompt-engineering\">OpenAI: Prompt Engineering</a></li>\n</ul>\n<h3 id=\"default-rules\"><a class=\"header\" href=\"#default-rules\">Editing the Default Rules</a></h3>\n<p>Zed allows you to customize the default rules used when interacting with LLMs.\nOr to be more precise, it uses a series of rules that are combined to form the default rules.</p>\n<p>Default rules are included in the context of every new thread automatically.\nYou can also manually add other rules (that are not flagged as default) as context using the <code>@rule</code> command.</p>\n<h2 id=\"migrating-from-prompt-library\"><a class=\"header\" href=\"#migrating-from-prompt-library\">Migrating from Prompt Library</a></h2>\n<p>Previously, the Rules Library was called the \"Prompt Library\".\nThe new rules system replaces the Prompt Library except in a few specific cases, which are outlined below.</p>\n<h3 id=\"slash-commands-in-rules\"><a class=\"header\" href=\"#slash-commands-in-rules\">Slash Commands in Rules</a></h3>\n<p>Previously, it was possible to use slash commands (now @-mentions) in custom prompts (now rules).\nThere is currently no support for using @-mentions in rules files, however, slash commands are supported in rules files when used with text threads.\nSee the documentation for using <a href=\"./text-threads.html#slash-commands-in-rules\">slash commands in rules</a> for more information.</p>\n<h3 id=\"prompt-templates\"><a class=\"header\" href=\"#prompt-templates\">Prompt templates</a></h3>\n<p>Zed maintains backwards compatibility with its original template system, which allows you to customize prompts used throughout the application, including the inline assistant.\nWhile the Rules Library is now the primary way to manage prompts, you can still use these legacy templates to override default prompts.\nFor more details, see the <a href=\"./text-threads.html#rule-templates\">Rules Templates</a> section under <a href=\"./text-threads.html\">Text Threads</a>.</p>\n\n</main>",
  "content_text": "Using Rules\nA rule is essentially a prompt that is inserted at the beginning of each interaction with the Agent.\nCurrently, Zed supports .rules files at the directory's root and the Rules Library, which allows you to store multiple rules for on-demand usage.\n.rules files\nZed supports including .rules files at the top level of worktrees, and they act as project-level instructions that are included in all of your interactions with the Agent Panel.\nOther names for this file are also supported for compatibility with other agents, but note that the first file which matches in this list will be used:\n\n.rules\n.cursorrules\n.windsurfrules\n.clinerules\n.github/copilot-instructions.md\nAGENT.md\nAGENTS.md\nCLAUDE.md\nGEMINI.md\n\nRules Library\nThe Rules Library is an interface for writing and managing rules. Like other text-driven UIs in Zed, it is a full editor with syntax highlighting, keyboard shortcuts, etc.\nYou can use the inline assistant right in the rules editor, allowing you to automate and rewrite rules.\nOpening the Rules Library\n\nOpen the Agent Panel.\nClick on the Agent menu (...) in the top right corner.\nSelect Rules... from the dropdown.\n\nYou can also use the agent: open rules library command while in the Agent Panel.\nManaging Rules\nOnce a rules file is selected, you can edit it directly in the built-in editor. Its title can be changed from the editor title bar as well.\nRules can be duplicated, deleted, or added to the default rules using the buttons in the rules editor.\nCreating Rules\nTo create a rule file, simply open the Rules Library and click the + button. Rules files are stored locally and can be accessed from the library at any time.\nHaving a series of rules files specifically tailored to prompt engineering can also help you write consistent and effective rules.\nHere are a couple of helpful resources for writing better rules:\n\nAnthropic: Prompt Engineering\nOpenAI: Prompt Engineering\n\nEditing the Default Rules\nZed allows you to customize the default rules used when interacting with LLMs.\nOr to be more precise, it uses a series of rules that are combined to form the default rules.\nDefault rules are included in the context of every new thread automatically.\nYou can also manually add other rules (that are not flagged as default) as context using the @rule command.\nMigrating from Prompt Library\nPreviously, the Rules Library was called the \"Prompt Library\".\nThe new rules system replaces the Prompt Library except in a few specific cases, which are outlined below.\nSlash Commands in Rules\nPreviously, it was possible to use slash commands (now @-mentions) in custom prompts (now rules).\nThere is currently no support for using @-mentions in rules files, however, slash commands are supported in rules files when used with text threads.\nSee the documentation for using slash commands in rules for more information.\nPrompt templates\nZed maintains backwards compatibility with its original template system, which allows you to customize prompts used throughout the application, including the inline assistant.\nWhile the Rules Library is now the primary way to manage prompts, you can still use these legacy templates to override default prompts.\nFor more details, see the Rules Templates section under Text Threads.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:12:19"
}