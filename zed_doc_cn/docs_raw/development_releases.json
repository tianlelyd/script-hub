{
  "url": "https://zed.dev/docs/development/releases.html",
  "title": "Release Process | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"zed-releases\"><a class=\"header\" href=\"#zed-releases\">Zed Releases</a></h1>\n<p>Read about Zed's release channels <a href=\"https://zed.dev/faq#what-are-the-release-channels\">here</a>.</p>\n<h2 id=\"wednesday-release-process\"><a class=\"header\" href=\"#wednesday-release-process\">Wednesday release process</a></h2>\n<p>You will need write access to the Zed repository to do this.</p>\n<p>Credentials for various services used in this process can be found in 1Password.</p>\n<hr/>\n<ol>\n<li>\n<p>Checkout <code>main</code> and ensure your working copy is clean.</p>\n</li>\n<li>\n<p>Run <code>git fetch &amp;&amp; git pull</code> to ensure you have the latest commits locally.</p>\n</li>\n<li>\n<p>Run <code>git fetch --tags --force</code> to forcibly ensure your local tags are in sync with the remote.</p>\n</li>\n<li>\n<p>Run <code>./script/get-stable-channel-release-notes</code>.</p>\n<ul>\n<li>Follow the instructions at the end of the script and aggregate the release notes into one structure.</li>\n</ul>\n</li>\n<li>\n<p>Run <code>./script/bump-zed-minor-versions</code>.</p>\n<ul>\n<li>Push the tags and branches as instructed.</li>\n</ul>\n</li>\n<li>\n<p>Run <code>./script/get-preview-channel-changes</code>.</p>\n<ul>\n<li>Take the script's output and build release notes by organizing each release note line into a category.</li>\n<li>Use a prior release for the initial outline.</li>\n<li>Make sure to append the <code>Credit</code> line, if present, to the end of the release note line.</li>\n</ul>\n</li>\n<li>\n<p>Once release drafts are up on <a href=\"https://github.com/zed-industries/zed/releases\">GitHub Releases</a>, paste both preview and stable release notes into each and <strong>save</strong>.</p>\n<ul>\n<li><strong>Do not publish the drafts, yet.</strong></li>\n</ul>\n</li>\n<li>\n<p>Check the release assets.</p>\n<ul>\n<li>Ensure the stable and preview release jobs have finished without error.</li>\n<li>Ensure each draft has the proper number of assets—releases currently have 10 assets each.</li>\n<li>Download the artifacts for each release draft and test that you can run them locally.</li>\n</ul>\n</li>\n<li>\n<p>Publish stable / preview drafts, one at a time.</p>\n<ul>\n<li>Use <a href=\"https://vercel.com/zed-industries/zed-dev\">Vercel</a> to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.</li>\n</ul>\n</li>\n<li>\n<p>Publish the release email that has been sent to <a href=\"https://kit.com\">Kit</a>.</p>\n<ul>\n<li>Make sure to double-check that the email is correct before publishing.</li>\n<li>We sometimes correct things here and there that didn't translate from GitHub's renderer to Kit's.</li>\n</ul>\n</li>\n<li>\n<p>Build social media posts based on the popular items in stable.</p>\n<ul>\n<li>You can use the <a href=\"https://zed.dev/channel/tweets-23331\">prior week's post chain</a> as your outline.</li>\n<li>Stage the copy and assets using <a href=\"https://buffer.com\">Buffer</a>, for both X and BlueSky.</li>\n<li>Publish both, one at a time, ensuring both are posted to each respective platform.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"patch-release-process\"><a class=\"header\" href=\"#patch-release-process\">Patch release process</a></h2>\n<p>If your PR fixes a panic or a crash, you should cherry-pick it to the current stable and preview branches.\nIf your PR fixes a regression in recently released code, you should cherry-pick it to preview.</p>\n<p>You will need write access to the Zed repository to do this:</p>\n<hr/>\n<ol>\n<li>\n<p>Send a PR containing your change to <code>main</code> as normal.</p>\n</li>\n<li>\n<p>Once it is merged, cherry-pick the commit locally to either of the release branches (<code>v0.XXX.x</code>).</p>\n<ul>\n<li>In some cases, you may have to handle a merge conflict.\nMore often than not, this will happen when cherry-picking to stable, as the stable branch is more \"stale\" than the preview branch.</li>\n</ul>\n</li>\n<li>\n<p>After the commit is cherry-picked, run <code>./script/trigger-release {preview|stable}</code>.\nThis will bump the version numbers, create a new release tag, and kick off a release build.</p>\n<ul>\n<li>This can also be run from the <a href=\"https://github.com/zed-industries/zed/actions/workflows/bump_patch_version.yml\">GitHub Actions UI</a>:\n<img alt=\"\" src=\"https://github.com/zed-industries/zed/assets/1486634/9e31ae95-09e1-4c7f-9591-944f4f5b63ea\"/></li>\n</ul>\n</li>\n<li>\n<p>Once release drafts are up on <a href=\"https://github.com/zed-industries/zed/releases\">GitHub Releases</a>, proofread and edit the release notes as needed and <strong>save</strong>.</p>\n<ul>\n<li><strong>Do not publish the drafts, yet.</strong></li>\n</ul>\n</li>\n<li>\n<p>Check the release assets.</p>\n<ul>\n<li>Ensure the stable / preview release jobs have finished without error.</li>\n<li>Ensure each draft has the proper number of assets—releases currently have 10 assets each.</li>\n<li>Download the artifacts for each release draft and test that you can run them locally.</li>\n</ul>\n</li>\n<li>\n<p>Publish stable / preview drafts, one at a time.</p>\n<ul>\n<li>Use <a href=\"https://vercel.com/zed-industries/zed-dev\">Vercel</a> to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"nightly-release-process\"><a class=\"header\" href=\"#nightly-release-process\">Nightly release process</a></h2>\n<p>In addition to the public releases, we also have a nightly build that we encourage employees to use.\nNightly is released by cron once a day, and can be shipped as often as you'd like.\nThere are no release notes or announcements, so you can just merge your changes to main and run <code>./script/trigger-release nightly</code>.</p>\n\n</main>",
  "content_text": "Zed Releases\nRead about Zed's release channels here.\nWednesday release process\nYou will need write access to the Zed repository to do this.\nCredentials for various services used in this process can be found in 1Password.\n\n\n\nCheckout main and ensure your working copy is clean.\n\n\nRun git fetch && git pull to ensure you have the latest commits locally.\n\n\nRun git fetch --tags --force to forcibly ensure your local tags are in sync with the remote.\n\n\nRun ./script/get-stable-channel-release-notes.\n\nFollow the instructions at the end of the script and aggregate the release notes into one structure.\n\n\n\nRun ./script/bump-zed-minor-versions.\n\nPush the tags and branches as instructed.\n\n\n\nRun ./script/get-preview-channel-changes.\n\nTake the script's output and build release notes by organizing each release note line into a category.\nUse a prior release for the initial outline.\nMake sure to append the Credit line, if present, to the end of the release note line.\n\n\n\nOnce release drafts are up on GitHub Releases, paste both preview and stable release notes into each and save.\n\nDo not publish the drafts, yet.\n\n\n\nCheck the release assets.\n\nEnsure the stable and preview release jobs have finished without error.\nEnsure each draft has the proper number of assets—releases currently have 10 assets each.\nDownload the artifacts for each release draft and test that you can run them locally.\n\n\n\nPublish stable / preview drafts, one at a time.\n\nUse Vercel to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.\n\n\n\nPublish the release email that has been sent to Kit.\n\nMake sure to double-check that the email is correct before publishing.\nWe sometimes correct things here and there that didn't translate from GitHub's renderer to Kit's.\n\n\n\nBuild social media posts based on the popular items in stable.\n\nYou can use the prior week's post chain as your outline.\nStage the copy and assets using Buffer, for both X and BlueSky.\nPublish both, one at a time, ensuring both are posted to each respective platform.\n\n\n\nPatch release process\nIf your PR fixes a panic or a crash, you should cherry-pick it to the current stable and preview branches.\nIf your PR fixes a regression in recently released code, you should cherry-pick it to preview.\nYou will need write access to the Zed repository to do this:\n\n\n\nSend a PR containing your change to main as normal.\n\n\nOnce it is merged, cherry-pick the commit locally to either of the release branches (v0.XXX.x).\n\nIn some cases, you may have to handle a merge conflict.\nMore often than not, this will happen when cherry-picking to stable, as the stable branch is more \"stale\" than the preview branch.\n\n\n\nAfter the commit is cherry-picked, run ./script/trigger-release {preview|stable}.\nThis will bump the version numbers, create a new release tag, and kick off a release build.\n\nThis can also be run from the GitHub Actions UI:\n\n\n\n\nOnce release drafts are up on GitHub Releases, proofread and edit the release notes as needed and save.\n\nDo not publish the drafts, yet.\n\n\n\nCheck the release assets.\n\nEnsure the stable / preview release jobs have finished without error.\nEnsure each draft has the proper number of assets—releases currently have 10 assets each.\nDownload the artifacts for each release draft and test that you can run them locally.\n\n\n\nPublish stable / preview drafts, one at a time.\n\nUse Vercel to check the progress of the website rebuild.\nThe release will be public once the rebuild has completed.\n\n\n\nNightly release process\nIn addition to the public releases, we also have a nightly build that we encourage employees to use.\nNightly is released by cron once a day, and can be shipped as often as you'd like.\nThere are no release notes or announcements, so you can just merge your changes to main and run ./script/trigger-release nightly.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:15:57"
}