{
  "url": "https://zed.dev/docs/languages/python.html",
  "title": "Python | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"python\"><a class=\"header\" href=\"#python\">Python</a></h1>\n<p>Python support is available natively in Zed.</p>\n<ul>\n<li>Tree-sitter: <a href=\"https://github.com/zed-industries/tree-sitter-python\">tree-sitter-python</a></li>\n<li>Language Servers:\n<ul>\n<li><a href=\"https://github.com/microsoft/pyright\">microsoft/pyright</a></li>\n<li><a href=\"https://github.com/python-lsp/python-lsp-server\">python-lsp/python-lsp-server</a> (PyLSP)</li>\n</ul>\n</li>\n<li>Debug Adapter: <a href=\"https://github.com/microsoft/debugpy\">debugpy</a></li>\n</ul>\n<h2 id=\"language-servers\"><a class=\"header\" href=\"#language-servers\">Language Servers</a></h2>\n<p>Zed supports multiple Python language servers some of which may require configuration to work properly.</p>\n<p>See: <a href=\"https://zed.dev/docs/configuring-languages#working-with-language-servers\">Working with Language Servers</a> for more information.</p>\n<h2 id=\"terminal-detect_venv\"><a class=\"header\" href=\"#terminal-detect_venv\">Virtual Environments in the Terminal</a></h2>\n<p>Zed will detect Python virtual environments and automatically activate them in terminal if available.\nSee: <a href=\"../configuring-zed.html#terminal-detect_venv\">detect_venv documentation</a> for more.</p>\n<h2 id=\"pylsp\"><a class=\"header\" href=\"#pylsp\">PyLSP</a></h2>\n<p><a href=\"https://github.com/python-lsp/python-lsp-server/\">python-lsp-server</a>, more commonly known as PyLSP, by default integrates with a number of external tools (autopep8, mccabe, pycodestyle, yapf) while others are optional and must be explicitly enabled and configured (flake8, pylint).</p>\n<p>See <a href=\"https://github.com/python-lsp/python-lsp-server/blob/develop/CONFIGURATION.md\">Python Language Server Configuration</a> for more.</p>\n<h2 id=\"pyright\"><a class=\"header\" href=\"#pyright\">PyRight</a></h2>\n<h3 id=\"pyright-configuration\"><a class=\"header\" href=\"#pyright-configuration\">PyRight Configuration</a></h3>\n<p>The <a href=\"https://github.com/microsoft/pyright\">pyright</a> language server offers flexible configuration options specified in a JSON-formatted text configuration. By default, the file is called <code>pyrightconfig.json</code> and is located within the root directory of your project. Pyright settings can also be specified in a <code>[tool.pyright]</code> section of a <code>pyproject.toml</code> file. A <code>pyrightconfig.json</code> file always takes precedence over <code>pyproject.toml</code> if both are present.</p>\n<p>For more information, see the Pyright <a href=\"https://microsoft.github.io/pyright/#/configuration\">configuration documentation</a>.</p>\n<h3 id=\"pyright-settings\"><a class=\"header\" href=\"#pyright-settings\">PyRight Settings</a></h3>\n<p>The <a href=\"https://github.com/microsoft/pyright\">pyright</a> language server also accepts specific LSP-related settings, not necessarily connected to a project. These can be changed in the <code>lsp</code> section of your <code>settings.json</code>.</p>\n<p>For example, in order to:</p>\n<ul>\n<li>use strict type-checking level</li>\n<li>diagnose all files in the workspace instead of the only open files default</li>\n<li>provide the path to a specific Python interpreter</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python.analysis\": {\n          \"diagnosticMode\": \"workspace\",\n          \"typeCheckingMode\": \"strict\"\n        },\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>For more information, see the Pyright <a href=\"https://microsoft.github.io/pyright/#/settings\">settings documentation</a>.</p>\n<h3 id=\"pyright-virtual-environments\"><a class=\"header\" href=\"#pyright-virtual-environments\">Pyright Virtual environments</a></h3>\n<p>A Python <a href=\"https://docs.python.org/3/tutorial/venv.html\">virtual environment</a> allows you to store all of a project's dependencies, including the Python interpreter and package manager, in a single directory that's isolated from any other Python projects on your computer.</p>\n<p>By default, the Pyright language server will look for Python packages in the default global locations. But you can also configure Pyright to use the packages installed in a given virtual environment.</p>\n<p>To do this, create a JSON file called <code>pyrightconfig.json</code> at the root of your project. This file must include two keys:</p>\n<ul>\n<li><code>venvPath</code>: a relative path from your project directory to any directory that <em>contains</em> one or more virtual environment directories</li>\n<li><code>venv</code>: the name of a virtual environment directory</li>\n</ul>\n<p>For example, a common approach is to create a virtual environment directory called <code>.venv</code> at the root of your project directory with the following commands:</p>\n<pre><code class=\"language-sh\"># create a virtual environment in the .venv directory\npython3 -m venv .venv\n# set up the current shell to use that virtual environment\nsource .venv/bin/activate\n</code></pre>\n<p>Having done that, you would create a <code>pyrightconfig.json</code> with the following content:</p>\n<pre><code class=\"language-json\">{\n  \"venvPath\": \".\",\n  \"venv\": \".venv\"\n}\n</code></pre>\n<p>If you prefer to use a <code>pyproject.toml</code> file, you can add the following section:</p>\n<pre><code class=\"language-toml\">[tool.pyright]\nvenvPath = \".\"\nvenv = \".venv\"\n</code></pre>\n<p>You can also configure this option directly in your <code>settings.json</code> file (<a href=\"#pyright-settings\">pyright settings</a>), as recommended in <a href=\"https://microsoft.github.io/pyright/#/import-resolution?id=configuring-your-python-environment\">Configuring Your Python Environment</a>.</p>\n<pre><code class=\"language-json\">{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"code-formatting--linting\"><a class=\"header\" href=\"#code-formatting--linting\">Code formatting &amp; Linting</a></h3>\n<p>The Pyright language server does not provide code formatting or linting. If you want to detect lint errors and reformat your Python code upon saving, you'll need to set up.</p>\n<p>A common tool for formatting Python code is <a href=\"https://docs.astral.sh/ruff/\">Ruff</a>. It is another tool written in Rust, an extremely fast Python linter and code formatter. It is available through the <a href=\"https://github.com/zed-industries/zed/tree/main/extensions/ruff/\">Ruff extension</a>. To configure the Ruff extension to work within Zed, see the setup documentation <a href=\"https://docs.astral.sh/ruff/editors/setup/#zed\">here</a>.</p>\n<!--\nTBD: Expand Python Ruff docs.\nTBD: Ruff pyproject.toml, ruff.toml docs. `ruff.configuration`.\n-->\n<h2 id=\"debugging\"><a class=\"header\" href=\"#debugging\">Debugging</a></h2>\n<p>Zed supports zero-configuration debugging of Python module entry points and pytest tests.\nRun <code class=\"hljs\">debugger: start</code> (<kbd class=\"keybinding\">f4|f4</kbd>) to see a contextual list for the current project.\nFor greater control, you can add debug configurations to <code>.zed/debug.json</code>. See the examples below.</p>\n<h3 id=\"debug-active-file\"><a class=\"header\" href=\"#debug-active-file\">Debug Active File</a></h3>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Python Active File\",\n    \"adapter\": \"Debugpy\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\"\n  }\n]\n</code></pre>\n<h3 id=\"flask-app\"><a class=\"header\" href=\"#flask-app\">Flask App</a></h3>\n<p>For a common Flask Application with a file structure similar to the following:</p>\n<pre><code>.venv/\napp/\n  init.py\n  main.py\n  routes.py\ntemplates/\n  index.html\nstatic/\n  style.css\nrequirements.txt\n</code></pre>\n<p>â€¦the following configuration can be used:</p>\n<pre><code class=\"language-json\">[\n  {\n    \"label\": \"Python: Flask\",\n    \"adapter\": \"Debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"app\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"FLASK_APP\": \"app\",\n      \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n      \"run\",\n      \"--reload\", // Enables Flask reloader that watches for file changes\n      \"--debugger\" // Enables Flask debugger\n    ],\n    \"autoReload\": {\n      \"enable\": true\n    },\n    \"jinja\": true,\n    \"justMyCode\": true\n  }\n]\n</code></pre>\n\n</main>",
  "content_text": "Python\nPython support is available natively in Zed.\n\nTree-sitter: tree-sitter-python\nLanguage Servers:\n\nmicrosoft/pyright\npython-lsp/python-lsp-server (PyLSP)\n\n\nDebug Adapter: debugpy\n\nLanguage Servers\nZed supports multiple Python language servers some of which may require configuration to work properly.\nSee: Working with Language Servers for more information.\nVirtual Environments in the Terminal\nZed will detect Python virtual environments and automatically activate them in terminal if available.\nSee: detect_venv documentation for more.\nPyLSP\npython-lsp-server, more commonly known as PyLSP, by default integrates with a number of external tools (autopep8, mccabe, pycodestyle, yapf) while others are optional and must be explicitly enabled and configured (flake8, pylint).\nSee Python Language Server Configuration for more.\nPyRight\nPyRight Configuration\nThe pyright language server offers flexible configuration options specified in a JSON-formatted text configuration. By default, the file is called pyrightconfig.json and is located within the root directory of your project. Pyright settings can also be specified in a [tool.pyright] section of a pyproject.toml file. A pyrightconfig.json file always takes precedence over pyproject.toml if both are present.\nFor more information, see the Pyright configuration documentation.\nPyRight Settings\nThe pyright language server also accepts specific LSP-related settings, not necessarily connected to a project. These can be changed in the lsp section of your settings.json.\nFor example, in order to:\n\nuse strict type-checking level\ndiagnose all files in the workspace instead of the only open files default\nprovide the path to a specific Python interpreter\n\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python.analysis\": {\n          \"diagnosticMode\": \"workspace\",\n          \"typeCheckingMode\": \"strict\"\n        },\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n\nFor more information, see the Pyright settings documentation.\nPyright Virtual environments\nA Python virtual environment allows you to store all of a project's dependencies, including the Python interpreter and package manager, in a single directory that's isolated from any other Python projects on your computer.\nBy default, the Pyright language server will look for Python packages in the default global locations. But you can also configure Pyright to use the packages installed in a given virtual environment.\nTo do this, create a JSON file called pyrightconfig.json at the root of your project. This file must include two keys:\n\nvenvPath: a relative path from your project directory to any directory that contains one or more virtual environment directories\nvenv: the name of a virtual environment directory\n\nFor example, a common approach is to create a virtual environment directory called .venv at the root of your project directory with the following commands:\n# create a virtual environment in the .venv directory\npython3 -m venv .venv\n# set up the current shell to use that virtual environment\nsource .venv/bin/activate\n\nHaving done that, you would create a pyrightconfig.json with the following content:\n{\n  \"venvPath\": \".\",\n  \"venv\": \".venv\"\n}\n\nIf you prefer to use a pyproject.toml file, you can add the following section:\n[tool.pyright]\nvenvPath = \".\"\nvenv = \".venv\"\n\nYou can also configure this option directly in your settings.json file (pyright settings), as recommended in Configuring Your Python Environment.\n{\n  \"lsp\": {\n    \"pyright\": {\n      \"settings\": {\n        \"python\": {\n          \"pythonPath\": \".venv/bin/python\"\n        }\n      }\n    }\n  }\n}\n\nCode formatting & Linting\nThe Pyright language server does not provide code formatting or linting. If you want to detect lint errors and reformat your Python code upon saving, you'll need to set up.\nA common tool for formatting Python code is Ruff. It is another tool written in Rust, an extremely fast Python linter and code formatter. It is available through the Ruff extension. To configure the Ruff extension to work within Zed, see the setup documentation here.\n\nDebugging\nZed supports zero-configuration debugging of Python module entry points and pytest tests.\nRun debugger: start (f4|f4) to see a contextual list for the current project.\nFor greater control, you can add debug configurations to .zed/debug.json. See the examples below.\nDebug Active File\n[\n  {\n    \"label\": \"Python Active File\",\n    \"adapter\": \"Debugpy\",\n    \"program\": \"$ZED_FILE\",\n    \"request\": \"launch\"\n  }\n]\n\nFlask App\nFor a common Flask Application with a file structure similar to the following:\n.venv/\napp/\n  init.py\n  main.py\n  routes.py\ntemplates/\n  index.html\nstatic/\n  style.css\nrequirements.txt\n\nâ€¦the following configuration can be used:\n[\n  {\n    \"label\": \"Python: Flask\",\n    \"adapter\": \"Debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"app\",\n    \"cwd\": \"$ZED_WORKTREE_ROOT\",\n    \"env\": {\n      \"FLASK_APP\": \"app\",\n      \"FLASK_DEBUG\": \"1\"\n    },\n    \"args\": [\n      \"run\",\n      \"--reload\", // Enables Flask reloader that watches for file changes\n      \"--debugger\" // Enables Flask debugger\n    ],\n    \"autoReload\": {\n      \"enable\": true\n    },\n    \"jinja\": true,\n    \"justMyCode\": true\n  }\n]",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:14:45"
}