{
  "url": "https://zed.dev/docs/ai/models.html",
  "title": "Models | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"models\"><a class=\"header\" href=\"#models\">Models</a></h1>\n<p>Zed’s plans offer hosted versions of major LLM’s, generally with higher rate limits than individual API keys.\nWe’re working hard to expand the models supported by Zed’s subscription offerings, so please check back often.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Model</th><th>Provider</th><th>Burn Mode</th><th>Context Window</th><th>Price per Prompt</th><th>Price per Request</th></tr></thead><tbody>\n<tr><td>Claude 3.5 Sonnet</td><td>Anthropic</td><td>❌</td><td>60k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude 3.7 Sonnet</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude 3.7 Sonnet</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.05</td></tr>\n<tr><td>Claude Sonnet 4</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.04</td><td>N/A</td></tr>\n<tr><td>Claude Sonnet 4</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.05</td></tr>\n<tr><td>Claude Opus 4</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.20</td><td>N/A</td></tr>\n<tr><td>Claude Opus 4</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.25</td></tr>\n<tr><td>Claude Opus 4.1</td><td>Anthropic</td><td>❌</td><td>120k</td><td>$0.20</td><td>N/A</td></tr>\n<tr><td>Claude Opus 4.1</td><td>Anthropic</td><td>✅</td><td>200k</td><td>N/A</td><td>$0.25</td></tr>\n</tbody></table>\n</div>\n<blockquote>\n<p>Note: Because of the 5x token cost for <a href=\"https://www.anthropic.com/pricing#api\">Opus relative to Sonnet</a>, each Opus 4 and 4.1 prompt consumes 5 prompts against your billing meter</p>\n</blockquote>\n<h2 id=\"usage\"><a class=\"header\" href=\"#usage\">Usage</a></h2>\n<p>The models above can be used with the prompts included in your plan. For models not marked with <a href=\"#burn-mode\">“Burn Mode”</a>, each prompt is counted against the monthly limit of your plan.</p>\n<p>If you’ve exceeded your limit for the month, and are on a paid plan, you can enable usage-based pricing to continue using models for the rest of the month. See <a href=\"./plans-and-usage.html\">Plans and Usage</a> for more information.</p>\n<p>Non-Burn Mode usage will use up to 25 tool calls per one prompt. If your prompt extends beyond 25 tool calls, Zed will ask if you’d like to continue, which will consume a second prompt.</p>\n<h2 id=\"burn-mode\"><a class=\"header\" href=\"#burn-mode\">Burn Mode</a></h2>\n<blockquote>\n<p>Note: \"Burn Mode\" is the new name for what was previously called \"Max Mode\".</p>\n</blockquote>\n<p>In Burn Mode, we enable models to use <a href=\"#context-windows\">large context windows</a>, unlimited tool calls, and other capabilities for expanded reasoning, to allow an unfettered agentic experience.</p>\n<p>Because of the increased cost to Zed, each subsequent request beyond the initial user prompt in Burn Mode models is counted as a prompt for metering.</p>\n<p>In addition, usage-based pricing per request is slightly more expensive for Burn Mode models than usage-based pricing per prompt for regular models.</p>\n<blockquote>\n<p>Note that the Agent Panel using a Burn Mode model may consume a good bit of your monthly prompt capacity, if many tool calls are used.\nWe encourage you to think through what model is best for your needs before leaving the Agent Panel to work.</p>\n</blockquote>\n<p>By default, all threads and <a href=\"./text-threads.html\">text threads</a> start in normal mode.\nHowever, you can use the <code>agent.preferred_completion_mode</code> setting to have Burn Mode activated by default.</p>\n<h2 id=\"context-windows\"><a class=\"header\" href=\"#context-windows\">Context Windows</a></h2>\n<p>A context window is the maximum span of text and code an LLM can consider at once, including both the input prompt and output generated by the model.</p>\n<p>In <a href=\"#burn-mode\">Burn Mode</a>, we increase context window size to allow models to have enhanced reasoning capabilities.</p>\n<p>Each Agent thread and text thread in Zed maintains its own context window.\nThe more prompts, attached files, and responses included in a session, the larger the context window grows.</p>\n<p>For best results, it’s recommended you take a purpose-based approach to Agent thread management, starting a new thread for each unique task.</p>\n<h2 id=\"tool-calls\"><a class=\"header\" href=\"#tool-calls\">Tool Calls</a></h2>\n<p>Models can use <a href=\"./tools.html\">tools</a> to interface with your code, search the web, and perform other useful functions.</p>\n<p>In <a href=\"#burn-mode\">Burn Mode</a>, models can use an unlimited number of tools per prompt, with each tool call counting as a prompt for metering purposes.</p>\n<p>For non-Burn Mode models, you'll need to interact with the model every 25 tool calls to continue, at which point a new prompt will be counted against your plan limit.</p>\n\n</main>",
  "content_text": "Models\nZed’s plans offer hosted versions of major LLM’s, generally with higher rate limits than individual API keys.\nWe’re working hard to expand the models supported by Zed’s subscription offerings, so please check back often.\nModelProviderBurn ModeContext WindowPrice per PromptPrice per Request\nClaude 3.5 SonnetAnthropic❌60k$0.04N/A\nClaude 3.7 SonnetAnthropic❌120k$0.04N/A\nClaude 3.7 SonnetAnthropic✅200kN/A$0.05\nClaude Sonnet 4Anthropic❌120k$0.04N/A\nClaude Sonnet 4Anthropic✅200kN/A$0.05\nClaude Opus 4Anthropic❌120k$0.20N/A\nClaude Opus 4Anthropic✅200kN/A$0.25\nClaude Opus 4.1Anthropic❌120k$0.20N/A\nClaude Opus 4.1Anthropic✅200kN/A$0.25\n\n\n\nNote: Because of the 5x token cost for Opus relative to Sonnet, each Opus 4 and 4.1 prompt consumes 5 prompts against your billing meter\n\nUsage\nThe models above can be used with the prompts included in your plan. For models not marked with “Burn Mode”, each prompt is counted against the monthly limit of your plan.\nIf you’ve exceeded your limit for the month, and are on a paid plan, you can enable usage-based pricing to continue using models for the rest of the month. See Plans and Usage for more information.\nNon-Burn Mode usage will use up to 25 tool calls per one prompt. If your prompt extends beyond 25 tool calls, Zed will ask if you’d like to continue, which will consume a second prompt.\nBurn Mode\n\nNote: \"Burn Mode\" is the new name for what was previously called \"Max Mode\".\n\nIn Burn Mode, we enable models to use large context windows, unlimited tool calls, and other capabilities for expanded reasoning, to allow an unfettered agentic experience.\nBecause of the increased cost to Zed, each subsequent request beyond the initial user prompt in Burn Mode models is counted as a prompt for metering.\nIn addition, usage-based pricing per request is slightly more expensive for Burn Mode models than usage-based pricing per prompt for regular models.\n\nNote that the Agent Panel using a Burn Mode model may consume a good bit of your monthly prompt capacity, if many tool calls are used.\nWe encourage you to think through what model is best for your needs before leaving the Agent Panel to work.\n\nBy default, all threads and text threads start in normal mode.\nHowever, you can use the agent.preferred_completion_mode setting to have Burn Mode activated by default.\nContext Windows\nA context window is the maximum span of text and code an LLM can consider at once, including both the input prompt and output generated by the model.\nIn Burn Mode, we increase context window size to allow models to have enhanced reasoning capabilities.\nEach Agent thread and text thread in Zed maintains its own context window.\nThe more prompts, attached files, and responses included in a session, the larger the context window grows.\nFor best results, it’s recommended you take a purpose-based approach to Agent thread management, starting a new thread for each unique task.\nTool Calls\nModels can use tools to interface with your code, search the web, and perform other useful functions.\nIn Burn Mode, models can use an unlimited number of tools per prompt, with each tool call counting as a prompt for metering purposes.\nFor non-Burn Mode models, you'll need to interact with the model every 25 tool calls to continue, at which point a new prompt will be counted against your plan limit.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "../getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "../system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "../accounts.html"
    },
    {
      "text": "Linux",
      "href": "../linux.html"
    },
    {
      "text": "Windows",
      "href": "../windows.html"
    },
    {
      "text": "Telemetry",
      "href": "../telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "../workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "../additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "../configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "../configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "../key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "../all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "../snippets.html"
    },
    {
      "text": "Themes",
      "href": "../themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "../icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "../visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "../vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "../helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "../multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "../outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "../completions.html"
    },
    {
      "text": "Channels",
      "href": "../channels.html"
    },
    {
      "text": "Collaboration",
      "href": "../collaboration.html"
    },
    {
      "text": "Git",
      "href": "../git.html"
    },
    {
      "text": "Debugger",
      "href": "../debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "../diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "../tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "../remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "../environment.html"
    },
    {
      "text": "REPL",
      "href": "../repl.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "../ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "../ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "../ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "../ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "../ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "../ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "../ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "../ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "../ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "../ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "../ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "../ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "../ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "../ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "../ai/billing.html"
    },
    {
      "text": "Models",
      "href": "../ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "../ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "../ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Overview",
      "href": "../extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "../extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "../extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "../extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "../extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "../extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "../extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "../extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "../extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "All Languages",
      "href": "../languages.html"
    },
    {
      "text": "Ansible",
      "href": "../languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "../languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "../languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "../languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "../languages/biome.html"
    },
    {
      "text": "C",
      "href": "../languages/c.html"
    },
    {
      "text": "C++",
      "href": "../languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "../languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "../languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "../languages/css.html"
    },
    {
      "text": "Dart",
      "href": "../languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "../languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "../languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "../languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "../languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "../languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "../languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "../languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "../languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "../languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "../languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "../languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "../languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "../languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "../languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "../languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "../languages/html.html"
    },
    {
      "text": "Java",
      "href": "../languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "../languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "../languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "../languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "../languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "../languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "../languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "../languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "../languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "../languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "../languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "../languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "../languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "../languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "../languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "../languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "../languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "../languages/python.html"
    },
    {
      "text": "R",
      "href": "../languages/r.html"
    },
    {
      "text": "Rego",
      "href": "../languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "../languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "../languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "../languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "../languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "../languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "../languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "../languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "../languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "../languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "../languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "../languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "../languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "../languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "../languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "../languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "../languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "../languages/vue.html"
    },
    {
      "text": "XML",
      "href": "../languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "../languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "../languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "../languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "../languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "Developing Zed",
      "href": "../development.html"
    },
    {
      "text": "macOS",
      "href": "../development/macos.html"
    },
    {
      "text": "Linux",
      "href": "../development/linux.html"
    },
    {
      "text": "Windows",
      "href": "../development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "../development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "../development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "../development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "../development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "../development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "../development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:12:36"
}