{
  "url": "https://zed.dev/docs/linux.html",
  "title": "Linux | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"zed-on-linux\"><a class=\"header\" href=\"#zed-on-linux\">Zed on Linux</a></h1>\n<h2 id=\"standard-installation\"><a class=\"header\" href=\"#standard-installation\">Standard Installation</a></h2>\n<p>For most people we recommend using the script on the <a href=\"https://zed.dev/download\">download</a> page to install Zed:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | sh\n</code></pre>\n<p>We also offer a preview build of Zed which receives updates about a week ahead of stable. You can install it with:</p>\n<pre><code class=\"language-sh\">curl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n</code></pre>\n<p>The Zed installed by the script works best on systems that:</p>\n<ul>\n<li>have a Vulkan compatible GPU available (for example Linux on an M-series macBook)</li>\n<li>have a system-wide glibc (NixOS and Alpine do not by default)\n<ul>\n<li>x86_64 (Intel/AMD): glibc version &gt;= 2.31 (Ubuntu 20 and newer)</li>\n<li>aarch64 (ARM): glibc version &gt;= 2.35 (Ubuntu 22 and newer)</li>\n</ul>\n</li>\n</ul>\n<p>Both Nix and Alpine have third-party Zed packages available (though they are currently a few weeks out of date). If you'd like to use our builds they do work if you install a glibc compatibility layer. On NixOS you can try <a href=\"https://github.com/Mic92/nix-ld\">nix-ld</a>, and on Alpine <a href=\"https://wiki.alpinelinux.org/wiki/Running_glibc_programs\">gcompat</a>.</p>\n<p>You will need to build from source for:</p>\n<ul>\n<li>architectures other than 64-bit Intel or 64-bit ARM (for example a 32-bit or RISC-V machine)</li>\n<li>Redhat Enterprise Linux 8.x, Rocky Linux 8, AlmaLinux 8, Amazon Linux 2 on all architectures</li>\n<li>Redhat Enterprise Linux 9.x, Rocky Linux 9.3, AlmaLinux 8, Amazon Linux 2023 on aarch64 (x86_x64 OK)</li>\n</ul>\n<h2 id=\"other-ways-to-install-zed-on-linux\"><a class=\"header\" href=\"#other-ways-to-install-zed-on-linux\">Other ways to install Zed on Linux</a></h2>\n<p>Zed is open source, and <a href=\"./development/linux.html\">you can install from source</a>.</p>\n<h3 id=\"installing-via-a-package-manager\"><a class=\"header\" href=\"#installing-via-a-package-manager\">Installing via a package manager</a></h3>\n<p>There are several third-party Zed packages for various Linux distributions and package managers, sometimes under <code>zed-editor</code>. You may be able to install Zed using these packages:</p>\n<ul>\n<li>Flathub: <a href=\"https://flathub.org/apps/dev.zed.Zed\"><code>dev.zed.Zed</code></a></li>\n<li>Arch: <a href=\"https://archlinux.org/packages/extra/x86_64/zed/\"><code>zed</code></a></li>\n<li>Arch (AUR): <a href=\"https://aur.archlinux.org/packages/zed-git\"><code>zed-git</code></a>, <a href=\"https://aur.archlinux.org/packages/zed-preview\"><code>zed-preview</code></a>, <a href=\"https://aur.archlinux.org/packages/zed-preview-bin\"><code>zed-preview-bin</code></a></li>\n<li>Alpine: <code>zed</code> (<a href=\"https://pkgs.alpinelinux.org/package/edge/testing/aarch64/zed\">aarch64</a>) (<a href=\"https://pkgs.alpinelinux.org/package/edge/testing/x86_64/zed\">x86_64</a>)</li>\n<li>Nix: <code>zed-editor</code> (<a href=\"https://search.nixos.org/packages?channel=unstable&amp;show=zed-editor\">unstable</a>)</li>\n<li>Fedora/Ultramarine (Terra): <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/stable\"><code>zed</code></a>, <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/preview\"><code>zed-preview</code></a>, <a href=\"https://github.com/terrapkg/packages/tree/frawhide/anda/devs/zed/nightly\"><code>zed-nightly</code></a></li>\n<li>Solus: <a href=\"https://github.com/getsolus/packages/tree/main/packages/z/zed\"><code>zed</code></a></li>\n<li>Parabola: <a href=\"https://www.parabola.nu/packages/extra/x86_64/zed/\"><code>zed</code></a></li>\n<li>Manjaro: <a href=\"https://packages.manjaro.org/?query=zed\"><code>zed</code></a></li>\n<li>ALT Linux (Sisyphus): <a href=\"https://packages.altlinux.org/en/sisyphus/srpms/zed/\"><code>zed</code></a></li>\n<li>AOSC OS: <a href=\"https://packages.aosc.io/packages/zed\"><code>zed</code></a></li>\n</ul>\n<p>See <a href=\"https://repology.org/project/zed-editor/versions\">Repology</a> for a list of Zed packages in various repositories.</p>\n<p>When installing a third-party package please be aware that it may not be completely up to date and may be slightly different from the Zed we package (a common change is to rename the binary to <code>zedit</code> or <code>zeditor</code> to avoid conflicting with other packages).</p>\n<p>We'd love your help making Zed available for everyone. If Zed is not yet available for your package manager, and you would like to fix that, we have some notes on <a href=\"./development/linux.html#notes-for-packaging-zed\">how to do it</a>.</p>\n<h3 id=\"downloading-manually\"><a class=\"header\" href=\"#downloading-manually\">Downloading manually</a></h3>\n<p>If you'd prefer, you can install Zed by downloading our pre-built .tar.gz. This is the same artifact that our install script uses, but you can customize the location of your installation by modifying the instructions below:</p>\n<p>Download the <code>.tar.gz</code> file:</p>\n<ul>\n<li><a href=\"https://zed.dev/api/releases/stable/latest/zed-linux-x86_64.tar.gz\">zed-linux-x86_64.tar.gz</a> (<a href=\"https://zed.dev/api/releases/preview/latest/zed-linux-x86_64.tar.gz\">preview</a>)</li>\n<li><a href=\"https://zed.dev/api/releases/stable/latest/zed-linux-aarch64.tar.gz\">zed-linux-aarch64.tar.gz</a>\n(<a href=\"https://zed.dev/api/releases/preview/latest/zed-linux-aarch64.tar.gz\">preview</a>)</li>\n</ul>\n<p>Then ensure that the <code>zed</code> binary in the tarball is on your path. The easiest way is to unpack the tarball and create a symlink:</p>\n<pre><code class=\"language-sh\">mkdir -p ~/.local\n# extract zed to ~/.local/zed.app/\ntar -xvf &lt;path/to/download&gt;.tar.gz -C ~/.local\n# link the zed binary to ~/.local/bin (or another directory in your $PATH)\nln -sf ~/.local/zed.app/bin/zed ~/.local/bin/zed\n</code></pre>\n<p>If you'd like integration with an XDG-compatible desktop environment, you will also need to install the <code>.desktop</code> file:</p>\n<pre><code class=\"language-sh\">cp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g\" ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g\" ~/.local/share/applications/dev.zed.Zed.desktop\n</code></pre>\n<h2 id=\"uninstalling-zed\"><a class=\"header\" href=\"#uninstalling-zed\">Uninstalling Zed</a></h2>\n<h3 id=\"standard-uninstall\"><a class=\"header\" href=\"#standard-uninstall\">Standard Uninstall</a></h3>\n<p>If Zed was installed using the default installation script, it can be uninstalled by supplying the <code>--uninstall</code> flag to the <code>zed</code> shell command</p>\n<pre><code class=\"language-sh\">zed --uninstall\n</code></pre>\n<p>If there are no errors, the shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.</p>\n<p>In the case that the <code>zed</code> shell command was not found in your PATH, you can try one of the following commands</p>\n<pre><code class=\"language-sh\">$HOME/.local/bin/zed --uninstall\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-sh\">$HOME/.local/zed.app/bin.zed --uninstall\n</code></pre>\n<p>The first case might fail if a symlink was not properly established between <code>$HOME/.local/bin/zed</code> and <code>$HOME/.local/zed.app/bin.zed</code>. But the second case should work as long as Zed was installed to its default location.</p>\n<p>If Zed was installed to a different location, you must invoke the <code>zed</code> binary stored in that installation directory and pass the <code>--uninstall</code> flag to it in the same format as the previous commands.</p>\n<h3 id=\"package-manager\"><a class=\"header\" href=\"#package-manager\">Package Manager</a></h3>\n<p>If Zed was installed using a package manager, please consult the documentation for that package manager on how to uninstall a package.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<p>Linux works on a large variety of systems configured in many different ways. We primarily test Zed on a vanilla Ubuntu setup, as it is the most common distribution our users use, that said we do expect it to work on a wide variety of machines.</p>\n<h3 id=\"zed-fails-to-start\"><a class=\"header\" href=\"#zed-fails-to-start\">Zed fails to start</a></h3>\n<p>If you see an error like \"/lib64/libc.so.6: version 'GLIBC_2.29' not found\" it means that your distribution's version of glibc is too old. You can either upgrade your system, or <a href=\"./development/linux.html\">install Zed from source</a>.</p>\n<h3 id=\"graphics-issues\"><a class=\"header\" href=\"#graphics-issues\">Graphics issues</a></h3>\n<h4 id=\"zed-fails-to-open-windows\"><a class=\"header\" href=\"#zed-fails-to-open-windows\">Zed fails to open windows</a></h4>\n<p>Zed requires a GPU to run effectively. Under the hood, we use <a href=\"https://www.vulkan.org/\">Vulkan</a> to communicate with your GPU. If you are seeing problems with performance, or Zed fails to load, it is possible that Vulkan is the culprit.</p>\n<p>If you see a notification saying <code>Zed failed to open a window: NoSupportedDeviceFound</code> this means that Vulkan cannot find a compatible GPU. you can try running <a href=\"https://github.com/krh/vkcube\">vkcube</a> (usually available as part of the <code>vulkaninfo</code> or <code>vulkan-tools</code> package on various distributions) to try to troubleshoot where the issue is coming from like so:</p>\n<pre><code>vkcube\n</code></pre>\n<blockquote>\n<p><strong><em>Note</em></strong>: Try running in both X11 and wayland modes by running <code>vkcube -m [x11|wayland]</code>. Some versions of <code>vkcube</code> use <code>vkcube</code> to run in X11 and <code>vkcube-wayland</code> to run in wayland.</p>\n</blockquote>\n<p>This should output a line describing your current graphics setup and show a rotating cube. If this does not work, you should be able to fix it by installing Vulkan compatible GPU drivers, however in some cases (for example running Linux on an Arm-based MacBook) there is no Vulkan support yet.</p>\n<p>You can find out which graphics card Zed is using by looking in the Zed log (<code>~/.local/share/zed/logs/Zed.log</code>) for <code>Using GPU: ...</code>.</p>\n<p>If you see errors like <code>ERROR_INITIALIZATION_FAILED</code> or <code>GPU Crashed</code> or <code>ERROR_SURFACE_LOST_KHR</code> then you may be able to work around this by installing different drivers for your GPU, or by selecting a different GPU to run on. (See <a href=\"https://github.com/zed-industries/zed/issues/14225\">#14225</a>)</p>\n<p>On some systems the file <code>/etc/prime-discrete</code> can be used to enforce the use of a discrete GPU using <a href=\"https://wiki.archlinux.org/title/PRIME\">PRIME</a>. Depending on the details of your setup, you may need to change the contents of this file to \"on\" (to force discrete graphics) or \"off\" (to force integrated graphics).</p>\n<p>On others, you may be able to the environment variable <code>DRI_PRIME=1</code> when running Zed to force the use of the discrete GPU.</p>\n<p>If you're using an AMD GPU and Zed crashes when selecting long lines, try setting the <code>ZED_PATH_SAMPLE_COUNT=0</code> environment variable. (See <a href=\"https://github.com/zed-industries/zed/issues/26143\">#26143</a>)</p>\n<p>If you're using an AMD GPU, you might get a 'Broken Pipe' error. Try using the RADV or Mesa drivers. (See <a href=\"https://github.com/zed-industries/zed/issues/13880\">#13880</a>)</p>\n<p>If you are using <code>amdvlk</code> you may find that zed only opens when run with <code>sudo $(which zed)</code>. To fix this, remove the <code>amdvlk</code> and <code>lib32-amdvlk</code> packages and install mesa/vulkan instead. (<a href=\"https://github.com/zed-industries/zed/issues/14141\">#14141</a>).</p>\n<p>For more information, the <a href=\"https://wiki.archlinux.org/title/Vulkan\">Arch guide to Vulkan</a> has some good steps that translate well to most distributions.</p>\n<h4 id=\"forcing-zed-to-use-a-specific-gpu\"><a class=\"header\" href=\"#forcing-zed-to-use-a-specific-gpu\">Forcing Zed to use a specific GPU</a></h4>\n<p>There are a few different ways to force Zed to use a specific GPU:</p>\n<h5 id=\"option-a\"><a class=\"header\" href=\"#option-a\">Option A</a></h5>\n<p>You can use the <code>ZED_DEVICE_ID={device_id}</code> environment variable to specify the device ID of the GPU you wish to have Zed use.</p>\n<p>You can obtain the device ID of your GPU by running <code>lspci -nn | grep VGA</code> which will output each GPU on one line like:</p>\n<pre><code>08:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA104 [GeForce RTX 3070] [10de:2484] (rev a1)\n</code></pre>\n<p>where the device ID here is <code>2484</code>. This value is in hexadecimal, so to force Zed to use this specific GPU you would set the environment variable like so:</p>\n<pre><code>ZED_DEVICE_ID=0x2484 zed\n</code></pre>\n<p>Make sure to export the variable if you choose to define it globally in a <code>.bashrc</code> or similar.</p>\n<h5 id=\"option-b\"><a class=\"header\" href=\"#option-b\">Option B</a></h5>\n<p>If you are using Mesa, you can run <code>MESA_VK_DEVICE_SELECT=list zed --foreground</code> to get a list of available GPUs and then export <code>MESA_VK_DEVICE_SELECT=xxxx:yyyy</code> to choose a specific device.</p>\n<h5 id=\"option-c\"><a class=\"header\" href=\"#option-c\">Option C</a></h5>\n<p>Using <a href=\"https://github.com/jiriks74/vkdevicechooser\">vkdevicechooser</a>.</p>\n<h4 id=\"reporting-graphics-issues\"><a class=\"header\" href=\"#reporting-graphics-issues\">Reporting graphics issues</a></h4>\n<p>If Vulkan is configured correctly, and Zed is still not working for you, please <a href=\"https://github.com/zed-industries/zed\">file an issue</a> with as much information as possible.</p>\n<p>When reporting issues where Zed fails to start due to graphics initialization errors on GitHub, it can be impossible to run the <code>zed: copy system specs into clipboard</code> command like we instruct you to in our issue template. We provide an alternative way to collect the system specs specifically for this situation.</p>\n<p>Passing the <code>--system-specs</code> flag to Zed like</p>\n<pre><code class=\"language-sh\">zed --system-specs\n</code></pre>\n<p>will print the system specs to the terminal like so. It is strongly recommended to copy the output verbatim into the issue on GitHub, as it uses markdown formatting to ensure the output is readable.</p>\n<p>Additionally, it is extremely beneficial to provide the contents of your Zed log when reporting such issues. The log is usually located at <code>~/.local/share/zed/logs/Zed.log</code>. The recommended process for producing a helpful log file is as follows:</p>\n<pre><code class=\"language-sh\">truncate -s 0 ~/.local/share/zed/logs/Zed.log # Clear the log file\nZED_LOG=blade_graphics=info zed .\ncat ~/.local/share/zed/logs/Zed.log\n# copy the output\n</code></pre>\n<p>Or, if you have the Zed cli setup, you can do</p>\n<pre><code class=\"language-sh\">ZED_LOG=blade_graphics=info /path/to/zed/cli --foreground .\n# copy the output\n</code></pre>\n<p>It is also highly recommended when pasting the log into a github issue, to do so with the following template:</p>\n<blockquote>\n<p><strong><em>Note</em></strong>: The whitespace in the template is important, and will cause incorrect formatting if not preserved.</p>\n</blockquote>\n<pre><code>&lt;details&gt;&lt;summary&gt;Zed Log&lt;/summary&gt;\n\n```\n{zed log contents}\n```\n\n&lt;/details&gt;\n</code></pre>\n<p>This will cause the logs to be collapsed by default, making it easier to read the issue.</p>\n<h3 id=\"i-cant-open-any-files\"><a class=\"header\" href=\"#i-cant-open-any-files\">I can't open any files</a></h3>\n<h3 id=\"clicking-links-isnt-working\"><a class=\"header\" href=\"#clicking-links-isnt-working\">Clicking links isn't working</a></h3>\n<p>These features are provided by XDG desktop portals, specifically:</p>\n<ul>\n<li><code>org.freedesktop.portal.FileChooser</code></li>\n<li><code>org.freedesktop.portal.OpenURI</code></li>\n</ul>\n<p>Some window managers, such as <code>Hyprland</code>, don't provide a file picker by default. See <a href=\"https://wiki.archlinux.org/title/XDG_Desktop_Portal#List_of_backends_and_interfaces\">this list</a> as a starting point for alternatives.</p>\n<h3 id=\"zed-isnt-remembering-my-api-keys\"><a class=\"header\" href=\"#zed-isnt-remembering-my-api-keys\">Zed isn't remembering my API keys</a></h3>\n<h3 id=\"zed-isnt-remembering-my-login\"><a class=\"header\" href=\"#zed-isnt-remembering-my-login\">Zed isn't remembering my login</a></h3>\n<p>These feature also requires XDG desktop portals, specifically:</p>\n<ul>\n<li><code>org.freedesktop.portal.Secret</code> or</li>\n<li><code>org.freedesktop.Secrets</code></li>\n</ul>\n<p>Zed needs a place to securely store secrets such as your Zed login cookie or your OpenAI API Keys and we use a system provided keychain to do this. Examples of packages that provide this are <code>gnome-keyring</code>, <code>KWallet</code> and <code>keepassxc</code> among others.</p>\n<h3 id=\"could-not-start-inotify\"><a class=\"header\" href=\"#could-not-start-inotify\">Could not start inotify</a></h3>\n<p>Zed relies on inotify to watch your filesystem for changes. If you cannot start inotify then Zed will not work reliably.</p>\n<p>If you are seeing \"too many open files\" then first try <code>sysctl fs.inotify</code>.</p>\n<ul>\n<li>You should see that max_user_instances is 128 or higher (you can change the limit with <code>sudo sysctl fs.inotify.max_user_instances=1024</code>). Zed needs only 1 inotify instance.</li>\n<li>You should see that <code>max_user_watches</code> is 8000 or higher (you can change the limit with <code>sudo sysctl fs.inotify.max_user_watches=64000</code>). Zed needs one watch per directory in all your open projects + one per git repository + a handful more for settings, themes, keymaps, extensions.</li>\n</ul>\n<p>It is also possible that you are running out of file descriptors. You can check the limits with <code>ulimit</code> and update them by editing <code>/etc/security/limits.conf</code>.</p>\n<h3 id=\"no-sound-or-wrong-output-device\"><a class=\"header\" href=\"#no-sound-or-wrong-output-device\">No sound or wrong output device</a></h3>\n<p>If you're not hearing any sound in Zed or the audio is routed to the wrong device, it could be due to a mismatch between audio systems. Zed relies on ALSA, while your system may be using PipeWire or PulseAudio. To resolve this, you need to configure ALSA to route audio through PipeWire/PulseAudio.</p>\n<p>If your system uses PipeWire:</p>\n<ol>\n<li>\n<p><strong>Install the PipeWire ALSA plugin</strong></p>\n<p>On Debian-based systems, run:</p>\n<pre><code class=\"language-bash\">sudo apt install pipewire-alsa\n</code></pre>\n</li>\n<li>\n<p><strong>Configure ALSA to use PipeWire</strong></p>\n<p>Add the following configuration to your ALSA settings file. You can use either <code>~/.asoundrc</code> (user-level) or <code>/etc/asound.conf</code> (system-wide):</p>\n<pre><code class=\"language-bash\">pcm.!default {\n    type pipewire\n}\n\nctl.!default {\n    type pipewire\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Restart your system</strong></p>\n</li>\n</ol>\n<h3 id=\"forcing-x11-scale-factor\"><a class=\"header\" href=\"#forcing-x11-scale-factor\">Forcing X11 scale factor</a></h3>\n<p>On X11 systems, Zed automatically detects the appropriate scale factor for high-DPI displays. The scale factor is determined using the following priority order:</p>\n<ol>\n<li><code>GPUI_X11_SCALE_FACTOR</code> environment variable (if set)</li>\n<li><code>Xft.dpi</code> from X resources database (xrdb)</li>\n<li>Automatic detection via RandR based on monitor resolution and physical size</li>\n</ol>\n<p>If you want to customize the scale factor beyond what Zed detects automatically, you have several options:</p>\n<h4 id=\"check-your-current-scale-factor\"><a class=\"header\" href=\"#check-your-current-scale-factor\">Check your current scale factor</a></h4>\n<p>You can verify if you have <code>Xft.dpi</code> set:</p>\n<pre><code class=\"language-sh\">xrdb -query | grep Xft.dpi\n</code></pre>\n<p>If this command returns no output, Zed is using RandR (X11's monitor management extension) to automatically calculate the scale factor based on your monitor's reported resolution and physical dimensions.</p>\n<h4 id=\"option-1-set-xftdpi-x-resources-database\"><a class=\"header\" href=\"#option-1-set-xftdpi-x-resources-database\">Option 1: Set Xft.dpi (X Resources Database)</a></h4>\n<p><code>Xft.dpi</code> is a standard X11 setting that many applications use for consistent font and UI scaling. Setting this ensures Zed scales the same way as other X11 applications that respect this setting.</p>\n<p>Edit or create the <code>~/.Xresources</code> file:</p>\n<pre><code class=\"language-sh\">vim ~/.Xresources\n</code></pre>\n<p>Add this line with your desired DPI:</p>\n<pre><code class=\"language-sh\">Xft.dpi: 96\n</code></pre>\n<p>Common DPI values:</p>\n<ul>\n<li><code>96</code> for standard 1x scaling</li>\n<li><code>144</code> for 1.5x scaling</li>\n<li><code>192</code> for 2x scaling</li>\n<li><code>288</code> for 3x scaling</li>\n</ul>\n<p>Load the configuration:</p>\n<pre><code class=\"language-sh\">xrdb -merge ~/.Xresources\n</code></pre>\n<p>Restart Zed for the changes to take effect.</p>\n<h4 id=\"option-2-use-the-gpui_x11_scale_factor-environment-variable\"><a class=\"header\" href=\"#option-2-use-the-gpui_x11_scale_factor-environment-variable\">Option 2: Use the GPUI_X11_SCALE_FACTOR environment variable</a></h4>\n<p>This Zed-specific environment variable directly sets the scale factor, bypassing all automatic detection.</p>\n<pre><code class=\"language-sh\">GPUI_X11_SCALE_FACTOR=1.5 zed\n</code></pre>\n<p>You can use decimal values (e.g., <code>1.25</code>, <code>1.5</code>, <code>2.0</code>) or set <code>GPUI_X11_SCALE_FACTOR=randr</code> to force RandR-based detection even when <code>Xft.dpi</code> is set.</p>\n<p>To make this permanent, add it to your shell profile or desktop entry.</p>\n<h4 id=\"option-3-adjust-system-wide-randr-dpi\"><a class=\"header\" href=\"#option-3-adjust-system-wide-randr-dpi\">Option 3: Adjust system-wide RandR DPI</a></h4>\n<p>This changes the reported DPI for your entire X11 session, affecting how RandR calculates scaling for all applications that use it.</p>\n<p>Add this to your <code>.xprofile</code> or <code>.xinitrc</code>:</p>\n<pre><code class=\"language-sh\">xrandr --dpi 192\n</code></pre>\n<p>Replace <code>192</code> with your desired DPI value. This affects the system globally and will be used by Zed's automatic RandR detection when <code>Xft.dpi</code> is not set.</p>\n\n</main>",
  "content_text": "Zed on Linux\nStandard Installation\nFor most people we recommend using the script on the download page to install Zed:\ncurl -f https://zed.dev/install.sh | sh\n\nWe also offer a preview build of Zed which receives updates about a week ahead of stable. You can install it with:\ncurl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh\n\nThe Zed installed by the script works best on systems that:\n\nhave a Vulkan compatible GPU available (for example Linux on an M-series macBook)\nhave a system-wide glibc (NixOS and Alpine do not by default)\n\nx86_64 (Intel/AMD): glibc version >= 2.31 (Ubuntu 20 and newer)\naarch64 (ARM): glibc version >= 2.35 (Ubuntu 22 and newer)\n\n\n\nBoth Nix and Alpine have third-party Zed packages available (though they are currently a few weeks out of date). If you'd like to use our builds they do work if you install a glibc compatibility layer. On NixOS you can try nix-ld, and on Alpine gcompat.\nYou will need to build from source for:\n\narchitectures other than 64-bit Intel or 64-bit ARM (for example a 32-bit or RISC-V machine)\nRedhat Enterprise Linux 8.x, Rocky Linux 8, AlmaLinux 8, Amazon Linux 2 on all architectures\nRedhat Enterprise Linux 9.x, Rocky Linux 9.3, AlmaLinux 8, Amazon Linux 2023 on aarch64 (x86_x64 OK)\n\nOther ways to install Zed on Linux\nZed is open source, and you can install from source.\nInstalling via a package manager\nThere are several third-party Zed packages for various Linux distributions and package managers, sometimes under zed-editor. You may be able to install Zed using these packages:\n\nFlathub: dev.zed.Zed\nArch: zed\nArch (AUR): zed-git, zed-preview, zed-preview-bin\nAlpine: zed (aarch64) (x86_64)\nNix: zed-editor (unstable)\nFedora/Ultramarine (Terra): zed, zed-preview, zed-nightly\nSolus: zed\nParabola: zed\nManjaro: zed\nALT Linux (Sisyphus): zed\nAOSC OS: zed\n\nSee Repology for a list of Zed packages in various repositories.\nWhen installing a third-party package please be aware that it may not be completely up to date and may be slightly different from the Zed we package (a common change is to rename the binary to zedit or zeditor to avoid conflicting with other packages).\nWe'd love your help making Zed available for everyone. If Zed is not yet available for your package manager, and you would like to fix that, we have some notes on how to do it.\nDownloading manually\nIf you'd prefer, you can install Zed by downloading our pre-built .tar.gz. This is the same artifact that our install script uses, but you can customize the location of your installation by modifying the instructions below:\nDownload the .tar.gz file:\n\nzed-linux-x86_64.tar.gz (preview)\nzed-linux-aarch64.tar.gz\n(preview)\n\nThen ensure that the zed binary in the tarball is on your path. The easiest way is to unpack the tarball and create a symlink:\nmkdir -p ~/.local\n# extract zed to ~/.local/zed.app/\ntar -xvf <path/to/download>.tar.gz -C ~/.local\n# link the zed binary to ~/.local/bin (or another directory in your $PATH)\nln -sf ~/.local/zed.app/bin/zed ~/.local/bin/zed\n\nIf you'd like integration with an XDG-compatible desktop environment, you will also need to install the .desktop file:\ncp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g\" ~/.local/share/applications/dev.zed.Zed.desktop\nsed -i \"s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g\" ~/.local/share/applications/dev.zed.Zed.desktop\n\nUninstalling Zed\nStandard Uninstall\nIf Zed was installed using the default installation script, it can be uninstalled by supplying the --uninstall flag to the zed shell command\nzed --uninstall\n\nIf there are no errors, the shell will then prompt you whether you'd like to keep your preferences or delete them. After making a choice, you should see a message that Zed was successfully uninstalled.\nIn the case that the zed shell command was not found in your PATH, you can try one of the following commands\n$HOME/.local/bin/zed --uninstall\n\nor\n$HOME/.local/zed.app/bin.zed --uninstall\n\nThe first case might fail if a symlink was not properly established between $HOME/.local/bin/zed and $HOME/.local/zed.app/bin.zed. But the second case should work as long as Zed was installed to its default location.\nIf Zed was installed to a different location, you must invoke the zed binary stored in that installation directory and pass the --uninstall flag to it in the same format as the previous commands.\nPackage Manager\nIf Zed was installed using a package manager, please consult the documentation for that package manager on how to uninstall a package.\nTroubleshooting\nLinux works on a large variety of systems configured in many different ways. We primarily test Zed on a vanilla Ubuntu setup, as it is the most common distribution our users use, that said we do expect it to work on a wide variety of machines.\nZed fails to start\nIf you see an error like \"/lib64/libc.so.6: version 'GLIBC_2.29' not found\" it means that your distribution's version of glibc is too old. You can either upgrade your system, or install Zed from source.\nGraphics issues\nZed fails to open windows\nZed requires a GPU to run effectively. Under the hood, we use Vulkan to communicate with your GPU. If you are seeing problems with performance, or Zed fails to load, it is possible that Vulkan is the culprit.\nIf you see a notification saying Zed failed to open a window: NoSupportedDeviceFound this means that Vulkan cannot find a compatible GPU. you can try running vkcube (usually available as part of the vulkaninfo or vulkan-tools package on various distributions) to try to troubleshoot where the issue is coming from like so:\nvkcube\n\n\nNote: Try running in both X11 and wayland modes by running vkcube -m [x11|wayland]. Some versions of vkcube use vkcube to run in X11 and vkcube-wayland to run in wayland.\n\nThis should output a line describing your current graphics setup and show a rotating cube. If this does not work, you should be able to fix it by installing Vulkan compatible GPU drivers, however in some cases (for example running Linux on an Arm-based MacBook) there is no Vulkan support yet.\nYou can find out which graphics card Zed is using by looking in the Zed log (~/.local/share/zed/logs/Zed.log) for Using GPU: ....\nIf you see errors like ERROR_INITIALIZATION_FAILED or GPU Crashed or ERROR_SURFACE_LOST_KHR then you may be able to work around this by installing different drivers for your GPU, or by selecting a different GPU to run on. (See #14225)\nOn some systems the file /etc/prime-discrete can be used to enforce the use of a discrete GPU using PRIME. Depending on the details of your setup, you may need to change the contents of this file to \"on\" (to force discrete graphics) or \"off\" (to force integrated graphics).\nOn others, you may be able to the environment variable DRI_PRIME=1 when running Zed to force the use of the discrete GPU.\nIf you're using an AMD GPU and Zed crashes when selecting long lines, try setting the ZED_PATH_SAMPLE_COUNT=0 environment variable. (See #26143)\nIf you're using an AMD GPU, you might get a 'Broken Pipe' error. Try using the RADV or Mesa drivers. (See #13880)\nIf you are using amdvlk you may find that zed only opens when run with sudo $(which zed). To fix this, remove the amdvlk and lib32-amdvlk packages and install mesa/vulkan instead. (#14141).\nFor more information, the Arch guide to Vulkan has some good steps that translate well to most distributions.\nForcing Zed to use a specific GPU\nThere are a few different ways to force Zed to use a specific GPU:\nOption A\nYou can use the ZED_DEVICE_ID={device_id} environment variable to specify the device ID of the GPU you wish to have Zed use.\nYou can obtain the device ID of your GPU by running lspci -nn | grep VGA which will output each GPU on one line like:\n08:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA104 [GeForce RTX 3070] [10de:2484] (rev a1)\n\nwhere the device ID here is 2484. This value is in hexadecimal, so to force Zed to use this specific GPU you would set the environment variable like so:\nZED_DEVICE_ID=0x2484 zed\n\nMake sure to export the variable if you choose to define it globally in a .bashrc or similar.\nOption B\nIf you are using Mesa, you can run MESA_VK_DEVICE_SELECT=list zed --foreground to get a list of available GPUs and then export MESA_VK_DEVICE_SELECT=xxxx:yyyy to choose a specific device.\nOption C\nUsing vkdevicechooser.\nReporting graphics issues\nIf Vulkan is configured correctly, and Zed is still not working for you, please file an issue with as much information as possible.\nWhen reporting issues where Zed fails to start due to graphics initialization errors on GitHub, it can be impossible to run the zed: copy system specs into clipboard command like we instruct you to in our issue template. We provide an alternative way to collect the system specs specifically for this situation.\nPassing the --system-specs flag to Zed like\nzed --system-specs\n\nwill print the system specs to the terminal like so. It is strongly recommended to copy the output verbatim into the issue on GitHub, as it uses markdown formatting to ensure the output is readable.\nAdditionally, it is extremely beneficial to provide the contents of your Zed log when reporting such issues. The log is usually located at ~/.local/share/zed/logs/Zed.log. The recommended process for producing a helpful log file is as follows:\ntruncate -s 0 ~/.local/share/zed/logs/Zed.log # Clear the log file\nZED_LOG=blade_graphics=info zed .\ncat ~/.local/share/zed/logs/Zed.log\n# copy the output\n\nOr, if you have the Zed cli setup, you can do\nZED_LOG=blade_graphics=info /path/to/zed/cli --foreground .\n# copy the output\n\nIt is also highly recommended when pasting the log into a github issue, to do so with the following template:\n\nNote: The whitespace in the template is important, and will cause incorrect formatting if not preserved.\n\n<details><summary>Zed Log</summary>\n\n```\n{zed log contents}\n```\n\n</details>\n\nThis will cause the logs to be collapsed by default, making it easier to read the issue.\nI can't open any files\nClicking links isn't working\nThese features are provided by XDG desktop portals, specifically:\n\norg.freedesktop.portal.FileChooser\norg.freedesktop.portal.OpenURI\n\nSome window managers, such as Hyprland, don't provide a file picker by default. See this list as a starting point for alternatives.\nZed isn't remembering my API keys\nZed isn't remembering my login\nThese feature also requires XDG desktop portals, specifically:\n\norg.freedesktop.portal.Secret or\norg.freedesktop.Secrets\n\nZed needs a place to securely store secrets such as your Zed login cookie or your OpenAI API Keys and we use a system provided keychain to do this. Examples of packages that provide this are gnome-keyring, KWallet and keepassxc among others.\nCould not start inotify\nZed relies on inotify to watch your filesystem for changes. If you cannot start inotify then Zed will not work reliably.\nIf you are seeing \"too many open files\" then first try sysctl fs.inotify.\n\nYou should see that max_user_instances is 128 or higher (you can change the limit with sudo sysctl fs.inotify.max_user_instances=1024). Zed needs only 1 inotify instance.\nYou should see that max_user_watches is 8000 or higher (you can change the limit with sudo sysctl fs.inotify.max_user_watches=64000). Zed needs one watch per directory in all your open projects + one per git repository + a handful more for settings, themes, keymaps, extensions.\n\nIt is also possible that you are running out of file descriptors. You can check the limits with ulimit and update them by editing /etc/security/limits.conf.\nNo sound or wrong output device\nIf you're not hearing any sound in Zed or the audio is routed to the wrong device, it could be due to a mismatch between audio systems. Zed relies on ALSA, while your system may be using PipeWire or PulseAudio. To resolve this, you need to configure ALSA to route audio through PipeWire/PulseAudio.\nIf your system uses PipeWire:\n\n\nInstall the PipeWire ALSA plugin\nOn Debian-based systems, run:\nsudo apt install pipewire-alsa\n\n\n\nConfigure ALSA to use PipeWire\nAdd the following configuration to your ALSA settings file. You can use either ~/.asoundrc (user-level) or /etc/asound.conf (system-wide):\npcm.!default {\n    type pipewire\n}\n\nctl.!default {\n    type pipewire\n}\n\n\n\nRestart your system\n\n\nForcing X11 scale factor\nOn X11 systems, Zed automatically detects the appropriate scale factor for high-DPI displays. The scale factor is determined using the following priority order:\n\nGPUI_X11_SCALE_FACTOR environment variable (if set)\nXft.dpi from X resources database (xrdb)\nAutomatic detection via RandR based on monitor resolution and physical size\n\nIf you want to customize the scale factor beyond what Zed detects automatically, you have several options:\nCheck your current scale factor\nYou can verify if you have Xft.dpi set:\nxrdb -query | grep Xft.dpi\n\nIf this command returns no output, Zed is using RandR (X11's monitor management extension) to automatically calculate the scale factor based on your monitor's reported resolution and physical dimensions.\nOption 1: Set Xft.dpi (X Resources Database)\nXft.dpi is a standard X11 setting that many applications use for consistent font and UI scaling. Setting this ensures Zed scales the same way as other X11 applications that respect this setting.\nEdit or create the ~/.Xresources file:\nvim ~/.Xresources\n\nAdd this line with your desired DPI:\nXft.dpi: 96\n\nCommon DPI values:\n\n96 for standard 1x scaling\n144 for 1.5x scaling\n192 for 2x scaling\n288 for 3x scaling\n\nLoad the configuration:\nxrdb -merge ~/.Xresources\n\nRestart Zed for the changes to take effect.\nOption 2: Use the GPUI_X11_SCALE_FACTOR environment variable\nThis Zed-specific environment variable directly sets the scale factor, bypassing all automatic detection.\nGPUI_X11_SCALE_FACTOR=1.5 zed\n\nYou can use decimal values (e.g., 1.25, 1.5, 2.0) or set GPUI_X11_SCALE_FACTOR=randr to force RandR-based detection even when Xft.dpi is set.\nTo make this permanent, add it to your shell profile or desktop entry.\nOption 3: Adjust system-wide RandR DPI\nThis changes the reported DPI for your entire X11 session, affecting how RandR calculates scaling for all applications that use it.\nAdd this to your .xprofile or .xinitrc:\nxrandr --dpi 192\n\nReplace 192 with your desired DPI value. This affects the system globally and will be used by Zed's automatic RandR detection when Xft.dpi is not set.",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "accounts.html"
    },
    {
      "text": "Linux",
      "href": "linux.html"
    },
    {
      "text": "Windows",
      "href": "windows.html"
    },
    {
      "text": "Telemetry",
      "href": "telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "snippets.html"
    },
    {
      "text": "Themes",
      "href": "themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "completions.html"
    },
    {
      "text": "Channels",
      "href": "channels.html"
    },
    {
      "text": "Collaboration",
      "href": "collaboration.html"
    },
    {
      "text": "Git",
      "href": "git.html"
    },
    {
      "text": "Debugger",
      "href": "debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "environment.html"
    },
    {
      "text": "REPL",
      "href": "repl.html"
    },
    {
      "text": "Overview",
      "href": "ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "ai/billing.html"
    },
    {
      "text": "Models",
      "href": "ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "extensions.html"
    },
    {
      "text": "Overview",
      "href": "extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "languages.html"
    },
    {
      "text": "All Languages",
      "href": "languages.html"
    },
    {
      "text": "Ansible",
      "href": "languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "languages/biome.html"
    },
    {
      "text": "C",
      "href": "languages/c.html"
    },
    {
      "text": "C++",
      "href": "languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "languages/css.html"
    },
    {
      "text": "Dart",
      "href": "languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "languages/html.html"
    },
    {
      "text": "Java",
      "href": "languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "languages/python.html"
    },
    {
      "text": "R",
      "href": "languages/r.html"
    },
    {
      "text": "Rego",
      "href": "languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "languages/vue.html"
    },
    {
      "text": "XML",
      "href": "languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "development.html"
    },
    {
      "text": "Developing Zed",
      "href": "development.html"
    },
    {
      "text": "macOS",
      "href": "development/macos.html"
    },
    {
      "text": "Linux",
      "href": "development/linux.html"
    },
    {
      "text": "Windows",
      "href": "development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:11:02"
}