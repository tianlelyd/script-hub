{
  "url": "https://zed.dev/docs/development.html",
  "title": "Developing Zed | Zed Code Editor Documentation",
  "content": "<main>\n\n<h1 id=\"developing-zed\"><a class=\"header\" href=\"#developing-zed\">Developing Zed</a></h1>\n<p>See the platform-specific instructions for building Zed from source:</p>\n<ul>\n<li><a href=\"./development/macos.html\">macOS</a></li>\n<li><a href=\"./development/linux.html\">Linux</a></li>\n<li><a href=\"./development/windows.html\">Windows</a></li>\n</ul>\n<p>If you'd like to develop collaboration features, additionally see:</p>\n<ul>\n<li><a href=\"./development/local-collaboration.html\">Local Collaboration</a></li>\n</ul>\n<h2 id=\"keychain-access\"><a class=\"header\" href=\"#keychain-access\">Keychain access</a></h2>\n<p>Zed stores secrets in the system keychain.</p>\n<p>However, when running a development build of Zed on macOS (and perhaps other\nplatforms) trying to access the keychain results in a lot of keychain prompts\nthat require entering your password over and over.</p>\n<p>On macOS this is caused by the development build not having a stable identity.\nEven if you choose the \"Always Allow\" option, the OS will still prompt you for\nyour password again the next time something changes in the binary.</p>\n<p>This quickly becomes annoying and impedes development speed.</p>\n<p>That is why, by default, when running a development build of Zed an alternative\ncredential provider is used in order to bypass the system keychain.</p>\n<blockquote>\n<p>Note: This is <strong>only</strong> the case for development builds. For all non-development\nrelease channels the system keychain is always used.</p>\n</blockquote>\n<p>If you need to test something out using the real system keychain in a\ndevelopment build, run Zed with the following environment variable set:</p>\n<pre><code>ZED_DEVELOPMENT_USE_KEYCHAIN=1\n</code></pre>\n<h2 id=\"performance-measurements\"><a class=\"header\" href=\"#performance-measurements\">Performance Measurements</a></h2>\n<p>Zed includes a frame time measurement system that can be used to profile how long it takes to render each frame. This is particularly useful when comparing rendering performance between different versions or when optimizing frame rendering code.</p>\n<h3 id=\"using-zed_measurements\"><a class=\"header\" href=\"#using-zed_measurements\">Using ZED_MEASUREMENTS</a></h3>\n<p>To enable performance measurements, set the <code>ZED_MEASUREMENTS</code> environment variable:</p>\n<pre><code class=\"language-sh\">export ZED_MEASUREMENTS=1\n</code></pre>\n<p>When enabled, Zed will print frame rendering timing information to stderr, showing how long each frame takes to render.</p>\n<h3 id=\"performance-comparison-workflow\"><a class=\"header\" href=\"#performance-comparison-workflow\">Performance Comparison Workflow</a></h3>\n<p>Here's a typical workflow for comparing frame rendering performance between different versions:</p>\n<ol>\n<li>\n<p><strong>Enable measurements:</strong></p>\n<pre><code class=\"language-sh\">export ZED_MEASUREMENTS=1\n</code></pre>\n</li>\n<li>\n<p><strong>Test the first version:</strong></p>\n<ul>\n<li>Checkout the commit you want to measure</li>\n<li>Run Zed in release mode and use it for 5-10 seconds: <code>cargo run --release &amp;&gt; version-a</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Test the second version:</strong></p>\n<ul>\n<li>Checkout another commit you want to compare</li>\n<li>Run Zed in release mode and use it for 5-10 seconds: <code>cargo run --release &amp;&gt; version-b</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Generate comparison:</strong></p>\n<pre><code class=\"language-sh\">script/histogram version-a version-b\n</code></pre>\n</li>\n</ol>\n<p>The <code>script/histogram</code> tool can accept as many measurement files as you like and will generate a histogram visualization comparing the frame rendering performance data between the provided versions.</p>\n<h2 id=\"contributor-links\"><a class=\"header\" href=\"#contributor-links\">Contributor links</a></h2>\n<ul>\n<li><a href=\"https://github.com/zed-industries/zed/blob/main/CONTRIBUTING.md\">CONTRIBUTING.md</a></li>\n<li><a href=\"./development/releases.html\">Releases</a></li>\n<li><a href=\"./development/debugging-crashes.html\">Debugging Crashes</a></li>\n<li><a href=\"https://zed.dev/code-of-conduct\">Code of Conduct</a></li>\n<li><a href=\"https://zed.dev/cla\">Zed Contributor License</a></li>\n</ul>\n\n</main>",
  "content_text": "Developing Zed\nSee the platform-specific instructions for building Zed from source:\n\nmacOS\nLinux\nWindows\n\nIf you'd like to develop collaboration features, additionally see:\n\nLocal Collaboration\n\nKeychain access\nZed stores secrets in the system keychain.\nHowever, when running a development build of Zed on macOS (and perhaps other\nplatforms) trying to access the keychain results in a lot of keychain prompts\nthat require entering your password over and over.\nOn macOS this is caused by the development build not having a stable identity.\nEven if you choose the \"Always Allow\" option, the OS will still prompt you for\nyour password again the next time something changes in the binary.\nThis quickly becomes annoying and impedes development speed.\nThat is why, by default, when running a development build of Zed an alternative\ncredential provider is used in order to bypass the system keychain.\n\nNote: This is only the case for development builds. For all non-development\nrelease channels the system keychain is always used.\n\nIf you need to test something out using the real system keychain in a\ndevelopment build, run Zed with the following environment variable set:\nZED_DEVELOPMENT_USE_KEYCHAIN=1\n\nPerformance Measurements\nZed includes a frame time measurement system that can be used to profile how long it takes to render each frame. This is particularly useful when comparing rendering performance between different versions or when optimizing frame rendering code.\nUsing ZED_MEASUREMENTS\nTo enable performance measurements, set the ZED_MEASUREMENTS environment variable:\nexport ZED_MEASUREMENTS=1\n\nWhen enabled, Zed will print frame rendering timing information to stderr, showing how long each frame takes to render.\nPerformance Comparison Workflow\nHere's a typical workflow for comparing frame rendering performance between different versions:\n\n\nEnable measurements:\nexport ZED_MEASUREMENTS=1\n\n\n\nTest the first version:\n\nCheckout the commit you want to measure\nRun Zed in release mode and use it for 5-10 seconds: cargo run --release &> version-a\n\n\n\nTest the second version:\n\nCheckout another commit you want to compare\nRun Zed in release mode and use it for 5-10 seconds: cargo run --release &> version-b\n\n\n\nGenerate comparison:\nscript/histogram version-a version-b\n\n\n\nThe script/histogram tool can accept as many measurement files as you like and will generate a histogram visualization comparing the frame rendering performance data between the provided versions.\nContributor links\n\nCONTRIBUTING.md\nReleases\nDebugging Crashes\nCode of Conduct\nZed Contributor License",
  "nav_structure": [
    {
      "text": "Getting Started",
      "href": "getting-started.html"
    },
    {
      "text": "Getting Started",
      "href": "getting-started.html"
    },
    {
      "text": "System Requirements",
      "href": "system-requirements.html"
    },
    {
      "text": "Accounts",
      "href": "accounts.html"
    },
    {
      "text": "Linux",
      "href": "linux.html"
    },
    {
      "text": "Windows",
      "href": "windows.html"
    },
    {
      "text": "Telemetry",
      "href": "telemetry.html"
    },
    {
      "text": "Workspace Persistence",
      "href": "workspace-persistence.html"
    },
    {
      "text": "Additional Learning Materials",
      "href": "additional-learning-materials.html"
    },
    {
      "text": "Configuring Zed",
      "href": "configuring-zed.html"
    },
    {
      "text": "Configuring Zed",
      "href": "configuring-zed.html"
    },
    {
      "text": "Configuring Languages",
      "href": "configuring-languages.html"
    },
    {
      "text": "Key bindings",
      "href": "key-bindings.html"
    },
    {
      "text": "All Actions",
      "href": "all-actions.html"
    },
    {
      "text": "Snippets",
      "href": "snippets.html"
    },
    {
      "text": "Themes",
      "href": "themes.html"
    },
    {
      "text": "Icon Themes",
      "href": "icon-themes.html"
    },
    {
      "text": "Visual Customization",
      "href": "visual-customization.html"
    },
    {
      "text": "Vim Mode",
      "href": "vim.html"
    },
    {
      "text": "Helix Mode",
      "href": "helix.html"
    },
    {
      "text": "Multibuffers",
      "href": "multibuffers.html"
    },
    {
      "text": "Multibuffers",
      "href": "multibuffers.html"
    },
    {
      "text": "Outline Panel",
      "href": "outline-panel.html"
    },
    {
      "text": "Code Completions",
      "href": "completions.html"
    },
    {
      "text": "Channels",
      "href": "channels.html"
    },
    {
      "text": "Collaboration",
      "href": "collaboration.html"
    },
    {
      "text": "Git",
      "href": "git.html"
    },
    {
      "text": "Debugger",
      "href": "debugger.html"
    },
    {
      "text": "Diagnostics",
      "href": "diagnostics.html"
    },
    {
      "text": "Tasks",
      "href": "tasks.html"
    },
    {
      "text": "Remote Development",
      "href": "remote-development.html"
    },
    {
      "text": "Environment Variables",
      "href": "environment.html"
    },
    {
      "text": "REPL",
      "href": "repl.html"
    },
    {
      "text": "Overview",
      "href": "ai/overview.html"
    },
    {
      "text": "Overview",
      "href": "ai/overview.html"
    },
    {
      "text": "Agent Panel",
      "href": "ai/agent-panel.html"
    },
    {
      "text": "Tools",
      "href": "ai/tools.html"
    },
    {
      "text": "External Agents",
      "href": "ai/external-agents.html"
    },
    {
      "text": "Inline Assistant",
      "href": "ai/inline-assistant.html"
    },
    {
      "text": "Edit Prediction",
      "href": "ai/edit-prediction.html"
    },
    {
      "text": "Text Threads",
      "href": "ai/text-threads.html"
    },
    {
      "text": "Rules",
      "href": "ai/rules.html"
    },
    {
      "text": "Model Context Protocol",
      "href": "ai/mcp.html"
    },
    {
      "text": "Configuration",
      "href": "ai/configuration.html"
    },
    {
      "text": "LLM Providers",
      "href": "ai/llm-providers.html"
    },
    {
      "text": "Agent Settings",
      "href": "ai/agent-settings.html"
    },
    {
      "text": "Subscription",
      "href": "ai/subscription.html"
    },
    {
      "text": "Plans and Usage",
      "href": "ai/plans-and-usage.html"
    },
    {
      "text": "Billing",
      "href": "ai/billing.html"
    },
    {
      "text": "Models",
      "href": "ai/models.html"
    },
    {
      "text": "Privacy and Security",
      "href": "ai/privacy-and-security.html"
    },
    {
      "text": "AI Improvement",
      "href": "ai/ai-improvement.html"
    },
    {
      "text": "Overview",
      "href": "extensions.html"
    },
    {
      "text": "Overview",
      "href": "extensions.html"
    },
    {
      "text": "Installing Extensions",
      "href": "extensions/installing-extensions.html"
    },
    {
      "text": "Developing Extensions",
      "href": "extensions/developing-extensions.html"
    },
    {
      "text": "Language Extensions",
      "href": "extensions/languages.html"
    },
    {
      "text": "Debugger Extensions",
      "href": "extensions/debugger-extensions.html"
    },
    {
      "text": "Theme Extensions",
      "href": "extensions/themes.html"
    },
    {
      "text": "Icon Theme Extensions",
      "href": "extensions/icon-themes.html"
    },
    {
      "text": "Slash Command Extensions",
      "href": "extensions/slash-commands.html"
    },
    {
      "text": "MCP Server Extensions",
      "href": "extensions/mcp-extensions.html"
    },
    {
      "text": "All Languages",
      "href": "languages.html"
    },
    {
      "text": "All Languages",
      "href": "languages.html"
    },
    {
      "text": "Ansible",
      "href": "languages/ansible.html"
    },
    {
      "text": "AsciiDoc",
      "href": "languages/asciidoc.html"
    },
    {
      "text": "Astro",
      "href": "languages/astro.html"
    },
    {
      "text": "Bash",
      "href": "languages/bash.html"
    },
    {
      "text": "Biome",
      "href": "languages/biome.html"
    },
    {
      "text": "C",
      "href": "languages/c.html"
    },
    {
      "text": "C++",
      "href": "languages/cpp.html"
    },
    {
      "text": "C#",
      "href": "languages/csharp.html"
    },
    {
      "text": "Clojure",
      "href": "languages/clojure.html"
    },
    {
      "text": "CSS",
      "href": "languages/css.html"
    },
    {
      "text": "Dart",
      "href": "languages/dart.html"
    },
    {
      "text": "Deno",
      "href": "languages/deno.html"
    },
    {
      "text": "Diff",
      "href": "languages/diff.html"
    },
    {
      "text": "Docker",
      "href": "languages/docker.html"
    },
    {
      "text": "Elixir",
      "href": "languages/elixir.html"
    },
    {
      "text": "Elm",
      "href": "languages/elm.html"
    },
    {
      "text": "Emmet",
      "href": "languages/emmet.html"
    },
    {
      "text": "Erlang",
      "href": "languages/erlang.html"
    },
    {
      "text": "Fish",
      "href": "languages/fish.html"
    },
    {
      "text": "GDScript",
      "href": "languages/gdscript.html"
    },
    {
      "text": "Gleam",
      "href": "languages/gleam.html"
    },
    {
      "text": "GLSL",
      "href": "languages/glsl.html"
    },
    {
      "text": "Go",
      "href": "languages/go.html"
    },
    {
      "text": "Groovy",
      "href": "languages/groovy.html"
    },
    {
      "text": "Haskell",
      "href": "languages/haskell.html"
    },
    {
      "text": "Helm",
      "href": "languages/helm.html"
    },
    {
      "text": "HTML",
      "href": "languages/html.html"
    },
    {
      "text": "Java",
      "href": "languages/java.html"
    },
    {
      "text": "JavaScript",
      "href": "languages/javascript.html"
    },
    {
      "text": "Julia",
      "href": "languages/julia.html"
    },
    {
      "text": "JSON",
      "href": "languages/json.html"
    },
    {
      "text": "Jsonnet",
      "href": "languages/jsonnet.html"
    },
    {
      "text": "Kotlin",
      "href": "languages/kotlin.html"
    },
    {
      "text": "Lua",
      "href": "languages/lua.html"
    },
    {
      "text": "Luau",
      "href": "languages/luau.html"
    },
    {
      "text": "Makefile",
      "href": "languages/makefile.html"
    },
    {
      "text": "Markdown",
      "href": "languages/markdown.html"
    },
    {
      "text": "Nim",
      "href": "languages/nim.html"
    },
    {
      "text": "OCaml",
      "href": "languages/ocaml.html"
    },
    {
      "text": "PHP",
      "href": "languages/php.html"
    },
    {
      "text": "PowerShell",
      "href": "languages/powershell.html"
    },
    {
      "text": "Prisma",
      "href": "languages/prisma.html"
    },
    {
      "text": "Proto",
      "href": "languages/proto.html"
    },
    {
      "text": "PureScript",
      "href": "languages/purescript.html"
    },
    {
      "text": "Python",
      "href": "languages/python.html"
    },
    {
      "text": "R",
      "href": "languages/r.html"
    },
    {
      "text": "Rego",
      "href": "languages/rego.html"
    },
    {
      "text": "ReStructuredText",
      "href": "languages/rst.html"
    },
    {
      "text": "Racket",
      "href": "languages/racket.html"
    },
    {
      "text": "Roc",
      "href": "languages/roc.html"
    },
    {
      "text": "Ruby",
      "href": "languages/ruby.html"
    },
    {
      "text": "Rust",
      "href": "languages/rust.html"
    },
    {
      "text": "Scala",
      "href": "languages/scala.html"
    },
    {
      "text": "Scheme",
      "href": "languages/scheme.html"
    },
    {
      "text": "Shell Script",
      "href": "languages/sh.html"
    },
    {
      "text": "SQL",
      "href": "languages/sql.html"
    },
    {
      "text": "Svelte",
      "href": "languages/svelte.html"
    },
    {
      "text": "Swift",
      "href": "languages/swift.html"
    },
    {
      "text": "Tailwind CSS",
      "href": "languages/tailwindcss.html"
    },
    {
      "text": "Terraform",
      "href": "languages/terraform.html"
    },
    {
      "text": "TOML",
      "href": "languages/toml.html"
    },
    {
      "text": "TypeScript",
      "href": "languages/typescript.html"
    },
    {
      "text": "Uiua",
      "href": "languages/uiua.html"
    },
    {
      "text": "Vue",
      "href": "languages/vue.html"
    },
    {
      "text": "XML",
      "href": "languages/xml.html"
    },
    {
      "text": "YAML",
      "href": "languages/yaml.html"
    },
    {
      "text": "Yara",
      "href": "languages/yara.html"
    },
    {
      "text": "Yarn",
      "href": "languages/yarn.html"
    },
    {
      "text": "Zig",
      "href": "languages/zig.html"
    },
    {
      "text": "Developing Zed",
      "href": "development.html"
    },
    {
      "text": "Developing Zed",
      "href": "development.html"
    },
    {
      "text": "macOS",
      "href": "development/macos.html"
    },
    {
      "text": "Linux",
      "href": "development/linux.html"
    },
    {
      "text": "Windows",
      "href": "development/windows.html"
    },
    {
      "text": "FreeBSD",
      "href": "development/freebsd.html"
    },
    {
      "text": "Local Collaboration",
      "href": "development/local-collaboration.html"
    },
    {
      "text": "Using Debuggers",
      "href": "development/debuggers.html"
    },
    {
      "text": "Glossary",
      "href": "development/glossary.html"
    },
    {
      "text": "Release Process",
      "href": "development/releases.html"
    },
    {
      "text": "Debugging Crashes",
      "href": "development/debugging-crashes.html"
    }
  ],
  "page_toc": [],
  "scraped_at": "2025-09-06 14:15:38"
}