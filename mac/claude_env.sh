claude-switch() {
    local config_file="$HOME/.claude_config"
    if [[ ! -f "$config_file" ]]; then
        cat > "$config_file" << 'EOF'
[
  {
    "name": "wenwen-ai",
    "WEBURL": "https://code.wenwen-ai.com",
    "ANTHROPIC_BASE_URL": "https://code.wenwen-ai.com",
    "ANTHROPIC_AUTH_TOKEN": "sk-hsg5hOghxxxxxxxHEk1rKHRxx"
  },
  {
    "name": "zone",
    "WEBURL": "https://zone.veloera.org",
    "ANTHROPIC_BASE_URL": "https://zone.veloera.org/pg",
    "ANTHROPIC_AUTH_TOKEN": "sk-xxxxxxxxxxxx"
  }
]
EOF
    fi

    # Check if jq is installed
    if ! command -v jq >/dev/null 2>&1; then
        echo "jq tool is required for parsing configuration"
        return 1
    fi

    # Display current environment variable settings
    if [[ -n "$ANTHROPIC_BASE_URL" ]] && [[ -n "$ANTHROPIC_AUTH_TOKEN" ]]; then
        local display_token="$ANTHROPIC_AUTH_TOKEN"
        local token_prefix=${display_token:0:8}
        local token_suffix=${display_token: -4}
        local token_length=${#display_token}
        local mask_length=$((token_length-12))
        if [[ $mask_length -gt 0 ]]; then
            local token_mask=$(printf '%*s' "$mask_length" | tr ' ' '*')
            local masked_token="${token_prefix}${token_mask}${token_suffix}"
        else
            local masked_token="$display_token"
        fi
        # Find the name corresponding to current configuration
        local current_name=$(jq -r --arg url "$ANTHROPIC_BASE_URL" --arg token "$ANTHROPIC_AUTH_TOKEN" '.[] | select(.ANTHROPIC_BASE_URL == $url and .ANTHROPIC_AUTH_TOKEN == $token) | .name' "$config_file")
        if [[ -n "$current_name" ]]; then
            echo "Current configuration: $current_name"
        else
            echo "Current configuration: Custom"
        fi
        echo "  ANTHROPIC_BASE_URL: $ANTHROPIC_BASE_URL"
        echo "  ANTHROPIC_AUTH_TOKEN: $masked_token"
        

    else
        echo "  None"
    fi
    echo ""

    # Get configuration name list
    local config_names=($(jq -r '.[].name' "$config_file"))
    
    # If there are no configuration items
    if [[ ${#config_names[@]} -eq 0 ]]; then
        echo "No available configurations in config file"
        return 1
    fi

    local selected_name=""
    
    # If argument is provided, use it directly, otherwise show menu selection
    if [[ $# -gt 0 ]]; then
        selected_name="$1"
    else
        # Show interactive menu
        echo "Please select configuration:"
        select config_name in "${config_names[@]}" "Exit"; do
            case $config_name in
                "Exit")
                    return 0
                    ;;
                "")
                    echo "Invalid selection, please try again"
                    ;;
                *)
                    selected_name="$config_name"
                    break
                    ;;
            esac
        done
    fi

    # Use jq to find the matching configuration entry
    local config_entry=""
    config_entry=$(jq -r --arg name "$selected_name" '.[] | select(.name == $name)' "$config_file")

    if [[ -z "$config_entry" ]]; then
        echo "Unknown configuration name: $selected_name"
        return 1
    fi

    # Extract environment variables
    local new_token=$(echo "$config_entry" | jq -r '.ANTHROPIC_AUTH_TOKEN')
    local new_url=$(echo "$config_entry" | jq -r '.ANTHROPIC_BASE_URL')

    # Export environment variables for current session
    export ANTHROPIC_AUTH_TOKEN="$new_token"
    export ANTHROPIC_BASE_URL="$new_url"

    # Save environment variables to shell configuration file
    local shell_config=""
    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_config="$HOME/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        shell_config="$HOME/.bashrc"
    else
        shell_config="$HOME/.profile"
    fi

    # Remove old ANTHROPIC related environment variables
    if [[ -f "$shell_config" ]]; then
        # Create temporary file, excluding existing ANTHROPIC environment variables
        grep -v "^export ANTHROPIC_" "$shell_config" > "${shell_config}.tmp" || true
        mv "${shell_config}.tmp" "$shell_config"
    fi

    # Add new environment variables to shell configuration file
    echo "" >> "$shell_config"
    echo "# Claude API configuration (auto-generated by claude-switch)" >> "$shell_config"
    echo "export ANTHROPIC_AUTH_TOKEN=\"$new_token\"" >> "$shell_config"
    echo "export ANTHROPIC_BASE_URL=\"$new_url\"" >> "$shell_config"

    # Display setting results
    local token_prefix=${new_token:0:8}
    local token_suffix=${new_token: -4}
    local token_length=${#new_token}
    local mask_length=$((token_length-12))
    if [[ $mask_length -gt 0 ]]; then
        local token_mask=$(printf '%*s' "$mask_length" | tr ' ' '*')
        local masked_token="${token_prefix}${token_mask}${token_suffix}"
    else
        local masked_token="$new_token"
    fi
    
    echo "âœ… Configuration switched and permanently saved to $shell_config"
    echo "ANTHROPIC_BASE_URL: $new_url"
    echo "ANTHROPIC_AUTH_TOKEN: $masked_token"
    echo ""
    echo "ðŸ’¡ Tip: Environment variables have been saved to shell config file, will take effect after reopening terminal"
}

alias cs='claude-switch'
alias css='claude-switch-status() {
    local config_file="$HOME/.claude_config"
    if [[ -n "$ANTHROPIC_BASE_URL" ]] && [[ -n "$ANTHROPIC_AUTH_TOKEN" ]]; then
        local display_token="$ANTHROPIC_AUTH_TOKEN"
        local token_prefix=${display_token:0:8}
        local token_suffix=${display_token: -4}
        local token_length=${#display_token}
        local mask_length=$((token_length-12))
        if [[ $mask_length -gt 0 ]]; then
            local token_mask=$(printf "%*s" "$mask_length" | tr " " "*")
            local masked_token="${token_prefix}${token_mask}${token_suffix}"
        else
            local masked_token="$display_token"
        fi
        if [[ -f "$config_file" ]] && command -v jq >/dev/null 2>&1; then
            local current_name=$(jq -r --arg url "$ANTHROPIC_BASE_URL" --arg token "$ANTHROPIC_AUTH_TOKEN" ".[] | select(.ANTHROPIC_BASE_URL == \$url and .ANTHROPIC_AUTH_TOKEN == \$token) | .name" "$config_file")
            if [[ -n "$current_name" ]]; then
                echo "Current configuration: $current_name"
            else
                echo "Current configuration: Custom"
            fi
        else
            echo "Current configuration: Custom"
        fi
        echo "  ANTHROPIC_BASE_URL: $ANTHROPIC_BASE_URL"
        echo "  ANTHROPIC_AUTH_TOKEN: $masked_token"
    else
        echo "  None"
    fi
}; claude-switch-status'